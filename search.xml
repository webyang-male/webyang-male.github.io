<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>谭浩强第五版课后习题-6</title>
      <link href="posts/741740b/"/>
      <url>posts/741740b/</url>
      
        <content type="html"><![CDATA[<h4 id="输入3个整数，要求按由小到大的顺序输出"><a href="#输入3个整数，要求按由小到大的顺序输出" class="headerlink" title="输入3个整数，要求按由小到大的顺序输出"></a>输入3个整数，要求按由小到大的顺序输出</h4><p>先获取到三个变量的地址，然后获取三个数据，通过指针进行比较转换即可</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p_a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>p_b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>p_a<span class="token punctuation">;</span><span class="token operator">*</span>p_a <span class="token operator">=</span> <span class="token operator">*</span>p_b<span class="token punctuation">;</span><span class="token operator">*</span>p_b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">*</span>p_a <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>p_b <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>p_c <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span> <span class="token comment">// 获取每个变量空间的地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter three numbers:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> p_a<span class="token punctuation">,</span> p_b<span class="token punctuation">,</span> p_c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p_a <span class="token operator">></span> <span class="token operator">*</span>p_b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>p_a<span class="token punctuation">,</span> p_b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过指针进行指向空间内的数据交换</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p_a <span class="token operator">></span> <span class="token operator">*</span>p_c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>p_a<span class="token punctuation">,</span> p_c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p_b <span class="token operator">></span> <span class="token operator">*</span>p_c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span>p_b<span class="token punctuation">,</span> p_c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p_a<span class="token punctuation">,</span> <span class="token operator">*</span>p_b<span class="token punctuation">,</span> <span class="token operator">*</span>p_c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="输入3个字符串，要求按由小到大的顺序输出"><a href="#输入3个字符串，要求按由小到大的顺序输出" class="headerlink" title="输入3个字符串，要求按由小到大的顺序输出"></a>输入3个字符串，要求按由小到大的顺序输出</h4><p>字符串的比较可以使用strcmp函数，返回值&gt;0表示大于，返回值小于0表示小于，返回值等于0表示相同。其他的比较排序思路与数字的排序交换没有区别，逐个进行比较先找出最大的，然后找出第二大的。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter three strings:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后边的数字限制缓冲区边界，防止缓冲区溢出访问越界</span><span class="token punctuation">&#125;</span><span class="token comment">//让p[0]和p[1]/p[2]分别进行比较，找出最大的字符串，i+1之后，则让p[1]和p[2]进行比较，找出第二大</span><span class="token comment">//i循环总个数-1次,最后一个是不需要比较的</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s %s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="输入10个整数-将其中最小的数与第一个数对换-把最大的数与最后一个数对换"><a href="#输入10个整数-将其中最小的数与第一个数对换-把最大的数与最后一个数对换" class="headerlink" title="输入10个整数,将其中最小的数与第一个数对换, 把最大的数与最后一个数对换"></a>输入10个整数,将其中最小的数与第一个数对换, 把最大的数与最后一个数对换</h4><p>写3个函数:①输人10个数;②进行处理;③输出10个数。</p><p>在进行数值逐个比较的同时找到最小值的空间地址以及最大值的空间地址，使用这两个空间中的数据最终与第一和最后数据进行对换即可。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arry<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arry<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arry<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> max_num <span class="token operator">=</span> arry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min_num <span class="token operator">=</span> arry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p_max <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>p_min <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>min_num <span class="token operator">></span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//逐个比对后找出最小值</span>min_num <span class="token operator">=</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>p_min <span class="token operator">=</span> <span class="token operator">&amp;</span>arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//逐个比对后找到最小值的空间地址</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>max_num <span class="token operator">&lt;</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//逐个比对后找出最大值</span>max_num <span class="token operator">=</span> arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>p_max <span class="token operator">=</span> <span class="token operator">&amp;</span>arry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//逐个比对后找到最大值的空间地址</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> tmp<span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token operator">*</span>p_min<span class="token punctuation">;</span> <span class="token operator">*</span>p_min <span class="token operator">=</span> arry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> arry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span> <span class="token comment">//最小值与第一个数据交换</span>tmp <span class="token operator">=</span> <span class="token operator">*</span>p_max<span class="token punctuation">;</span> <span class="token operator">*</span>p_max <span class="token operator">=</span> arry<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> arry<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token comment">//最大值与最后一个数据交换</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arry<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter ten nums:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">input</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">handle</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t4"><a href="#t4" class="headerlink" title="t4"></a>t4</h4><p>有n个整数,使前面各数顺序向后移m个位置,最后m个数变成最前面m个数,见图8.43。 写一函数实现以上功能,在主函数中输人n个整数和输出调整后的n个数。</p><p>找出倒数第m个数据，从这里开始保存倒数第m位置的数据，因为倒数第m位置的数据要放到数组最前方，将m之前的数据向后偏移一位，然后将数组第一个位置的数据替换为保存的m位的数据，逐个往后递增即可。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arry<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> end_idx <span class="token operator">=</span> n <span class="token operator">-</span> m<span class="token punctuation">;</span><span class="token comment">//找到倒数第m个数据的位置，也就是要移动到数组首部的数据的起始位置</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arry <span class="token operator">+</span> end_idx <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token comment">//从倒数第m个数据的位置开始逐渐向后偏移直到数组尾部</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//获取到这个位置的值，用于数组前边数据向后偏移1位之后，向数组第i位赋值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> end_idx <span class="token operator">+</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//从第i位开始逐个向后偏移一位</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span><span class="token punctuation">(</span>arry <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token comment">//数组的前第i个数字逐个替换为后边被覆盖的值</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> number<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the number of numbers: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先确定要输入多少个数字</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter %d numbers: "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入指定个数的数字</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Number of positions to move: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//确定要向后移动多少个位置</span><span class="token function">move</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t5"><a href="#t5" class="headerlink" title="t5"></a>t5</h4><p>有n个人围成一圈，顺序排号。从第1个人开始报数(从1到3报数),凡报到3的人退出圈子,问最后留下的是原来第几号的那位</p><p>从第一个人开始，逐个报数，谁报3就退出，并且重置报数，直到最后一个人后，又重新从第一个人继续报数，直到最终只剩一个人的时候退出即可。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> people<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input how many people: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//对每个人顺序排号</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> remain <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token comment">//初始留存人数</span><span class="token keyword">int</span> num_off <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//当前报数</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">//人数大于一就继续游戏</span><span class="token keyword">while</span> <span class="token punctuation">(</span>remain <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p <span class="token operator">=</span> people<span class="token punctuation">;</span>    <span class="token comment">//这里people为首元素地址</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> people <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 每次从第一个位置开始，直到最后一个位置,报数是一直递增的</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//若这个位置人还在</span>num_off<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//则报数</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num_off <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//否则当前的人即将要报的数字是3</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//则剔除这个人</span>num_off <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//并且重新开始计数，下边会++，所以是从1开始报数</span>remain<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//剩余人数-1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最后留下的人编号:%d\n"</span><span class="token punctuation">,</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t6-求一个字符串的长度"><a href="#t6-求一个字符串的长度" class="headerlink" title="t6 求一个字符串的长度"></a>t6 求一个字符串的长度</h4><p>写一函数,求一个字符串的长度。在main函数中输入字符串,并输出其长度。<br>      字符串以\0作为结尾，则从第一个字符开始向后移动遇到\0认为字符串结束。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">mystrlen</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> str<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptr <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ptr<span class="token operator">++</span><span class="token punctuation">;</span>len<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter a string: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"string len:%d\n"</span><span class="token punctuation">,</span> <span class="token function">mystrlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t7"><a href="#t7" class="headerlink" title="t7"></a>t7</h4><p>有一字符串,包含n个字符。写一函数,将此字符串中从第m个字符开始的全部字符复制成为另一个字符串。<br>       当字符串指针移动到源字符串的第m位时，则开始向另一个缓冲区中写入剩下的数据</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> buf1<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf2<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter a string: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> buf1<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter a location to start copying: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> m <span class="token operator">></span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//检测输入的位置是否合法</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Illegal location entered\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span>ptr1 <span class="token operator">=</span> buf1 <span class="token operator">+</span> m<span class="token punctuation">;</span> <span class="token comment">// 从第m个位置开始复制新数据</span><span class="token keyword">char</span> <span class="token operator">*</span>ptr2 <span class="token operator">=</span> buf2<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptr1 <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>ptr2<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>ptr1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>ptr2 <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token comment">//不要忘了字符串结尾标志</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> buf2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> C试题 </tag>
            
            <tag> 专升本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谭浩强第五版课后习题-5</title>
      <link href="posts/9e4825b1/"/>
      <url>posts/9e4825b1/</url>
      
        <content type="html"><![CDATA[<h4 id="t1-求两个整数的最大公约数和最小公倍数"><a href="#t1-求两个整数的最大公约数和最小公倍数" class="headerlink" title="t1 求两个整数的最大公约数和最小公倍数"></a>t1 求两个整数的最大公约数和最小公倍数</h4><p>写两个函数,分别求两个整数的最大公约数和最小公倍数,用主函数调用这两个函数,并输出结果。</p><p>该题直接使用“辗转相除法”来求解最大公约数和最小公倍数最大公约数找出两数中的最小值，然后直接相模，当能够同时被两数整除时，则为最大公约数。</p><p>最小公倍数找出两数中的最大值，然后直接进入死循环，直到找到一个数能够同时被两数整除时，则为最小公倍数<br>     <font style="color:#3eaf7c;">【注】此题还有一些比较高级的解法，比如求最大公约数的相减法、欧几里德辗转相除法等</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//最大公约数</span><span class="token class-name">size_t</span> <span class="token function">GCD</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> a<span class="token punctuation">,</span> <span class="token class-name">size_t</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">size_t</span> gcd<span class="token punctuation">;</span>gcd <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">?</span> b <span class="token operator">:</span> a<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>gcd <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">%</span> gcd <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> gcd <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> gcd<span class="token punctuation">;</span>gcd<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> gcd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//最小公倍数</span><span class="token class-name">size_t</span> <span class="token function">LCM</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> a<span class="token punctuation">,</span> <span class="token class-name">size_t</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">size_t</span> lcm<span class="token punctuation">;</span>lcm <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lcm <span class="token operator">%</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>lcm <span class="token operator">%</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>lcm<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> lcm<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">size_t</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> result<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入两个整数:>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token function">GCD</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d和%d的最大公约数为:%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token function">LCM</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d和%d的最小公倍数为:%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t2-解方程"><a href="#t2-解方程" class="headerlink" title="t2 解方程"></a>t2 解方程</h4><p>求方程 ${ax}^2+bx+c=0$的根,用3个函数分别求当: $b^2-<br>4ac$大于0、等于0和小于0时的根并输出结果。从主函数输入a,b,c的值。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//x1为第一个根，x2为第二个根</span><span class="token keyword">float</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> disc<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">greater_than_zero</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> m <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>disc<span class="token punctuation">)</span><span class="token punctuation">;</span>x1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>disc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">-</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>disc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">equal_to_zero</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x1 <span class="token operator">=</span> x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">smaller_than_zero</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p <span class="token operator">=</span> <span class="token operator">-</span>b <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>q <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span>disc<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入 a b c:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"表达式为: %d*x^2+%d*x+%d = 0\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>disc <span class="token operator">=</span> b<span class="token operator">*</span>b <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">*</span> a<span class="token operator">*</span>c<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>disc <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">greater_than_zero</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"disc>0的根为: x1=%f x2=%f\n"</span><span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>disc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">equal_to_zero</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"disc==0的根为:x1=%f x2=%f\n"</span><span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">smaller_than_zero</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"disc&lt;0的根为:x1=%f+%f x2=%f-%f\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t3-判断素数"><a href="#t3-判断素数" class="headerlink" title="t3 判断素数"></a>t3 判断素数</h4><p> 写一个判素数的函数,在主函数输人一个整数,输出是否为素数的信息。</p><p> 素数是一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做素数<br>        该题可以使用概念直接判断法求解，不过不需要判断所有的数据，只需要判断数据的一半即可，因为偶数不可能为素数（除了2）,所以只需判断该数的一半即可的到答案</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span>bool <span class="token function">IsPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>value <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//说明除了1和本身之外，还能被其他数整除</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> value<span class="token punctuation">;</span>bool flag<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入 value :>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>flag <span class="token operator">=</span> <span class="token function">IsPrime</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 是素数.\n"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 不是素数.\n"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t4-使给定的一个3X3的二维整型数组转置-即行列互换"><a href="#t4-使给定的一个3X3的二维整型数组转置-即行列互换" class="headerlink" title="t4 使给定的一个3X3的二维整型数组转置,即行列互换"></a>t4 使给定的一个3X3的二维整型数组转置,即行列互换</h4><p>进行数组的行列互换，其关键在于数组互换的表达式 ar[i] [j] = ar[j] [i];其次在循环的时候，内层循环不能到达最大列，需要根据此时是第几行的交换来决定循环的次数，否则有可能数组行列交换之后最后又交换回原来的形状了。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">PrintArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> ar<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> ar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">ReverseArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> ar<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token comment">//中间数不发生变化</span><span class="token punctuation">&#123;</span><span class="token comment">//交换两个数</span>tmp <span class="token operator">=</span> ar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>ar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ar<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>ar<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"转置前：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进行数组转置</span><span class="token function">ReverseArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"转置后：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PrintArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t5-字符串按反序存放"><a href="#t5-字符串按反序存放" class="headerlink" title="t5 字符串按反序存放"></a>t5 字符串按反序存放</h4><p>写一个函数,使输人的一个字符串按反序存放,在主函数中输入和输出字符串。</p><p>要把一个字符串反序存放，其实就是对字符串做一个逆序操作，操作过程为收尾字符交换，直到把所有字符全部交换完毕。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">ReverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span><span class="token keyword">char</span> tmp<span class="token punctuation">;</span>start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>end <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//字符数组小标从0开始，所以-1</span><span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> str<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>str<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>str<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>start<span class="token operator">++</span><span class="token punctuation">;</span>end<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入字符串:>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原始字符串为:> %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ReverseString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"反序字符串为:> %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t6-字符串拼接"><a href="#t6-字符串拼接" class="headerlink" title="t6 字符串拼接"></a>t6 字符串拼接</h4><p>利用一个临时数组，空间要保证能够容纳两个字符串，先把第一个字符串进行拷贝到临时数组，第二个字符串在临时数组的尾部接着链接，最后记得加上字符串的结束标记<code>\0</code>即可</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">ConcatStr</span><span class="token punctuation">(</span><span class="token keyword">char</span> string1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> string2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> string1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> string1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//找到字符串末尾，继续往后面链接字符串</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> string2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>string<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> string2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//字符串末尾加上结束符 \0</span>string<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input string1:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input string2:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ConcatStr</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nThe new string is %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t7-将一个字符串中的元音字母复制到另一字符串-然后输出"><a href="#t7-将一个字符串中的元音字母复制到另一字符串-然后输出" class="headerlink" title="t7  将一个字符串中的元音字母复制到另一字符串,然后输出"></a>t7  将一个字符串中的元音字母复制到另一字符串,然后输出</h4><p>该题的重点在于元音字母的判断，通过或条件，凡是元音字母都进行拷贝</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">cpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断元音字母</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'A'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'e'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E'</span> <span class="token operator">||</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'i'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'I'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'o'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span> <span class="token operator">||</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'u'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'U'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input string:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">cpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将str中的元音字母拷贝到c中</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The vowel letters are:%s\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t8-将输入数字空格"><a href="#t8-将输入数字空格" class="headerlink" title="t8 将输入数字空格"></a>t8 将输入数字空格</h4><p>写一个函数,输人一个4位数字，要求输出这4个数字字符,但每两个数字间空一个空格。如输人1990,应输出“1 9 9 0”。</p><p>对字符串进行遍历输出，没输出一个字符，后面就跟着输出一个空格，关键点在于如果输出的是最后一个字符，则不能在输出字符，所以要对是否是最后一个字符的输出进行判断。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">OutString</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token comment">//清除最后一个空格不输出</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input four digits:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">OutString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t9-自定义函数统计输入文本各个类型数量"><a href="#t9-自定义函数统计输入文本各个类型数量" class="headerlink" title="t9 自定义函数统计输入文本各个类型数量"></a>t9 自定义函数统计输入文本各个类型数量</h4><p>编写一个函数,由实参传来一个字符串,统计此字符串中字母、数字、空格和其他字符的个数,在主函数中输人字符串以及输出上述的结果。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> letter<span class="token punctuation">,</span> digit<span class="token punctuation">,</span> space<span class="token punctuation">,</span> others<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CountChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//统计字母</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'a'</span><span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>letter<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token comment">//统计数字</span>digit<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token comment">//统计空格</span>space<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span>others<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//统计其他字符</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input string:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"string: %s\n"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CountChar</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nletter:%d\ndigit:%d\nspace:%d\nothers:%d\n"</span><span class="token punctuation">,</span> letter<span class="token punctuation">,</span> digit<span class="token punctuation">,</span> space<span class="token punctuation">,</span>others<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t10-输出最长的单词"><a href="#t10-输出最长的单词" class="headerlink" title="t10 输出最长的单词"></a>t10 输出最长的单词</h4><p>写一个函数,输人一行字符,将此字符串中最长的单词输出。</p><p>​        单词以空格进行分隔，因此寻找空格出现的位置即为关键，每次从单词的起始到空格出现的位置即为一个单词，此时计算单词的长度，如果比当前最大的还长，就进行更新最长单词信息，当整个字符串遍历完成，word即保存最长字符串。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">findLongWord</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> word<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//统计长度</span><span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>j<span class="token operator">++</span><span class="token punctuation">;</span>len <span class="token operator">=</span> j <span class="token operator">-</span> i<span class="token punctuation">;</span><span class="token comment">//单词长度</span><span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token function">strlen</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> str <span class="token operator">+</span> i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝临时最长单词</span><span class="token punctuation">&#125;</span>j<span class="token operator">++</span><span class="token punctuation">;</span>i <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//printf("input one line:\n");</span><span class="token comment">//gets(line);</span><span class="token keyword">char</span> line<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"The best thing is studying with you."</span><span class="token punctuation">;</span><span class="token keyword">char</span> word<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">findLongWord</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最长的单词为:%s\n"</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t11-用“起泡法”对输人的10个字符按由小到大顺序排列"><a href="#t11-用“起泡法”对输人的10个字符按由小到大顺序排列" class="headerlink" title="t11 用“起泡法”对输人的10个字符按由小到大顺序排列"></a>t11 用“起泡法”对输人的10个字符按由小到大顺序排列</h4><p>​        该题主要是对冒泡排序的理解，外层循环控制排序的趟数，内层循环主要是进行每一趟排序的比较，如果前面的字符大于后面的字符，就进行交换，每做一趟排序，就把一个最大字符排在最后，以及每做一趟排序就需要少比较一个字符。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">char</span> tmp<span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>str<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入10个字符:>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">BubbleSort</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序后结果: %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t12-用牛顿迭代法求根"><a href="#t12-用牛顿迭代法求根" class="headerlink" title="t12 用牛顿迭代法求根"></a>t12 用牛顿迭代法求根</h4><p>方程为$ax^3+bx^2 +cx+d=0$,系数a,b,c,d的值依次为1,2,3,4,由主函数输人。求x在1附近的一个实根。求出根后由主函数输出。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">float</span> <span class="token function">solut</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> x0<span class="token punctuation">,</span> f<span class="token punctuation">,</span> f1<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>x0 <span class="token operator">=</span> x<span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">*</span>x0 <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token operator">*</span>x0 <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token operator">*</span>x0 <span class="token operator">+</span> d<span class="token punctuation">;</span>f1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> a<span class="token operator">*</span>x0 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token operator">*</span>x0 <span class="token operator">+</span> c<span class="token punctuation">;</span>x <span class="token operator">=</span> x0 <span class="token operator">-</span> f <span class="token operator">/</span> f1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> x0<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1e-3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input a,b,c,d:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x=%10.7f\n"</span><span class="token punctuation">,</span> <span class="token function">solut</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t13"><a href="#t13" class="headerlink" title="t13"></a>t13</h4><p>输人10个学生5门课的成绩,分别用函数实现下列功能:</p><ul><li><pre><code>    ①计算每个学生的平均分;</code></pre></li><li><p>​        ②计算每门课的平均分;</p></li><li><p>​        ③找出所有50个分数中最高的分数所对应的学生和课程;</p></li><li><p>​        ④计算平均分方差</p><p>其中x为某一学生的平均分。</p><p>​            此题的关键是如何存储某个学生对应某门课程的分数，这里利用了一个二维数组score，其中<code>score[i] [j]</code>就代表了第i个学生的第j门课程的分数</p></li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token keyword">float</span> score<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">float</span> a_stu<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> a_cour<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token comment">//输入学生成绩信息函数</span><span class="token keyword">void</span> <span class="token function">input_stu</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入对应学生5门课程成绩:%2d:\n"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//每个学生平均分</span><span class="token keyword">void</span> <span class="token function">aver_stu</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">float</span> s<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>s <span class="token operator">+=</span> score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>a_stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s <span class="token operator">/</span> <span class="token number">5.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//每门课程平均分</span><span class="token keyword">void</span> <span class="token function">aver_cour</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">float</span> s<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>s <span class="token operator">+=</span> score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>a_cour<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>N<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//最高分函数</span><span class="token keyword">float</span> <span class="token function">highest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> high<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>high <span class="token operator">=</span> score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>high <span class="token operator">=</span> score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>r <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>c <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">(</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//方差函数</span><span class="token keyword">float</span> <span class="token function">s_var</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">float</span> sumx<span class="token punctuation">,</span> sumxn<span class="token punctuation">;</span>sumx <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>sumxn <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sumx <span class="token operator">+=</span> a_stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> a_stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>sumxn <span class="token operator">+=</span> a_stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">(</span>sumx <span class="token operator">/</span> N <span class="token operator">-</span> <span class="token punctuation">(</span>sumxn <span class="token operator">/</span> N<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>sumxn <span class="token operator">/</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">float</span> h<span class="token punctuation">;</span><span class="token function">input_stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">aver_stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">aver_cour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n NO. cour1 cour2 cour3 cour4 cour5 aver:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n NO %2d "</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%8.2f"</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%8.2f\n"</span><span class="token punctuation">,</span> a_stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\naverage:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%8.2f"</span><span class="token punctuation">,</span> a_cour<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  h <span class="token operator">=</span> <span class="token function">highest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"highest:%7.2f NO. %2d course %2d\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"variance %8.2f\n"</span><span class="token punctuation">,</span> <span class="token function">s_var</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t14"><a href="#t14" class="headerlink" title="t14"></a>t14</h4><p>写几个函数:</p><ul><li>​    ①输人10个职工的姓名和职工号;</li><li>​    ②按职工号由小到大顺序排序,姓名顺序也随之调整;</li><li>​    ③要求输人一个职工号,用折半查找法找出该职工的姓名,从主函数输人要查找的职工号,输出该职工姓名。</li></ul><p>利用二分查找的关键在于数据一定要先有序，所以在查找前我们需要对数据进行排序。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> name<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input NO.: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input name: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> name<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> min<span class="token punctuation">,</span> templ<span class="token punctuation">;</span><span class="token keyword">char</span> temp2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>min <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token operator">></span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> min <span class="token operator">=</span> j<span class="token punctuation">;</span>templ <span class="token operator">=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>temp2<span class="token punctuation">,</span> name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> templ<span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">,</span> temp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n result:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n %5d%10s"</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> name<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> top<span class="token punctuation">,</span> bott<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> loca<span class="token punctuation">,</span> sign<span class="token punctuation">;</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>bott <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>loca <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n<span class="token operator">></span>num<span class="token punctuation">[</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>loca <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>top <span class="token operator">&lt;=</span> bott<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>bott <span class="token operator">+</span> top<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> num<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>loca <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO. %d , his name is %s.\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> name<span class="token punctuation">[</span>loca<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> num<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>bott <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span>top <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> loca <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d not been found.\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> number<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">input</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\ninput number to look for:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">search</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> num<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"continue ot not(Y/N)?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'N'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'n'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t15-自定义十六进制数转十进制数函数"><a href="#t15-自定义十六进制数转十进制数函数" class="headerlink" title="t15 自定义十六进制数转十进制数函数"></a>t15 自定义十六进制数转十进制数函数</h4><p>转换的过程需要乘的基数为16，其次注意十六进制中的a~f的字母转换，并且无论大小写都要能够转换。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token class-name">size_t</span> <span class="token function">HextoDec</span><span class="token punctuation">(</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">size_t</span> i<span class="token punctuation">,</span> n<span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span><span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span>n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'f'</span><span class="token punctuation">)</span>n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'F'</span><span class="token punctuation">)</span>n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">size_t</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> hex<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input a HEX number:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> hex<span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token function">HextoDec</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%s = %u\n"</span><span class="token punctuation">,</span> hex<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t16-数字转字符串"><a href="#t16-数字转字符串" class="headerlink" title="t16 数字转字符串"></a>t16 数字转字符串</h4><p>用递归法将一个整数n转换成字符串。例如，输人483,应输出字符串”483”。n的位数不确定,可以是任意位数的整数。</p><p>递归法求解主要要有结束条件，此题为n/10 == 0时就直接输出，其次本题还要考虑如果整数位负数的情形，此时需要输出一个字符串的负号。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">Convert</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">Convert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input an integer:>\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"output: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//先输出一个负号'-'</span>number <span class="token operator">=</span> <span class="token operator">-</span>number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Convert</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t17-给出年、月、日-计算该日是该年的第几天"><a href="#t17-给出年、月、日-计算该日是该年的第几天" class="headerlink" title="t17  给出年、月、日,计算该日是该年的第几天"></a>t17  给出年、月、日,计算该日是该年的第几天</h4><p>此题采用枚举法进行每月天数的累加，其中关键点注意需要判断年份是否为闰年，如果是还需要多累加1天。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">/* 函数sum_day:计算日期 */</span><span class="token keyword">int</span> <span class="token function">sum_day</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> day_tab<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> month<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>day <span class="token operator">+=</span> day_tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* 累加所在月之前天数 */</span><span class="token keyword">return</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 函数leap:判断是否为闰年 */</span><span class="token keyword">int</span> <span class="token function">leap</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> leap<span class="token punctuation">;</span>leap <span class="token operator">=</span> year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> leap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">,</span> days<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input date(year,month,day):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>year<span class="token punctuation">,</span> <span class="token operator">&amp;</span>month<span class="token punctuation">,</span> <span class="token operator">&amp;</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d/%d/%d "</span><span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>days <span class="token operator">=</span> <span class="token function">sum_day</span><span class="token punctuation">(</span>month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 调用函数sum_day */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">leap</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> month <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">/* 调用函数leap */</span>days <span class="token operator">=</span> days <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"is the %dth day in this year.\n"</span><span class="token punctuation">,</span> days<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> C试题 </tag>
            
            <tag> 专升本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谭浩强第五版课后习题-4</title>
      <link href="posts/e94f1527/"/>
      <url>posts/e94f1527/</url>
      
        <content type="html"><![CDATA[<h4 id="t1用筛选法求100之内的素数"><a href="#t1用筛选法求100之内的素数" class="headerlink" title="t1用筛选法求100之内的素数"></a>t1用筛选法求100之内的素数</h4><blockquote><p>素数：约数为1和该数本身的数字称为素数，即质数</p></blockquote><p>筛选法：又称为筛法。先把N个自然数按次序排列起来。1不是质数，也不是合数，要划去。第二个数2是质数留下来，而把2后面所有能被2整除的数都划去。2后面第一个没划去的数是3，把3留下，再把3后面所有能被3整除的数都划去。3后面紧接着没划去的数是5，把5留下，再把5后面所有能被5整除的数都划去。这样一直做下去，就会把不超过N的全部合数都筛掉，留下的就是不超过N的全部质数。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//用筛选法求100以内的素数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 将数组汇总每个元素设置为：1~100</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 因为1不是素数，把a[0]用0标记</span><span class="token comment">// 最后一个位置数字是100，100不是素数，因此循环可以少循环一次</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">99</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 用a[i]位置的数字去模i位置之后的所有数据</span><span class="token comment">// 如果能够整除则一定不是素数，该位置数据用0填充</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//把不是素数的都赋值为0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"筛选法求出100以内的素数为：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//数组中不为0的数即为素数</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t2用选择法对10个整数排序"><a href="#t2用选择法对10个整数排序" class="headerlink" title="t2用选择法对10个整数排序"></a>t2用选择法对10个整数排序</h4><p><strong>选择排序原理：</strong><br>            总共两个循环，外循环控制选择的趟数，内循环控制具体选择的方式。<br>            用maxPos标记区间中首元素位置，然后用后序元素依次与maxPos标记的元素进行比较，如果有元素<br>            大于maxPos位置的元素，用maxPos标记该元素的位置，直到区间的末尾。<br>            该趟选择完成后，即找到该区间中最大元素，如果maxPos标记的最大元素不在区间末尾，用maxPos位置元素与区间末尾的元素进行交换。<br>            继续新一趟选择，直到区间中剩余一个元素</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出原数组</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序前数组中数据为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 选择排序过程：</span><span class="token comment">// 外循环控制选择的趟数，总共选择size-1趟，</span><span class="token comment">// 减1是因为最后一趟选择区间中剩余一个元素，该趟选择可以忽略</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 用maxPos标记[0, size-i)区间中最大元素</span><span class="token comment">// 在该趟选择没有开始前，默认认为0号位置就是最大元素</span><span class="token keyword">int</span> maxPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size <span class="token operator">-</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 遍历区间[0, size-i)中元素，如果有元素比maxPos位置元素大，maxPos记录该元素位置</span><span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>maxPos<span class="token punctuation">]</span><span class="token punctuation">)</span>maxPos <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果最大元素不在区间末尾时，将最大元素与区间末尾元素交换</span><span class="token keyword">if</span> <span class="token punctuation">(</span>maxPos <span class="token operator">!=</span> size <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>maxPos<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>maxPos<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>size <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>size <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出原数组</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"选择排序后数组中数据为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:#42b983;">优化：</font></p><p>既然一趟选择能找到最大的元素，那么也可以找到最小的元素，因此在一趟中可以找到最小和最大两个元素，最小元素放在区间左侧，最大元素放在区间右侧，可以减少选择的趟数。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出原数组</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序前数组中数据为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// [begin, end]区间中进行选择</span><span class="token keyword">while</span> <span class="token punctuation">(</span>begin <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> maxPos <span class="token operator">=</span> begin<span class="token punctuation">;</span> <span class="token comment">// 标记区间中最大元素的位置</span><span class="token keyword">int</span> minPos <span class="token operator">=</span> begin<span class="token punctuation">;</span> <span class="token comment">// 标记区间中最小元素的位置</span><span class="token keyword">int</span> index <span class="token operator">=</span> begin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>maxPos<span class="token punctuation">]</span><span class="token punctuation">)</span>maxPos <span class="token operator">=</span> index<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>minPos<span class="token punctuation">]</span><span class="token punctuation">)</span>minPos <span class="token operator">=</span> index<span class="token punctuation">;</span><span class="token operator">++</span>index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果最大元素不在区间末尾，则交换</span><span class="token keyword">if</span> <span class="token punctuation">(</span>maxPos <span class="token operator">!=</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>maxPos<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>maxPos<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果在交换前区间末尾刚好存储的是最小的元素，则最小的元素被交换到maxPos位置</span><span class="token comment">// 此时需要更新minPos</span><span class="token keyword">if</span> <span class="token punctuation">(</span>minPos <span class="token operator">==</span> end<span class="token punctuation">)</span>minPos <span class="token operator">=</span> maxPos<span class="token punctuation">;</span><span class="token comment">// 如果最小元素不在区间起始位置，则交换</span><span class="token keyword">if</span> <span class="token punctuation">(</span>minPos <span class="token operator">!=</span> begin<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>minPos<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>minPos<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 最大与最小元素已经在区间的起始和末尾的位置，</span><span class="token comment">// 因此begin往后移动，end往前移动</span>begin<span class="token operator">++</span><span class="token punctuation">;</span>end<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出原数组</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"选择排序后数组中数据为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t3-求一个3-X-3的整形矩阵对角线元素之和"><a href="#t3-求一个3-X-3的整形矩阵对角线元素之和" class="headerlink" title="t3 求一个3 X 3的整形矩阵对角线元素之和"></a>t3 求一个3 X 3的整形矩阵对角线元素之和</h4><p>矩阵：即二维数组，矩阵行和列相等的二维数组称为方阵。</p><pre class="language-mathematica" data-language="mathematica"><code class="language-mathematica">1 2 34 5 67 8 9</code></pre><p> 左上角到右下角对角线上数字：行下标和列下标相等<br>        右上角到左下角对角线上数字：列下标减1 行下标加一<br>        通过两个循环来取到对角线上的元素，并对其求和即可。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> sumLT2RB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 标记左上角到右下角对角线元素之和</span><span class="token keyword">int</span> sumRT2LB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 标记右上角到左下角对角线元素之和</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入3行3列的矩阵：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 左上角到右下角对角线</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>sumLT2RB <span class="token operator">+=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span>sumRT2LB <span class="token operator">+=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"左上角到右下角对角线元素之和: %d\n"</span><span class="token punctuation">,</span> sumLT2RB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"右上角到左下角对角线元素之和: %d\n"</span><span class="token punctuation">,</span> sumRT2LB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t4-将数字插入排序好的数组并顺序排序"><a href="#t4-将数字插入排序好的数组并顺序排序" class="headerlink" title="t4 将数字插入排序好的数组并顺序排序"></a>t4 将数字插入排序好的数组并顺序排序</h4><p>有一个已经排好序的数组，要求输入一个数后，按原来顺序的规律将它插入数组中<br>        <strong>解析</strong></p><ol><li>找待插入元素在数组中的插入位置</li><li>插入元素</li></ol><p><img src="https://s1.imagehub.cc/images/2021/05/18/C6-4.jpg" alt="C6-4.jpg" loading="lazy"></p><p><font style="color:tomato;">注意：极端情况下，end可能会被减为-1，比如在上述序列中插入0</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原数组序列为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数组为升序</span><span class="token comment">// 在数组中找待插入元素的位置，具体找的方式为：</span><span class="token comment">// 从后往前依次与数组中元素进行比较，如果要插入元素num比end位置数据小，则num一定插在end位置之前</span><span class="token comment">// 因此将end位置数据往后搬移一个位置</span><span class="token comment">// 如果num大于end位置元素或者end已经在区间最左侧，则位置找到</span><span class="token comment">// 最后将新元素插入到end+1的位置</span><span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>end<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>array<span class="token punctuation">[</span>end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入元素%d之后的结果为:\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t5-数组逆序"><a href="#t5-数组逆序" class="headerlink" title="t5  数组逆序"></a>t5  数组逆序</h4><p>将一个数组中的值按逆序重新存放。例如：原来顺序为8,6,5,4,1。要求改为1,4,5,6,8。<br><strong>解析:</strong></p><p>如果begin &lt; end时，则循环进行以下操作</p><ol><li>给定两个下标begin和end，begin放在数组起始的位置，end放在数组最后一个元素的位置</li><li>交换begin和end位置的元素</li><li>begin往后移动，end往前移动</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"逆序之前数组为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 逆序：begin在数组最左侧，end在数组最右侧</span><span class="token comment">// 只要begin &lt; end，将begin和end位置元素进行交换</span><span class="token comment">// 然后begin往后移动一步，end往前移动一步</span><span class="token keyword">while</span> <span class="token punctuation">(</span>begin <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>begin<span class="token operator">++</span><span class="token punctuation">;</span>end<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"逆置之后数组为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t6-输出以下的杨慧三角-要求输出10行"><a href="#t6-输出以下的杨慧三角-要求输出10行" class="headerlink" title="t6 输出以下的杨慧三角(要求输出10行)"></a>t6 输出以下的杨慧三角(要求输出10行)</h4><pre class="language-mathematica" data-language="mathematica"><code class="language-mathematica">11 11 2 11 3 3 11 4 6 4 11 5 10 10 5 1.....</code></pre><p><strong>解析:</strong><br>        仔细观察杨慧三角可以看到：<br>        第0列和对角线上的数据全部为1，其余位置上的数据为上一行正对数据与上一行正对前一个数据之和。<br>        比如： <code>a[4] [2] = a[3] [2] + a[3] [1]</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//i行 j列</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 对角线和第0列上全部为1</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">==</span> j<span class="token punctuation">)</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印杨慧三角的前10行</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t7-输出”魔方阵”"><a href="#t7-输出”魔方阵”" class="headerlink" title="t7 输出”魔方阵”"></a>t7 输出”魔方阵”</h4><div class="warning"><blockquote><p>这里只考虑奇魔方阵</p></blockquote></div><p>所谓魔方阵是指这样的方阵，它的每一行、每一列和对角线之和均相等。例如：</p><pre class="language-mathematica" data-language="mathematica"><code class="language-mathematica">8 1 63 5 74 9 2</code></pre><p>要求输出1~$n^2$的自然数构成的魔方阵。</p><p>仔细观察上述矩阵，可以看到以下规律：<br>       魔方阵的生成方法为：在第0行中间置1，对从2开始的其余$n^2-1$个数依次按下列规则存放：</p><ol><li>将1放在第1行的中间一列。</li><li>从2开始直到n*n止，各数依次按此规律存放：每一个数存放的行比前一个数的行数减1，列数加1。</li><li>如果上一行的行数为1，则下一个数的行数为n(指最下一行）。</li><li>当上一个数的列数为n时，下一个数的列数应该为1。</li><li>如果按上面规律确定的位置有数，或者上一个数是第1行第n列时，则把下一个数放在上一个数的下面。</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token comment">//魔方阵阶数</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">int</span> prevRow<span class="token punctuation">,</span> preCol <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//前一个元素的行与列</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入3-100之间的奇数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> N <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>N <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> N <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//放置1:第0行最中间</span>col <span class="token operator">=</span> N <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//对于剩余的N^2-1个元素,按照以下规则元素存放</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token operator">*</span>N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//下一个元素存放在当前元素上一行下一列</span>row<span class="token operator">--</span><span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//防止越界</span><span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>row <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>col <span class="token operator">>=</span> N<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//若row,col该位置已经有元素--则新增在前一个元素的当前列下一行</span>row <span class="token operator">=</span> prevRow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>col <span class="token operator">=</span> preCol<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>array<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>prevRow <span class="token operator">=</span> row<span class="token punctuation">;</span>preCol <span class="token operator">=</span> col<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印魔方阵</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前魔方阵:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d"</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入n(1~15):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;=</span> <span class="token number">15</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入奇数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>j <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token operator">*</span>n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">></span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token operator">></span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t8-找出一个二维数组中的鞍点"><a href="#t8-找出一个二维数组中的鞍点" class="headerlink" title="t8 找出一个二维数组中的鞍点"></a>t8 找出一个二维数组中的鞍点</h4><p>找出一个二维数组中的鞍点，即该位置上的元素在该行上最大，在该列上最小，也可能没有鞍点。</p><p>解析<br>            <font style="color:#3eaf7c;">鞍点是行上最大，列上最小的元素</font>，因此对数组的第i元素进行如下操作：</p><ol><li>找到该行上最大元素，用max标记，并标记该元素所在列colindex</li><li>找colindex列上最小的元素，用min标记，并标记该元素所在行号rowindex</li><li>如果max和min相等，并且最小的元素刚好是在第i行，则为鞍点如果所有行找完了，没有输出则没有鞍点</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token number">3</span></span><span class="token comment">//行</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">4</span></span><span class="token comment">//列</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//获取输入数组</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> max<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入%d行%d列的数组:\n"</span><span class="token punctuation">,</span> M<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//找鞍点</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//0.设立默认最大数位置并标记最大数的列号</span>max <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//1.找该行最大元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>max <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新真正一行最大数</span>pos <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">//标记最大数的列</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//2.确认该元素是查为该列上最大的元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">&lt;</span> max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果在pos列没有发现比max小的元素，说明max是pos列上最小的元素</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> M<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"鞍点为：%d行%d列的元素%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"鞍点未找到!!!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token number">3</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">4</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> max<span class="token punctuation">,</span> min<span class="token punctuation">,</span> rowindex<span class="token punctuation">,</span> colindex<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入%d行%d列的数组:\n"</span><span class="token punctuation">,</span> M<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 找到i行上最大的元素,记录该元素在列号colindex</span>max <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>max <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>colindex <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 找max所在列colindex上最小的元素，并记录其所在的行</span>min <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>colindex<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>colindex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>min <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>colindex<span class="token punctuation">]</span><span class="token punctuation">;</span>rowindex <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果最大元素与最小元素相同，并且最小元素也在第i行，则为鞍点</span><span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">==</span> min <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> rowindex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"鞍点为：%d行%d列的元素%d"</span><span class="token punctuation">,</span> rowindex<span class="token punctuation">,</span> colindex<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> flag<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有鞍点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t9-折半查找法找出数组中的某个数"><a href="#t9-折半查找法找出数组中的某个数" class="headerlink" title="t9 折半查找法找出数组中的某个数"></a>t9 折半查找法找出数组中的某个数</h4><p>有15个数按由大到小顺序存放在一个数组中，输入一个数，要求用折半查找法找出该数是数组中第几个元素的值。如果该数不在数组中，则输出”无此数”。</p><p><strong>解析</strong><br>        折半查找又叫二分查找，查找的前提是序列中元素必须有序，假设区间使用[left, right)标记，待查找元素为key</p><p>具体查找的方式如下：当区间[left, right)有效时循环进行一下操作</p><ol><li>找到[left， right)区间中间位置</li><li>如果key等于中间位置元素，则找到，返回该元素在数组中的下标</li><li>如果key小于中间位置元素，到数组的左半侧继续二分查找</li><li>如果key大于中间位置元素，到数组的右半侧继续二分查找</li><li>如果循环结束时还没有找到，则不存在该元素。</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要查找的数字:>\n "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 二分查找</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 找到中间位置</span><span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>right <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"无此数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t10-统计文本格式数量"><a href="#t10-统计文本格式数量" class="headerlink" title="t10 统计文本格式数量"></a>t10 统计文本格式数量</h4><p>有一篇文章，共有3行文字，每行有80个字符。要求分别统计出其中英文大写字母、小写字母、数字、空格以及其他字符的个数。</p><p><strong>解析:</strong><br>        获取文章中的3行文本，并对每行文本进行以下操作</p><ol><li>定义保存结果变量：upp、low、digit、space、other</li><li>遍历每行文本中的字符</li><li>如果该字符ch：ch &gt;= ‘a’ &amp;&amp; ch &lt;=’z’，则该字符是小写字母，给low++</li><li>如果该字符ch：ch &gt;= ‘A’ &amp;&amp; ch &lt;=’Z’，则该字符是小写字母，给up++</li><li>如果该字符ch：ch &gt;= ‘0’ &amp;&amp; ch &lt;=’9’，则该字符是小写字母，给digit++</li><li>如果该字符ch：ch == ‘ ‘，则该字符是小写字母，给space++</li><li>否则为其他字符，给other++</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> upp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> digit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> space <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> other <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 获取一行文本</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please input line %d:\n"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 统计该行文本中小写字母、大写字母、数字、空格、其他字符的个数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span><span class="token operator">&amp;&amp;</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token comment">// 大写字母</span>upp<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token comment">// 小写字母</span>low<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token comment">// 数字</span>digit<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token comment">// 控制</span>space<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span>other<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 其他字符</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nupper case: %d\n"</span><span class="token punctuation">,</span> upp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"lower case: %d\n"</span><span class="token punctuation">,</span> low<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"digit : %d\n"</span><span class="token punctuation">,</span> digit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"space : %d\n"</span><span class="token punctuation">,</span> space<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"other : %d\n"</span><span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t11-有一行电文，以按下面规律译成密码"><a href="#t11-有一行电文，以按下面规律译成密码" class="headerlink" title="t11 有一行电文，以按下面规律译成密码"></a>t11 有一行电文，以按下面规律译成密码</h4><pre class="language-markdown" data-language="markdown"><code class="language-markdown">A--->Z a--->zB--->Y b--->YC--->X c--->x……</code></pre><p>即第1个字母编成第26个字母，第i个字母编成第(26-i+1)个字母，非字母字符不变，要求编程序将密码译回原文，并输出密码和原文。</p><p><strong>解析:</strong><br>        从题目给的实例中可以看到，编码规则非常简单，就是将从前往后数的第i个字母转化为从后往前数的第i个字母。<br>        那解密时直接反过来转换即可：</p><pre class="language-md" data-language="md"><code class="language-md">'Z'--->'A' 'z'--->'a''Y'--->'B' 'y'--->'b''X'--->'C' 'x'--->'c'</code></pre><p>假设如果当前拿到的是小写字母，转换方式如下：</p><ol><li>先用<code>s[i] - &#39;a&#39;</code>计算出s[i]是26个字母中从前往后数的第几个</li><li>再用<code>26 - (s[i]- &#39;a&#39;) - 1</code> 转换为26个字母中从后往前数的第几个</li><li>在2的结果上加上’a’，即转换为对应从后往前的第几个字母大写字母转换方式与上述相同，将上述每条中的’a’换为‘A’即可</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"明文为:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 转换</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 如果是小写字母(大写字母出来类似)：</span><span class="token comment">// 1. 先用s[i] - 'a'计算出s[i]是26个字母中从前往后数的第几个</span><span class="token comment">// 2. 再用26 - (s[i]- 'a') - 1 转换为26个字母中从后往前数的第几个</span><span class="token comment">// 3. 在2的结果上加上'a'，即转换为对应从后往前的第几个字母</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">26</span> <span class="token operator">-</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token number">26</span> <span class="token operator">-</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密文本为:%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t12-字符串拼接"><a href="#t12-字符串拼接" class="headerlink" title="t12 字符串拼接"></a>t12 字符串拼接</h4><p>编一程序，将两个字符串连接起来，不要用strcat函数<br><strong>解析:</strong><br>        直接将s2中的字符逐个拷贝到s1的末尾即可，<font style="color:orange;">用户需要保证s1中能存的下s2中的字符</font></p><ol><li>获取s1末尾的位置</li><li>将s2中的字符逐个拷贝到s1中</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> index1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入字符串s1："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入字符串s2："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"将s2拼接在s1之后: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1. 找到s1的末尾</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token string">'\0'</span> <span class="token operator">!=</span> s1<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">)</span>index1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 2. 将s2中的字符逐个往s1之后拼接</span><span class="token keyword">while</span> <span class="token punctuation">(</span>s1<span class="token punctuation">[</span>index1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s2<span class="token punctuation">[</span>index2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>t13 </p><p> 编写一个程序，将连个字符串s1和s2比较，如果s1 &gt; s2，输出一个整数；若s1 = s2，输出0；若s1 &lt; s2，输出一个负数。不要用strcpy函数。<br>        两个字符串用gets函数读入。<font style="color:#3eaf7c;">输出的正数或负数的绝对值应是相比较的两个字符串相对应字符的ASCII码的差值。</font></p><p>例如，”A”和“C”相比，由于”A” &lt; “C”，应输出负数，同时由于‘A’与‘C’的ASCII码差值为2，因此应输出”-2”。同理：“And”和”Aid”相比较，根据第2个字符比较结果，”n”比”i”大5，因此应输出”5”。</p><p><strong>解析:</strong></p><p>字符串比较规则：从前往后逐个字符进行比较，相等时继续往后，不相等时返回该位置两个字符差值。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入s1:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入s2:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将s1和s2中的字符从前往后逐个进行比较，相等继续往后，</span><span class="token comment">// 不相等时ret中结果不为0，!ret则为0 循环结束</span><span class="token comment">// 如果一个走到末尾，一个未走到末尾 ret也不为0， !ret为0，循环结束</span><span class="token comment">// 如果两个字符串相等，同时达到末尾，循环结束</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ret <span class="token operator">=</span> s1<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> s2<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'\0'</span> <span class="token operator">!=</span> s1<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token string">'\0'</span> <span class="token operator">!=</span>s2<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">++</span>index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t13-自定义程序复制功能"><a href="#t13-自定义程序复制功能" class="headerlink" title="t13 自定义程序复制功能"></a>t13 自定义程序复制功能</h4><p>编写一个程序，将字符数组s2中的全部字符复制到字符数组s1中，不用strcpy函数。复制时，‘\0’也要赋值过去。’\0’之后的字符不复制。<br><strong>解析:</strong><br>首先必须保证s1能否放的下s2中的字符，然后将s2中的每个字符逐个搬移到s1中即可。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> index1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入字符串s2："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"将s2拷贝到s1中, s1现在为: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将s2[index2]位置字符拷贝到s1[index]位置，</span><span class="token comment">// 然后以s1[index1]的值作为循环条件判断是否拷贝到s2的末尾</span><span class="token keyword">while</span> <span class="token punctuation">(</span>s1<span class="token punctuation">[</span>index1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s2<span class="token punctuation">[</span>index2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> C试题 </tag>
            
            <tag> 专升本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo搭建Gitee图床</title>
      <link href="posts/a0ace772/"/>
      <url>posts/a0ace772/</url>
      
        <content type="html"><![CDATA[<h4 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h4><ul><li>PicGo</li><li>Gitee</li></ul><h4 id="环境简介"><a href="#环境简介" class="headerlink" title="环境简介"></a>环境简介</h4><blockquote><p>Gitee是开源中国（OSChina）推出的基于Git的代码托管服务</p></blockquote><p>其实和GitHub一样，一个国内一个国外，另外Coding也是国内较大的代码托管服务商</p><div class="info"><blockquote><p>PicGo: 一个用于快速上传图片并获取图片 URL 链接的工具</p></blockquote></div><p>PicGo 本体支持如下图床：</p><ul><li><code>七牛图床</code> v1.0</li><li><code>腾讯云 COS v4\v5 版本</code> v1.1 &amp; v1.5.0</li><li><code>又拍云</code> v1.2.0</li><li><code>GitHub</code> v1.5.0</li><li><code>SM.MS V2</code> v2.3.0-beta.0</li><li><code>阿里云 OSS</code> v1.6.0</li><li><code>Imgur</code> v1.6.0</li></ul><p>🌟TIPS:</p><p>​            <font style="color:#3eaf7c;">可以通过安装插件增强PicGo功能并支持搭建Gitee图床</font></p><h5 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><font style="color:skyblue;">官方文档</font></h5><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/">https://picgo.github.io/PicGo-Doc/zh/guide/</a></p><h5 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a><font style="color:pink;">下载地址</font></h5><p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><h5 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h5><p>Windows 下载最新版本的 <code>exe</code> 文件即可。</p><p><img src="https://gitee.com/initzzy/blog-image/raw/master/picgo%E4%B8%8B%E8%BD%BD.png" loading="lazy"></p><h5 id="应用截图"><a href="#应用截图" class="headerlink" title="应用截图"></a>应用截图</h5><p><img src="https://gitee.com/initzzy/blog-image/raw/master/picgo%E6%88%AA%E5%9B%BE.png" loading="lazy"></p><h5 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h5><p>点击插件设置,在输入框输入<code>gitee</code>关键字，将出现下图结果：</p><p><img src="https://gitee.com/initzzy/blog-image/raw/master/gitee%E5%9B%BE%E5%BA%8A%E6%8F%92%E4%BB%B6.png" loading="lazy"></p><p><font style="color:orange;">你可以先点开左侧<code>图床设置</code>，默认支持图床没有Gitee。</font></p><p><font style="color:orange;">这里因为我安装过了,所以显示已经安装,你可以选择和我一样的插件。</font></p><h6 id="加速下载"><a href="#加速下载" class="headerlink" title="加速下载"></a><font style="color:#3eaf7c;">加速下载</font></h6><p>因为插件服务在国外,可以选择更改PicGo的代理和镜像源，在<code>PicGo设置</code>中可以查看</p><p><img src="https://gitee.com/initzzy/blog-image/raw/master/picgo%E6%8F%92%E4%BB%B6%E9%95%9C%E5%83%8F%E8%AE%BE%E7%BD%AE.png" loading="lazy"></p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F; </code></pre><h5 id="Gitee配置"><a href="#Gitee配置" class="headerlink" title="Gitee配置"></a><font style="color:#c71d24;">Gitee配置</font></h5><ul><li><p>新建一个仓库(此步骤略)</p></li><li><p>新建 私人令牌<br>点击头像 ——  设置  ——  私人令牌 ——  复制令牌密匙</p><p><font style="color:tomato;">这个令牌很重要,不要泄露遗失,后面配置需要用到</font>(<del>虽然丢了可以删除再重新弄一个</del>)</p><p><font style="color:deepskyblue;">分配权限勾选前3个其实已经够用了</font></p></li></ul><p><img src="https://gitee.com/initzzy/blog-image/raw/master/gitee%E7%A7%81%E4%BA%BA%E4%BB%A4%E7%89%8C.png" loading="lazy"></p><ul><li>在PicGo侧边功能区<code>图床设置</code>中选择<code>gitee</code>，开始输入参数配置</li></ul><p><img src="https://gitee.com/initzzy/blog-image/raw/master/gitee%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE.png" loading="lazy"></p><p>配置参数说明：</p><ul><li><font style="color:orange;font-size:18px;">repo: gitee用户名/仓库名；</font></li><li>branch: 分支名（如默认：master）</li><li>token: gitee私人令牌</li><li>path: 用于仓库下存储的目录</li><li>customPath和customUrl可以不用填</li></ul><p>简约方式:填写图中前3项就足够了!!!</p><div class="warning"><blockquote><p><b>坑点</b></p></blockquote></div><p>⚠️不能上传图片很有可能就是repo项填写错误,这里内容不一定是是gitee页面显示的<code>xxxx / xxxx</code>,而是在仓库页面浏览器url的<code>https://gitee.com/</code>后面所显示的路径名,直接复制粘贴进就行</p><p>✍答应我，建议仓库名不要奇奇怪怪带空格或者符号好嘛?</p><h4 id="上传测试"><a href="#上传测试" class="headerlink" title="上传测试"></a><font style="color:gold;">上传测试</font></h4><p>在PicGo侧边功能区<code>上传区</code>上传图片,可选直接拖动、点击本地上传、剪贴板粘贴，甚至URL上传（左边可选URL的格式）</p><p>记得在大大的图片上传旁边选好你想上传的图床gitee，如下图：</p><p><img src="https://gitee.com/initzzy/blog-image/raw/master/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%AD%A5%E9%AA%A41.png" loading="lazy"></p><p>上传成功与否可以看是否一条蓝线快速划过（笑</p><p><font style="color:lightskyblue;">准确做法是看左侧功能区<code>相册</code>是否有图片展示，然后康康你的gitee存放图片的仓库有木有图片上传</font></p><h5 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h5><p>对上传成功的图片的展示(可选展示的图床，默认全部展示)以及操作（删除编辑以及复制对应的格式)的功能区</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>最坑的也就是PicGo配置gitee的repo变量，**的原来是用户名，不是你的昵称，除了国内访问友好，还不如github所见即所得。</p><p>图片压缩网站: <a href="https://tinypng.com/">https://tinypng.com/</a></p><p><font style="color:pink;">如果有疑问，欢迎评论区留言，bye~</font></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谭浩强第五版课后习题-3</title>
      <link href="posts/772b8084/"/>
      <url>posts/772b8084/</url>
      
        <content type="html"><![CDATA[<h4 id="t1"><a href="#t1" class="headerlink" title="t1"></a>t1</h4><p>输人两个正整数m和n,求其最大公约数和最小公倍数</p><p>解析：<br>            该题题目直接使用“辗转相除法”来求解最大公约数，以除数和余数反复做除法运算，当余数为 0 时，就取得当前算式除数为最大公约数。<br>            最大公约数和最小公倍数之间的性质：两个自然数的乘积等于这两个自然数的最大公约数和最小公倍数的乘积。<br>            所以，当我们求出最大公约数，就可以很轻松的求出最小公倍数。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> r<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> temp<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入两个正整数n,m:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d,"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调整n保存较大的值</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> n<span class="token punctuation">;</span>n <span class="token operator">=</span> m<span class="token punctuation">;</span>m <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>p <span class="token operator">=</span> n <span class="token operator">*</span> m<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>r <span class="token operator">=</span> n <span class="token operator">%</span> m<span class="token punctuation">;</span>n <span class="token operator">=</span> m<span class="token punctuation">;</span>m <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"它们的最大公约数为:%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"它们的最小公倍数为:%d\n"</span><span class="token punctuation">,</span> p <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t2"><a href="#t2" class="headerlink" title="t2"></a>t2</h4><p>输人一行字符,分别统计出其中英文字母、空格、数字和其他字符的个数。</p><p>解析：<br>            该题可以调用<code>getchar</code>函数，从<code>stdin</code>流中读入一个字符，当输入多个字符时，<code>getchar()</code>再执行时就会直接从缓冲区中读取了。等同于<code>getc(stdin)</code> 。所以，我们循环调用<code>getchar</code>，直到将标准输入的内容读到换行符<code>\n</code>为止。同时判断，读取到的字符是英文字母、空格、数字或者其他字符，并计数；</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token comment">//定义eng_char为英文字母的个数，初始值为0</span><span class="token comment">//定义space_char为空格字符的个数，初始值为0</span><span class="token comment">//定义digit_char为数字字符的个数，初始值为0</span><span class="token comment">//定义other_char为其他字符的个数，初始值为0</span><span class="token keyword">int</span> eng_char <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> space_char <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> digit_char <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> other_char <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一行字符："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'z'</span> <span class="token operator">||</span> c <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>eng_char<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>space_char<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>digit_char<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>other_char<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"英文字母数量:%d\n空格数量:%d\n数字数量:%d\n其他字符数量:%d\n"</span><span class="token punctuation">,</span> eng_char<span class="token punctuation">,</span>space_char<span class="token punctuation">,</span> digit_char<span class="token punctuation">,</span> other_char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t3"><a href="#t3" class="headerlink" title="t3"></a>t3</h4><p>求$S_n$=a+aa+aaa+…+$\overbrace{aa+\dots+a}^{n个a}$ 之值，其中a是一个数字，n表示a的位数，n由键盘输入。例如:</p><p>2+22+222+2222+22222 (此时n=5)</p><p>解析：<br>            该题目可以将数字拆分为<code> a * 10^n + 前一个数字</code>，例如:<br>            2 = 2 * 10^0 + 0 : 默认2的前一个数字为0，也就是没有任何值<br>            22 = 2 * 10^1 + 2 ： 22的前一个数字为2<br>            222 = 2*10^2 + 22 ：222的前一个数字为22<br>            以此类推…<br>            所以，在每次循环的时候，需要保存下，上一次结果的值，方便下一次计算还需要使用到C库当中使用的pow函数，来计算某个数的n次方，我们在该题目当中使用的是10的n次方，n随着循环的次数，以此递增。</p><pre class="language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;math.h&gt;int main()&#123;&#x2F;&#x2F;n为a的个数int n;double a, prev_sum &#x3D; 0.0, total_sum &#x3D; 0.0;printf(&quot;请输入a的值以及n的值: &gt;\n&quot;);scanf(&quot;%lf %d&quot;, &amp;a, &amp;n);&#x2F;&#x2F;循环n次求总和for (int i &#x3D; 0; i &lt; n; i++)&#123;prev_sum +&#x3D; a * pow(10, i);total_sum +&#x3D; prev_sum;&#125;printf(&quot;总和为：%lf\n&quot;, total_sum);return 0;&#125;</code></pre><h4 id="t4"><a href="#t4" class="headerlink" title="t4"></a>t4</h4><p>求$\sum\limits_{n=1}^{20}n!$ (即求1!+2!+3!+4!+…+20!)。</p><p>解析：<br>                该题需要从1循环到20，依次求出每一个数字阶乘的结果。所以在代码当中需要有两个循环，大循环从1到20，保证1到20个数字都被循环到，小循环里计算N阶乘，累加求和。注意：对于20的阶乘已经超出了int 类型能过表示的数字范围，所以在代码当中使用double 类型</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> total_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> single_sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>single_sum <span class="token operator">*=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>total_sum <span class="token operator">+=</span> single_sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1~20每个数字阶乘总和为：%lf\n"</span><span class="token punctuation">,</span> total_sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t5"><a href="#t5" class="headerlink" title="t5"></a>t5</h4><p>求$\sum\limits_{k=1}^{100}k$ +$\sum\limits_{k=1}^{50}{k}^2$+$\sum\limits_{k=1}^{10}{\frac{1}{k}}$</p><p>解析：<br>对于$\sum\limits_{k=1}^{100}k$而言，指的是求从1到100的和。每个数字为整数，求和也为整数<br>对于$\sum\limits_{k=1}^{50}{k}^2$而言，指的是求从1^2到50^2的和。每个数字为整数，求和也为整数。<br>对于$\sum\limits_{k=1}^{10}{\frac{1}{k}}$而言，指的是求从$\frac{1}{1}$到$\frac{1}{10}$的和。每个数字不是整数，求和也不是整数。</p><p><strong>综上所述：</strong></p><p>求和结果不是整数，所以定义求和变量是需要定义为带有精度的变量double</p><p>该题目，最大的求和是从从1到100，所以需要一个循环，从1遍历到100。针对第一种情况，则遍历100次停下来。针对第二种情况，则遍历50次的时候停下来，针对第三种情况，则遍历10遍就停下来。最后，在遍历每一个数字的时候，针对三种不同的情况求和。最后将三种不同请求的和加起来就是总体的和</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> total_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum3 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum1 <span class="token operator">+=</span> k<span class="token punctuation">;</span><span class="token comment">//遍历50次就不再执行情况2</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum2 <span class="token operator">+=</span> k <span class="token operator">*</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历10次就不再执行情况3</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum3 <span class="token operator">+=</span> <span class="token number">1.0</span> <span class="token operator">/</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>total_sum <span class="token operator">=</span> sum1 <span class="token operator">+</span> sum2 <span class="token operator">+</span> sum3<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"三种情况求和结果为：%lf\n"</span><span class="token punctuation">,</span> total_sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t6"><a href="#t6" class="headerlink" title="t6"></a>t6</h4><p>输出所有的“水仙花数”,所谓“水仙花数”是指一个3位数,其各位数字立方和等于该数本身。例如,153是水仙花数,因为153=1+5+3。</p><p>解析：<br>                    从题目当中得到”水仙花数“为一个3位数，则范围确定为[100, 999]。另外需要获取该数字的百位数字，十位数字，个位数字相加起来等于该数本身，则我们需要使用到% 除的方式，来获取每一个位权的数字。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//a表示百位数字，b表示十位数字，c表示个位数字</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">999</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>c <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">*</span> b <span class="token operator">*</span> b <span class="token operator">+</span> c <span class="token operator">*</span> c <span class="token operator">*</span> c <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前范围水仙花数为:%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t7"><a href="#t7" class="headerlink" title="t7"></a>t7</h4><p>一个数如果恰好等于它的因子之和,这个数就称为“完数”。例如,6的因子为1,2,3,而6=1+2+3,因此6是“完数”。<br>        编程序找出<code>1000</code>之内的所有完数,并按下面格式输出其因子:</p><p><code>6 its factors are 1,2,3</code></p><p><strong>解析：</strong><br>            因子：整数a除以整数b(b≠0) 的商正好是整数而没有余数，我们就说b是a的因子。整数n除以m，结果是无余数的整数，那么我们称m就是n的因子。 需要注意的是，唯有被除数，除数，商皆为整数，余数为零时，此关系才成立。因子是不包括自身的<br>举一个例子：20 = 4 * 5，则4和5就是20的因子，也被称之为因子</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> data<span class="token punctuation">,</span> fator<span class="token punctuation">,</span> sum<span class="token punctuation">;</span> <span class="token comment">/* data表示要判断的数，fator表示因子，sum表示因子之和*/</span><span class="token keyword">for</span> <span class="token punctuation">(</span>data <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> data <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> data<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1是所有整数的因子，所以因子之和从1开始</span>sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>fator <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> fator <span class="token operator">&lt;=</span> data <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> fator<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/* 判断data能否被fator整除，能的话fator即为因子 因子不包括自身 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">%</span> fator <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> fator<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断此数是否等于因子之和 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d its factors are 1, "</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>fator <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> fator <span class="token operator">&lt;=</span> data <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> fator<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">%</span> fator <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, "</span><span class="token punctuation">,</span> fator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t8"><a href="#t8" class="headerlink" title="t8"></a>t8</h4><p>有一个分数序列，求出这个数列的前20项之和。<br>        <font style="color:skyblue;font-size:18px;">    $\frac{2}{1}$，$\frac{3}{2}$，$\frac{5}{3}$，$\frac{8}{5}$，$\frac{13}{8}$，$\frac{25}{13}$，…</font></p><p>解析：<br>            从题目当中可以看出来，下一个分式当中的分子为上一个分式中分子和分母的和，分母为上一个分式的分子。通过这个规律不难推出下一个分式的分子和分母，需要注意的是，保存分式的结果不能使用到整数，因为有可能会有小数的存在，所以我们需要选用浮点数<code>double</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//定义循环次数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COUNT</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//定义第一个分式的分子为a, 值为2; 定义分母为b，值为1</span><span class="token comment">//定义相加的和为sum，初始值为0</span><span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span> temp<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token comment">//记录前一项分子</span>temp <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//前一项分子与分母之和为后一项分子</span>a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment">//前一项分子为后一项分母</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"前%d项之和为:sum=%9.7f\n"</span><span class="token punctuation">,</span> COUNT<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t9"><a href="#t9" class="headerlink" title="t9"></a>t9</h4><p>一个球从100m高度自由落下，每次落地后反弹回原高度的一半，再落下，再反弹。求它在第10次落地时共经过多少米,第10次反弹多高。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//总高度</span><span class="token keyword">double</span> total_m <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span><span class="token comment">//小球经历的米数</span><span class="token keyword">double</span> total_sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>total_sum <span class="token operator">+=</span> total_m<span class="token punctuation">;</span>total_m <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>total_sum <span class="token operator">+=</span> total_m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//不需要计算第10次的反弹高度，所以减去</span>total_sum <span class="token operator">-=</span> total_m<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"小球总共经历%lf米, 第10次反弹%lf米\n"</span><span class="token punctuation">,</span> total_sum<span class="token punctuation">,</span> total_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t10-猴子吃桃问题"><a href="#t10-猴子吃桃问题" class="headerlink" title="t10    猴子吃桃问题"></a>t10    猴子吃桃问题</h4><p>猴子第1天摘下若干个桃子，当即吃了一半，还不过瘾，又多吃了一个。第2天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，就只剩一个桃子了。求第1天共摘多少个桃子。</p><p><strong>解析：</strong><br>            从题面上来看，可以推出，后一天的桃子数量 = 前一天桃子数量 / 2 - 1。所以，该公式也可以写成前一天的桃子数量 = (后一天桃子数量+1) * 2。所以我们知道了第10天剩余桃子的数量，则可以依次推算出桃子的前一天桃子的总数。<font style="color:orange;">需要注意的点，猴子只是吃了9天，所以，我们只需要遍历9次就可以了。</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">int</span> prev_day_count<span class="token punctuation">;</span><span class="token keyword">int</span> cur_day_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>day <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>prev_day_count <span class="token operator">=</span> <span class="token punctuation">(</span>cur_day_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>cur_day_count <span class="token operator">=</span> prev_day_count<span class="token punctuation">;</span>day<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"total count : %d\n"</span><span class="token punctuation">,</span> cur_day_count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t11"><a href="#t11" class="headerlink" title="t11"></a>t11</h4><p>用迭代法求x=$\sqrt{a}$。求平方根的迭代公式为<br>                            $$x_{n+1}$$ = $\frac{1}{2}$($x{n}$ + $\frac{a}{x_n}$)<br>        要求前后两次求出的x的差的绝对值小于$10^{-5}$。</p><p><strong>解析：</strong><br>                    题面上已经告诉两条信息，一个是x=$\sqrt{a}$，所以我们可以通过a求出x的值。另外一条是$$x_{n+1}$$= $\frac{1}{2}$($x{n}$ + $\frac{a}{x_n}$)，可以通过x的值求出$x_{n+1}$的值，所以，只需要轮询的计算，不断的计算差值，直到满足差值小于$10^{-5}$就可以停止了</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> x1<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个正数: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>x0 <span class="token operator">=</span> a <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>x1 <span class="token operator">=</span> <span class="token punctuation">(</span>x0 <span class="token operator">+</span> a <span class="token operator">/</span> x0<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>x0 <span class="token operator">=</span> x1<span class="token punctuation">;</span>x1 <span class="token operator">=</span> <span class="token punctuation">(</span>x0 <span class="token operator">+</span> a <span class="token operator">/</span> x0<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>x0 <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1e-5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%f] 的平方根为 [%f]\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> x1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t12"><a href="#t12" class="headerlink" title="t12"></a>t12</h4><p>用牛顿迭代法求下面方程在1.5附近的根：<br>                        2$x^3$- 4$x^2$ + 3$x$ - 6= 0<br><strong>解析：</strong><br>            牛顿迭代法的公式为：<br>                            $x_{n+1}$ = $x{n}$ - $\frac{f(x{n})}{f’(x{n})}$<br>其中，$x{n}$为输出的值，在该题目当中为1.5。$f(x{n})$为公式2$x^3$- 4$x^2$ + 3$x$ -6。$f’(x_{n})$为导数，根据导数原则：<br>规则1：$x^n$ = n * $x^{(n-1)}$， 规则2：常数的导数为0。可以推导出$f’(x_{n})$ = 6$x^2$ - 8x +3。<br>在依照牛顿迭代法计算出$x_{n+1}$的值，直到求出的差值小于0.00001</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> x1<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> f<span class="token punctuation">,</span> f1<span class="token punctuation">;</span>x1 <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>x0 <span class="token operator">=</span> x1<span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> x0 <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> x0 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> x0 <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">;</span>f1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">*</span> x0 <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">*</span> x0 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>x1 <span class="token operator">=</span> x0 <span class="token operator">-</span> f <span class="token operator">/</span> f1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>x1 <span class="token operator">-</span> x0<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1e-5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"方程在1.5附近的根为：%lf\n"</span><span class="token punctuation">,</span> x1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t13"><a href="#t13" class="headerlink" title="t13"></a>t13</h4><p>用二分法求下面方程在(-10,10)的根:<br>                        2$x^3$- 4$x^2$ + 3$x$ - 6= 0<br><strong>解析：</strong><br>将区间划分为两部分，记录区间左右端点，得到中点。每次运算将中点带入方程进行运算，求得结果，<br>进行分析：<br>结果 &gt; 0：将中位数赋值给右端点<br>结果 &lt; 0：将中位数赋值给左端点<br>以此类推…<br>fabs函数是一个求绝对值的函数，求出x的绝对值，和数学上的概念相同;<br>le-5：$10^{-5}$，即0.00001</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span><span class="token keyword">double</span> temp <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1e-5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//((2x - 4)*x + 3) * x - 6 ==> 2x^3 - 4x^2 + 3x -6</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> mid <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> mid <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> mid <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>right <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>left <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"在(-10,10)的根为：%lf"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="t14"><a href="#t14" class="headerlink" title="t14"></a>t14</h4><p>两个乒乓球队进行比赛，各出3人。甲队为A，B，C 3人，乙队为X，Y，Z 3人。已抽签决定比赛名单。有人向队员打听比赛的名单，<br>A说他不和X比，C说他不和X，Z比，请编程序找出3对赛手的名单。</p><p><strong>解析：</strong><br>            从题面上得知，每队为3人，则隐含条件为队内三人是不能比赛的，并且A一定不会和X比，C一定不会X<br>和Z比；则我们不难写出判断条件：<br>            如果A和X比 或者 C和X比 或者 C和Z比 或者 A和B比 或者 A和C比 或者 B和C比，都是不可以的；所以我<br>们只要穷举A比赛对象，B比赛对象，C比赛对象，判断上述条件就可以了；</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> A_battle<span class="token punctuation">,</span> B_battle<span class="token punctuation">,</span> C_battle<span class="token punctuation">;</span><span class="token comment">//如果A对战的对象从“X”到“Z”</span><span class="token keyword">for</span> <span class="token punctuation">(</span>A_battle <span class="token operator">=</span> <span class="token string">'X'</span><span class="token punctuation">;</span> A_battle <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">;</span> A_battle<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果B对战的对象从“X”到“Z”</span><span class="token keyword">for</span> <span class="token punctuation">(</span>B_battle <span class="token operator">=</span> <span class="token string">'X'</span><span class="token punctuation">;</span> B_battle <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">;</span> B_battle<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果C对战的对象从“X”到“Z”</span><span class="token keyword">for</span> <span class="token punctuation">(</span>C_battle <span class="token operator">=</span> <span class="token string">'X'</span><span class="token punctuation">;</span> C_battle <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">;</span> C_battle<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//去除限制条件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>A_battle <span class="token operator">==</span> <span class="token string">'X'</span> <span class="token operator">||</span> C_battle <span class="token operator">==</span> <span class="token string">'X'</span> <span class="token operator">||</span> C_battle <span class="token operator">==</span> <span class="token string">'Z'</span> <span class="token operator">||</span>B_battle <span class="token operator">==</span> A_battle <span class="token operator">||</span> B_battle <span class="token operator">==</span> C_battle <span class="token operator">||</span> A_battle <span class="token operator">==</span> C_battle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A对%c,B对%c,C对%c\n"</span><span class="token punctuation">,</span> A_battle<span class="token punctuation">,</span> B_battle<span class="token punctuation">,</span> C_battle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> C试题 </tag>
            
            <tag> 专升本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谭浩强第五版课后习题-2</title>
      <link href="posts/2cb012/"/>
      <url>posts/2cb012/</url>
      
        <content type="html"><![CDATA[<h4 id="第三章-最简单的C程序设计-顺序程序设计"><a href="#第三章-最简单的C程序设计-顺序程序设计" class="headerlink" title="第三章 最简单的C程序设计   顺序程序设计"></a>第三章 最简单的C程序设计   顺序程序设计</h4><h5 id="t1"><a href="#t1" class="headerlink" title="t1"></a>t1</h5><p>假如我国国民生产总值的年增长率为7%， 计算10年后我国国民生产总值与现在相比增长多少百分比。计算公式为$p = (1+r)^n$ ,其中r为年增长率，n为年数，p为与现在相比的倍数。</p><p><strong>题目解析:</strong><br>              此题的关键主要是利用数学库math中pow函数进行计算</p><p><strong>声明</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span></code></pre><p><strong>参数</strong><br>x – 代表基数的浮点值。<br>y – 代表指数的浮点值。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> p<span class="token punctuation">,</span> r<span class="token punctuation">,</span> n<span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token number">0.07</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> r<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p=%f\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p=1.967152</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t2"><a href="#t2" class="headerlink" title="t2"></a>t2</h5><p>存款利息的计算。有1000元，想存5年，可按以下5种办法存：<br>（1）一次存5年期<br>（2）先存2年期，到期后将本息再存3年期<br>（3）先存3年期，到期后将本息再存2年期<br>（4）存1年期，到期后将本息再存1年期，连续存5次<br>（5）存活期存款，活期利息每一季度结算一次</p><p>2017年银行存款利息如下：<br>                1年期定期存款利息为1.5%;<br>                2年期定期存款利息为2.1%;<br>                3年期定期存款利息为2.75%;<br>                5年期定期存款利息为3%;</p><p><font style="color:lightskyblue;">活期存款利息为0.35%(活期存款每一季度结算一次利息)</font></p><p><font style="color:pink;">如果r为年利率，n为存款年数</font>，则计算本息的公式如下：</p><p>1年期本息和: P= 1000* (1+r);<br>        n年期本息和: P= 1000* (1+n* r);<br>        存n次1年期的本息和: $P=1000* (1+r)^n$;<br>        活期存款本息和: P= 1000 *(1+$\frac{r}{4}$)$^{4n}$;</p><p>💠说明: 1000*(1+$\frac{r}{4}$)是一个季度的本息和。</p><p><strong>题目解析:</strong></p><p>理解题意很关键，其次就是利用数学库math中pow函数进行幂次方计算</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//本金</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//存款年限</span><span class="token keyword">double</span> r1 <span class="token operator">=</span> <span class="token number">0.015</span><span class="token punctuation">,</span> r2 <span class="token operator">=</span> <span class="token number">0.021</span><span class="token punctuation">,</span> r3 <span class="token operator">=</span> <span class="token number">0.0275</span><span class="token punctuation">,</span> r5 <span class="token operator">=</span> <span class="token number">0.03</span><span class="token punctuation">,</span> r0 <span class="token operator">=</span> <span class="token number">0.0035</span><span class="token punctuation">;</span><span class="token keyword">double</span> p1 <span class="token operator">=</span> p<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token operator">*</span>r5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1次存5年</span><span class="token keyword">double</span> p2 <span class="token operator">=</span> p<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> r2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span>r3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先存2年,再存3年</span><span class="token keyword">double</span> p3 <span class="token operator">=</span> p<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> r3<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> r2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先存2年,再存3年</span><span class="token keyword">double</span> p4 <span class="token operator">=</span> p<span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>r0<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存1年，连续存5次</span><span class="token keyword">double</span> p5 <span class="token operator">=</span> p<span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>r0<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存5年活期</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1=%.2f元\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出按第1方案得到的本息和</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p2=%.2f元\n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出按第2方案得到的本息和</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p3=%.2f元\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出按第3方案得到的本息和</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p4=%.2f元\n"</span><span class="token punctuation">,</span> p4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出按第4方案得到的本息和</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p5=%.2f元\n"</span><span class="token punctuation">,</span> p5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出按第5方案得到的本息和</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t3"><a href="#t3" class="headerlink" title="t3"></a>t3</h5><p>购房从银行贷了一笔款d,准备每月还款额为p,月利率为r,计算多少月能还清。设d为300 000元,p为6000元,r为1%。对求得的月份取小数点后一位,对第2位按四舍五人处理。</p><p>提示:计算还清月数m的公式如下:</p><p>$$m=\frac {\ {log }_P { -log { \left(P-d\times r\right) } } } { log { \left(1+r\right) } }$$</p><p>可以将公式改写为:</p><p>$$m=\frac { log { \left(\frac { P } { P-d\times r }\right) } } { log { \left(1+r\right) } }$$</p><p>C的库函数中有求对数的函数log10,是求以10为底的对数,log(p)表示log p。</p><p><strong>题目解析:</strong><br>            该题的关键主要是利用数学函数库中的log函数进行求解，然后月份要求按照小数点后一位进行四舍五入进行处理，只需要在输出时进行格式控制即可。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">300000</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">6000</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">,</span> m<span class="token punctuation">;</span>m <span class="token operator">=</span> <span class="token function">log10</span><span class="token punctuation">(</span>p <span class="token operator">/</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> d<span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"m = %3.1f\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t4"><a href="#t4" class="headerlink" title="t4"></a>t4</h5><p>分析下面的程序输出</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">;</span>c1 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>c2 <span class="token operator">=</span> <span class="token number">98</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c1=%c, c2=%c\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c1=%d, c2=%d\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出结果:</p><pre class="language-mathematica" data-language="mathematica"><code class="language-mathematica">c1 &#x3D; a, c2 &#x3D; bc1 &#x3D; 97, c2 &#x3D; 98</code></pre><p>结果分析:</p><p>因为第一行十一字符形式输出，所以会吧97和98当作相依字符的ascii值，输出的时候按照字符显示，第二行由于是以整形输出，所以输出对应整数值</p><h6 id="题目变形"><a href="#题目变形" class="headerlink" title="题目变形"></a>题目变形</h6><p>1.将程序第4,5行改为c1 = 197;c2 = 198;</p><pre class="language-mathematica" data-language="mathematica"><code class="language-mathematica">c1&#x3D;? c2&#x3D;?c1&#x3D;-59, c2&#x3D;-58</code></pre><p>因为c1和c2为char类型，其保存的数据范围为-128~127，当c1=197,c2=198时，已经超出了char类型所能够保存的数据范围，此时会进行相应的转换为c1=-59,c2=-58，只是第一行以字符输出时，c1=-59,c2=-58为不可显示字符，所以输出了<code>？</code>,而第二行以整数输出时就进行了相应的整数显示。</p><p>2.将程序第3行改为int c1, c2;</p><pre class="language-mathematica" data-language="mathematica"><code class="language-mathematica">c1&#x3D;? c2&#x3D;?c1&#x3D;197, c2&#x3D;198</code></pre><p>因为c1和c2为int时，第二行以整形输出自然能够保存的下，但第一行以字符输出时，虽然数据int能够储存，但是在输出时需要准换为字符，转换后数据就超出了范围，此时c1=-59,c2=-58，两者都为不可显示字符，所以就显示了<code>？</code>。</p><h5 id="t5"><a href="#t5" class="headerlink" title="t5"></a>t5</h5><p>用下面scanf函数输人数据,使a=3,b=7,x=8.5,y=71.82,cl=’A’,c2=’a’。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">char</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"a=%db=%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f%e"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>题目解析:</strong><br>                此题主要考察格式化输入，整形输入a和b时，必须按照a=3b=7的格式输入，浮点数输入时，%e代表科学记数法输入，字符输入c1和c2时，中间不能有任何空格</p><pre class="language-mathematica" data-language="mathematica"><code class="language-mathematica">a&#x3D;3b&#x3D;7 8.5 7.182e+1Aa</code></pre><h5 id="t6"><a href="#t6" class="headerlink" title="t6"></a>t6</h5><p>请编程序将“China”译成密码，密码规律是:用原来的字母后面第4个字母代替原来的字母。例如,字母“A”后面第4个字母是“E”,用“E”代替“A”。因此,“China”应译为“Glmre”。请编一程序,用赋初值的方法使cl,c2,c3,c4,c5这5个变量的值分别为’C’,’h’,’i’,’n’,’a’ ,经过运算,使c1,c2,c3,c4,c5 分别变为’G’,’l’,’m’,’r’,’e’。分别用<code>putcha</code>r函数和printf函数输出这5个字符。</p><p><strong>题目解析:</strong><br>       密码转换的关键在于相应字符的ascii加4进行赋值修改原来的字符即可，修改完成后即为相应的密码，在使用putchar和printf进行相应输出即可。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token string">'h'</span><span class="token punctuation">,</span> c3 <span class="token operator">=</span> <span class="token string">'i'</span><span class="token punctuation">,</span> c4 <span class="token operator">=</span> <span class="token string">'n'</span><span class="token punctuation">,</span> c5 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>c1 <span class="token operator">=</span> c1 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>c2 <span class="token operator">=</span> c2 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>c3 <span class="token operator">=</span> c3 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>c4 <span class="token operator">=</span> c4 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>c5 <span class="token operator">=</span> c5 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//使用putchar输出</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"使用putchar输出:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用printf输出</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"使用putchar输出: %c%c%c%c%c\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c4<span class="token punctuation">,</span> c5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t7"><a href="#t7" class="headerlink" title="t7"></a>t7</h5><p>设圆半径r=1.5,圆柱高h=3,求圆周长、圆面积、圆球表面积、圆球体积、圆柱体积。用<code>scanf</code>输人数据，输出计算结果，输出时要求有文字说明,取小数点后2位数字。请编程序。</p><p><strong>题目解析:</strong><br>        此题主要理解圆柱的各种求法，其次要求取小数点后两位，只需在打印时进行格式控制即可。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> h<span class="token punctuation">,</span> r<span class="token punctuation">,</span> l<span class="token punctuation">,</span> s<span class="token punctuation">,</span> sq<span class="token punctuation">,</span> vq<span class="token punctuation">,</span> vz<span class="token punctuation">;</span><span class="token keyword">float</span> pi <span class="token operator">=</span> <span class="token number">3.141526</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入圆半径r，圆柱高h∶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f %f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//要求输入圆半径r和圆柱高h</span>l <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> pi<span class="token operator">*</span>r<span class="token punctuation">;</span> <span class="token comment">//计算圆周长l</span>s <span class="token operator">=</span> r<span class="token operator">*</span>r<span class="token operator">*</span>pi<span class="token punctuation">;</span> <span class="token comment">//计算圆面积s</span>sq <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> pi<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span> <span class="token comment">//计算圆球表面积sq</span>vq <span class="token operator">=</span> <span class="token number">3.0</span> <span class="token operator">/</span> <span class="token number">4.0</span><span class="token operator">*</span>pi<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span> <span class="token comment">//计算圆球体积vq</span>vz <span class="token operator">=</span> pi<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token operator">*</span>h<span class="token punctuation">;</span> <span class="token comment">//计算圆柱体积vz</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"圆周长为: l=%6.2f\n"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"圆面积为: s=%6.2f\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"圆球表面积为: sq=%6.2f\n"</span><span class="token punctuation">,</span> sq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"圆球体积为: v=%6.2f\n"</span><span class="token punctuation">,</span> vq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"圆柱体积为: vz=%6.2f\n"</span><span class="token punctuation">,</span> vz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t8"><a href="#t8" class="headerlink" title="t8"></a>t8</h5><p>编程序,用<code>getchar</code>函数读入两个字符给c1和c2，然后分别用<code>putchar</code>函数和<code>printf</code>函数输出这两个字符。思考以下问题:</p><p> (1)变量cl和c2应定义为字符型、整型还是二者皆可?<br>        (2)要求输出cl和c2值的ASCII码,应如何处理?用putchar函数还是printf函数?<br>        (3)整型变量与字符变量是否在任何情况下都可以互相代替?<br>        如:<br>            char c1,c2;与int cl,c2;是否无条件地等价?</p><p><strong>题目解析:</strong></p><p>(1)c1和c2 应定义为整形，因为定义为字符有可能返回的整数会超出字符的存储范围<br>       (2)需要使用printf函数，打印是以整形形式打印<br>       (3)不是，因为两者的存储范围不同，如果整数超出了字符的存储范围，则不能相互替换</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入两个字符c1,c2:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c2 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"用putchar语句输出结果为:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"用printf语句输出结果为:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c %c\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="第四章-选择结构程序设计"><a href="#第四章-选择结构程序设计" class="headerlink" title="第四章 选择结构程序设计"></a>第四章 选择结构程序设计</h4><h5 id="t1-1"><a href="#t1-1" class="headerlink" title="t1"></a>t1</h5><p>什么是算术运算？什么是关系运算？什么是逻辑运算？</p><p><strong>算术运算：</strong><br>            算术运算即“四则运算”，是加法、减法、乘法、除法、乘方、开方等几种运算的统称。其中加减为一级运算，乘除为二级运算，乘方、开方为三级运算。            在一道算式中，如果有多级运算存在，则应先进行高级运算，再进行低一级的运算。C语言中的算熟运算符包括：<code>+ 、- 、* 、/ 、++ 、-- 、%</code>等种类。如果只存在同级运算；则从左至右的顺序进行；如果算式中有括号，则应先算括号里边，再按上述规则进行计算。</p><p><strong>关系运算：</strong><br>                关系的基本运算有两类：一类是传统的集合运算（并、差、交等），另一类是专门的关系运算（选择、投影、连接、除法、外连接等），而在C语言中，关系运算通常被认为是比较运算，将两个数值进行比较，判断比较结果是否符合给定的条件。常见的关系运算符包括：<code>&lt; 、&lt;= 、&gt; 、&gt;= 、== 、!=</code>等种类。其中，前4种关系运算符<code>(&lt;、&lt;=、&gt;、&gt;= )</code>的优先级别相同，后2种<code>(==、!=)</code>也相同。而前4种高于后2种。</p><p>并且，关系运算符的优先级低于算术运算符，关系运算符的优先级高于赋值运算符(=)。</p><p><strong>逻辑运算：</strong><br>                在逻辑代数中，有与、或、非三种基本逻辑运算。表示逻辑运算的方法有多种，如语句描述、逻辑代数式、真值表、卡诺图等。而在C语言中，逻辑运算通常用于使用逻辑运算符将关系表达式或其它逻辑量连接起来组成逻辑表达式用来测试真假值。</p><p>常见的逻辑运算符包括： &amp;&amp; 、|| 、! 等种类</p><p>&amp;&amp; ： 与是双目运算符，要求有两个运算对象，表示两个运算对象都成立，则结果为真，否则结果为假。</p><p>|| ：是双目运算符，要求有两个运算对象，表示两个运算对象只要任意一个成立，则结果为真，否则结果为假。</p><p>! ：是单目运算符，只要求有一个运算对象，表示取运算对象反义，运算对象为真则结果为假，运算对象结果为假则结果为真。</p><h5 id="t2-1"><a href="#t2-1" class="headerlink" title="t2"></a>t2</h5><p>C语言中如何表示“真”和“假”?系统如何判断一个量的“真”和“假”?</p><p> 在C语言中逻辑常量只有两个，即0和1，用来表示两个对立的逻辑状态，其中0 表示假， 1 表示真。<br>        逻辑变量与普通代数一样，也可以用字母、符号、数字及其组合成为的逻辑表达式表示。</p><p>​        对于系统来说，判断一个逻辑量的值时，系统会以0 作为假，以非0 作为真。例如3&amp;&amp;5 的值为真，系统给出3&amp;&amp;5 的值为1 。</p><h5 id="t3-1"><a href="#t3-1" class="headerlink" title="t3"></a>t3</h5><p>写出下面各逻辑表达式的值。设a=3,b=4,c=5。</p><p>（1）a + b &gt; c &amp;&amp; b == c</p><p>（2）a || b + c &amp;&amp; b - c</p><p>（3）!(a &gt; b) &amp;&amp; !c || 1</p><p>（4）!(x = a) &amp;&amp; (y = b) &amp;&amp; 0</p><p>（5）!(a + b) + c - 1 &amp;&amp; b + c / 2</p><h6 id="3-1-题目：a-b-gt-c-amp-amp-b-c-gt-3-4-gt-5-amp-amp-4-5"><a href="#3-1-题目：a-b-gt-c-amp-amp-b-c-gt-3-4-gt-5-amp-amp-4-5" class="headerlink" title="3.1 题目：a + b &gt; c &amp;&amp; b == c -&gt; 3+4&gt;5&amp;&amp;4==5"></a>3.1 题目：a + b &gt; c &amp;&amp; b == c -&gt; 3+4&gt;5&amp;&amp;4==5</h6><p><strong>解析：</strong> 3+4&gt;5 优先3+4得到结果7，因此7&gt;5结果为真； 4==5为假，一真一假逻辑与最终结果为假。</p><p><strong>答案：</strong> 0</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a <span class="token operator">||</span> b <span class="token operator">+</span> c <span class="token operator">&amp;&amp;</span> b <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这一句是为了让控制台不退出</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="3-2-题目：a-b-c-amp-amp-b-c-gt-3-4-5-amp-amp-4-5"><a href="#3-2-题目：a-b-c-amp-amp-b-c-gt-3-4-5-amp-amp-4-5" class="headerlink" title="3.2 题目：a || b + c &amp;&amp; b - c -&gt; 3||4 + 5 &amp;&amp; 4-5"></a>3.2 题目：a || b + c &amp;&amp; b - c -&gt; 3||4 + 5 &amp;&amp; 4-5</h6><p><strong>解析：</strong> 优先算术运算4+5得到7，非0则为真，4-5得到-1，非0则为真，接下来逻辑与判断，最终逻辑或判断</p><p><strong>答案：</strong> 1</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a <span class="token operator">||</span> b <span class="token operator">+</span> c <span class="token operator">&amp;&amp;</span> b <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这一句是为了让控制台不退出</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="3-3-题目：-a-gt-b-amp-amp-c-1-gt-3-gt-4-amp-amp-5-1"><a href="#3-3-题目：-a-gt-b-amp-amp-c-1-gt-3-gt-4-amp-amp-5-1" class="headerlink" title="3.3 题目：!(a &gt; b) &amp;&amp; !c || 1 -&gt; !(3&gt;4) &amp;&amp; !5 || 1"></a>3.3 题目：!(a &gt; b) &amp;&amp; !c || 1 -&gt; !(3&gt;4) &amp;&amp; !5 || 1</h6><p><strong>解析：</strong> ！优先级最高，!(3&gt;4)最终结果为真，!5为假； 其次 &amp;&amp;，真&amp;&amp;假得到假，最终||，1为真，假或真为真</p><p><strong>答案：</strong> 1</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>c <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这一句是为了让控制台不退出</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="3-4-题目：-x-a-amp-amp-y-b-amp-amp-0-gt-x-3-amp-amp-y-4-amp-amp-0"><a href="#3-4-题目：-x-a-amp-amp-y-b-amp-amp-0-gt-x-3-amp-amp-y-4-amp-amp-0" class="headerlink" title="3.4 题目：!(x = a) &amp;&amp; (y = b) &amp;&amp; 0 -&gt; !(x=3) &amp;&amp; (y=4)&amp;&amp;0"></a>3.4 题目：!(x = a) &amp;&amp; (y = b) &amp;&amp; 0 -&gt; !(x=3) &amp;&amp; (y=4)&amp;&amp;0</h6><p><strong>解析：</strong> 这里&amp;&amp;优先级最低是最后一个逻辑运算，因此不管如何，最终&amp;&amp;0，则肯定为假</p><p><strong>答案：</strong> 假-0</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">=</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这一句是为了让控制台不退出</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="3-5-题目：-a-b-c-1-amp-amp-b-c-2-gt-3-4-5-1-amp-amp-4-5-2"><a href="#3-5-题目：-a-b-c-1-amp-amp-b-c-2-gt-3-4-5-1-amp-amp-4-5-2" class="headerlink" title="3.5 题目：!(a + b) + c - 1 &amp;&amp; b + c / 2 -&gt; !(3+4)+5-1 &amp;&amp; 4+5/2"></a>3.5 题目：!(a + b) + c - 1 &amp;&amp; b + c / 2 -&gt; !(3+4)+5-1 &amp;&amp; 4+5/2</h6><p><strong>解析：</strong> 在vs中优先对（a+b）取非得到0,0+5-1结果为4，因此最终为真（此题涉及不同平台结果不同的问题，因为在有的平台下编译器会优先算术运算，则最终取非得到结果为假）</p><p><strong>答案：</strong> 1</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> c <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">+</span> c <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这一句是为了让控制台不退出</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t4-1"><a href="#t4-1" class="headerlink" title="t4"></a>t4</h5><p>有3个整数a, b, c，由键盘输入，输出其中最大的数。</p><p>解题思路： 每个数字两两与剩余两个数字进行比较，若比剩下的两个数大则最大，例如：a&gt;b &amp;&amp; a&gt;c则a是最大的</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入a,b,c对应数值:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Three numbers are equal\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b <span class="token operator">&amp;&amp;</span> a <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a and b are the largest number\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> c <span class="token operator">&amp;&amp;</span> a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a and c are the largest number\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> c <span class="token operator">&amp;&amp;</span> b <span class="token operator">></span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b and c are the largest number\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b <span class="token operator">&amp;&amp;</span> a <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d is the largest number\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> a <span class="token operator">&amp;&amp;</span> b <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b=%d is the largest number\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c=%d is the largest number\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t5-1"><a href="#t5-1" class="headerlink" title="t5"></a>t5</h5><p>从键盘输入一个小于1000的正数,要求输出它的平方根(如平方根不是整数，则输出其整数部分)。要求在输入数据后先对其进行检查是否为小于1000 的正数。若不是,则要求重新输入。</p><p><strong>解题思路：</strong> 首先判断输入的数字是否大于1000且是正数，然后使用<code>sqrt</code>函数对数据进行取平方根，最主要的是最终在输出是调整输出格式，小数部分为0位，只需要正数部分，且整数部分不会超过4位，</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入小于1000的正数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">1000</span> <span class="token operator">||</span> a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入小于1000的正数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>b <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%4.0f, b=%4.0f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这一句是为了让控制台不退出</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t6-1"><a href="#t6-1" class="headerlink" title="t6"></a>t6</h5><p>有一个函数，编写程序，输入x的值，输出y相应的值。</p><p><img src="https://s1.imagehub.cc/images/2021/05/15/3.png" alt="3.png" loading="lazy"></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入2个数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>y <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>y <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"y = %d\n"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t7-1"><a href="#t7-1" class="headerlink" title="t7"></a>t7</h5><p>给出一百分制成绩,要求输出成绩等级’A’、’B’、’C’、’D’、’E’。 90分以上为’A’,80-89分为’B’, 70-79分为’C’ ,60-69分为’D’ ,60分以下为’E’。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter score:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"B\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"C\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"D\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"E\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t8-1"><a href="#t8-1" class="headerlink" title="t8"></a>t8</h5><p>给一个不多于5位的正整数,要求:<br>                ①求出它是几位数;②分别输出每一位数字;③按逆序输出各位数字，例如原数为321,应输出123。</p><p><strong>解题思路</strong>： </p><p>①求出它是几位数;</p><p>大于10000就是5位，否则大于1000就是四位，否则大于100是三位…</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter num:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">99999</span> <span class="token operator">||</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入0~99999之间的正数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"5\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"4\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>②分别输出每一位数字;<br>        解题思路： 99999除以10000则输出9；9999除以1000则输出9，….</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter num:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">99999</span> <span class="token operator">||</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入0~99999之间的数字\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">10000</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//取出万位数字</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> num <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//取余10000则可以取出低四位的数据，除以1000则得到千位的数字</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//取余1000则可以取出低三位的数据，除以100则得到百位的数字</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//取余100则可以取出低两位的数据，除以10则得到十位的数字</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//取余10则取出个位数字</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>③按逆序输出各位数字，例如原数为321,应输出123。</p><p>解题思路： 思路与第二题相同，只不过将整个过程逆序即可</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter num:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">99999</span> <span class="token operator">||</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入0~99999之间的数字\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">10000</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> num <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t9"><a href="#t9" class="headerlink" title="t9"></a>t9</h5><p>企业发放的奖金根据利润提成。</p><p> 利润I低于或等于100000元的,奖金可提成10%；<br>        利润高于100000元，低于200000元(100000&lt;I≤200000)时,低于100000元的部分按10%提成,高于100000元的部分,可提成7. 5%；<br>        200000&lt;I≤400000时，<font style="color:tomato;">低于200000元的部分仍按上述办法提成(下同)</font>。高于200000元的部分按5%提成；<br>        400000&lt;&lt;I≤600000元时，高于400000元的部分按3%提成；<br>        600000&lt;1≤1000000时,高于600000元的部分按1.5%提成；<br>        I&gt;1000000时,超过1000000元的部分按1%提成。</p><p>从键盘输入当月利润I,求应发奖金总数。</p><p><strong>要求：</strong></p><p>(1) 使用if语句编写程序。</p><p>(2)使用switch语句编写程序。</p><h6 id="1-使用if语句编写程序。"><a href="#1-使用if语句编写程序。" class="headerlink" title="(1) 使用if语句编写程序。"></a>(1) 使用if语句编写程序。</h6><p>解题思路： 先将每一档的最大奖金算出来，在某一个区间时，则那小于这一档的奖金加上多出部分的奖金即可，例如：</p><p> 先列出100000档的奖金是10000，则180000就是<code>10000 + （180000-100000） * 0.075</code>；<br>        列出200000档的奖金是第一档加上多出100000部分的7.5%得到17500，则300000就是<code>17500 +（300000-200000）*0.05</code>；</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> I<span class="token punctuation">,</span> salary <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter performance:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>I<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个正数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> salary1 <span class="token operator">=</span> <span class="token number">100000</span> <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token comment">//10万的奖金</span><span class="token keyword">double</span> salary2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200000</span> <span class="token operator">-</span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.075</span> <span class="token operator">+</span> salary1<span class="token punctuation">;</span><span class="token comment">//20万的奖金</span><span class="token keyword">double</span> salary3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">400000</span> <span class="token operator">-</span> <span class="token number">200000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.05</span> <span class="token operator">+</span> salary2<span class="token punctuation">;</span><span class="token comment">//40万的奖金</span><span class="token keyword">double</span> salary4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">600000</span> <span class="token operator">-</span> <span class="token number">400000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.03</span> <span class="token operator">+</span> salary3<span class="token punctuation">;</span><span class="token comment">//60万的奖金</span><span class="token keyword">double</span> salary5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1000000</span> <span class="token operator">-</span> <span class="token number">600000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.015</span> <span class="token operator">+</span> salary4<span class="token punctuation">;</span><span class="token comment">//100万的奖金</span><span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>salary <span class="token operator">=</span> I <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token comment">//小于100000按10%提成</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">></span> <span class="token number">100000</span> <span class="token operator">&amp;&amp;</span> I <span class="token operator">&lt;=</span> <span class="token number">200000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>salary <span class="token operator">=</span> salary1 <span class="token operator">+</span> <span class="token punctuation">(</span>I <span class="token operator">-</span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.075</span><span class="token punctuation">;</span><span class="token comment">//多出10万的按比例计算，加上10w的奖金</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">></span> <span class="token number">200000</span> <span class="token operator">&amp;&amp;</span> I <span class="token operator">&lt;=</span> <span class="token number">400000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>salary <span class="token operator">=</span> salary2 <span class="token operator">+</span> <span class="token punctuation">(</span>I <span class="token operator">-</span> <span class="token number">200000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.05</span><span class="token punctuation">;</span><span class="token comment">//多出20万的按比例计算，加上20w的奖金</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">></span> <span class="token number">400000</span> <span class="token operator">&amp;&amp;</span> I <span class="token operator">&lt;=</span> <span class="token number">600000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>salary <span class="token operator">=</span> salary3 <span class="token operator">+</span> <span class="token punctuation">(</span>I <span class="token operator">-</span> <span class="token number">400000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.03</span><span class="token punctuation">;</span><span class="token comment">//多出40万的按比例计算，加上40w的奖金</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">></span> <span class="token number">600000</span> <span class="token operator">&amp;&amp;</span> I <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>salary <span class="token operator">=</span> salary4 <span class="token operator">+</span> <span class="token punctuation">(</span>I <span class="token operator">-</span> <span class="token number">600000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.015</span><span class="token punctuation">;</span><span class="token comment">//多出60万的按比例计算，加上60w的奖金</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">></span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>salary <span class="token operator">=</span> salary5 <span class="token operator">+</span> <span class="token punctuation">(</span>I <span class="token operator">-</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.01</span><span class="token punctuation">;</span><span class="token comment">//多出100万的按比例计算，加上100w的奖金</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"salary:%f\n"</span><span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="2-使用switch语句编写程序。"><a href="#2-使用switch语句编写程序。" class="headerlink" title="(2) 使用switch语句编写程序。"></a>(2) 使用switch语句编写程序。</h6><p><strong>解题思路：</strong> 与第一题思路没有太大差别，区别在于switch语句的case子句中需要是一个常量整数，并且<font style="color:deepskyblue;">switch中若子句中没有break将循序向下执行，直到遇到break才会跳出switch语句，</font>如果这时候将利润除以10w，则得到0-9 的数字，其中0表示小于10w，1表示介于10-20w ，2、3表示介于20-40w ，4、5表示介于40-60w ，6、7、8、9表示介于60~100w，否则就是大于100w</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> I<span class="token punctuation">,</span> salary <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter performance:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>I<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>I <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个正数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> salary1 <span class="token operator">=</span> <span class="token number">100000</span> <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token comment">//大于100000时0~100000的奖金</span><span class="token keyword">double</span> salary2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">200000</span> <span class="token operator">-</span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.075</span> <span class="token operator">+</span> salary1<span class="token punctuation">;</span><span class="token comment">//大于200000时0~20万的奖金</span><span class="token keyword">double</span> salary3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">400000</span> <span class="token operator">-</span> <span class="token number">200000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.05</span> <span class="token operator">+</span> salary2<span class="token punctuation">;</span><span class="token comment">//大于400000时0~40万的奖金</span><span class="token keyword">double</span> salary4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">600000</span> <span class="token operator">-</span> <span class="token number">400000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.03</span> <span class="token operator">+</span> salary3<span class="token punctuation">;</span><span class="token comment">//大于600000时0~60万的奖金</span><span class="token keyword">double</span> salary5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1000000</span> <span class="token operator">-</span> <span class="token number">600000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.015</span> <span class="token operator">+</span> salary4<span class="token punctuation">;</span><span class="token comment">//大于1000000时0~100万的奖金</span><span class="token keyword">int</span> grade <span class="token operator">=</span> I <span class="token operator">/</span> <span class="token number">100000</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>salary <span class="token operator">=</span> I <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>salary <span class="token operator">=</span> salary1 <span class="token operator">+</span> <span class="token punctuation">(</span>I <span class="token operator">-</span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.075</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token comment">//会顺序执行到下一个break处</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>salary <span class="token operator">=</span> salary2 <span class="token operator">+</span> <span class="token punctuation">(</span>I <span class="token operator">-</span> <span class="token number">200000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.05</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>salary <span class="token operator">=</span> salary3 <span class="token operator">+</span> <span class="token punctuation">(</span>I <span class="token operator">-</span> <span class="token number">400000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.03</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>salary <span class="token operator">=</span> salary4 <span class="token operator">+</span> <span class="token punctuation">(</span>I <span class="token operator">-</span> <span class="token number">600000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.015</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>salary <span class="token operator">=</span> salary5 <span class="token operator">+</span> <span class="token punctuation">(</span>I <span class="token operator">-</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.01</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"salary:%f\n"</span><span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t10"><a href="#t10" class="headerlink" title="t10"></a>t10</h5><p>输入4个整数，要求按由小到大的顺序输出。</p><p><strong>解题思路：</strong> 四个数中先找到最小的，剩下的三个数中找到第二小的，剩下的两个数中找到第三小的。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入4个数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmp<span class="token punctuation">;</span><span class="token comment">//找到最小的数</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> tmp<span class="token punctuation">;</span> <span class="token comment">// a>b两个数据交换,则给a存储小的b</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">=</span> c<span class="token punctuation">;</span> c <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> a<span class="token punctuation">;</span> a <span class="token operator">=</span> d<span class="token punctuation">;</span> d <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//找到第二小的数，不需要和最小的数比较</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> c<span class="token punctuation">;</span> c <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> d<span class="token punctuation">;</span> d <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//找到第三小的数据，不需要和第一和第二小比较</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> c<span class="token punctuation">;</span> c <span class="token operator">=</span> d<span class="token punctuation">;</span> d <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="t11"><a href="#t11" class="headerlink" title="t11"></a>t11</h5><p>有4个圆塔,圆心分别为(2,2)、(-2,2)、(-2,-2)、(2,-2),圆半径为1,见图。这4个塔的高度为10m,塔以外无建筑物。今输入任一点的坐标，求该点的建筑高度(塔外的高度为零)。</p><p>圆的方程公式：（<em>x</em>−<em>a</em>)^2+ (<em>y</em>−<em>b</em>)^2=1</p><p>(<em>a</em>,<em>b</em>)为圆心坐标</p><p><strong>解题思路：</strong> </p><p>塔的半径为1m，则x坐标小于-3或者大于3，以及y坐标大于3或者小于-3则都是0m的建筑；其余则判断输入的坐标是否在各个圆塔的圆形范围内。该点到各个圆心的距离是否大于1，小于则是10m建筑，否则为0m建筑。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//设置h的值为塔高10米</span><span class="token keyword">float</span> x1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> y1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> x2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> y2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> x3 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> y3 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> x4 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> y4 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//定义各塔的圆心坐标</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> d3<span class="token punctuation">,</span> d4<span class="token punctuation">;</span> <span class="token comment">//x,y：用来保存输入的坐标值,d1,d2,d3,d4:用来保存计算后的值</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input a point(x, y) :>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入任一点的坐标</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f, %f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出</span>d1 <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> y1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y <span class="token operator">-</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算点是否在d1中</span>d2 <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> y2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y <span class="token operator">+</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计算点是否在d2中</span>d3 <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> x3<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x <span class="token operator">+</span> x3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> y3<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y <span class="token operator">-</span> y3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计算点是否在d3中</span>d4 <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> x4<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x <span class="token operator">+</span> x4<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> y4<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y <span class="token operator">+</span> y4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计算点是否在d4中</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d1 <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> d2 <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> d3 <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> d4 <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//判断,如果点不在d1,d2,d3,d4中,说明点不在塔上,高度h为0</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the high of this point is : %d\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出高度h</span><span class="token punctuation">&#125;</span></code></pre><p>方法2：（利用条件选择结构）</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> h<span class="token punctuation">;</span>    <span class="token keyword">double</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4<span class="token punctuation">;</span>    <span class="token comment">//输入坐标</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter coordinate: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4个圆塔的坐标方程</span>    p1 <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p2 <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p3 <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p4 <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断坐标是否在圆塔内并输出结果</span>    <span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span><span class="token number">1</span> <span class="token operator">||</span> p2<span class="token operator">&lt;=</span><span class="token number">1</span> <span class="token operator">||</span> p3<span class="token operator">&lt;=</span><span class="token number">1</span> <span class="token operator">||</span> p4<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> h <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">:</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The building height on this point is %d\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>方法3：（利用函数的模块化设计）</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//定义输入函数</span><span class="token keyword">void</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//定义坐标判断函数</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>                                 <span class="token comment">//定义全局变量坐标值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//调用输入函数</span>    <span class="token function">judge</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//调用坐标判断函数</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输入函数</span><span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter coordinate: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//坐标判断函数</span><span class="token keyword">void</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token keyword">double</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4<span class="token punctuation">;</span>    p1 <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p2 <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p3 <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p4 <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span><span class="token number">1</span> <span class="token operator">||</span> p2<span class="token operator">&lt;=</span><span class="token number">1</span> <span class="token operator">||</span> p3<span class="token operator">&lt;=</span><span class="token number">1</span> <span class="token operator">||</span> p4<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> h <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">:</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The building height on this point is %d\n"</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>​    方法4:函数库</p><p> math.h中提供了<code>fabs(double)</code>求一个浮点数的绝对值，输入x,y坐标<code>fabs(fabs(x) - 2)</code>得到输入坐标距离圆心的横轴距离；</p><p><code>fabs(fabs(y) - 2)</code>得到坐标距离圆心的纵轴距离；三角形两个直角边长平方相加，然后开平方根得到第三边长，若大于1，则不再圆塔范围内。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> h<span class="token punctuation">;</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> r<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input a coordinate (x,y):>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%lf,%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">||</span> <span class="token function">fabs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The height of the coordinate(%f,%f):h=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>m <span class="token operator">=</span> <span class="token function">fabs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> n <span class="token operator">=</span> <span class="token function">fabs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>m <span class="token operator">*</span> m <span class="token operator">+</span> n <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span>h <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The height of the coordinate(%f,%f):h=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> C试题 </tag>
            
            <tag> 专升本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora插入公式替行方法</title>
      <link href="posts/2a539556/"/>
      <url>posts/2a539556/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font style="color:deepskyblue;">Typora</font></p><p>是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别，将写作与预览窗口相结合，为用户呈现所见即所得的编辑模式，支持Markdown的各种基础语法，支持快捷键操作，是好用的一款Markdown编辑器。即时渲染使得你写Markdown就想是写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。</p><p>🌏官网 <a href="https://www.typora.io/">https://www.typora.io/</a></p></blockquote><div class="warning"><blockquote><p>⚠️注意事项</p><p>需首先打开Markdown扩展语法</p></blockquote></div><p><img src="https://s1.imagehub.cc/images/2021/05/14/markdown.png" alt="markdown.png" loading="lazy"></p><h5 id="公式书写"><a href="#公式书写" class="headerlink" title="公式书写"></a><em>公式书写</em></h5><h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><p>​        <code>office2019</code>或<code>office365</code>中(可能其他版本支持此功能)</p><h6 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h6><ul><li><p>新建一个空白word文档(不空白也可，<del>宁随意</del>)</p></li><li><p>点击插入选项卡</p></li><li><p>点击插入功能区终端<font style="color:orange;"><em>公式</em></font>下拉箭头</p></li><li><p>选择<code>墨迹公式</code></p></li><li><p><a href="https://www.imagehub.cc/image/QCnOc"><img src="https://s1.imagehub.cc/images/2021/05/14/word.png" alt="word.png" loading="lazy"></a></p></li><li><p>请自由发挥您的公式</p></li><li><p>点击插入,word中将出现公式</p></li><li><p><a href="https://www.imagehub.cc/image/QCDpK"><img src="https://s1.imagehub.cc/images/2021/05/14/43f28a63ee744cb748b7795571cd9373.png" alt="43f28a63ee744cb748b7795571cd9373.png" loading="lazy"></a></p></li><li><p>选中word中的公式,word会出现<code>公式</code>选项卡,在此选项卡中点击<code>&#123;&#125;LaTeX</code>功能,此时公式会变为一行,例如下面这样,将此公式粘贴进typora</p><pre class="language-math" data-language="math"><code class="language-math">m&#x3D;\frac&#123;log&#123;\left(\frac&#123;P&#125;&#123;P-d\times r&#125;\right)&#125;&#125;&#123;log&#123;\left(1+r\right)&#125;&#125;</code></pre></li><li><p>然而此时typora显示的公式仍然不是我们所想要的,,因此我们要将这一行公式首尾处各加入一个<code>$</code>符号进行转义解析</p></li></ul><pre class="language-math" data-language="math"><code class="language-math">$m&#x3D;\frac&#123;&#123;log&#125;_P&#123;-log&#123;\left(P-d\times r\right)&#125;&#125;&#125;&#123;log&#123;\left(1+r\right)&#125;&#125;$</code></pre><ul><li>最后结果就出来了</li></ul><div class="danger"><blockquote><p>写错了选择擦除,不是清除</p><p>粘贴时选择右键粘贴为纯文本,不然会被识别成代码块不能被转义</p></blockquote></div><h5 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h5><ul><li>数学公式识别神器—Mathpix Snip(免费版有次数限制)</li><li><a href="https://www.zhihu.com/question/338121218">知乎</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谭浩强第五版课后习题-1</title>
      <link href="posts/c6fdbfc/"/>
      <url>posts/c6fdbfc/</url>
      
        <content type="html"><![CDATA[<h4 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h4><h5 id="什么是程序-什么是程序设计"><a href="#什么是程序-什么是程序设计" class="headerlink" title="什么是程序?什么是程序设计?"></a>什么是程序?什么是程序设计?</h5><p>程序︰就是一组计算机能识别和执行的指令集合，每一条指令使计算机执行特定的操作</p><p>程序设计:是指从确定任务到得到结果、写出文档的全过程</p><h5 id="为什么需要计算机语言"><a href="#为什么需要计算机语言" class="headerlink" title="为什么需要计算机语言?"></a>为什么需要计算机语言?</h5><p>计算机语言解决了人和计算机交流的语言问题，使得人和计算机都能够识别</p><h5 id="高级语言都有哪些特点"><a href="#高级语言都有哪些特点" class="headerlink" title="高级语言都有哪些特点"></a>高级语言都有哪些特点</h5><p><code>C语言，C++ , Java, python, go</code></p><ul><li>高级语言的数据类型比汇编语言更加丰富</li><li>高级语言更加亲近自然语言，人们更加容易去掌握高级语言</li><li>高级的编写的代码需要经过编译才能变成程序</li><li>高级语言和具体的计算机结构是没有很强的关系的，机器语言和机器是有较强关系的</li></ul><h5 id="名词及其含义理解"><a href="#名词及其含义理解" class="headerlink" title="名词及其含义理解"></a>名词及其含义理解</h5><h6 id="1-源程序-目标程序-可执行程序"><a href="#1-源程序-目标程序-可执行程序" class="headerlink" title="(1)源程序,目标程序,可执行程序"></a>(1)源程序,目标程序,可执行程序</h6><p>源程序：指未编译的按照一定的程序设计语言规范书写的文本文件，是一系列人类可读的计算机语言指令</p><p>目标程序：为源程序经编译可直接被计算机运行的机器码集合，在计算机文件上以<code>.obj</code>作扩展名</p><p>可执行程序：将所有编译后得到的目标模块连接装配起来，在与函数库相连接成为一个整体，生成一个可供计算机执行的目标程序，成为可执行程序</p><h6 id="2-程序编辑-程序编译-程序连接"><a href="#2-程序编辑-程序编译-程序连接" class="headerlink" title="(2)程序编辑,程序编译,程序连接"></a>(2)程序编辑,程序编译,程序连接</h6><p>程序编辑：上机输入或者编辑源程序。</p><p>程序编译：<br>                先用C提供的“预处理器”，对程序中的预处理指令进行编译预处理<br>                对源程序进行语法检查， 判断是否有语法错误，直到没有语法错误未知<br>                编译程序自动把源程序转换为二进制形式的目标程序</p><p>程序连接：<br>                将所有编译后得到的目标模块连接装配起来，在与函数库相连接成为一个整体的过程称之为程序连接</p><h6 id="3-程序-程序模块-程序文件"><a href="#3-程序-程序模块-程序文件" class="headerlink" title="(3)程序,程序模块,程序文件"></a>(3)程序,程序模块,程序文件</h6><p>程序：一组计算机能识别和执行的指令，运行于电子计算机上，满足人们某种需求的信息化工具</p><p>程序模块：可由汇编程序、编译程序、装入程序或翻译程序作为一个整体来处理的一级独立的、可识别的程序指令</p><p>程序文件：程序的文件称为程序文件，程序文件存储的是程序，包括源程序和可执行程序</p><h6 id="4-函数-主函数，被调用函数-库函数"><a href="#4-函数-主函数，被调用函数-库函数" class="headerlink" title="(4)函数,主函数，被调用函数,库函数"></a>(4)函数,主函数，被调用函数,库函数</h6><p>函数：将一段经常需要使用的代码封装起来，在需要使用时可以直接调用，来完成一定功能</p><p>主函数：又称main函数，是程序执行的起点</p><p>被调用函数：由一个函数调用另一个函数，则称第二个函数为被调用函数</p><p>库函数：一般是指编译器提供的可在c源程序中调用的函数。可分为两类，一类是c语言标准规定的库函数，一类是编译器特定的库函数</p><h6 id="5-程序调试-程序测试。"><a href="#5-程序调试-程序测试。" class="headerlink" title="(5)程序调试,程序测试。"></a>(5)程序调试,程序测试。</h6><p>程序调试：是将编制的程序投入实际运行前，用手工或编译程序等方法进行测试，修正语法错误和逻辑错误的过程</p><p>程序测试：是指对一个完成了全部或部分功能、模块的计算机程序在正式使用前的检测，以确保该程序能按预定的方式正确地运行</p><h5 id="编写一个C程序-运行时输出以下图形"><a href="#编写一个C程序-运行时输出以下图形" class="headerlink" title="编写一个C程序,运行时输出以下图形"></a>编写一个C程序,运行时输出以下图形</h5><pre class="language-md" data-language="md"><code class="language-md"><span class="token hr punctuation">****</span> <span class="token hr punctuation">****</span>  <span class="token hr punctuation">****</span>   <span class="token hr punctuation">****</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token string">"*****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="3个数求最大值"><a href="#3个数求最大值" class="headerlink" title="3个数求最大值"></a>3个数求最大值</h5><p>编写一个C程序,运行时输人a,b,c三个值,输出其中值最大者</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> max<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入三个数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>max <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>max <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>max <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"三个数中最大的数为：%d"</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="第二章：算法—-程序的灵魂"><a href="#第二章：算法—-程序的灵魂" class="headerlink" title="第二章：算法—-程序的灵魂"></a>第二章：算法—-程序的灵魂</h4><h5 id="什么是算法？试从日常生活中找3个例子，描述它们的算法"><a href="#什么是算法？试从日常生活中找3个例子，描述它们的算法" class="headerlink" title="什么是算法？试从日常生活中找3个例子，描述它们的算法"></a>什么是算法？试从日常生活中找3个例子，描述它们的算法</h5><p><font style="color:deepskyblue;">算法：简而言之就是求解问题的步骤，对特定问题求解步骤的一种描述。</font></p><p>比如生活中的例子：</p><ol><li>考大学<br>首先填报志愿表、交报名费、拿到准考证、按时参加考试、收到录取通知书、按照日期到指定学校<br>报到。</li><li>去北京听演唱会<br>首先在网上购票、然后按时坐车到北京，坐车到演唱会会场。</li><li>把大象放进冰箱<br>先打开冰箱门，然后将大象放进冰箱，关冰箱。</li></ol><h5 id="什么叫结构化的算法？为什么要提倡结构化的算法？"><a href="#什么叫结构化的算法？为什么要提倡结构化的算法？" class="headerlink" title="什么叫结构化的算法？为什么要提倡结构化的算法？"></a>什么叫结构化的算法？为什么要提倡结构化的算法？</h5><p>结构化算法：由一些顺序、选择、循环等基本结构按照顺序组成，流程的转移只存在于一个基本的范围之内。</p><p>机构化算法便于编写，可读性高，修改和维护起来简单，可以减少程序出错的机会，提高了程序的可靠性，保证了程序的质量，因此提倡结构化的算法。</p><h5 id="试述3种基本结构的特点，请另外设计两种基本结构-要符合基类结构的特点"><a href="#试述3种基本结构的特点，请另外设计两种基本结构-要符合基类结构的特点" class="headerlink" title="试述3种基本结构的特点，请另外设计两种基本结构(要符合基类结构的特点)"></a>试述3种基本结构的特点，请另外设计两种基本结构(要符合基类结构的特点)</h5><p>结构化程序设计方法主要由以下三种基本结构组成：</p><ol><li>顺序结构：顺序结构是一种线性、有序的结构，它依次执行各语句模块</li><li>选择结构：选择结构是根据条件成立与否选择程序执行的通路。</li><li>循环结构：循环结构是重复执行一个或几个模块，直到满足某一条件位置</li></ol><p>重新设计基本结构要满足以下几点：</p><ol><li><p>只有一个入口</p></li><li><p>只有一个出口</p></li><li><p>结构内的每一部分都有机会执行到</p></li><li><p>结构内不存在死循环</p></li></ol><p>  因此给出以下基本结构：while型和until型循环复合以及多选择结构</p><p><a href="https://www.imagehub.cc/image/Qon5H"><img src="https://s1.imagehub.cc/images/2021/05/13/whileuntil.png" alt="whileuntil.png" loading="lazy"></a><a href="https://www.imagehub.cc/image/QocNf"><img src="https://s1.imagehub.cc/images/2021/05/13/6a3a782a175a23b3b68b6cfd335e6cbe.png" alt="6a3a782a175a23b3b68b6cfd335e6cbe.png" loading="lazy"></a></p><h5 id="用传统流程图表示求解以下问题的算法"><a href="#用传统流程图表示求解以下问题的算法" class="headerlink" title="用传统流程图表示求解以下问题的算法"></a>用传统流程图表示求解以下问题的算法</h5><p>有两个瓶子A和B，分别盛放醋和酱油，要求将他们互换(即A瓶原来盛醋，现在盛酱油，B瓶则相反)。</p><p>解析：<br>            用两个瓶子显然很难实现，可以借助一个空瓶子C作为中转，先将A中醋导入C中，然后将B中的酱油导入A中，最后将C中的醋导入B中即可实现交换。</p><p><img src="https://s1.imagehub.cc/images/2021/05/13/0b098e96d9d53691edc979411ab2a91f.png" alt="0b098e96d9d53691edc979411ab2a91f.png" loading="lazy"></p><p>用N-S图表示的算法</p><p><img src="https://i.loli.net/2021/05/13/n54rQuSDvJmB87C.png" alt="屏幕截图 2021-05-13 214527.png" loading="lazy"></p><p>用伪代码表示的算法</p><pre class="language-c" data-language="c"><code class="language-c">begin醋 <span class="token operator">=</span> <span class="token operator">></span> A酱油 <span class="token operator">=</span> <span class="token operator">></span> BA <span class="token operator">=</span> <span class="token operator">></span> CB <span class="token operator">=</span> <span class="token operator">></span> AC <span class="token operator">=</span> <span class="token operator">></span> Bend</code></pre><h5 id="什么叫结构化程序设计？它的主要内容是什么？"><a href="#什么叫结构化程序设计？它的主要内容是什么？" class="headerlink" title="什么叫结构化程序设计？它的主要内容是什么？"></a>什么叫结构化程序设计？它的主要内容是什么？</h5><p><font style="color:skyblue;">结构化程序设计（structured programming，简称SP）是进行以模块功能和处理过程设计为主的详细设计的基本原则。</font>其概念最早由E.W.Dijikstra在1965年提出的。结构化程序设计思想确实使程序执行效率提高 ，是软件发展的一个重要的里程碑，<font style="color:gold;">它的主要观点是采用自顶向下、逐步求精的程序设计方法</font>；各个模块通过“顺序、选择、循环”的控制结构进行连接，并且只有一个入口、一个出口 。</p><h5 id="用自顶向下、逐步细化的方法进行以下算法的设计："><a href="#用自顶向下、逐步细化的方法进行以下算法的设计：" class="headerlink" title="用自顶向下、逐步细化的方法进行以下算法的设计："></a>用自顶向下、逐步细化的方法进行以下算法的设计：</h5><h6 id="输出1900—2000年中是软黏的年份，符合下面两个条件之一的年份是闰年："><a href="#输出1900—2000年中是软黏的年份，符合下面两个条件之一的年份是闰年：" class="headerlink" title="输出1900—2000年中是软黏的年份，符合下面两个条件之一的年份是闰年："></a>输出1900—2000年中是软黏的年份，符合下面两个条件之一的年份是闰年：</h6><p>能被 4 整除但不能被 100 整除<br>       能被 100 整除且能被 400 整除。</p><pre class="language-c" data-language="c"><code class="language-c">算法大体流程<span class="token number">1.</span> 循环取<span class="token number">1900</span>到<span class="token number">2000</span>中的每一个年份<span class="token number">2.</span> 对于每一个年份判断其是否是闰年<span class="token number">3.</span> 是闰年则输出判断一年是否是闰年：<span class="token number">1.</span> 如果该年份内被<span class="token number">4</span>整除但是不能被<span class="token number">100</span>整除是闰年，否则不是闰年<span class="token number">2.</span> 如果年份能被<span class="token number">400</span>整除则是闰年，否则不是闰年</code></pre><h6 id="求-ax-2-bx-c-0-的根。分别考虑-d-b-2-4ac-大于-0-、等于-0-和小于-0-这三种情况。"><a href="#求-ax-2-bx-c-0-的根。分别考虑-d-b-2-4ac-大于-0-、等于-0-和小于-0-这三种情况。" class="headerlink" title="求$ax^2 + bx + c = 0$的根。分别考虑$d = b^2 - 4ac$大于 0 、等于 0 和小于 0 这三种情况。"></a>求$ax^2 + bx + c = 0$的根。分别考虑$d = b^2 - 4ac$大于 0 、等于 0 和小于 0 这三种情况。</h6><pre class="language-c" data-language="c"><code class="language-c"><span class="token number">1.</span> 获取a b c的值<span class="token number">2.</span> 计算b<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">4</span>ac的结果并给p<span class="token number">3.</span> 如果p <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> 则方程没有实根<span class="token number">4.</span> 如果p <span class="token operator">==</span> <span class="token number">0</span>，则方程有一个实根<span class="token operator">-</span>b<span class="token operator">/</span><span class="token number">2</span>a<span class="token number">5.</span> 如果p <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> 则方程有两个实根 x1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span>b <span class="token operator">+</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>b<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">4</span>ac<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token number">2</span>a x2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span>b <span class="token operator">-</span><span class="token function">sqrt</span><span class="token punctuation">(</span>b<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">4</span>ac<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token number">2</span>a</code></pre><h6 id="输入10个数，输出其中最大的一个数。"><a href="#输入10个数，输出其中最大的一个数。" class="headerlink" title="输入10个数，输出其中最大的一个数。"></a>输入10个数，输出其中最大的一个数。</h6><pre class="language-c" data-language="c"><code class="language-c"><span class="token number">1.</span> 给一个max保存最大值<span class="token number">2.</span> 分别输入<span class="token number">10</span>个数，并对用每个数与max进行比较如果该数大于max，则将该数给max<span class="token number">3.</span> 输出max</code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> C试题 </tag>
            
            <tag> 专升本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C文件操作</title>
      <link href="posts/7db2e853/"/>
      <url>posts/7db2e853/</url>
      
        <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><ul><li>文件概念</li><li>文件名</li><li>文件类型</li><li>文件缓冲区</li><li>文件指针</li><li>文件的打开和关闭</li><li>文件的顺序读写</li><li>文件的随机读写</li><li>文件结束的判定</li></ul><h3 id="文件概念"><a href="#文件概念" class="headerlink" title="文件概念"></a>文件概念</h3><p>磁盘上的文件是文件。</p><p>但是在程序设计中，我们一般谈的文件有两种：程序文件、数据文件</p><h4 id="程序文件"><a href="#程序文件" class="headerlink" title="程序文件"></a>程序文件</h4><p>​                包括源程序文件（后缀为.c）,目标文件（windows环境后缀为.obj）,可执行程序（windows环境后缀为.exe）。</p><h4 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h4><p>​                文件的内容不一定是程序，而是程序运行时读写的数据，比如程序运行需要从中读取数据的文件，或者输出内容的文件。</p><h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><p>一个文件要有一个唯一的文件标识，以便用户识别和引用。</p><p>文件名包含3部分：文件路径+文件名主干+文件后缀</p><p>例如：<code> c:\code\test.txt</code></p><p><font style="color:lightskyblue;">为了方便起见，文件标识常被称为文件名。</font></p><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><p>根据数据的组织形式，数据文件被称为文本文件或者二进制文件。</p><p>数据在内存中以二进制的形式存储，如果不加转换的输出到外存，就是二进制文件。</p><h4 id="数据在内存中的存储方式"><a href="#数据在内存中的存储方式" class="headerlink" title="数据在内存中的存储方式"></a>数据在内存中的存储方式</h4><p><font style="color:deepskyblue;">字符一律以ASCII形式存储，数值型数据既可以用ASCII形式存储，也可以使用二进制形式存储。</font></p><p>如有整数10000，如果以ASCII码的形式输出到磁盘，则磁盘中占用5个字节（每个字符一个字节），而二进制形式输出，则在磁盘上只占4个字节（VS2013测试）。</p><p><img src="https://s1.imagehub.cc/images/2021/05/09/C.jpg" alt="C.jpg" loading="lazy"></p><p><strong>测试代码：</strong></p><p>⚠️<font style="color:orange;">需在同一C工程文件夹下</font></p><p>建立<code>test.txt</code>和<code>QA8.c</code>2个文件</p><p><code>QA8.c</code>代码</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//w-读权限 b-二进制写入</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//二进制的形式写到文件中</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>🔸如果未建立<code>test.txt</code>文件,则会自动创建一个</p><p><a href="https://www.imagehub.cc/image/Q5yZv"><img src="https://s1.imagehub.cc/images/2021/05/09/eefeb1d54cdfb0196b5509c7b963eefd.png" alt="eefeb1d54cdfb0196b5509c7b963eefd.md.png" loading="lazy"></a></p><h3 id="文件缓冲区"><a href="#文件缓冲区" class="headerlink" title="文件缓冲区"></a>文件缓冲区</h3><p>ANSIC 标准采用“缓冲文件系统”处理的数据文件的，所谓缓冲文件系统是指系统自动地在内存中为程序中每一个正在使用的文件开辟一块“文件缓冲区”。</p><p>从内存向磁盘输出数据会先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘上。如果从磁盘向计算机读入数据，则从磁盘文件中读取数据输入到内存缓冲区（充满缓冲区），然后再从缓冲区逐个地将数据送到程序数据区（程序变量等）。</p><p><font style="color:skyblue;">缓冲区的大小根据C编译系统决定的。</font></p><p><img src="https://s1.imagehub.cc/images/2021/05/09/C-.jpg" alt="C-.jpg" loading="lazy"></p><h3 id="文件指针"><a href="#文件指针" class="headerlink" title="文件指针"></a>文件指针</h3><p>缓冲文件系统中，关键的概念是“文件类型指针”，简称“文件指针”。</p><p>每个被使用的文件都在内存中开辟了一个相应的文件信息区，用来存放文件的相关信息（如文件的名字，文件状态及文件当前的位置等）。这些信息是保存在一个结构体变量中的。该结构体类型是有系统声明的，取名<code>FILE</code>.</p><p>VS编译环境提供的<code>stdio.h </code>头文件中有以下的<code>FILE</code>文件类型申明:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">_iobuf</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>_ptr<span class="token punctuation">;</span><span class="token keyword">int</span> _cnt<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>_base<span class="token punctuation">;</span><span class="token keyword">int</span> _flag<span class="token punctuation">;</span><span class="token keyword">int</span> _file<span class="token punctuation">;</span><span class="token keyword">int</span> _charbuf<span class="token punctuation">;</span><span class="token keyword">int</span> _bufsiz<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>_tmpfname<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_iobuf</span> FILE<span class="token punctuation">;</span></code></pre><p>不同的C编译器的FILE类型包含的内容不完全相同，但是大同小异。</p><p>每当打开一个文件的时候，系统会根据文件的情况自动创建一个FILE结构的变量，并填充其中的信息，使用者不必关心细节。</p><p><font style="color:deepskyblue;">一般都是通过一个FILE的指针来维护这个FILE结构的变量，这样使用起来更加方便。</font></p><p>下面我们可以创建一个FILE*的指针变量:</p><pre class="language-c" data-language="c"><code class="language-c">FILE<span class="token operator">*</span> pf<span class="token punctuation">;</span><span class="token comment">//文件指针变量</span></code></pre><p>定义pf是一个指向FILE类型数据的指针变量。可以使pf指向某个文件的文件信息区（是一个结构体变量）。通过该文件信息区中的信息就能够访问该文件。<font style="color:lightskyblue;">即，通过文件指针变量能够找到与它关联的文件。</font></p><p><img src="https://s1.imagehub.cc/images/2021/05/10/C.jpg" alt="C.jpg" loading="lazy"></p><h3 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h3><p>文件在读写之前应该先<font style="color:skyblue;font-size:18px;">打开文件</font>，在使用结束之后应该<font style="color:skyblue;font-size:18px;">关闭文件</font>。</p><p>在编写程序的时候，在打开文件的同时，都会返回一个FILE*的指针变量指向该文件，也相当于建立了指针和文件的关系。</p><p>ANSIC 规定使用fopen函数来打开文件，fclose来关闭文件。</p><pre class="language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span> <span class="token function">fopen</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> mode <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">fclose</span> <span class="token punctuation">(</span> FILE <span class="token operator">*</span> stream <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="打开方式表："><a href="#打开方式表：" class="headerlink" title="打开方式表："></a>打开方式表：</h5><table><thead><tr><th><strong>文件使用方式</strong></th><th><strong>含义</strong></th><th><strong>如果指定文件不存在</strong></th></tr></thead><tbody><tr><td>“r”（只读）</td><td>为了输入数据，打开一个已经存在的文本文件</td><td>出错</td></tr><tr><td>“w”（只写）</td><td>为了输出数据，打开一个文本文件</td><td>建立一个新的文件</td></tr><tr><td>“a”（追加）</td><td>向文本文件尾添加数据</td><td>出错</td></tr><tr><td>“rb”（只读）</td><td>为了输入数据，打开一个二进制文件</td><td>出错</td></tr><tr><td>“wb”（只写）</td><td>为了输出数据，打开一个二进制文件</td><td>建立一个新的文件</td></tr><tr><td>“ab”（追加）</td><td>向一个二进制文件尾添加数据</td><td>出错</td></tr><tr><td>“r+”（读写）</td><td>为了读和写，打开一个文本文件</td><td>出错</td></tr><tr><td>“w+”（读写）</td><td>为了读和写，建议一个新的文件</td><td>建立一个新的文件</td></tr><tr><td>“a+”（读写）</td><td>打开一个文件，在文件尾进行读写</td><td>建立一个新的文件</td></tr><tr><td>“rb+”（读写）</td><td>为了读和写打开一个二进制文件</td><td>出错</td></tr><tr><td>“wb+”（读写）</td><td>为了读和写，新建一个新的二进制文件</td><td>建立一个新的文件</td></tr><tr><td>“ab+”（读写）</td><td>打开一个二进制文件，在文件尾进行读和写</td><td>建立一个新的文件</td></tr></tbody></table><h5 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打开文件test.txt</span><span class="token comment">//相对路径</span><span class="token comment">//.. 表示上一级路径</span><span class="token comment">//.  表示当前路径</span><span class="token comment">//fopen("../../test.txt", "r")</span><span class="token comment">//fopen("test.txt", "r");</span><span class="token comment">//绝对路径的写法,\\防止转义</span><span class="token comment">//fopen("D:\\2021_C\\test_5_6\\test.txt", "r");</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打开成功</span><span class="token comment">//写文件,创建新文件(即使存在),内容清空</span><span class="token comment">//关闭文件</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="文件的顺序读写"><a href="#文件的顺序读写" class="headerlink" title="文件的顺序读写"></a>文件的顺序读写</h3><table><thead><tr><th><strong>功能</strong></th><th><strong>函数名</strong></th><th><strong>适用于</strong></th></tr></thead><tbody><tr><td>字符输入函数</td><td>fgetc</td><td>所有输入流</td></tr><tr><td>字符输出函数</td><td>fputc</td><td>所有输出流</td></tr><tr><td>文本行输入函数</td><td>fgets</td><td>所有输入流</td></tr><tr><td>文本行输出函数</td><td>fputs</td><td>所有输出流</td></tr><tr><td>格式化输入函数</td><td>fscanf</td><td>所有输入流</td></tr><tr><td>格式化输出函数</td><td>fprintf</td><td>所有输出流</td></tr><tr><td>二进制输入</td><td>fread</td><td>文件</td></tr><tr><td>二进制输出</td><td>fwrite</td><td>文件</td></tr></tbody></table><h5 id="写文件-单字符"><a href="#写文件-单字符" class="headerlink" title="写文件 单字符"></a><strong>写文件 单字符</strong></h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pfWrite <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pfWrite <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//写文件</span><span class="token function">fputc</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> pfWrite<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputc</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> pfWrite<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputc</span><span class="token punctuation">(</span><span class="token string">'v'</span><span class="token punctuation">,</span> pfWrite<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputc</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">,</span> pfWrite<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span><span class="token function">fclose</span><span class="token punctuation">(</span>pfWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>pfWrite <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//test.txt文件被写入love</span></code></pre><h5 id="读文件-单字符"><a href="#读文件-单字符" class="headerlink" title="读文件 单字符"></a><strong>读文件 单字符</strong></h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pfRead <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pfRead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//读文件</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pfRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//l</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pfRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//o</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pfRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//v</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pfRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//e</span><span class="token comment">//关闭文件</span><span class="token function">fclose</span><span class="token punctuation">(</span>pfRead<span class="token punctuation">)</span><span class="token punctuation">;</span>pfRead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出test.txt文件的love</span></code></pre><h5 id="输入输出-单字符"><a href="#输入输出-单字符" class="headerlink" title="输入输出 单字符"></a>输入输出 单字符</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//从键盘输入</span><span class="token comment">//输出到屏幕.</span><span class="token comment">//键盘&amp;屏幕都是外部设备</span><span class="token comment">//键盘-标准输入设备- stdin</span><span class="token comment">//屏幕-标准输出设备- stdout</span><span class="token comment">//是一个程序默认打开的两个流设备</span><span class="token comment">//stdin FILE*</span><span class="token comment">//stdout FILE*</span><span class="token comment">//stderr FILE*</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个字符:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputc</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="文本行输入函数"><a href="#文本行输入函数" class="headerlink" title="文本行输入函数"></a>文本行输入函数</h5><blockquote><p>读取一行</p></blockquote><p><code>test.txt</code></p><pre class="language-none"><code class="language-none">love undefined&#x2F;&#x2F;或者&#x2F;&#x2F;love &#x2F;&#x2F;undefined&#x2F;&#x2F;看看输出结果有什么不同</code></pre><p><code>test.c</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//读文件</span><span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//printf("%s", buf);</span><span class="token function">puts</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//puts对文本内容换行保留,并有自己的换行</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="文本行输出函数"><a href="#文本行输出函数" class="headerlink" title="文本行输出函数"></a>文本行输出函数</h5><blockquote><p>写入一行</p></blockquote><p><font style="color:orange;"><code>test.c</code>文件记得内容为空用作测试</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//写文件</span><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"hello\n"</span><span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"world\n"</span><span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//fputs不会有换行,如果需要自行加入\n</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="键盘读取-屏幕输出"><a href="#键盘读取-屏幕输出" class="headerlink" title="键盘读取,屏幕输出"></a>键盘读取,屏幕输出</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//从键盘读取一行文本信息</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//fgets(buf, 1024, stdin);//从标准输入流读取</span><span class="token comment">//fputs(buf, stdout);//输出到标准输出流</span><span class="token comment">//等价于上面注释写法</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一行字符:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="格式化输出函数-fprintf"><a href="#格式化输出函数-fprintf" class="headerlink" title="格式化输出函数 fprintf"></a>格式化输出函数 fprintf</h5><div class="info"><blockquote><p>  需要test.txt作为测试文件,文本内容为空便于观察程序运行结果</p></blockquote></div><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">float</span> score<span class="token punctuation">;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3.14f</span><span class="token punctuation">,</span> <span class="token string">"bit"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//格式化的形式写文件</span><span class="token function">fprintf</span><span class="token punctuation">(</span>pf<span class="token punctuation">,</span> <span class="token string">"%d %f %s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>n<span class="token punctuation">,</span> s<span class="token punctuation">.</span>score<span class="token punctuation">,</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="格式化输入函数-fscanf"><a href="#格式化输入函数-fscanf" class="headerlink" title="格式化输入函数 fscanf"></a>格式化输入函数 fscanf</h5><div class="warning"><blockquote><p>  不要清空上面test.txt文本内容,便于观察程序运行结果</p> <p>  或者自行写入数据类型匹配的结构体数据,观察程序运行结果</p></blockquote></div><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">float</span> score<span class="token punctuation">;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//格式化的输入数据</span><span class="token function">fscanf</span><span class="token punctuation">(</span>pf<span class="token punctuation">,</span> <span class="token string">"%d %f %s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %f %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>n<span class="token punctuation">,</span> s<span class="token punctuation">.</span>score<span class="token punctuation">,</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="屏幕输出"><a href="#屏幕输出" class="headerlink" title="屏幕输出"></a>屏幕输出</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">float</span> score<span class="token punctuation">;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请键盘输入相应数据:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fscanf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token string">"%d %f %s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"%d %.2f %s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>n<span class="token punctuation">,</span> s<span class="token punctuation">.</span>score<span class="token punctuation">,</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//%.2f -- 保留2小数位</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="对比一组函数："><a href="#对比一组函数：" class="headerlink" title="对比一组函数："></a>对比一组函数：</h5><div class="info"><blockquote><p>scanf/fscanf/sscanf  </p>  <p>printf/fprintf/sprintf</p></blockquote></div><p><code>scanf/printf</code>是针对标准输入流/标准输出流的格式化输入/输出语句</p><p><code>fscanf/fprintf </code>是针对所有输入流/所有输出流的格式化输入/输出语句</p><p><code>sscanf</code>是从字符串中读取格式化的数据</p><p><code>sprintf</code>是把格式化数据输出成(存储到)字符串</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">float</span> score<span class="token punctuation">;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3.14f</span><span class="token punctuation">,</span> <span class="token string">"abcdef"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//把格式化的数据转换成字符串存储到buf</span><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"%d %f %s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>n<span class="token punctuation">,</span> s<span class="token punctuation">.</span>score<span class="token punctuation">,</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//printf("%s\n", buf);</span><span class="token comment">//从buf中读取格式化的数据到tmp中</span><span class="token function">sscanf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"%d %f %s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %f %s\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>n<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>score<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="二进制输入-fread"><a href="#二进制输入-fread" class="headerlink" title="二进制输入 fread"></a>二进制输入 fread</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">55.6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//二进制的形式写文件</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//查看test.txt文本发现写入了张三等数据,有乱码</span></code></pre><h5 id="二进制输出-fwrite"><a href="#二进制输出-fwrite" class="headerlink" title="二进制输出 fwrite"></a>二进制输出 fwrite</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//struct S s = &#123; "张三", 20, 55.6 &#125;;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//二进制的形式读文件</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d %lf\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>name<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>age<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="文件的随机读写"><a href="#文件的随机读写" class="headerlink" title="文件的随机读写"></a>文件的随机读写</h3><h4 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a>fseek</h4><blockquote><p>根据文件指针的位置和偏移量来定位文件指针</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fseek</span> <span class="token punctuation">(</span> FILE <span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> origin <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li><strong>stream</strong> – 这是指向 FILE 对象的指针，该 FILE 对象标识了流。</li><li><strong>offset</strong> – 这是相对 whence 的偏移量，以字节为单位。</li><li><strong>origin</strong> – 这是表示开始添加偏移 offset 的位置。它一般指定为下列常量之一：</li></ul><table><thead><tr><th align="left">常量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">SEEK_SET</td><td align="left">文件的开头</td></tr><tr><td align="left">SEEK_CUR</td><td align="left">文件指针的当前位置</td></tr><tr><td align="left">SEEK_END</td><td align="left">文件的末尾</td></tr></tbody></table><p><code>test.txt</code></p><pre class="language-c" data-language="c"><code class="language-c">abcdef</code></pre><p><code>fseek_test.c</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//1.定位文件指针</span><span class="token function">fseek</span><span class="token punctuation">(</span>pf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.读取文件</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//1.定位文件指针</span><span class="token function">fseek</span><span class="token punctuation">(</span>pf<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.读取文件</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:orange;">负号前移，正号后移。</font></p><h4 id="ftell"><a href="#ftell" class="headerlink" title="ftell"></a>ftell</h4><div class="success"><blockquote><p>返回文件指针相对于起始位置的偏移量</p></blockquote></div><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">ftell</span> <span class="token punctuation">(</span> FILE <span class="token operator">*</span> stream <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//1.定位文件指针</span><span class="token function">fseek</span><span class="token punctuation">(</span>pf<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//e</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="rewind"><a href="#rewind" class="headerlink" title="rewind"></a>rewind</h4><div class="info"><blockquote><p>让文件指针的位置回到文件的起始位置</p></blockquote></div><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rewind</span> <span class="token punctuation">(</span> FILE <span class="token operator">*</span> stream <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//1.定位文件指针</span><span class="token function">fseek</span><span class="token punctuation">(</span>pf<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//e</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rewind</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="文件结束判定"><a href="#文件结束判定" class="headerlink" title="文件结束判定"></a>文件结束判定</h3><h4 id="错误使用的feof"><a href="#错误使用的feof" class="headerlink" title="错误使用的feof"></a><font style="color:red;">错误使用的feof</font></h4><div class="danger"><blockquote><p>牢记：在文件读取过程中，不能用feof函数的返回值直接用来判断文件的是否结束。</p><p>而是应用于当文件读取结束的时候，判断是读取失败结束，还是遇到文件尾结束。</p></blockquote></div><h5 id="✏️-要点"><a href="#✏️-要点" class="headerlink" title="✏️ 要点"></a>✏️ 要点</h5><ol><li>文本文件读取是否结束，判断返回值是否为EOF （fgetc），或者NULL（fgets）<br> 例如：<br> <code>fgetc</code>判断是否为<code>EOF</code>.<br> <code>fgets</code>判断返回值是否为<code>NULL</code>.</li><li>二进制文件的读取结束判断，判断返回值是否小于实际要读的个数。<br>例如：<br><code>fread</code>判断返回值是否小于实际要读的个数。</li></ol><p><strong>EOF</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//EOF</span><span class="token comment">//feof();//EOF - end of file - 文件结束标志</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="正确使用"><a href="#正确使用" class="headerlink" title="正确使用"></a><font style="color:#3CB371;">正确使用</font></h4><h5 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h5><h6 id="perro"><a href="#perro" class="headerlink" title="perro"></a>perro</h6><blockquote><p>C 库函数 <strong>void perror(const char *str)</strong> 把一个描述性错误消息输出到标准错误 stderr。首先输出字符串 <strong>str</strong>，后跟一个冒号，然后是一个空格。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//strerror - 把错误码对应的错误信息的字符串地址返回</span><span class="token comment">//printf("%s\n", strerror(errno));</span><span class="token comment">//perror</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test2.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open file test2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自定义错误描述</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//读文件</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="完整案例"><a href="#完整案例" class="headerlink" title="完整案例"></a>完整案例</h6><p>例1</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> c<span class="token punctuation">;</span> <span class="token comment">// 注意：int，非char，要求处理EOF</span>FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断文件是否存在</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"File opening failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> EXIT_FAILURE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//fgetc 当读取失败的时候或者遇到文件结束的时候，都会返回EOF</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token comment">// 标准C I/O读取文件循环</span><span class="token punctuation">&#123;</span><span class="token function">putchar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断是什么原因结束的</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ferror</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"I/O error when reading"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"End of file reached successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>例2</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open file test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//读文件</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ferror</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"end of file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> SIZE <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> a<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> ret_code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.bin"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须用二进制模式</span><span class="token function">fwrite</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写 double 的数组</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.bin"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读 double 的数组</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret_code <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error reading test.bin: unexpected end of file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ferror</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Error reading test.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="🌐函数文档参考链接："><a href="#🌐函数文档参考链接：" class="headerlink" title="🌐函数文档参考链接："></a>🌐函数文档参考链接：</h3><p><a href="https://zh.cppreference.com/w/c">https://zh.cppreference.com/w/c</a></p><h3 id="C-错误处理"><a href="#C-错误处理" class="headerlink" title="C 错误处理"></a>C 错误处理</h3><blockquote><p>C 或 UNIX 函数调用返回 1 或 NULL，同时会设置一个错误代码 <strong>errno</strong>，该错误代码是全局变量，表示在函数调用期间发生了错误。可以在 errno.h 头文件中找到各种各样的错误代码。</p><p>所以，C 程序员可以通过检查返回值，然后根据返回值决定采取哪种适当的动作。开发人员应该在程序初始化时，把 errno 设置为 0，这是一种良好的编程习惯。0 值表示程序中没有错误。</p></blockquote><h4 id="errno、perror-和-strerror"><a href="#errno、perror-和-strerror" class="headerlink" title="errno、perror() 和 strerror()"></a>errno、perror() 和 strerror()</h4><p>C 语言提供了 <strong>perror()</strong> 和 <strong>strerror()</strong> 函数来显示与 <strong>errno</strong> 相关的文本消息。</p><ul><li><strong>perror()</strong> 函数显示您传给它的字符串，后跟一个冒号、一个空格和当前 errno 值的文本表示形式。</li><li><strong>strerror()</strong> 函数，返回一个指针，指针指向当前 errno 值的文本表示形式。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span> <span class="token keyword">extern</span> <span class="token keyword">int</span> errno <span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   FILE <span class="token operator">*</span> pf<span class="token punctuation">;</span>   <span class="token keyword">int</span> errnum<span class="token punctuation">;</span>   pf <span class="token operator">=</span> <span class="token function">fopen</span> <span class="token punctuation">(</span><span class="token string">"unexist.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      errnum <span class="token operator">=</span> errno<span class="token punctuation">;</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"错误号: %d\n"</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"通过 perror 输出错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"打开文件错误: %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span> errnum <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span>   <span class="token punctuation">&#123;</span>      <span class="token function">fclose</span> <span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">错误号: 2通过 perror 输出错误: No such file or directory打开文件错误: No such file or directory</code></pre><h4 id="ferror"><a href="#ferror" class="headerlink" title="ferror()"></a>ferror()</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ferror</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span></code></pre><h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><p>stream – 这是指向 FILE 对象的指针，该 FILE 对象标识了流。</p><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>如果设置了与流关联的错误标识符，该函数返回一个非零值，否则返回一个零值。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>   <span class="token keyword">char</span> c<span class="token punctuation">;</span>   fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">ferror</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"读取文件：file.txt 时发生错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">clearerr</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">ferror</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"读取文件：file.txt 时发生错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>假设我们有一个文本文件 <strong>file.txt</strong>，它是一个空文件。让我们编译并运行上面的程序，因为我们试图读取一个以只写模式打开的文件，这将产生以下结果。</p><pre class="language-none"><code class="language-none">读取文件：file.txt 时发生错误</code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C自定义类型进阶</title>
      <link href="posts/5e7f66bc/"/>
      <url>posts/5e7f66bc/</url>
      
        <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><ul><li>结构体类型的声明</li><li>结构的自引用</li><li>结构体变量的定义和初始化</li><li>结构体内存对齐</li><li>结构体传参</li><li>结构体实现位段（位段的填充&amp;可移植性）</li></ul><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><ul><li>枚举类型的定义</li><li>枚举的优点</li><li>枚举的使用</li></ul><h4 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h4><ul><li>联合类型的定义</li><li>联合的特点</li><li>联合大小的计算</li></ul><hr><h3 id="结构体-1"><a href="#结构体-1" class="headerlink" title="结构体"></a>结构体</h3><h4 id="结构的基础概念"><a href="#结构的基础概念" class="headerlink" title="结构的基础概念"></a>结构的基础概念</h4><blockquote><p>结构是一些值的集合，这些值称为成员变量。结构的每个成员可以是不同类型的变量。</p></blockquote><h4 id="结构的声明"><a href="#结构的声明" class="headerlink" title="结构的声明"></a>结构的声明</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">tag</span><span class="token punctuation">&#123;</span>member<span class="token operator">-</span>list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>variable<span class="token operator">-</span>list<span class="token punctuation">;</span></code></pre><p>定义一个学生：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//名字</span><span class="token keyword">char</span> tele<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//电话</span><span class="token keyword">char</span> sex<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//性别</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> s4<span class="token punctuation">,</span>s5<span class="token punctuation">,</span>s6<span class="token punctuation">;</span><span class="token comment">//全局变量</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s3<span class="token punctuation">;</span><span class="token comment">//全局变量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//创建的结构体变量</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s1<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s2<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="特殊声明"><a href="#特殊声明" class="headerlink" title="特殊声明"></a><font style="color:tomato;">特殊声明</font></h5><p>在声明结构的时候，可以不完全的声明。</p><div class="warning"><blockquote><p>不建议这么使用</p></blockquote></div><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//匿名结构体类型</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">char</span> b<span class="token punctuation">;</span><span class="token keyword">float</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>x<span class="token punctuation">;</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">char</span> b<span class="token punctuation">;</span><span class="token keyword">float</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span></code></pre><p><font style="color:skyblue;">上面的两个结构在声明的时候省略掉了结构体标签（tag）。</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>sa<span class="token punctuation">;</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span> psa<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psa <span class="token operator">=</span> <span class="token operator">&amp;</span>sa<span class="token punctuation">;</span><span class="token comment">//编译器会给出警告</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>⚠️<font style="color:red;">编译器会把上面的两个声明当成完全不同的两个类型。 所以是非法的。</font></p><h4 id="结构的自引用"><a href="#结构的自引用" class="headerlink" title="结构的自引用"></a>结构的自引用</h4><p>在结构中包含一个类型为该结构本身的成员</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//代码1</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//不可行</span><span class="token comment">//sizeof(struct Node)大小未知</span></code></pre><p>正确的自引用方式：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//代码2</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token comment">//4</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token comment">//4/8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>注意：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//代码3</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> data<span class="token punctuation">;</span>Node<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node<span class="token punctuation">;</span><span class="token comment">//不可行</span><span class="token comment">//解决方案：</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psa <span class="token operator">=</span> <span class="token operator">&amp;</span>sa<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> d<span class="token punctuation">;</span><span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token comment">//4</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token comment">//4/8</span><span class="token punctuation">&#125;</span>Node<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> n1<span class="token punctuation">;</span>Node n2<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="结构体变量的定义和初始化"><a href="#结构体变量的定义和初始化" class="headerlink" title="结构体变量的定义和初始化"></a>结构体变量的定义和初始化</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">T</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token keyword">short</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">T</span> st<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">double</span> d<span class="token punctuation">;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//struct S s = &#123;'c', 100, 3.14, "hello bit"&#125;;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">55.6</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">"hello bit"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c %d %lf %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>c<span class="token punctuation">,</span> s<span class="token punctuation">.</span>a<span class="token punctuation">,</span> s<span class="token punctuation">.</span>d<span class="token punctuation">,</span> s<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>st<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Point</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>p1<span class="token punctuation">;</span> <span class="token comment">//声明类型的同时定义变量p1</span><span class="token keyword">struct</span> <span class="token class-name">Point</span> p2<span class="token punctuation">;</span> <span class="token comment">//定义结构体变量p2</span><span class="token comment">//初始化：定义变量的同时赋初值。</span><span class="token keyword">struct</span> <span class="token class-name">Point</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> <span class="token comment">//类型声明</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//名字</span><span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">//年龄</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Point</span> p<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>n1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//结构体嵌套初始化</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> n2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//结构体嵌套初始化</span></code></pre><h4 id="结构体内存对齐"><a href="#结构体内存对齐" class="headerlink" title="结构体内存对齐"></a>结构体内存对齐</h4><p>计算结构体的大小。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S1</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c1<span class="token punctuation">;</span><span class="token comment">//对齐数1</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">//对齐数4 / 8 = 4,前面浪费3,偏移量为1+3+4=8</span><span class="token keyword">char</span> c2<span class="token punctuation">;</span><span class="token comment">//对齐数1 / 8 = 1,偏移量为8+1=9</span>  <span class="token comment">//此时偏移合计为9,但不是成员最大对齐数(4)的倍数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S2</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c1<span class="token punctuation">;</span><span class="token comment">//1</span><span class="token keyword">char</span> c2<span class="token punctuation">;</span><span class="token comment">//1</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">//偏移起始为4,前面浪费空余2字节,对齐数4 / 8 = 4</span>  <span class="token comment">//对齐数共计为8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S3</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> d<span class="token punctuation">;</span><span class="token comment">//8</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token comment">//1 / 8 = 1,对齐数为1,到这里偏移为9</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//4 / 8 = 4,对齐数为4,到这里偏移为12</span>  <span class="token comment">//对齐数12+4=16</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S4</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token comment">//1</span><span class="token keyword">struct</span> <span class="token class-name">S3</span> s3<span class="token punctuation">;</span><span class="token comment">//s3偏移量最大为8,这里8的倍数就是16,前面浪费7个字节,偏移量8+18=24</span><span class="token keyword">double</span> d<span class="token punctuation">;</span><span class="token comment">// 8 /8 = 8</span>  <span class="token comment">//结构体的整体大小就是所有最大对齐数（含嵌套结构体的对齐数）的整数倍。</span>  <span class="token comment">//合计32</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">S1</span> s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">//结构体总大小为最大对齐数（每个成员变量都有一个对齐数）的整数倍=>4*3=12</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//12</span><span class="token keyword">struct</span> <span class="token class-name">S2</span> s2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8</span><span class="token comment">//struct S3 s3;</span><span class="token comment">//printf("%d\n", sizeof(s3));</span><span class="token comment">/*struct S4 s4;printf("%d\n", sizeof(s4));*/</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="结构体的对齐规则："><a href="#结构体的对齐规则：" class="headerlink" title="结构体的对齐规则："></a>结构体的对齐规则：</h5><blockquote><ol><li><p>第一个成员在与结构体变量偏移量为0的地址处。</p></li><li><p>其他成员变量要对齐到某个数字（对齐数）的整数倍的地址处。</p></li></ol><p>  对齐数 = 编译器默认的一个对齐数 与 该成员大小的较小值。</p><ul><li>VS中默认的值为8<br>Linux中的默认值为4(官方说法是没有)</li></ul><ol start="3"><li>结构体总大小为最大对齐数（每个成员变量都有一个对齐数）的整数倍。</li><li>如果嵌套了结构体的情况，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是所<br>有最大对齐数（含嵌套结构体的对齐数）的整数倍。</li></ol></blockquote><h5 id="Q-amp-A-为什么存在内存对齐"><a href="#Q-amp-A-为什么存在内存对齐" class="headerlink" title="Q&amp;A 为什么存在内存对齐?"></a><font style="color:gold;">Q&amp;A 为什么存在内存对齐?</font></h5><blockquote><ol><li>平台原因(移植原因)： 不是所有的硬件平台都能访问任意地址上的任意数据的；某些硬件平台只能在某些地址<br>处取某些特定类型的数据，否则抛出硬件异常。</li><li>性能原因： 数据结构(尤其是栈)应该尽可能地在自然边界上对齐。 原因在于，为了访问未对齐的内存，处理器<br>需要作两次内存访问；而对齐的内存访问仅需要一次访问。</li></ol></blockquote><p><font style="color:yellowgreen;">结构体的内存对齐是拿空间来换取时间的做法。</font></p><p>在设计结构体的时候，我们既要满足对齐，又要节省空间:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//例如：</span><span class="token keyword">struct</span> <span class="token class-name">S1</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c1<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">char</span> c2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S2</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c1<span class="token punctuation">;</span><span class="token keyword">char</span> c2<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>S1和S2类型的成员一模一样，但是S1和S2所占空间的大小有了一些区别。</p><h5 id="修改默认对齐数"><a href="#修改默认对齐数" class="headerlink" title="修改默认对齐数"></a>修改默认对齐数</h5><p><code>#pragma </code>这个预处理指令，可以改变我们的默认对齐数。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">////设置默认对齐数位4</span><span class="token comment">//#pragma pack(4)</span><span class="token comment">//struct S</span><span class="token comment">//&#123;</span><span class="token comment">//char c1;//1</span><span class="token comment">////3,原1+7+4=12</span><span class="token comment">//double d;//8 4 4</span><span class="token comment">//&#125;;</span><span class="token comment">//#pragma pack()</span><span class="token comment">////取消设置的默认对齐数</span><span class="token comment">//设置默认对齐数位1</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c1<span class="token punctuation">;</span><span class="token comment">//1</span><span class="token comment">//3,原1+7+8=16</span><span class="token keyword">double</span> d<span class="token punctuation">;</span><span class="token comment">//8 4 4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token comment">//取消设置的默认对齐数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>结论：</strong><br>        结构在对齐方式不合适的时候，我么可以自己更改默认对齐数。一般设置2的次方数</p><h5 id="百度笔试题："><a href="#百度笔试题：" class="headerlink" title="百度笔试题："></a>百度笔试题：</h5><div class="info"><blockquote><p>写一个宏，计算结构体中某变量相对于首地址的偏移，并给出说明</p></blockquote></div>考察： offsetof 宏的实现<blockquote><p>求某个结构体的特定成员在结构体里面的偏移量</p><p>C 库宏 <strong>offsetof(type, member-designator)</strong> 会生成一个类型为 <strong>size_t</strong> 的整型常量，它是一个结构成员相对于结构开头的字节偏移量。成员是由 member-designator 给定的，结构的名称是在 type 中给定的。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token function">offsetof</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> member<span class="token operator">-</span>designator<span class="token punctuation">)</span></code></pre><p><strong>参数</strong></p><ul><li>​        type – 这是一个 class 类型，其中，member-designator 是一个有效的成员指示器。</li><li>​        member-designator – 这是一个 class 类型的成员指示器。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">double</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//offsetof();</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>试题解析</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">offsetof</span><span class="token expression"><span class="token punctuation">(</span>data<span class="token punctuation">,</span>member<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-></span>member<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></code></pre><ul><li>先假设结构体的首地址从0开始</li><li>然后将type转换成指针指向它的成员</li><li>然后取这个成员的地址</li><li>然后将其转换为size_t的类型，即可求得它相对于首地址的偏移量</li></ul><h4 id="结构体传参"><a href="#结构体传参" class="headerlink" title="结构体传参"></a>结构体传参</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">double</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token operator">*</span> ps<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ps<span class="token operator">-></span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>ps<span class="token operator">-></span>c <span class="token operator">=</span> <span class="token string">'w'</span><span class="token punctuation">;</span>ps<span class="token operator">-></span>d <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//传值</span><span class="token keyword">void</span> <span class="token function">Print1</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S</span> tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %c %lf\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>a<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>c<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//传址</span><span class="token comment">//const保护外部s地址数据不可更改</span><span class="token keyword">void</span> <span class="token function">Print2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token operator">*</span> ps<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %c %lf\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>a<span class="token punctuation">,</span> ps<span class="token operator">-></span>c<span class="token punctuation">,</span> ps<span class="token operator">-></span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print1</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*s.a = 100;s.c = 'w';s.d = 3.14;printf("%d\n", s.a);*/</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h5><p>🌱上面的print1 和print2 函数哪个好些？</p><p>首选print2函数。 </p><p><strong>原因：</strong></p><blockquote><p>函数传参的时候，参数是需要压栈，会有时间和空间上的系统开销。<br>       如果传递一个结构体对象的时候，结构体过大，参数压栈的的系统开销比较大，所以会导致性能的下降。</p></blockquote><p><font style="color:deepskyblue;">结论： 结构体传参的时候，要传结构体的地址。</font></p><h4 id="位段"><a href="#位段" class="headerlink" title="位段"></a>位段</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><blockquote><p>C语言允许在一个结构体中以位为单位来指定其成员所占内存长度，这种以位为单位的成员称为“位段”或称“位域”( bit field) 。利用位段能够用较少的位数存储数据。</p></blockquote><p>位段的声明和结构是类似的，有两个不同：</p><p>​             1.位段的成员必须是int、unsigned int 或signed int 。<br>​                    2.位段的成员名后边有一个冒号和一个数字。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//位段 - 二进制位</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token comment">//整型int 4字节 32位</span><span class="token comment">//位段后面数字不能大于32</span><span class="token comment">//2+5+10=17位</span><span class="token keyword">int</span> a <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> d <span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//47bit - 6个字节*8 = 48bit</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空间大小8个字节</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="✏️-位段的内存分配"><a href="#✏️-位段的内存分配" class="headerlink" title="✏️ 位段的内存分配"></a>✏️ 位段的内存分配</h5><ol><li>位段的成员可以是int unsigned int signed int 或者是char （属于整形家族）类型</li><li>位段的空间上是按照需要以4个字节（ int ）或者1个字节（ char ）的方式来开辟的。</li><li>位段涉及很多不确定因素，位段是不跨平台的，注重可移植的程序应该避免使用位段。</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> a <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">char</span> b <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">char</span> d <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/05/09/7d425b321680c3efc9f3307322462a67.jpg" alt="7d425b321680c3efc9f3307322462a67.jpg" loading="lazy"></p><h5 id="位段的跨平台问题"><a href="#位段的跨平台问题" class="headerlink" title="位段的跨平台问题"></a><font style="color:orange;">位段的跨平台问题</font></h5><ol><li>int 位段被当成有符号数还是无符号数是不确定的。</li><li>位段中最大位的数目不能确定。（16位机器最大16，32位机器最大32，写成27，在16位机器会出问题。</li><li>位段中的成员在内存中从左向右分配，还是从右向左分配标准尚未定义。</li><li>当一个结构包含两个位段，第二个位段成员比较大，无法容纳于第一个位段剩余的位时，是舍弃剩余的位还是利用，这是不确定的。</li></ol><h5 id="✍总结："><a href="#✍总结：" class="headerlink" title="✍总结："></a>✍总结：</h5><p>跟结构相比，位段可以达到同样的效果，但是可以很好的节省空间，但是有跨平台的问题存在。</p><h3 id="枚举-1"><a href="#枚举-1" class="headerlink" title="枚举"></a>枚举</h3><p>枚举顾名思义就是一一列举。把可能的取值一一列举。</p><details>  <summary>举个🌰</summary> <p>   一周的星期一到星期日是有限的7天，可以一一列举。  </p>   <p>   性别有：男、女、保密，也可以一一列举。  </p>   <p>  月份有12个月，也可以一一列举  </p>   <p> 颜色也可以一一列举。  </p></details><h4 id="枚举类型的定义"><a href="#枚举类型的定义" class="headerlink" title="枚举类型的定义"></a>枚举类型的定义</h4><pre class="language-v" data-language="v"><code class="language-v">enum Day&#x2F;&#x2F;星期&#123;Mon,Tues,Wed,Thur,Fri,Sat,Sun&#125;;enum Sex&#x2F;&#x2F;性别&#123;MALE,FEMALE,SECRET&#125;；enum Color&#x2F;&#x2F;颜色&#123;RED,GREEN,BLUE&#125;;</code></pre><p>以上定义的enum Day ， enum Sex ， enum Color 都是枚举类型。 {}中的内容是枚举类型的可能取值，也叫枚举常量。<br>       这些可能取值都是有值的，<font style="color:skyblue;">默认从0开始，一次递增1，</font>当然在定义的时候也可以赋初值。</p><p> 例如：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">Color</span><span class="token comment">//颜色</span><span class="token punctuation">&#123;</span>RED<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>GREEN<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>BLUE<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="枚举的优点"><a href="#枚举的优点" class="headerlink" title="枚举的优点"></a>枚举的优点</h4><ol><li>增加代码的可读性和可维护性</li><li>和#define定义的标识符比较枚举有类型检查，更加严谨。</li><li>防止了命名污染（封装）</li><li>便于调试</li><li>使用方便，一次可以定义多个常量</li></ol><h4 id="枚举的使用"><a href="#枚举的使用" class="headerlink" title="枚举的使用"></a>枚举的使用</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//枚举类型</span><span class="token comment">//enum Sex</span><span class="token comment">//&#123;</span><span class="token comment">////枚举的可能取值-常量</span><span class="token comment">//MALE,</span><span class="token comment">//FEMALE = 9,</span><span class="token comment">//SECRET</span><span class="token comment">//&#125;;</span><span class="token comment">//</span><span class="token comment">//enum Color</span><span class="token comment">//&#123;</span><span class="token comment">//RED,//0</span><span class="token comment">//GREEN,//1</span><span class="token comment">//BLUE//2</span><span class="token comment">//&#125;;</span><span class="token comment">//</span><span class="token comment">//c语言的源代码---->可执行程序</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RED</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GREEN</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLUE</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//enum Sex s = MALE;</span><span class="token comment">//enum Color c = 2;//int </span><span class="token keyword">int</span> color <span class="token operator">=</span> RED<span class="token punctuation">;</span><span class="token comment">//printf("%d %d %d\n", RED, GREEN, BLUE);</span><span class="token comment">//printf("%d %d %d\n", MALE, FEMALE, SECRET);</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="枚举大小"><a href="#枚举大小" class="headerlink" title="枚举大小"></a>枚举大小</h4><blockquote><p>主流编译器如：gcc、vc、MinGW-gcc等枚举变量均为4字节。少量编译器会根据枚举个数做优化，如只有3个枚举值时，size可能为1。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">enum</span> <span class="token class-name">Sex</span><span class="token punctuation">&#123;</span>MALE<span class="token punctuation">,</span>FEMALE<span class="token punctuation">,</span>SECRET<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">enum</span> <span class="token class-name">Sex</span> s <span class="token operator">=</span> MALE<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="联合（共用体）"><a href="#联合（共用体）" class="headerlink" title="联合（共用体）"></a>联合（共用体）</h3><h4 id="联合类型的定义"><a href="#联合类型的定义" class="headerlink" title="联合类型的定义"></a>联合类型的定义</h4><p>联合也是一种特殊的自定义类型 这种类型定义的变量也包含一系列的成员，特征是这些成员公用同一块空间（所以联合也叫共用体）。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//联合类型的声明</span><span class="token keyword">union</span> Un<span class="token punctuation">&#123;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//联合变量的定义</span><span class="token keyword">union</span> Un un<span class="token punctuation">;</span><span class="token comment">//计算连个变量的大小</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>un<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="联合的特点"><a href="#联合的特点" class="headerlink" title="联合的特点"></a>联合的特点</h4><blockquote><p>联合的成员是共用同一块内存空间的，这样一个联合变量的大小，至少是最大成员的大小（因为联合至少得有能力保存最大的那个成员）。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">union</span> Un<span class="token punctuation">&#123;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token comment">//1</span><span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">//4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//5个字节</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">union</span> Un u<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/05/09/ffbbb3f41a28459c5d07338808bfd90e.png" alt="ffbbb3f41a28459c5d07338808bfd90e.png" loading="lazy">_联合体示例运行结果截图</p><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p>判断当前计算机的大小端存储</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//int check_sys()</span><span class="token comment">//&#123;</span><span class="token comment">//int a = 1;</span><span class="token comment">////返回1，表示小端</span><span class="token comment">////返回0，表示大端</span><span class="token comment">//return *(char*)&amp;a;</span><span class="token comment">//&#125;</span><span class="token keyword">int</span> <span class="token function">check_sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">union</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>u<span class="token punctuation">;</span>u<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token comment">//返回1，表示小端</span><span class="token comment">//返回0，表示大端</span><span class="token keyword">return</span> u<span class="token punctuation">.</span>c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//int a = 0x11223344;</span><span class="token comment">//低地址-------------------->高地址</span><span class="token comment">//....[][][][][11][22][33][44][][][][][][][]...  大端字节序存储模式</span><span class="token comment">//....[][][][][44][33][22][11][][][][][][][]...  小端字节序存储模式</span><span class="token comment">//讨论一个数据，放在内存中的存放的字节顺序</span><span class="token comment">//大小端字节序问题</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">check_sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"小端\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"大端\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>                                                                                                         </code></pre><h4 id="联合大小的计算"><a href="#联合大小的计算" class="headerlink" title="联合大小的计算"></a>联合大小的计算</h4><ul><li>联合的大小至少是最大成员的大小。</li><li>当最大成员大小不是最大对齐数的整数倍的时候，就要对齐到<font style="color:tomato;">最大对齐数的整数倍</font>。</li></ul><p>代码🌰</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">union</span> Un<span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">//4字节 8 4</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//5字节 1 8 1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">union</span> Un u<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C字符函数和字符串函数</title>
      <link href="posts/50f2aeca/"/>
      <url>posts/50f2aeca/</url>
      
        <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><p><strong>求字符串长度</strong><br>strlen<br><strong>长度不受限制的字符串函数</strong><br>strcpy<br>strcat<br>strcmp<br><strong>长度受限制的字符串函数介绍</strong><br>strncpy<br>strncat<br>strncmp<br><strong>字符串查找</strong><br>strstr<br>strtok<br><strong>错误信息报告</strong><br>strerror<br><strong>字符操作</strong><br><strong>内存操作函数</strong><br>memcpy<br>memmove<br>memset<br>memcmp</p><blockquote><p>C语言中对字符和字符串的处理很是频繁，但是C语言本身是没有<code>字符串类型</code>的，字符串通常放在<code>常量字符串</code>中<br>或者字符数组中。 字符串常量适用于那些对它<code>不做修改</code>的字符串函数.</p></blockquote><hr><h3 id="字符串类函数"><a href="#字符串类函数" class="headerlink" title="字符串类函数"></a>字符串类函数</h3><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">strlen</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>​       字符串以’\0’ 作为结束标志，strlen函数返回的是在字符串中’\0’ 前面出现的字符个数（不包含’\0’ )。</li><li>​       参数指向的字符串必须要以’\0’ 结束。</li><li>​       注意函数的返回值为size_t，是无符号的（易错）</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token keyword">int</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token comment">//while(*str)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>str<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//int len = strlen("abcdef");//6</span><span class="token comment">//char arr[] = &#123; 'a', 'b', 'c', 'd', 'e', 'f' ,'\0'&#125;;//6</span><span class="token comment">////错误示范</span><span class="token comment">//char arr[] = &#123; 'a', 'b', 'c', 'd', 'e', 'f' &#125;;//19--随机值</span><span class="token comment">//int len = strlen(arr);//19</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//使用size_t  而不使用int会在使用上带来困难</span><span class="token class-name">size_t</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token comment">//while(*str)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>str<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//size_t == unsigned int</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//3     -     6 =      -3(无符号补码大于0)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">my_strlen</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"大于0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"小于0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h4><blockquote><p>字符串复制</p><p>strcpy把含有<a href="https://baike.baidu.com/item/'/0'/9931274">‘\0’</a>结束符的字符串复制到另一个<a href="https://baike.baidu.com/item/%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4">地址空间</a></p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> destination<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>Copies the C string pointed by source into the array pointed by destination, including the terminating null character (and stopping at that point)</li><li>源字符串必须以’\0’ 结束。</li><li>会将源字符串中的’\0’ 拷贝到目标空间。</li><li>目标空间必须足够大，以确保能存放源字符串。</li><li>目标空间必须可变。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">my_strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">assert</span><span class="token punctuation">(</span>dest <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>src <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> ret <span class="token operator">=</span> dest<span class="token punctuation">;</span><span class="token comment">//拷贝src指向的字符串到dest指向的空间，包含'\0'</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>dest<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//返回目的空间的起始地址</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdefghi"</span><span class="token punctuation">;</span><span class="token comment">//错误示范</span><span class="token comment">//char *arr1 = "abcdefghi";//常量字符串不可改变</span><span class="token comment">//char arr2[] = &#123; 'b', 'i', 't' &#125;;//\0未知</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bit"</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token function">my_strcpy</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="strcat"><a href="#strcat" class="headerlink" title="strcat"></a>strcat</h4><blockquote><p>将两个字符串连接（拼接）起来。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">strcat</span> <span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span> destination<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> source <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Appends a copy of the source string to the destination string. The terminating null character in destination is overwritten by the first character of source, and a null-character is included at the end of the new string formed by the concatenation of both in destination.</p><ul><li>源字符串必须以’\0’ 结束。</li><li>目标空间必须有足够的大，能容纳下源字符串的内容。</li><li>目标空间必须可修改。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hel\0lo"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span><span class="token function">strcat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">my_strcat</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> ret <span class="token operator">=</span> dest<span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>dest <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.找到目标字符的\0</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>dest <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dest<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2.追加</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>dest<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span><span class="token function">my_strcat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h4><blockquote><p>两个字符串自左向右逐个字符相比（按 ASCII 值大小相比较），直到出现不同的字符或遇 <strong>\0</strong> 为止。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">strcmp</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str2 <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>This function starts comparing the first character of each string. If they are equal to each other, it continues with the following pairs until the characters differ or until a terminating null-character is reached.</p><ul><li><strong>标准规定：</strong><br>第一个字符串大于第二个字符串，则返回大于0的数字<br>第一个字符串等于第二个字符串，则返回0<br>第一个字符串小于第二个字符串，则返回小于0的数字</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//VS2013</span><span class="token comment">//> 1</span><span class="token comment">//== 0</span><span class="token comment">//&lt; -1</span><span class="token comment">//linux-gcc</span><span class="token comment">//> >0</span><span class="token comment">//== 0</span><span class="token comment">//&lt; &lt;0</span><span class="token keyword">char</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token string">"qbc"</span><span class="token punctuation">;</span><span class="token comment">//6</span><span class="token keyword">char</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">//5</span><span class="token comment">//int ret = strcmp(p1, p2);</span><span class="token comment">//printf("%d\n", ret);</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1>p2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pa == p2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p1&lt;p2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="strcmp实现"><a href="#strcmp实现" class="headerlink" title="strcmp实现"></a>strcmp实现</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token comment">//int my_strcmp(const char* str1, const char* str2)</span><span class="token comment">//&#123;</span><span class="token comment">//assert(str1 &amp;&amp; str2);</span><span class="token comment">////比较</span><span class="token comment">//while (*str1 == *str2)</span><span class="token comment">//&#123;</span><span class="token comment">//if (*str1 == '\0')</span><span class="token comment">//&#123;</span><span class="token comment">//return 0;//相等</span><span class="token comment">//&#125;</span><span class="token comment">//str1++;</span><span class="token comment">//str2++;</span><span class="token comment">//&#125;</span><span class="token comment">//</span><span class="token comment">//if (*str1 > *str2)</span><span class="token comment">//return 1;//大于</span><span class="token comment">//else</span><span class="token comment">//return -1;//小于</span><span class="token comment">//&#125;</span><span class="token keyword">int</span> <span class="token function">my_strcmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">assert</span><span class="token punctuation">(</span>str1 <span class="token operator">&amp;&amp;</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比较</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str1 <span class="token operator">==</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str1 <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//相等</span><span class="token punctuation">&#125;</span>str1<span class="token operator">++</span><span class="token punctuation">;</span>str2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>str1 <span class="token operator">-</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">my_strcmp</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy"></a>strncpy</h4><blockquote><p>strncpy()用来复制字符串的前n个字符</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">strncpy</span> <span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span> destination<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> source<span class="token punctuation">,</span> <span class="token class-name">size_t</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li> Copies the first num characters of source to destination. If the end of the source C string (which is signaled by a null-character) is found before num characters have been copied, destination is padded with zeros until a total of num characters have been written to it.</li><li> 拷贝num个字符从源字符串到目标空间。</li><li> 如果源字符串的长度小于num，则拷贝完源字符串之后，在目标的后边追加0，直到num个。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdefgh"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bit"</span><span class="token punctuation">;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/05/06/strncpy.png" loading="lazy"></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">my_strncpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">assert</span><span class="token punctuation">(</span>dest<span class="token operator">&amp;&amp;</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检测参数是否为空指针</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">//复制count个字符，循环count次  </span><span class="token punctuation">&#123;</span><span class="token operator">*</span>dest<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">/**（dest ++） = *(source ++)等价于：*dest = *source;dest +=1;source += 1;*/</span>count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>dest <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>🌐<a href="https://blog.csdn.net/qq_26093511/article/details/73338036">strcpy()与strncpy()的区别</a></p><h4 id="strncat"><a href="#strncat" class="headerlink" title="strncat"></a>strncat</h4><blockquote><p>在字符串的结尾追加n个字符。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">strncat</span> <span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span> destination<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> source<span class="token punctuation">,</span> <span class="token class-name">size_t</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>将源的前num个字符附加到目标，再加上一个终止的空字符<code>\0</code>。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello\0xxxxxxxxxxxxx"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span><span class="token function">strncat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/05/06/strncat.png" alt="strncat.png" loading="lazy"></p><ul><li>如果source中的C字符串的长度小于num，则仅返回到终止空字符为止的内容已复制。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/05/06/strncate554d95e7bcf9335.png" alt="strncate554d95e7bcf9335.png" loading="lazy"></p><h4 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp"></a>strncmp</h4><blockquote><p>比较到出现另个字符不一样或者一个字符串结束或者num个字符全部比较完。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">strncmp</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str2<span class="token punctuation">,</span> <span class="token class-name">size_t</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//strncmp - 字符串比较</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token string">"abczdef"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> p2 <span class="token operator">=</span>       <span class="token string">"abcqwer"</span><span class="token punctuation">;</span><span class="token comment">//int ret = strcmp(p1, p2);</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h4><blockquote><p>在字符串中查找第一次出现字符串的位置，不包含终止符 ‘\0’。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">strstr</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">//输出abcdef</span><span class="token comment">//char *p2 = "abch";//输出字符串不存在</span><span class="token keyword">char</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"字符串不存在\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token string">"abcdefabcdef"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token string">"def"</span><span class="token punctuation">;</span><span class="token comment">//输出defabcdef,即第一次匹配出现的地址</span><span class="token keyword">char</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"字符串不存在\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>自定义实现</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token comment">//还有KMP 算法</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">my_strstr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">assert</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断言目标字符串不能为空</span><span class="token function">assert</span><span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断言源字符串不能为空</span><span class="token keyword">char</span> <span class="token operator">*</span>s1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>s2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>cur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2 <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断源字符串是否为空,如果为空则返回目标字符串</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span><span class="token comment">//return值可自定义</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s1 <span class="token operator">=</span> cur<span class="token punctuation">;</span>s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>s1 <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>s2 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>s1 <span class="token operator">==</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s1<span class="token operator">++</span><span class="token punctuation">;</span>s2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>s2 <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token comment">//找到子串</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>s1 <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token comment">//目标字符串寻找完成,但未找到</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cur<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//找不到子串</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token string">"abcccdcdef"</span><span class="token punctuation">;</span><span class="token comment">//目标字符串</span><span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token string">"ccd"</span><span class="token punctuation">;</span><span class="token comment">//源字符串</span><span class="token keyword">char</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">my_strstr</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"子串不存在\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="strtok"><a href="#strtok" class="headerlink" title="strtok"></a>strtok</h4><blockquote><p>将字符串分割成一个个片段。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">strtok</span> <span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> sep <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>sep参数是个字符串，定义了用作分隔符的字符集合</li><li>第一个参数指定一个字符串，它包含了0个或者多个由sep字符串中一个或者多个分隔符分割的标记。</li><li>strtok函数找到str中的下一个标记，并将其用\0 结尾，返回一个指向这个标记的指针。（注：strtok函数会改变被操作的字符串，所以在使用strtok函数切分的字符串一般都是临时拷贝的内容并且可修改。）</li><li>strtok函数的第一个参数不为NULL ，函数将找到str中第一个标记，<font style="color:orange;">strtok函数将保存它在字符串中的位置。</font></li><li>strtok函数的第一个参数为NULL ，函数将在同一个字符串中被保存的位置开始，查找下一个标记。</li><li>如果字符串中不存在更多的标记，则返回NULL 指针。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//192.168.31.121   .</span><span class="token comment">//192 168 31 121 - strtok</span><span class="token comment">//zpw@bitedu.tech   @.</span><span class="token comment">//zpw bitedu tech - strtok</span>  <span class="token comment">//点分十进制的表示方式</span><span class="token comment">//char arr[] = "123@234.@234";</span><span class="token comment">//char*p = ".@";</span>  <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"zpw@bitedu.tech"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"@."</span><span class="token punctuation">;</span><span class="token comment">//buf中存储的字符串:zpw\0bitedu.tech</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//切割buf中的字符串</span><span class="token keyword">char</span><span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//zpw</span><span class="token comment">//buf中存储的字符串:bitedu\0tech</span>ret <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//bitedu</span>ret <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//tech</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//192.168.31.121   .</span><span class="token comment">//192 168 31 121 - strtok</span><span class="token comment">//zpw@bitedu.tech   @.</span><span class="token comment">//zpw bitedu tech - strtok</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"zpw@bitedu.tech"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"@."</span><span class="token punctuation">;</span><span class="token comment">//buf中存储的字符串:zpw\0bitedu.tech</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ret <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> ret <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> ret<span class="token operator">=</span><span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="strerror"><a href="#strerror" class="headerlink" title="strerror"></a>strerror</h4><blockquote><p>返回错误码，所对应的错误信息。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">strerror</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> errnum <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span><span class="token comment">//必须包含的头文件</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//错误码  错误信息</span><span class="token comment">//0 -     No error</span><span class="token comment">//1 -     Operation not permitted</span><span class="token comment">//2 -     No such file or directory</span><span class="token comment">//...</span><span class="token comment">//errno 是一个全局的错误码的变量</span><span class="token comment">//当C语言的库函数在执行过程中，发生了错误，就会把对应的错误码，赋值到errno中</span><span class="token comment">//char*str = strerror(0);</span><span class="token comment">//printf("%s\n", str);</span><span class="token comment">//char*str = strerror(errno);</span><span class="token comment">//printf("%s\n", str);</span><span class="token comment">//打开文件</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//r-read 只读</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open file success\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同一工程文件目录下新建这个文件就会输出这个</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="字符分类函数："><a href="#字符分类函数：" class="headerlink" title="字符分类函数："></a>字符分类函数：</h4><table><thead><tr><th><strong>函数</strong></th><th><strong>如果他的参数符合下列条件就返回真</strong></th></tr></thead><tbody><tr><td>iscntrl</td><td>任何控制字符</td></tr><tr><td>isspace</td><td>空白字符：空格‘ ’，换页‘\f’，换行’\n’，回车‘\r’，制表符’\t’或者垂直制表符’\v’</td></tr><tr><td>isdigit</td><td>十进制数字 0~9</td></tr><tr><td>isxdigit</td><td>十六进制数字，包括所有十进制数字，小写字母a<del>f，大写字母A</del>F</td></tr><tr><td>islower</td><td>小写字母a~z</td></tr><tr><td>isupper</td><td>大写字母A~Z</td></tr><tr><td>isalpha</td><td>字母a<del>z或A</del>Z</td></tr><tr><td>isalnum</td><td>字母或者数字，a<del>z,A</del>Z,0~9</td></tr><tr><td>ispunct</td><td>标点符号，任何不属于数字或者字母的图形字符（可打印）</td></tr><tr><td>isgraph</td><td>任何图形字符</td></tr><tr><td>isprint</td><td>任何可打印字符，包括图形字符和空白字符</td></tr></tbody></table><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//char ch = '2';</span><span class="token comment">////int ret = islower(ch);</span><span class="token comment">//int ret = isdigit(ch);</span><span class="token comment">//printf("%d\n", ret);</span><span class="token comment">//char ch = tolower('q');</span><span class="token comment">//char ch = toupper('q');</span><span class="token comment">//putchar(ch);</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I Am A Student"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isupper</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="内存操作函数"><a href="#内存操作函数" class="headerlink" title="内存操作函数"></a>内存操作函数</h3><p>不局限于前面只能操作字符串的函数,还能处理浮点型,整型等等</p><h4 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h4><blockquote><p>内存拷贝</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">memcpy</span> <span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span> destination<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> source<span class="token punctuation">,</span> <span class="token class-name">size_t</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>函数memcpy从source的位置开始向后复制num个字节的数据到destination的内存位置。</li><li>这个函数在遇到’\0’ 的时候并不会停下来。</li><li>如果source和destination有任何的重叠，复制的结果都是未定义的。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://i.loli.net/2021/05/07/qTrHt6o5YUzlSfv.png" alt="memcpy.png" loading="lazy"></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> arr3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> arr4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>arr4<span class="token punctuation">,</span> arr3<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://i.loli.net/2021/05/07/7QyGUtZljJ8bMde.png" alt="memcpy1.png" loading="lazy"></p><h5 id="自定义实现"><a href="#自定义实现" class="headerlink" title="自定义实现"></a>自定义实现</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">my_memcpy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span><span class="token operator">*</span> ret <span class="token operator">=</span> dest<span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>dest <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>src <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>src<span class="token punctuation">;</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>dest<span class="token punctuation">;</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>src<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> arr3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> arr4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//my_memcpy(arr4, arr3, sizeof(arr3));</span><span class="token function">my_memcpy</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="memmove"><a href="#memmove" class="headerlink" title="memmove"></a>memmove</h4><blockquote><p>内存拷贝</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">memmove</span> <span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span> destination<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> source<span class="token punctuation">,</span> <span class="token class-name">size_t</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>和memcpy的差别就是memmove函数处理的源内存块和目标内存块是可以重叠的。</li><li>如果源空间和目标空间出现重叠，就得使用memmove函数处理。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 1  2  1  2  3  4  5  8  9  10</span><span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//memmove可以胜任内存的重叠拷贝</span><span class="token function">memmove</span><span class="token punctuation">(</span>arr3<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> arr3<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//C语言标准：memcpy函数可以拷贝不重叠的就可以了</span><span class="token comment">//当下发现：VS2013环境下的memcpy可以处理重叠拷贝</span><span class="token function">memcpy</span><span class="token punctuation">(</span>arr3<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> arr3<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="自定义实现-1"><a href="#自定义实现-1" class="headerlink" title="自定义实现"></a>自定义实现</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token comment">//void* my_memcpy(void* dest, const void* src, size_t count)</span><span class="token comment">//&#123;</span><span class="token comment">//char* ret = dest;</span><span class="token comment">//assert(dest != NULL);</span><span class="token comment">//assert(src != NULL);</span><span class="token comment">//</span><span class="token comment">//while (count--)</span><span class="token comment">//&#123;</span><span class="token comment">//*(char*)dest = *(char*)src;</span><span class="token comment">//++(char*)dest;</span><span class="token comment">//++(char*)src;</span><span class="token comment">//&#125;</span><span class="token comment">//return ret;</span><span class="token comment">//&#125;</span><span class="token comment">//void* my_memmove(void* dest, const void*src, size_t count)</span><span class="token comment">//&#123;</span><span class="token comment">//void* ret = dest;</span><span class="token comment">//assert(dest != NULL);</span><span class="token comment">//assert(src != NULL);</span><span class="token comment">//if (dest&lt;src || dest>(char*)src + count)</span><span class="token comment">//&#123;</span><span class="token comment">////前->后</span><span class="token comment">//&#125;</span><span class="token comment">//else</span><span class="token comment">//&#123;</span><span class="token comment">////后->前</span><span class="token comment">//&#125;</span><span class="token comment">//</span><span class="token comment">//return ret;</span><span class="token comment">//&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">my_memmove</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span><span class="token operator">*</span> ret <span class="token operator">=</span> dest<span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>dest <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>src <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dest <span class="token operator">&lt;</span> src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//前->后</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>src<span class="token punctuation">;</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>dest<span class="token punctuation">;</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>src<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//后->前</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">+</span> count<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>src <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//int arr1[] = &#123; 1, 2, 3, 4, 5 &#125;;</span><span class="token comment">//int arr2[10] = &#123; 0 &#125;;</span><span class="token comment">//arr1中的数字拷贝到arr2中</span><span class="token comment">//my_memcpy(arr2, arr1, sizeof(arr1));</span><span class="token comment">// 1  2  1  2  3  4  5  8  9  10</span><span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">my_memmove</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> arr3 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//my_memcpy不能胜任重叠拷贝的</span><span class="token comment">//my_memcpy(arr3+2, arr3, 20);</span><span class="token comment">//memmove可以胜任内存的重叠拷贝</span><span class="token comment">//memmove(arr3+2, arr3, 20);</span><span class="token comment">//C语言标准说：memcpy函数可以拷贝不重叠的就可以了</span><span class="token comment">//当下发现：VS2013环境下的memcpy可以处理重叠拷贝</span><span class="token comment">//memcpy(arr3+2, arr3, 20);</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="memcmp"><a href="#memcmp" class="headerlink" title="memcmp"></a>memcmp</h4><blockquote><p>内存大小比较</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">memcmp</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> ptr1<span class="token punctuation">,</span>  <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> ptr2<span class="token punctuation">,</span> <span class="token class-name">size_t</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>比较从ptr1和ptr2指针开始的num个字节</p></li><li><p>返回值如下：</p><p>若参数ptr1 和ptr 2 所指的内存内容都完全相同则返回0 值。ptr 1 若大于ptr2 则返回大于0 的值。ptr1 若小于ptr2 则返回小于0 的值。</p></li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//01 00 00 00 02 00 00 00 03 00 00 00 ...</span><span class="token comment">//01 00 00 00 02 00 00 00 05 00 00 00 ...</span><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h4><blockquote><p>内存设置 初始化内存</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span></code></pre><ul><li>将指针变量 s 所指向的前 n 字节的内存单元用一个“整数” c 替换，注意 c 是 int 型。s 是 void* 型的指针变量，所以它可以为任何类型的数据进行初始化。</li></ul><p>参数</p><ul><li><strong>str</strong> – 指向要填充的内存块。</li><li><strong>c</strong> – 要被设置的值。该值以 int 形式传递，但是函数在填充内存块时是使用该值的无符号字符形式。</li><li><strong>n</strong> – 要被设置为该值的字符数。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//char arr[10] = "";</span><span class="token comment">//memset(arr, '#', 10);</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//40 个字节</span><span class="token comment">//01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 ...</span><span class="token function">memset</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里的10改的是10个字节</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C数据存储与指针进阶试题</title>
      <link href="posts/1f548559/"/>
      <url>posts/1f548559/</url>
      
        <content type="html"><![CDATA[<h5 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment">//整型提升</span><span class="token comment">//00000000000000000000000011001000 - a</span><span class="token comment">//00000000000000000000000001100100 - b</span><span class="token comment">//00000000000000000000000100101100 - a+b</span><span class="token comment">//00101100 - c 1字符占8个bit位</span><span class="token comment">//00000000000000000000000000101100 - c</span><span class="token comment">//00000000000000000000000011001000</span><span class="token comment">//11001000-a</span><span class="token comment">//00000000000000000000000001100100</span><span class="token comment">//01100100-b</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//300 44</span><span class="token comment">//a + b =>%d输出有符号十进制数=>00000000000000000000000100101100(最高位是0,即正数)=>转换成十进制300</span><span class="token comment">//00000000000000000000000000101100 - c =>转换成10进制44</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h5><p><code>unsigned int a= 0x1234 ; unsigned char b=*(unsigned char *)&amp;a</code></p><p>求在32位大端模式处理器上变量b的值</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//printf("%d\n", b);//52=3*16+4</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">52不符合题意,vs是小端存储模式,即0X34正确答案是0x000x1234 &#x3D;&#x3D; 0x00 00 12 34小端字节序存储模式:43 12 00 00大端字节序存储模式:00 00 12 34</code></pre><h5 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//-128 --> 127</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//-1 -2 ... -128 127 126 125 ... 3 2 1 0 -1 -2 ... </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//255</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h5><p>打印<a href="https://baike.baidu.com/item/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/215098?fr=aladdin">杨辉三角</a></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q5-猜凶手"><a href="#Q5-猜凶手" class="headerlink" title="Q5  猜凶手"></a>Q5  猜凶手</h5><p> 宜昌某地发生了一件谋杀案，警察通过排查确定杀人凶手必为4个嫌疑犯的一个。</p><p> 以下为4个兼疑犯的供词:<br>        A说:不是我。<br>        B说:是C。c说:是D。<br>        D说:C在胡说<br>        <font style="color:tomato;">已知3个人说了真话，1个人说的是假话。</font></p><p>现在请根据这些信息，写一个程序来确定到底谁是凶手。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> killer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>killer <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> killer <span class="token operator">&lt;=</span> <span class="token string">'d'</span><span class="token punctuation">;</span> killer<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>killer <span class="token operator">!=</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>killer <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>killer <span class="token operator">==</span> <span class="token string">'d'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>killer <span class="token operator">!=</span> <span class="token string">'d'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"killer = %c\n"</span><span class="token punctuation">,</span> killer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q6-猜名次"><a href="#Q6-猜名次" class="headerlink" title="Q6 猜名次"></a>Q6 猜名次</h5><p>5位运动员参加了10米台跳水比赛，有人让他们预测比赛结果:<br>        A选手说:B第二，我第三;<br>        B选手说:我第二，E第四;c选手说:我第一，D第二;D选手说:C最后，我第三;E选手说:我第四，A第一;<br>        比赛结束后，每位选手都说对了一半，请编程确定比赛的名次。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> e <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> e<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token operator">*</span>c<span class="token operator">*</span>d<span class="token operator">*</span>e <span class="token operator">==</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d b=%d c=%d d=%d e=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q7-字符串左旋"><a href="#Q7-字符串左旋" class="headerlink" title="Q7 字符串左旋"></a>Q7 字符串左旋</h5><p>实现一个函数，可以左旋字符串中的k个字符。</p><p>例如:<br>       ABCD左旋一个字符得到BCDA<br>       ABCD左旋两个字符得到CDAB</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token comment">//1.暴力求解法</span><span class="token comment">//void left_move(char* arr, int k)</span><span class="token comment">//&#123;</span><span class="token comment">//assert(arr != NULL);</span><span class="token comment">//int i = 0;</span><span class="token comment">//int len = strlen(arr);</span><span class="token comment">//for (i = 0; i &lt; k; i++)</span><span class="token comment">//&#123;</span><span class="token comment">////左旋转一个字符</span><span class="token comment">////1</span><span class="token comment">//char tmp = *arr;</span><span class="token comment">////2</span><span class="token comment">//int j = 0;</span><span class="token comment">//for (j = 0; j &lt; len-1; j++)</span><span class="token comment">//&#123;</span><span class="token comment">//*(arr + j) = *(arr + j + 1);</span><span class="token comment">//&#125;</span><span class="token comment">////3</span><span class="token comment">//*(arr + len - 1) = tmp;</span><span class="token comment">//&#125;</span><span class="token comment">//&#125;</span><span class="token comment">//2.三步翻转法</span><span class="token comment">//abcdef</span><span class="token comment">//bafedc</span><span class="token comment">//cdefab</span><span class="token comment">//逆序字符串的函数</span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> left<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">assert</span><span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>left<span class="token punctuation">;</span><span class="token operator">*</span>left <span class="token operator">=</span> <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token operator">*</span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>left<span class="token operator">++</span><span class="token punctuation">;</span>right<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">left_move</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">assert</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断旋转字符大小是否合理</span><span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//逆序左边</span><span class="token function">reverse</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> k<span class="token punctuation">,</span> arr <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//逆序右边</span><span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//逆序整体</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token function">left_move</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q8-字符串旋转判定"><a href="#Q8-字符串旋转判定" class="headerlink" title="Q8 字符串旋转判定"></a>Q8 字符串旋转判定</h5><p> 写一个函数，判断一个字符串是否为另外一个字符串旋转之后的字符串。<br>        例如:给定<code>s1=AABCD</code>和<code>s2=BCDAA</code>，返回1<br>        给定<code>s1=abcd</code>和<code>s2=ACBD</code>，返回0</p><p>AABCD左旋一个字符得到ABCDA<br>       AABCD左旋两个字符得到BCDAA<br>       AABCD右旋一个字符得到DAABC</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token comment">//三步翻转法</span><span class="token comment">//abcdef</span><span class="token comment">//bafedc</span><span class="token comment">//cdefab</span><span class="token comment">//逆序字符串的函数</span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> left<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">assert</span><span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>left<span class="token punctuation">;</span><span class="token operator">*</span>left <span class="token operator">=</span> <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token operator">*</span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>left<span class="token operator">++</span><span class="token punctuation">;</span>right<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">left_move</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">assert</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断旋转字符大小是否合理</span><span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//逆序左边</span><span class="token function">reverse</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> k<span class="token punctuation">,</span> arr <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//逆序右边</span><span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//逆序整体</span><span class="token punctuation">&#125;</span><span class="token comment">//abcdef</span><span class="token comment">//bcdefa</span><span class="token comment">//cdefab</span><span class="token comment">//defabc</span><span class="token comment">//efabcd</span><span class="token comment">//fabcde</span><span class="token keyword">int</span> <span class="token function">is_left_move</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s1<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">left_move</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"cdefab"</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">is_left_move</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h6><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">is_left_move</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str1<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断字符串长度是否合法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>len1 <span class="token operator">!=</span> len2<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//1. 在str1字符串中追加一个str1字符串</span><span class="token comment">//strcat(str1, str1);//err</span><span class="token function">strncat</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcdefabcdef</span><span class="token comment">//2. 判断str2指向的字符串是否是str1指向的字符串的子串</span><span class="token comment">//strstr-找子串的</span><span class="token keyword">char</span> <span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"cdef"</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">is_left_move</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q9-杨氏矩阵"><a href="#Q9-杨氏矩阵" class="headerlink" title="Q9 杨氏矩阵"></a>Q9 杨氏矩阵</h5><p>有一个数字矩阵，矩阵的每行从左到右是递增的，矩阵从上到下是递增的<br>       请编写程序在这样的矩阵中查找某个数字是否存在。<br>       要求：时间复杂度小于O(N);</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//1 2 3</span><span class="token comment">//4 5 6</span><span class="token comment">//7 8 9</span><span class="token comment">//1 2 3</span><span class="token comment">//2 3 4</span><span class="token comment">//3 4 5</span><span class="token keyword">int</span> <span class="token function">FindNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> row <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>y<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//找不到</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入你要找的数字:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">FindNum</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找到了\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找不到\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="改-增加输出坐标"><a href="#改-增加输出坐标" class="headerlink" title="改:增加输出坐标"></a>改:增加输出坐标</h6><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">FindNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>px<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span>py<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token operator">*</span>py <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token operator">*</span>px <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>y<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>px <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token operator">*</span>py <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//找不到</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">FindNum</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找到了\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"坐标%d %d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找不到\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> C试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C指针函数结构体试题</title>
      <link href="posts/d758266a/"/>
      <url>posts/d758266a/</url>
      
        <content type="html"><![CDATA[<h5 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> pulArray<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>pulPtr<span class="token punctuation">;</span>pulPtr <span class="token operator">=</span> pulArray<span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>pulPtr <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>pulPtr<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>pulPtr <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出6和12</p><p><code>pulArray</code>是数组,存放首元素地址,即6的地址,<code>*pulPtr</code>解引用存放6</p><p><code>(pulPtr + 3)</code>指针地址指向数字9,<code>*(pulPtr + 3)</code>解引用后值为9, += 3后值为12</p><h5 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h5><p>自定义函数实现字符串逆序</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">assert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> left <span class="token operator">=</span> str<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> right <span class="token operator">=</span> str <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>left<span class="token punctuation">;</span><span class="token operator">*</span>left <span class="token operator">=</span> <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token operator">*</span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span>left<span class="token operator">++</span><span class="token punctuation">;</span>right<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一串字符串>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//scanf("%s", arr);//存在遇到空格停止读取</span><span class="token function">gets</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取一行</span><span class="token comment">//逆序函数</span><span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"逆序后的字符串：%s\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h5><p>求<code>Sn=a+aa+aaa+aaaa+aaaaa</code>的前5项之和，其中a是一个数字，例如:<code>2+22+222+2222+22222</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入2个正整数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ret <span class="token operator">=</span> ret <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>sum <span class="token operator">+=</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h5><p>求出0～100000之间的所有<a href="https://baike.baidu.com/item/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/2746160?fr=aladdin">自幂数</a>并输出。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断i是否为水仙花数（自幂数）</span><span class="token comment">//1. 计算i的位数 - n位数</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2. 计算i的每一位的n次方之和 sum</span>tmp <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> <span class="token function">pow</span><span class="token punctuation">(</span>tmp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3. 比较i == sum</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> sum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q5"><a href="#Q5" class="headerlink" title="Q5"></a>Q5</h5><p>打印菱形</p><p>🌰</p><pre class="language-md" data-language="md"><code class="language-md">&#x2F;&#x2F;      *&#x2F;&#x2F;     ***&#x2F;&#x2F;    *****&#x2F;&#x2F;   *******&#x2F;&#x2F;  *********&#x2F;&#x2F; ***********&#x2F;&#x2F;*************&#x2F;&#x2F; ***********&#x2F;&#x2F;  *********&#x2F;&#x2F;   *******&#x2F;&#x2F;    *****&#x2F;&#x2F;     ***&#x2F;&#x2F;      *</code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入列数(上半部分):>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> line <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7</span><span class="token comment">//打印上半部分</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> line<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印空格</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> line<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印*</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印下半部分</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> line <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//打印空格</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印*</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>line<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q6"><a href="#Q6" class="headerlink" title="Q6"></a>Q6</h5><p>喝汽水，1瓶汽水1元，2个空瓶可以换一瓶汽水，给20元，可以多少汽水（编程实现)</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//0.5</span><span class="token comment">//20/0.5 = 40-1 = 39</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> empty <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//空瓶数初始化</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入你的钱:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//买回来的汽水喝掉</span><span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span>total <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> money <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//total = money;</span><span class="token comment">//empty = money;</span><span class="token comment">////换回来的汽水</span><span class="token comment">//while (empty>=2)</span><span class="token comment">//&#123;</span><span class="token comment">//total += empty / 2;</span><span class="token comment">////最终剩余汽水瓶</span><span class="token comment">//empty = empty / 2 + empty % 2;</span><span class="token comment">//&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"total = %d\n"</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Q7"><a href="#Q7" class="headerlink" title="Q7"></a>Q7</h5><p>调整数组使奇数全部都位于偶数前面。</p><p>输入一个整数数组，实现一个函数，来调整该数组中数字的顺序使得数组中所有的奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> right <span class="token operator">=</span> sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//从左边找偶数</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>left<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从右边找奇数</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>right<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1 3 5 7 9 9 7 5 3 1</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">move</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> C试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专升本计算机基础笔记-2</title>
      <link href="posts/feda3526/"/>
      <url>posts/feda3526/</url>
      
        <content type="html"><![CDATA[<h4 id="操作系统的功能"><a href="#操作系统的功能" class="headerlink" title="操作系统的功能"></a>操作系统的功能</h4><ul><li>处理机管理</li><li>存储管理</li><li>设备管理</li><li>文件管理</li><li>作业管理</li></ul><h4 id="处理机管理"><a href="#处理机管理" class="headerlink" title="处理机管理"></a>处理机管理</h4><p>批处理方式、分时处理方式、实时处理方式</p><h4 id="操作系统的分类"><a href="#操作系统的分类" class="headerlink" title="操作系统的分类"></a>操作系统的分类</h4><p>1）批处理系统；2）分时系统； 3）实时系统</p><p><font style="color:tomato;">win7是多用户多任务系统</font></p><p>早期的DOS操作系统是单用户单任务操作系统，Windows XP则是单用户多任务操作系统。</p><h5 id="网络操作系统"><a href="#网络操作系统" class="headerlink" title="网络操作系统"></a>网络操作系统</h5><p>其目标是相互通信及资源共享。 </p><h5 id="分布式操作系统"><a href="#分布式操作系统" class="headerlink" title="分布式操作系统"></a>分布式操作系统</h5><p>别称 —— 云计算</p><h5 id="常用操作系统"><a href="#常用操作系统" class="headerlink" title="常用操作系统"></a>常用操作系统</h5><ul><li>DOS  </li><li>Windows  </li><li>UNIX  </li><li>Linux  </li><li>iOS  </li><li>Android   </li><li>Mac OS </li></ul><h4 id="Windows-7基础"><a href="#Windows-7基础" class="headerlink" title="Windows 7基础"></a>Windows 7基础</h4><h5 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h5><ul><li>Windows 7 Starter（ 初级版）</li><li>Windows 7 Home Basic （家庭基础版）</li><li>Windows 7 Home Premium（ 家庭高级版）</li><li>Windows 7 Professional（ 专业版）</li><li>Windows 7 Enterprise（ 企业版）</li><li>Windows 7 Ultimate（ 旗舰版）</li></ul><h5 id="Windows-7的基本操作"><a href="#Windows-7的基本操作" class="headerlink" title="Windows 7的基本操作"></a>Windows 7的基本操作</h5><h6 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h6><pre class="language-none"><code class="language-none">在这些菜单中，Windows使用了许多特殊标记，这些特殊标记都具有特定的含义。常见的标记有:(1)“△”标记:表明此菜单项目下还有下级菜单。(2)“…”标记:表明单击此菜单会打开一个对话框。(3)“√”标记:有些菜单是复选菜单，菜单项的文字前出现符号“√”，表明正处于选中状态。再次单击该菜单项时，标记会消失，表明取消选中该菜单项。(4)“●”标记:表明该菜单为单选菜单，在所列出的菜单组中，同一时刻只能有一项被选中。另外，菜单项目中间灰色的横线称为分隔线。当一个菜单项目呈灰色时，表明此菜单项目当前不可用。(5)滚动条当用户区域显示的文档的高度大于显示窗口的高度时，将在右侧出现垂直滚动条;当文档的宽度大于显示窗口的宽度时，将在底部出现水平滚动条。</code></pre><p>快捷方式后缀名<code>.lnk</code></p><p>排序方式  </p><ul><li>名称</li><li>大小</li><li>项目类型</li><li>修改日期</li></ul><h4 id="文件和文件夹"><a href="#文件和文件夹" class="headerlink" title="文件和文件夹"></a>文件和文件夹</h4><p>文件（File），是指存放在外存储器上的一组相关信息的集合。文件中存放的可以是一个程序，也可以是一篇文章、一首乐曲、一幅图画等。每个文件都有一个名字，称为文件名，<font style="color:deepskyblue;">文件名是操作系统中区分不同文件的唯一标志</font>。  </p><p>文件名由主文件名和扩展名两部分组成,主文件名和扩展名之间用英文句号分隔。</p><p>（1）文件名可以由英文字母、数字、下划线、空格和汉字等组成，但不允许使用 / 、\、：、*、？、”、&lt;、&gt;、| 等符号。<br>       （2）在同一文件夹中不允许有名字相同的文件或文件夹，不能利用英文字母大小写来区分文件名。  </p><p>举个🌰</p><p><code>test</code>文件夹下不能同时存在名为<code>a.txt</code>和<code>A.txt</code>的两个文件</p><h4 id="硬件和声音"><a href="#硬件和声音" class="headerlink" title="硬件和声音"></a>硬件和声音</h4><p>Windows 系统默认的声音格式为WAV格式</p><p>画图软件文件后缀名为<code>.bmp</code></p><p>录音机文件后缀名为<code>.wma</code></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专升本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次人格测试</title>
      <link href="posts/9a04ec57/"/>
      <url>posts/9a04ec57/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>​                         免费的人格测试，类型描述，关系和职业建议</p><h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><blockquote><p><a href="https://www.16personalities.com/ch">https://www.16personalities.com/ch</a></p></blockquote><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>人格问卷简洁明了。</li><li>与职业匹配的卡通动态人物，生动形象。</li><li>全程支持中文!!!</li></ul><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p><img src="https://s1.imagehub.cc/images/2021/04/28/1.png" alt="1.png" loading="lazy"></p><p><img src="https://s1.imagehub.cc/images/2021/04/28/2.png" alt="2.png" loading="lazy"></p><span id="more"></span><h4 id="自鉴"><a href="#自鉴" class="headerlink" title="自鉴"></a>自鉴</h4><p><img src="https://s1.imagehub.cc/images/2021/04/28/3.png" alt="3.png" loading="lazy"></p><h5 id="“提倡者”-人格"><a href="#“提倡者”-人格" class="headerlink" title="“提倡者” 人格"></a><font style="color:skyblue;">“提倡者” 人格</font></h5><blockquote><p>他们把帮助他人作为生活的意义，虽然你会在营救活动和慈善工作中发现他们的身影，但他们的真正理想是从根本上解决问题，让人们一开始就不会陷入困境。</p></blockquote><p>提倡者人格类型的人非常稀少，只有不到 1% 的人口属于这种类型，但他们对世界的贡献不容忽视。 他们具有与生俱来的理想主义和道德感，但真正令他们与其他理想主义人格类型区分开来的是，他们果断决绝。他们不是懒散的空想家，而是能脚踏实地完成目标，留下深远的积极影响的人。</p><p><img src="https://s1.imagehub.cc/images/2021/04/28/4.png" alt="4.png" loading="lazy"></p><h5 id="互帮互助"><a href="#互帮互助" class="headerlink" title="互帮互助"></a>互帮互助</h5><p>“提倡者”们常常集各种特质于一身： 轻言细语却很有看法，为自己的信念不懈奋斗。 他们坚决果断，但不会把精力用在一己私利上 – 提倡者们行事风格有创造力，富有想象力，充满信念和感性，他们并非为了创造优势，而是建立平衡。 平等主义和因果报应是对他们很有吸引力的思想，他们相信用爱和同情来感化暴君的心是帮助这个世界最好的方式。</p><blockquote><p><font style="color:gold;">每个人都需要做出选择，是走在富有创造力的利他主义之光中，还是具有破坏性的自私自利的黑暗中。</font></p></blockquote><p><em>MARTIN LUTHER KING</em></p><p>对提倡者人格类型的人来说，很容易与他人建立联系，他们的话语温暖感性有人情味，而非纯粹的逻辑与事实。 他们的同事和朋友把他们当作安静的外向类型是不无道理的，但他们要知道“提倡者”们需要独处的时间来养精蓄锐，所以对他们的突然离开不要太过惊讶。 “提倡者”们很在乎别人的感受，也希望被以同样的方式对待 — 这有时需要给他们留几天独处的时间。</p><h5 id="生命不息，奋斗不止"><a href="#生命不息，奋斗不止" class="headerlink" title="生命不息，奋斗不止"></a>生命不息，奋斗不止</h5><p>最重要的是，倡导者人格类型的人要记得照顾好自己。 他们对信念的激情很可能超出自己所能承受的范围，一旦热情失控，他们很可能发现自己处于劳累，不健康和紧张的状态。 这在“提倡者”们对抗冲突和批评的时候尤其明显，他们的感性迫使他们尽一切可能逃避那些人身攻击，但是当情况不可避免时，他们会用很不理性且无益的方式反抗。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>简而言之,问卷测试结果还是比较客观的。</p><p>其中,“安静的外向类型”和“他们认为他们需要自己解决问题，或者不想让别人负担他们的问题”语句描述个人感觉挺中肯。</p><p>”<del>提倡者们行事风格有创造力</del>，富有想象力，充满信念和感性” —— 这可不就是双鱼座么(逃😂</p>]]></content>
      
      
      <categories>
          
          <category> LIFE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活二三事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专升本计算机基础笔记-1</title>
      <link href="posts/903bfa4a/"/>
      <url>posts/903bfa4a/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-信息技术与计算机文化"><a href="#第一章-信息技术与计算机文化" class="headerlink" title="第一章 信息技术与计算机文化"></a>第一章 信息技术与计算机文化</h3><h4 id="数据与信息"><a href="#数据与信息" class="headerlink" title="数据与信息"></a>数据与信息</h4><p>数据是信息的具体表现形式,是信息的载体，而信息是对数据进行加工得到的结果</p><h4 id="文化具有的基本属性"><a href="#文化具有的基本属性" class="headerlink" title="文化具有的基本属性:"></a>文化具有的基本属性:</h4><ul><li>广泛性</li><li>传递性</li><li>教育性</li><li>深刻性</li></ul><h4 id="计算机起源"><a href="#计算机起源" class="headerlink" title="计算机起源"></a>计算机起源</h4><p>​            1946s ENIAC 美国宾夕法尼亚大学 真空电子管 十进制计算  没有键盘鼠标  开辟信息时代</p><p><img src="https://s1.imagehub.cc/images/2021/04/27/56b8fd03362542f5335dc3422af40a6a.md.png" alt="56b8fd03362542f5335dc3422af40a6a.png" loading="lazy">计算机发展</p><h4 id="新一代计算机"><a href="#新一代计算机" class="headerlink" title="新一代计算机"></a>新一代计算机</h4><ul><li>​      我国从1956年开始研制计算机1958年研制出第一台电子管计算机。</li><li>​      1964年研制成功晶体管计算机</li><li>​      1971年研制成功集成电路计算机</li><li>​      1983年研制成功每秒运算1亿次的“银河1”巨型机。</li><li>​      我国先后自主开发了“银河”、“曙光”、“深腾”和“神威”等系列高性能计算机</li></ul><h4 id="计算机特点"><a href="#计算机特点" class="headerlink" title="计算机特点:"></a>计算机特点:</h4><ul><li>运算速度快</li><li>计算精确高</li><li>存储容量大</li><li>具有逻辑判断能力</li><li>工作自动化</li><li>通用性强</li></ul><h4 id="计算机分类"><a href="#计算机分类" class="headerlink" title="计算机分类"></a>计算机分类</h4><table><thead><tr><th>根据处理的对象划分</th><th>模拟计算机、数字计算机和混合计算机</th></tr></thead><tbody><tr><td><strong>根据用途划分</strong></td><td>专用计算机和通用计算机</td></tr><tr><td><strong>根据规模划分</strong></td><td>巨型机、大型机小型机、微型机和工作站</td></tr></tbody></table><h4 id="计算机应用"><a href="#计算机应用" class="headerlink" title="计算机应用"></a>计算机应用</h4><ul><li>科学计算</li><li>信息管理</li><li>过程控制</li><li>计算机辅助系统</li><li>人工智能</li><li>计算机网络与通信</li></ul><h5 id="计算机辅助系统"><a href="#计算机辅助系统" class="headerlink" title="计算机辅助系统"></a>计算机辅助系统</h5><p>计算机辅助设计CAD、计算机辅助制造CAM、计算机辅助教育CBE、计算机辅助教学CAI 、计算机辅助教学管理CMI。另外还有计算机辅助测试CAT和计算机集成制造系统CIMS等。</p><h4 id="计算机的发展趋势"><a href="#计算机的发展趋势" class="headerlink" title="计算机的发展趋势"></a>计算机的发展趋势</h4><ul><li>巨型化</li><li>微型化</li><li>网格(络)化</li><li>智能化</li></ul><h4 id="信息表示的符号系统有三个基本特点："><a href="#信息表示的符号系统有三个基本特点：" class="headerlink" title="信息表示的符号系统有三个基本特点："></a>信息表示的符号系统有三个基本特点：</h4><p>  第一，存在一个基本的有限符号集，符号集中符号的数目多于一个。</p><p>  第二，不同符号有明显的差别，便于人们识别和感知这些符号。</p><p>  第三，存在一组规则，按照规则可以将基本符号组成更复杂的结构，如符号串。</p><h4 id="常见进位计数制"><a href="#常见进位计数制" class="headerlink" title="常见进位计数制"></a>常见进位计数制</h4><ul><li>十进制 D  </li><li>二进制 B</li><li>八进制 O</li><li>十六进制 H</li></ul><h4 id="二进制运算规则"><a href="#二进制运算规则" class="headerlink" title="二进制运算规则"></a>二进制运算规则</h4><h5 id="1-算术运算规则"><a href="#1-算术运算规则" class="headerlink" title="1.算术运算规则"></a>1.算术运算规则</h5><pre class="language-matlab" data-language="matlab"><code class="language-matlab">加法规则：<span class="token number">0</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>；       <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>；          <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span>；       <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">10</span>（向高位有进位）；           减法规则：<span class="token number">0</span> <span class="token operator">-</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>；       <span class="token number">10</span><span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span> （向高位借位）；          <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span>；       <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           乘法规则：<span class="token number">0</span>×<span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>；       <span class="token number">0</span>×<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span>；          <span class="token number">1</span>×<span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>；       <span class="token number">1</span>×<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           除法规则：<span class="token number">0</span> <span class="token operator">/</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span>；        <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span></code></pre><h5 id="2-逻辑运算规则"><a href="#2-逻辑运算规则" class="headerlink" title="2.逻辑运算规则"></a>2.逻辑运算规则</h5><pre class="language-matlab" data-language="matlab"><code class="language-matlab">非运算（NOT）： <span class="token number">1</span> ̄<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span> ̄<span class="token operator">=</span><span class="token number">1</span>与运算（AND）： <span class="token number">0</span>∧<span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>；     <span class="token number">0</span>∧<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span>；           <span class="token number">1</span>∧<span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>；     <span class="token number">1</span>∧<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>或运算（OR）： <span class="token number">0</span>∨<span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>；     <span class="token number">0</span>∨<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>；             <span class="token number">1</span>∨<span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span>；     <span class="token number">1</span>∨<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>异或运算（XOR）：<span class="token number">0</span>⊕<span class="token number">0</span><span class="token operator">=</span><span class="token number">0</span>；  <span class="token number">0</span>⊕<span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>；               <span class="token number">1</span>⊕<span class="token number">0</span><span class="token operator">=</span><span class="token number">1</span>；  <span class="token number">1</span>⊕<span class="token number">1</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></code></pre><h4 id="数据的单位"><a href="#数据的单位" class="headerlink" title="数据的单位"></a>数据的单位</h4><p>​    <strong>1）位（bit）</strong></p><p>​    简记为b，也称为比特，<font style="color:lightskyblue;">是计算机存储数据的最小单位</font>。一个二进制位只能表示0或1。</p><p>​    <strong>2）字节（Byte）</strong></p><p>​    字节来自英文Byte，简记为B。<font style="color:pink;">字节是存储信息的基本单位</font>。规定1B=8bit。</p><p>​    1 KB =210 B= 1024B    1 MB = 220 B= 1024KB</p><p>​    1 GB = 230 B= 1024MB  1 TB = 240 B = 1024GB</p><p>  <strong>3）字（Word）</strong></p><p>​    一个字通常由一个字节或若干个字节组成。<font style="color:orange;">字长是计算机一次所能处理的实际位数长度，字长是衡量计算性能的一个重要指标。</font></p><h4 id="数值的表示"><a href="#数值的表示" class="headerlink" title="数值的表示"></a>数值的表示</h4><p>规定一个数的最高位作为符号位，“0”表示正，“1”表示负。采用二进制表示形式的连同数符一起代码化了的数据称为机器数</p><h4 id="文字信息的表示"><a href="#文字信息的表示" class="headerlink" title="文字信息的表示"></a>文字信息的表示</h4><h5 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h5><p><code>ASCII</code>码(American Standard Code for Information Interchange)   美国标准信息交换代码</p><p>国际标准化组织<code>ISO</code>采纳，作为国际通用的信息交换标准代码。</p><p>ASCII码是一种<code>西文机内码</code>，有7位ASCII码和8位ASCII码两种，7位ASCII码称为<code>标准ASCII码</code>，8位ASCII码称为<code>扩展ASCII码</code>。</p><p>7位标准ASCII码用一个字节（8位）表示一个字符，并规定其最高位为0，实际只用到7位，因此可表示128个不同字符。</p><p>同一个字母的ASCII码值<code>小写</code>字母比<code>大写</code>字母大<code>32（20H）</code>。 </p><h5 id="汉字编码"><a href="#汉字编码" class="headerlink" title="汉字编码"></a>汉字编码</h5><p>汉字交换码  GB2312-80  收录6763个汉字</p><p>汉字机内码  把交换码（国标码）两个字节最高位改为1，称为“机内码”</p><p>汉字字形码  分点阵码和矢量码   点阵码缩放困难且容易失真</p><p>汉字输入码  也称汉字外部码（外码）分流水码、音码、形码和音形结合码四种</p><p>智能ABC、微软拼音、搜狗拼音和谷歌拼音等汉字输入法为音码，五笔字型为形码。</p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>是指示计算机执行某种操作的命令,它由一串二进制数码组成，这串二进制数码包括操作码和地址码两部分。</p><p><code>操作码</code>规定了操作的类型，即进行什么样的操作；<code>地址码</code>规定了要操作的数据（操作对象）存放在什么地址中，以及操作结果存放到哪个地址中去。</p><p>常见的指令系统  复杂指令系统（CISC）和  精简指令系统（RISC）。</p><h4 id="“存储程序”工作原理"><a href="#“存储程序”工作原理" class="headerlink" title="“存储程序”工作原理"></a>“存储程序”工作原理</h4><p>冯·诺依曼（Von Neumann） 基本思想是存储程序与程序控制</p><p>程序控制是指计算机运行时能自动地逐一取出程序中的一条条指令，加以分析并执行规定的操作。 </p><p>计算机运行过程中， 实际上有<code>数据流</code>跟<code>控制信号</code>两种信息在流动。 </p><h4 id="计算机的工作过程"><a href="#计算机的工作过程" class="headerlink" title="计算机的工作过程"></a>计算机的工作过程</h4><ul><li>取指令</li><li>分析指令</li><li>执行指令</li><li>指令计数器加1，为执行下一条指令做好准备</li></ul><h4 id="计算机硬件系统"><a href="#计算机硬件系统" class="headerlink" title="计算机硬件系统"></a>计算机硬件系统</h4><p>未配置任何软件的计算机叫裸机，它是计算机完成工作的物质基础。</p><p><img src="https://s1.imagehub.cc/images/2021/04/28/5.md.png" alt="5.png" loading="lazy">硬件系统五大组成部分框图 </p><h5 id="输入设备"><a href="#输入设备" class="headerlink" title="输入设备"></a>输入设备</h5><p>鼠标器、键盘、扫描仪、数字化仪、数码摄像机、条形码阅读器、数码相机、A/D转换器等</p><h5 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h5><p>运算器速度决定了计算机的运算速度</p><h5 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h5><p>是整个计算机系统的控制中心，它指挥计算机各部分协调工作，保证计算机按照预先规定的目标和步骤有条不紊地进行操作及处理。</p><p>通常把控制器和运算器合称为中央处理器（CPU，Central Processing Unit）。它是计算机的核心部件。</p><h5 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h5><p>内存储器和外存储器，简称内存和外存。内存储器又称为主存储器，外存储器又称为辅助存储器。</p><p><a href="https://www.imagehub.cc/image/Q2Vhv"><img src="https://s1.imagehub.cc/images/2021/04/28/885eb9fb673a44eca625e02fdb78adb3.md.png" alt="885eb9fb673a44eca625e02fdb78adb3.png" loading="lazy"></a></p><p>ROM（Read-Only Memory）即只读内存</p><p>RAM（random access memory）即随机存储内存</p><p>Cache 即高速缓冲存储器  一般简称为缓存</p><h5 id="输出设备"><a href="#输出设备" class="headerlink" title="输出设备"></a>输出设备</h5><p>显示器、打印机和音箱，还有绘图仪、各种数模转换器（D/A）</p><p><font style="color:tomato;">从信息的输入输出角度来说，磁盘驱动器和磁带机既可以看作输入设备，又可以看作输出设备。</font></p><h6 id="声音系统"><a href="#声音系统" class="headerlink" title="声音系统"></a>声音系统</h6><p>音频信号是连续的模拟信号，而电脑处理的只能是数字信号，因此，电脑要对音频信号进行处理，首先必须进行模/数（A/D）的转换。这个转换过程实际上就是对音频信号的<code>采样</code>和<code>量化</code>过程</p><h5 id="外存"><a href="#外存" class="headerlink" title="外存"></a>外存</h5><p>是主机的外部设备,是内存储器的后备和补充，不能和CPU 直接交换数据。</p><ul><li>软盘 软盘上有写保护口 用于防止擦除或重写数据，也能防止病毒侵入。</li><li>硬盘 硬盘是目前存取速度最快的外存。</li><li>闪存（Flash Memory）电子盘又称“优盘”，可反复存取数据。</li><li>光存储器：是利用激光技术存储信息的装置。只读光盘（CD-ROM、DVD）、追记型光盘（CD-R、WORM）和可改写型光盘（CD-RW、MO）等。</li></ul><h4 id="计算机软件系统"><a href="#计算机软件系统" class="headerlink" title="计算机软件系统"></a>计算机软件系统</h4><p>输入计算机的信息一般有两类，一类称为数据，一类称为程序 。计算机是通过执行程序所规定的各种指令来处理各种数据的。</p><p>计算机软件通常分为<code>系统软件</code>和<code>应用软件</code>两大类</p><p><img src="https://s1.imagehub.cc/images/2021/04/28/9559c9793662d934b56e086fcde85248.png" alt="9559c9793662d934b56e086fcde85248.png" loading="lazy"></p><h4 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h4><h5 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h5><p>是用户和计算机硬件系统之间的<code>接口</code>，为用户和应用软件提供了访问和控制计算机硬件的<code>桥梁</code>。</p><h5 id="语言处理程序"><a href="#语言处理程序" class="headerlink" title="语言处理程序"></a>语言处理程序</h5><p>基本功能是把用面向用户的高级语言或汇编语言编写的源程序翻译成机器可执行的二进制语言程序。</p><h5 id="系统支撑和服务程序"><a href="#系统支撑和服务程序" class="headerlink" title="系统支撑和服务程序"></a>系统支撑和服务程序</h5><p>又称工具软件 如系统诊断程序、调试程序、排错程序、编辑程序、查杀病毒程序</p><h5 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h5><p>FoxPro、 FoxBASE+、Access和大型数据库管理系统如Oracle、DB2、Sybase、SQL Server</p><h4 id="应用软件"><a href="#应用软件" class="headerlink" title="应用软件"></a>应用软件</h4><p>为解决计算机各类应用问题而编写的软件称为<strong>应用软件。</strong>应用软件具有很强的实用性。只为完成某一特定专业的任务。</p><h4 id="程序设计语言"><a href="#程序设计语言" class="headerlink" title="程序设计语言"></a>程序设计语言</h4><h5 id="程序设计基础"><a href="#程序设计基础" class="headerlink" title="程序设计基础"></a>程序设计基础</h5><p>数据结构和算法是程序最主要的两个方面，通常可以认为：程序=算法+数据结构。</p><p><strong>算法</strong>可以看作是由<font style="color:orange;">有限个</font>步骤组成的用来解决问题的具体过程。实质上反映的是解决问题的思路。其主要性质表现在：①有穷性；②确定性；③可行性。</p><p>数据结构是从问题中抽象出来的数据之间的关系，它代表信息的一种组织方式，用来反映一个数据的内部结构。数据结构是信息的一种组织方式，其目的是提高算法的效率，它通常与一组算法的集合相对应，通过这组算法集合可以对数据结构中的数据进行某种操作。</p><p><font style="color:deepskyblue;">典型的数据结构包括线性表、堆栈和队列。</font></p><h5 id="程序设计语言-1"><a href="#程序设计语言-1" class="headerlink" title="程序设计语言"></a>程序设计语言</h5><p>分机器语言、汇编语言和高级语言3类</p><p><img src="https://s1.imagehub.cc/images/2021/04/28/5d2fb0199f1d53b7ba179dac44f5635d.md.png" alt="5d2fb0199f1d53b7ba179dac44f5635d.png" loading="lazy"></p><h6 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a><strong>机器语言</strong></h6><p>​            是计算机系统唯一能识别的、不需要翻译直接供机器使用的程序设计语言。</p><h6 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a><strong>汇编语言</strong></h6><p>​            是机器语言的“符号化”。用符号来表示操作数地址（地址码）</p><p>​            机器语言和汇编语言一般都称为低级语言。</p><h6 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a><strong>高级语言</strong></h6><p>高级语言有两类，分别是<strong>解释型</strong>和<strong>编译型</strong>。</p><p>① 解释程序：解释程序接受用某种程序设计语言（如Basic语言）编写的源程序，然后对源程序的每条语句逐句进行解释并执行，最后得出结果。解释程序对源程序是一边翻译，一边执行，不产生目标程序。</p><p>② 编译程序：编译程序是翻译程序，它将用高级语言编写的源程序翻译成与之等价的用机器语言表示的目标程序，其翻译过程称为编译。<br>编译型语言系统在执行速度上都优于解释型语言系统。但是，编译程序比较复杂，这使得开发和维护费用较高。</p><h4 id="微型计算机分类"><a href="#微型计算机分类" class="headerlink" title="微型计算机分类"></a>微型计算机分类</h4><ul><li>单片机</li><li>单板机</li><li>PC（Personal Computer，个人计算机）</li><li>便携式微机</li></ul><h4 id="微机的主要性能指标"><a href="#微机的主要性能指标" class="headerlink" title="微机的主要性能指标"></a>微机的主要性能指标</h4><ul><li>主频 时钟频率 很大程度上决定了计算机的运算速度，主频的单位是赫兹（Hz）</li><li>字长 计算机的运算部件能同时处理的二进制数据的位数</li><li>内核数 CPU内核数指</li><li>内存容量  是指内存储器中能存储信息的总字节数。一般来说，内存容量越大，计算机的处理速度越快。</li><li>运算速度   单位时间内执行的计算机指令数。   单位有MIPS（Million Instructions Per Second，每秒106条指令）和BIPS（Billion Instructions Per Second，每秒109条指令）。</li><li>其他性能指标   机器的兼容性（包括数据和文件的兼容、程序兼容、系统兼容和设备兼容），系统的可靠性（平均无故障工作时间MTBF），系统的可维护性（平均修复时间MTTR）等，另外，性能价格比也是一项综合性的评价计算机性能的指标。</li></ul><p><a href="https://www.imagehub.cc/image/QP7mc"><img src="https://s1.imagehub.cc/images/2021/04/28/64f8e9a555d0a2af959eba7564327361.md.png" alt="64f8e9a555d0a2af959eba7564327361.md.png" loading="lazy"></a><strong>常见微型计算机的硬件设备</strong></p><h4 id="微处理器"><a href="#微处理器" class="headerlink" title="微处理器"></a>微处理器</h4><p>微处理器是将运算器、控制器和高速缓存集成在一起的超大规模集成电路芯片，是计算机中最重要的核心部件。 </p><p>目前微处理器的生产厂家有Intel公司、IBM公司、AMD公司和我国台湾的威盛公司等。</p><h4 id="微机常见总线标准"><a href="#微机常见总线标准" class="headerlink" title="微机常见总线标准"></a>微机常见总线标准</h4><p>总线（Bus）是计算机各功能部件之间传送信息的公共通信干线</p><p>微机中的总线一般分为数据总线、地址总线和控制总线，分别用来传输数据、数据地址及控制信号。</p><p>常见的总线标准有：1）PCI总线；2）AGP总线；3）USB总线；4）IEEE 1394总线。</p><h4 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h4><p>主板是微型计算机系统中最大的一块电路板，有时又称为母板或系统板</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专升本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C指针和数组笔试题</title>
      <link href="posts/cc3af788/"/>
      <url>posts/cc3af788/</url>
      
        <content type="html"><![CDATA[<h3 id="数组试题"><a href="#数组试题" class="headerlink" title="数组试题"></a>数组试题</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//数组名不是首元素的地址情况:</span><span class="token comment">//1. sizeof(数组名) - 数组名表示整个数组</span><span class="token comment">//2. &amp;数组名 - 数组名表示整个数组</span><span class="token comment">//一维数组</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//4*4 = 16</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sizeof(数组名)-计算的是数组总大小-单位是字节- 16</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4/8 - 数组名这里表示收元素的值，a+0 还是首元素地址，地址的大小就是4/8个字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//4 - 数组名表示首元素地址，*a就是首元素，sizeof(*a)就是4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4/8 - 数组名这里表示收元素的值，a+1 第2个元素的地址，地址的大小就是4/8个字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4 - 第2个元素的大小</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//4/8 &amp;a取出的是数组的地址，但是数组的地址那也是地址，地址的大小就是4/8个字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//16 - &amp;a数组的地址，数组的地址解引用访问的数组，sizeof计算的就是数组的大小单位是字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4/8   &amp;a是数组的地址，&amp;a+1虽然地址跳过整个数组，但还是地址，所以是4/8个字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4/8 &amp;a[0]是第一个元素的地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4/8  &amp;a[0]+1 是第二个元素的地址</span><span class="token comment">//字符数组</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机值</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机值</span><span class="token comment">//printf("%d\n", strlen(*arr));//err</span><span class="token comment">//printf("%d\n", strlen(arr[1]));//err</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机值</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机值-6</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机值-1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sizeof计算机的是数组大小，6*1 = 6字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4/8 arr是首元素的地址，arr+0还是首元素的地址 地址的大小是4/8字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1   arr是首元素的地址，*arr就是首元素，首元素是字符大小是一个字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//4/8 &amp;arr 虽然是数组的地址，但还是地址，地址大小是4/8个字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4/8 &amp;arr+1 是跳过整个数组后的地址，地址大小是4/8个字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4/8 第二个元素的地址</span>      <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span><span class="token comment">//printf("%d\n", strlen(*arr));//err </span><span class="token comment">//printf("%d\n", strlen(arr[1]));//err</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6 &amp;arr - 数组的地址-数组指针 char(*p)[7] = &amp;arr;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机值</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sizeof(arr)计算的数组的大小，单位是字节：7</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4/8 计算的是地址的大小-arr + 0是首元素的地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1 *arr 是首元素，sizeof(*arr)计算首元素的大小</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1 arr[1]是第二个元素，sizeof(arr[1])计算的是第二个元素的大小</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//4/8 &amp;arr虽然是数组的地址，但也是地址，所以是4/8个字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4/8 &amp;arr+1是跳过整个数组后的地址，但也是地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4/8 &amp;arr[0]+1 第二个元素的地址</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//二维数组</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//printf("%p\n", &amp;a[0][0]);</span><span class="token comment">//printf("%p\n", a[0] + 1);</span><span class="token comment">//printf("%p\n", a + 1);</span><span class="token comment">//printf("%p\n", &amp;a[0] + 1);</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//48</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//16 a[0]相当于第一行做为一维数组的数组名，</span><span class="token comment">//sizeof(arr[0])把数组名单独放在sizeof()内，计算的是第一行的大小</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4 - a[0]是第一行的数组名，数组名此时是首元素的地址，a[0]其实就是第一行第一个元素的地址</span><span class="token comment">//所以 a[0]+1 就是第一行第二个元素的地址- 地址大小是4/8个字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4- *(a[0] + 1)) 是第一行第二个元素，大小是4个字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4     //a是二维数组的数组名，没有sizeof(a)，也没有&amp;(a),所以a是首元素地址</span><span class="token comment">//而把二维数组看成一维数组时，二维数组的首元素是他的第一行，a就是第一行（首元素）的地址</span><span class="token comment">//a+1就是第二行的地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16, sizeof(a[1]) 计算第二行的大小,单位是字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4, 第二行的地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16 计算第二行的大小，单位是字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16 a是首元素地址-第一行的地址，*a就是第一行，sizeof(*a)就是计算第一行的大小</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//16</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>数组名的意义:</p><ol><li><code>sizeof</code>(数组名)，这里的数组名表示整个数组，计算的是整个数组的大小。</li><li><code>&amp;数组名</code>，这里的数组名表示整个数组，取出的是整个数组的地址。</li><li>除此之外所有的数组名都表示<code>首元素</code>的地址。</li></ol><h3 id="指针试题"><a href="#指针试题" class="headerlink" title="指针试题"></a>指针试题</h3><p>下面程序输出结果是什么?</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//&amp;a + 1数组地址取出+1=>跳过整个数组(结尾)</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>2,5</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//考点---指针+-整数,取决于指针类型</span><span class="token comment">//由于还未深入学习结构体，这里告知结构体的大小是20个字节</span><span class="token keyword">struct</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> Num<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>pcName<span class="token punctuation">;</span><span class="token keyword">short</span> sDate<span class="token punctuation">;</span><span class="token keyword">char</span> cha<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">short</span> sBa<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//假设p 的值为0x100000。 如下表表达式的值分别为多少？</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Test</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x100000</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>p <span class="token operator">+</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token operator">+</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c">p <span class="token operator">+</span> <span class="token number">0x1</span> 可以理解为 p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>即<span class="token number">0x100000</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">(</span><span class="token number">10</span>进制<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>转换成<span class="token number">16</span>进制<span class="token operator">=</span><span class="token operator">></span><span class="token number">0x00100014</span>  <span class="token comment">/*16进制数1048576=>10进制数10485761048576+1=1048577(10进制)=>16进制数100001*/</span>  无符号整型大小<span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">+</span><span class="token number">1</span>在原有大小加<span class="token number">4</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">100004</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x,%x"</span><span class="token punctuation">,</span> ptr1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>ptr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//ptr1[-1]等价于*(ptr1+(-1))等价于*(ptr1-1)=>4</span><span class="token comment">//小端地址顺序倒读</span><span class="token comment">//(int)a + 1往后读取一个字节,整型4个字节</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/25/C.png" alt="C.png" loading="lazy"></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>p <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//(0, 1), (2, 3), (4, 5)=>逗号表达式,结果为1,3,5</span><span class="token comment">//p[0]=>*(p+0)</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/25/-2021-04-25-154534.png" alt="-2021-04-25-154534.png" loading="lazy"></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p,%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/25/-2021-04-25-161421.png" alt="-2021-04-25-161421.png" loading="lazy"></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//int arr[10] = &#123;1,2,3,4,5&#125;;</span><span class="token comment">//int* p = arr;</span><span class="token comment">////*(p + 2) == p[2] ==> *(arr+2) == arr[2]</span><span class="token comment">//arr[2]; // ==> *(arr+2)</span><span class="token keyword">int</span> aa<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>aa <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>aa <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*(aa + 1) =>aa[1],第二行首元素地址=>6的地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><a href="https://www.imagehub.cc/image/NXtB7"><img src="https://s1.imagehub.cc/images/2021/04/25/-2021-04-25-184258.png" alt="-2021-04-25-184258.png" loading="lazy"></a></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>c<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"ENTER"</span><span class="token punctuation">,</span> <span class="token string">"NEW"</span><span class="token punctuation">,</span> <span class="token string">"POINT"</span><span class="token punctuation">,</span> <span class="token string">"FIRST"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span>cp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> c <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>cpp <span class="token operator">=</span> cp<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">++</span>cpp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">--</span><span class="token operator">*</span><span class="token operator">++</span>cpp <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>cpp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> cpp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/***++cpp++cpp前置++移动地址指向到C+2*++cpp解引用获取C+2**++cpp获取C+2地址指向的数组C内容=>POINT*/</span><span class="token comment">/**--*++cpp + 3++cpp前置++移动地址指向到C+1*++cpp解引用获取C+1空间--*++cpp空间存放c,此时指针不再指向原C+1对应的数组c元素地址NEW,而是ENTER*--*++cpp解引用地址,获取到ENTER中E的地址*--*++cpp + 3=>向后移动3位得到ER*/</span><span class="token comment">/**cpp[-2] + 3 =>**(cpp+(-2))+3=>**(cpp-2)+3*(cpp-2)获取到c+3空间**(cpp-2)获取到对应的FIRST空间,指针指向F**(cpp-2)+3=>向后移动3位得到ST*/</span><span class="token comment">/*cpp[-1][-1] + 1=>*(*(cpp-1)-1)+1*(cpp-1)获取到c+2空间内容,c+2指针指向POINT*(cpp-1)-1=>获取到c+1空间内容,c+1指针指向NEW*(*(cpp-1)-1)解引用地址,获取到NEW中N的地址*(*(cpp-1)-1)+1=>向后移动3位得到EW*/</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/25/-2021-04-25-201834.png" alt="-2021-04-25-201834.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> C试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C函数试题</title>
      <link href="posts/b2c64cd2/"/>
      <url>posts/b2c64cd2/</url>
      
        <content type="html"><![CDATA[<h5 id="创建一个整形数组，完成对数组的操作"><a href="#创建一个整形数组，完成对数组的操作" class="headerlink" title="创建一个整形数组，完成对数组的操作"></a>创建一个整形数组，完成对数组的操作</h5><ul><li>实现函数init()初始化数组为全0</li><li>实现print打印数组的每个元素</li><li>实现reverse函数完魂数组元素的逆置。</li></ul><p>要求:自己设计以上函数的参数,返回值。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> right <span class="token operator">=</span> sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>left<span class="token operator">++</span><span class="token punctuation">;</span>right<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Init(arr, sz);//把数组初始化0</span><span class="token function">Print</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印</span><span class="token function">Reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印</span><span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="交换数组"><a href="#交换数组" class="headerlink" title="交换数组"></a>交换数组</h5><p>将数组A中的内容和数组B中的内容进行交换。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="求输出结果"><a href="#求输出结果" class="headerlink" title="求输出结果"></a>求输出结果</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//int - 4字节</span><span class="token keyword">short</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span>arr<span class="token punctuation">;</span><span class="token comment">//short -- 2字节大小</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//循环访问4次</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//p+1时把arr整型数组中1的int4字节空间转为0</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x11223344</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//char类型.一次访问一字节,大小端</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//全局变量-不初始化-默认是0</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//-1</span><span class="token comment">//10000000000000000000000000000001</span><span class="token comment">//11111111111111111111111111111110</span><span class="token comment">//11111111111111111111111111111111</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//sizeof()-计算变量/类型所占内存的大小 >=0 无符号数</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span><span class="token comment">//c=a=6</span>b <span class="token operator">=</span> <span class="token operator">++</span>c<span class="token punctuation">,</span> c<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">++</span>a<span class="token punctuation">,</span> a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//c=8,b=7,a=8</span>b <span class="token operator">+=</span> a<span class="token operator">++</span> <span class="token operator">+</span> c<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d b = %d c = %d\n:"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//a++后置+=先使用a = 8, c=8, b+= --->7+16=23,a=9</span></code></pre><h5 id="统计二进制中1的个数"><a href="#统计二进制中1的个数" class="headerlink" title="统计二进制中1的个数"></a>统计二进制中1的个数</h5><p>写一个函数返回参数二进制中1的个数。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//此算法不能验证负数</span><span class="token comment">//int count_bit_one(unsigned int n)</span><span class="token comment">//&#123;</span><span class="token comment">//int count = 0;</span><span class="token comment">//while (n)</span><span class="token comment">//&#123;</span><span class="token comment">//if (n % 2 == 1)</span><span class="token comment">//&#123;</span><span class="token comment">//count++;</span><span class="token comment">//&#125;</span><span class="token comment">//n = n / 2;</span><span class="token comment">//&#125;</span><span class="token comment">//return count;</span><span class="token comment">//&#125;</span><span class="token comment">//int count_bit_one(int n)</span><span class="token comment">//&#123;</span><span class="token comment">//int count = 0;</span><span class="token comment">//int i = 0;</span><span class="token comment">//for (i = 0; i &lt; 32; i++)</span><span class="token comment">//&#123;</span><span class="token comment">//if (((n >> i) &amp; 1) == 1)</span><span class="token comment">//&#123;</span><span class="token comment">//count++;</span><span class="token comment">//&#125;</span><span class="token comment">//&#125;</span><span class="token comment">//return count;</span><span class="token comment">//&#125;</span><span class="token keyword">int</span> <span class="token function">count_bit_one</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>n <span class="token operator">=</span> n<span class="token operator">&amp;</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//n = n&amp;(n-1)</span><span class="token comment">//n</span><span class="token comment">//13</span><span class="token comment">//1101 n</span><span class="token comment">//1100 n-1</span><span class="token comment">//1100 n</span><span class="token comment">//1011 n-1</span><span class="token comment">//1000 n</span><span class="token comment">//0111 n-1</span><span class="token comment">//0000 n</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个非0数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写一个函数求a的二进制（补码）表示中有几个1</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">count_bit_one</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1</span><span class="token comment">//-1</span><span class="token comment">//100000000000000000000000000000001</span><span class="token comment">//111111111111111111111111111111110</span><span class="token comment">//111111111111111111111111111111111</span><span class="token comment">//000000000000000000000000000000001</span><span class="token comment">//</span><span class="token comment">//13</span><span class="token comment">//000000000000000000000000000001101</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"count = %d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//system("pause");//system库函数-执行系统命令-pause（暂停）</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在内存中的二进制以补码形式存在</span></code></pre><h5 id="求二进制中不同位的个数"><a href="#求二进制中不同位的个数" class="headerlink" title="求二进制中不同位的个数"></a>求二进制中不同位的个数</h5><p>编程实现:两个int (32位)整数m和n的二进制表达中，有多少个位(bit)不同?</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">count_bit_one</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>n <span class="token operator">=</span> n<span class="token operator">&amp;</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">get_diff_bit</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> m<span class="token operator">^</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//return count_bit_one(tmp);</span><span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tmp <span class="token operator">=</span> tmp<span class="token operator">&amp;</span><span class="token punctuation">(</span>tmp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入2个非0数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">get_diff_bit</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"count = %d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="交换二进制的奇数位和偶数位"><a href="#交换二进制的奇数位和偶数位" class="headerlink" title="交换二进制的奇数位和偶数位"></a>交换二进制的奇数位和偶数位</h5><p>获取一个整数二进制序列中所有的偶数位和奇数位，分别打印出二进制序列</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//00000000000000000000000000001010</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"奇数位：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>m <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"偶数位：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>m <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入1个非0数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="使用指针打印数组内容"><a href="#使用指针打印数组内容" class="headerlink" title="使用指针打印数组内容"></a>使用指针打印数组内容</h5><p>写一个函数打E印arr数组的内容，不使用数组下标，使用<code>指针</code>。arr是一个整形一维数组。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="乘法口诀表"><a href="#乘法口诀表" class="headerlink" title="乘法口诀表"></a>乘法口诀表</h5><p>实现一个函数，打印乘法口诀表，口诀表的行数和列数自己指定如:输入9，输出<code>9*9</code>口诀表，输出12，输出<code>12*12</code>的乘法口诀表。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//1*1=1</span><span class="token comment">//2*1=2 2*2=4</span><span class="token comment">//3*1=3 3*2=6 3*3=9</span><span class="token keyword">void</span> <span class="token function">print_table</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%-3d "</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入1个正整数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_table</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="字符串逆序（递归实现）"><a href="#字符串逆序（递归实现）" class="headerlink" title="字符串逆序（递归实现）"></a>字符串逆序（递归实现）</h5><p>编写一个函数<code> reverse_string(char * string)</code>（递归实现）</p><p>实现：将参数字符串中的字符反向排列。</p><p>要求：不能使用C函数库中的字符串操作函数。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>str<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//void reverse_string(char arr[])</span><span class="token comment">//&#123;</span><span class="token comment">//int left = 0;</span><span class="token comment">//int right = my_strlen(arr)-1;</span><span class="token comment">//</span><span class="token comment">//while (left&lt;right)</span><span class="token comment">//&#123;</span><span class="token comment">//int tmp = arr[left];</span><span class="token comment">//arr[left] = arr[right];</span><span class="token comment">//arr[right] = tmp;</span><span class="token comment">//left++;</span><span class="token comment">//right--;</span><span class="token comment">//&#125;</span><span class="token comment">//&#125;</span><span class="token keyword">void</span> <span class="token function">reverse_string</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">my_strlen</span><span class="token punctuation">(</span>arr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">reverse_string</span><span class="token punctuation">(</span>arr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span><span class="token comment">//fedcba</span><span class="token function">reverse_string</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="自定义函数求组成数字之和"><a href="#自定义函数求组成数字之和" class="headerlink" title="自定义函数求组成数字之和"></a>自定义函数求组成数字之和</h5><p>写一个递归函数，输入一个非负整数，返回组成它的数字之和</p><p>例如，调用<code>DigitSum(1729)</code>，则应该返回<code>1 + 7 + 2 + 9</code>，它的和是<code>19</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//输入：1729，输出：19</span><span class="token comment">//DigitSum(1729)</span><span class="token comment">//DigitSum(172) + 1729%10</span><span class="token comment">//DigitSum(17) + 172%10 + 1729%10</span><span class="token comment">//DigitSum(1) + 17%10 + ...</span><span class="token comment">//1+7+2+9</span><span class="token keyword">int</span> <span class="token function">DigitSum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">DigitSum</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入1个非0正整数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1729</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">DigitSum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="函数递归实现n的k次方"><a href="#函数递归实现n的k次方" class="headerlink" title="函数递归实现n的k次方"></a>函数递归实现n的k次方</h5><p>编写一个函数实现n的k次方，使用递归实现。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">double</span> <span class="token function">Pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//n^k = n* n^(k-1)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">Pow</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> n<span class="token operator">*</span><span class="token function">Pow</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入2个数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> ret <span class="token operator">=</span> <span class="token function">Pow</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %lf\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> C试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C指针的进阶</title>
      <link href="posts/b3621a9f/"/>
      <url>posts/b3621a9f/</url>
      
        <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><ol><li>字符指针</li><li>数组指针</li><li>指针数组</li><li>数组传参和指针传参</li><li>函数指针</li><li>函数指针数组</li><li>指向函数指针数组的指针</li><li>回调函数</li><li>指针和数组面试题的解析</li></ol><hr><p>指针的概念(基础)：</p><blockquote><ol><li>指针就是个变量，用来存放地址，地址唯一标识一块内存空间。</li><li>指针的大小是固定的4/8个字节（32位平台/64位平台）。</li><li>指针是有类型，指针的类型决定了指针的+-整数的步长，指针解引用操作的时候的权限。</li><li>指针的运算。</li></ol></blockquote><h3 id="字符指针"><a href="#字符指针" class="headerlink" title="字符指针"></a>字符指针</h3><p>在指针的类型中我们知道有一种指针类型为字符指针<code>char* </code></p><p><strong>基本用法</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token string">'z'</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">;</span><span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token string">'y'</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>其他用法</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token comment">//abcdef是一个常量字符串</span><span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcdef</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcdef</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:skyblue;">代码<code>char* pc = arr</code>; 特别容易被误以为是把字符串<code>abcdef </code>放到字符指针<code>pc </code>里了，但是/本质是把字符串<code>abcdef </code>首字符的地址放到了<code>pc </code>中。</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//char* pc = 'abc';</span><span class="token comment">//*pc = 'y';//段错误/程序崩溃</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span><span class="token comment">//准确写法</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>面试题</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"helloChaser"</span><span class="token punctuation">;</span><span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"helloChaser"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> str3 <span class="token operator">=</span> <span class="token string">"helloChaser"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> str4 <span class="token operator">=</span> <span class="token string">"helloChaser"</span><span class="token punctuation">;</span>  <span class="token comment">//准确写法</span><span class="token comment">//const char* str3 = "helloChaser";</span><span class="token comment">//const char* str4 = "helloChaser";</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1 and str2 are same\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1 and str2 are not same\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str3 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str3 and str4 are same\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str3 and str4 are not same\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//运行结果</span><span class="token comment">//str1 and str2 are not same</span><span class="token comment">//str3 and str4 are same</span><span class="token punctuation">&#125;</span><span class="token comment">//改变str3和str4互不干扰</span></code></pre><p>这里str3和str4指向的是一个同一个常量字符串。C/C++会把常量字符串存储到单独的一个内存区域，当几个指针指向同一个字符串的时候，他们实际会指向同一块内存。但是用相同的常量字符串去初始化不同的数组的时候就会开辟出不同的内存块。</p><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>指针数组是一个存放指针的<strong>数组</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//整型数组</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//字符数组</span><span class="token keyword">int</span><span class="token operator">*</span> parr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存放整型指针的数组 - 指针数组</span><span class="token keyword">char</span><span class="token operator">*</span> pch<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存放字符指针的数组 - 指针数组</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>指针数组常见用法:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> parr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> arr3 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>parr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h3><h4 id="数组指针的定义"><a href="#数组指针的定义" class="headerlink" title="数组指针的定义"></a>数组指针的定义</h4><p>​        我们已经熟悉： 整形指针：<code> int * pint</code>; 能够指向整形数据的指针。 浮点型指针： <code>float * pf;</code>能够指向浮点型数据的指针。</p><p>​        <font style="color:skyblue;">那数组指针应该是：能够指向数组的指针。</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//p1, p2分别是什么？</span></code></pre><p><strong>解释：</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//解释：p先和*结合，说明p是一个指针变量，然后指着指向的是一个大小为10个整型的数组。所以p是一个</span>指针，指向一个数组，叫数组指针。<span class="token comment">//这里要注意：[]的优先级要高于*号的，所以必须加上（）来保证p先和*结合。</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//int *p = NULL;//p是整型指针 - 指向整型的指针 - 可以存放整型的地址</span><span class="token comment">//char* pc = NULL;//pc是字符指针 - 指向字符的指针 - 可以存放字符的地址</span><span class="token comment">//数组指针 - 指向数组的指针 - 可以存放数组的地址</span><span class="token comment">/*arr 首元素地址&amp;arr[0] 首元素地址&amp;arr 数组地址*/</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//p就是数组指针</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">;</span><span class="token comment">//数组地址存储</span> <span class="token comment">/*printf("%p\n",p);printf("%p\n", p[0]);printf("%p\n", p[1]);printf("%p\n", p[2]);*/</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/20/C.png" alt="C.png" loading="lazy">解释图例</p><h4 id="amp-数组名和数组名"><a href="#amp-数组名和数组名" class="headerlink" title="&amp;数组名和数组名"></a>&amp;数组名和数组名</h4><p>我们知道arr是数组名，数组名表示数组首元素的地址。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/20/Ca1bb24237b781101.png" alt="Ca1bb24237b781101.png" loading="lazy"></p><p>可见数组名和&amp;数组名打印的地址是一样的。继续深入:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr = %p\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;arr= %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr+1 = %p\n"</span><span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;arr+1= %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/20/C9b82c233eb9dc8a4.png" alt="C9b82c233eb9dc8a4.png" loading="lazy"></p><p>✏️根据上面的代码我们发现:</p><p>​        其实&amp;arr和arr，虽然值是一样的，但是意义应该不一样的。</p><p>​        <font style="color:deepskyblue;">实际上： &amp;arr 表示的是数组的地址，而不是数组首元素的地址。</font></p><p>​        数组的地址+1，跳过整个数组的大小，所以&amp;arr+1 相对于&amp;arr 的差值是40.</p><h4 id="数组指针的使用"><a href="#数组指针的使用" class="headerlink" title="数组指针的使用"></a>数组指针的使用</h4><p>既然数组指针指向的是数组，那数组指针中存放的应该是数组的地址。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//方法1</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//int(*pa)[10] = &amp;arr;</span><span class="token comment">//int i = 0;</span><span class="token comment">////方法2</span><span class="token comment">////for ( i = 0; i &lt; 10; i++)</span><span class="token comment">////&#123;</span><span class="token comment">////printf("%d ",*(*pa + i));//*pa == arr</span><span class="token comment">////&#125;</span><span class="token comment">////方法3</span><span class="token comment">//for ( i = 0; i &lt; 10; i++)</span><span class="token comment">//&#123;</span><span class="token comment">//printf("%d ", (*pa)[i]);</span><span class="token comment">//&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//其实一般都很少用上面的代码方法</span></code></pre><p>一个数组指针的使用：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//参数是数组形式</span><span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印行</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> y<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//参数是指针形式</span><span class="token keyword">void</span> <span class="token function">print2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//找到行</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//找到列 -- 每个数组中的元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> y<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//printf("%d ", *(*(p + i) + j));</span><span class="token comment">//p+i找到某一行的地址</span><span class="token comment">//*(p + i)解引用找到真实行数</span><span class="token comment">//通过下标[j]找到一行某个数字</span><span class="token comment">//printf("%d ", (*(p + i))[j]);</span><span class="token comment">//等价写法</span><span class="token comment">//printf("%d ", *(*(p + i)+j));</span><span class="token comment">//printf("%d ", *(p[i] + j));</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//print1(arr, 3, 5);//arr - 数组名 - 数组名就是首元素地址 -第一行一维数组的地址</span><span class="token function">print2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int arr[10] = &#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><span class="token comment">//int i = 0;</span><span class="token comment">//int* p = arr;</span><span class="token comment">//for ( i = 0; i &lt; 10; i++)</span><span class="token comment">//&#123;</span><span class="token comment">//printf("%d ",p[i]);</span><span class="token comment">////printf("%d ", *(p + i));</span><span class="token comment">////printf("%d ", *(arr + i));</span><span class="token comment">////printf("%d ", arr[i]);//arr[i] == *(arr + i) == *(p + i) == p[i]</span><span class="token comment">//&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="🌷回顾"><a href="#🌷回顾" class="headerlink" title="🌷回顾"></a>🌷回顾</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//arr是一个5个元素的整型数组</span><span class="token keyword">int</span> <span class="token operator">*</span>parr1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//parr1是一个数组，数组有10个元素，每个元素的类型是int*,parr1是指针数组</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>parr2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//parr2是一个指针，该指针指向了一个数组，数组有10个元素，每个元素的类型是int - parr2是数组指针</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>parr3<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//'parr3是一个数组，该数组有10个元素，每个元素是一个数组指针,该数组指针指向的数组有5个元素，每个元素是int</span></code></pre><h3 id="数组-指针参数"><a href="#数组-指针参数" class="headerlink" title="数组/指针参数"></a>数组/指针参数</h3><h4 id="一维数组传参"><a href="#一维数组传参" class="headerlink" title="一维数组传参"></a>一维数组传参</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token comment">//ok</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok,这里数组大小[20]可以省略</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token comment">//ok</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>arr2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test2</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="二维数组传参"><a href="#二维数组传参" class="headerlink" title="二维数组传参"></a>二维数组传参</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//err</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//总结：二维数组传参，函数形参的设计只能省略第一个[]的数字。</span><span class="token comment">//因为对一个二维数组，可以不知道有多少行，但是必须知道一行多少元素</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token comment">//err</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//err</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token comment">//err</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="一级指针传参"><a href="#一级指针传参" class="headerlink" title="一级指针传参"></a>一级指针传参</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一级指针p，传给函数</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h4><p><font style="color:lightskyblue;">当一个函数的参数部分为一级指针的时候，函数能接收什么参数?</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ok</span><span class="token function">test1</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ok</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token string">'z'</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ok</span><span class="token function">test2</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ok</span><span class="token punctuation">&#125;</span></code></pre><h4 id="二级指针传参"><a href="#二级指针传参" class="headerlink" title="二级指针传参"></a>二级指针传参</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="思考：-1"><a href="#思考：-1" class="headerlink" title="思考："></a>思考：</h4><p><font style="color:lightskyblue;">当一个函数的参数部分为二级指针的时候，函数能接收什么参数?</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span>ppc <span class="token operator">=</span> <span class="token operator">&amp;</span>pc<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span>ppc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Ok</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>例1:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//数组指针–是指向数组的指针</span><span class="token comment">//函数指针–是指向函数的指针</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token keyword">return</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//&amp;函数名 和 函数名 都是函数的地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> Add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>Add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/21/c.png" alt="c.png" loading="lazy"></p><p>例2:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> Print<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"Be Happy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="函数地址保存"><a href="#函数地址保存" class="headerlink" title="函数地址保存"></a>函数地址保存</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token keyword">return</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">/*int arr[10] = &#123; 0 &#125;;int(*p)[10] = &amp;arr;*/</span><span class="token comment">//&amp;函数名 和 函数名 都是函数的地址</span><span class="token comment">//printf("%p\n", Add);</span><span class="token comment">//printf("%p\n",&amp;Add);</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> Add<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="不寒而🌰"><a href="#不寒而🌰" class="headerlink" title="不寒而🌰"></a>不寒而🌰</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//代码1</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把0强制类型转换成: void (*) (）函数指针类型–0就是一个函数的地址</span><span class="token comment">//调用0地址处的该函数</span><span class="token comment">//代码2</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//简化</span><span class="token keyword">typedef</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">pfun_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">pfun_t</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token class-name">pfun_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//signal是一个函数声明</span><span class="token comment">//signal函数的参数有2个，第一个是int。第二个是函数指针，该函数指针指向的函数的参数是int，返回类型是void</span><span class="token comment">//signal函数的返回类型也是一个函数指针:该函数指针指向的函数的参数是int，返回类型是void</span></code></pre><h3 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h3><p>数组是一个存放相同类型数据的存储空间</p><h4 id="函数指针的数组定义"><a href="#函数指针的数组定义" class="headerlink" title="函数指针的数组定义"></a>函数指针的数组定义</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>parr1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>parr2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> parr3<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>答案是：<code>parr1 </code></p><p>parr1 先和[] 结合，说明parr1是数组</p><p><font style="color:skyblue;">数组的内容是是: <code>int (*)() </code>类型的函数指针。</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//指针数组</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//需要一个数组,可以存放4个函数地址 --- 函数指针的数组</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> Add<span class="token punctuation">;</span><span class="token comment">//Sub/Mul/Div</span><span class="token comment">//函数指针的数组</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>parr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> Add<span class="token punctuation">,</span> Sub<span class="token punctuation">,</span> Mul<span class="token punctuation">,</span> Div <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> parr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">my_strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.写一个函数指针 pf ，能够指向my_strcpy</span><span class="token comment">//2．写一个函数指针数组pfArr，能够存放4个my_strcpy函数的地址</span><span class="token comment">//answer:</span><span class="token number">1.</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2.</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>pfArr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><font style="color:deepskyblue;font-size:18px;">函数指针数组的用途：转移表</font></p><h4 id="代码实例：（简易计算器）"><a href="#代码实例：（简易计算器）" class="headerlink" title="代码实例：（简易计算器）"></a>代码实例：（简易计算器）</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 1:add 2:sub \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 3:mul 4:div \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 5.XOR 0:exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">XOR</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//pfArr是一个函数指针数组 - 转移表</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pfArr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> Add<span class="token punctuation">,</span> Sub<span class="token punctuation">,</span> Mul<span class="token punctuation">,</span> Div<span class="token punctuation">,</span> XOR <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请选择:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> input<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入两个操作数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> pfArr<span class="token punctuation">[</span>input<span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"退出计算思密达!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What are you 输啥嘞!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//int main()</span><span class="token comment">//&#123;</span><span class="token comment">//int input = 0;</span><span class="token comment">//int x = 0;</span><span class="token comment">//int y = 0;</span><span class="token comment">//do</span><span class="token comment">//&#123;</span><span class="token comment">//menu();</span><span class="token comment">//printf("请选择:>\n");</span><span class="token comment">//scanf("%d", &amp;input);</span><span class="token comment">//switch (input)</span><span class="token comment">//&#123;</span><span class="token comment">//case 1:</span><span class="token comment">//printf("请输入两个操作数:>\n");</span><span class="token comment">//scanf("%d%d", &amp;x, &amp;y);</span><span class="token comment">//printf("%d\n", Add(x, y));</span><span class="token comment">//break;</span><span class="token comment">//case 2:</span><span class="token comment">//printf("请输入两个操作数:>\n");</span><span class="token comment">//scanf("%d%d", &amp;x, &amp;y);</span><span class="token comment">//printf("%d\n", Sub(x, y));</span><span class="token comment">//break;</span><span class="token comment">//case 3:</span><span class="token comment">//printf("请输入两个操作数:>\n");</span><span class="token comment">//scanf("%d%d", &amp;x, &amp;y);</span><span class="token comment">//printf("%d\n", Mul(x, y));</span><span class="token comment">//break;</span><span class="token comment">//case 4:</span><span class="token comment">//printf("请输入两个操作数:>\n");</span><span class="token comment">//scanf("%d%d", &amp;x, &amp;y);</span><span class="token comment">//printf("%d\n", Div(x, y));</span><span class="token comment">//break;</span><span class="token comment">//case 0:</span><span class="token comment">//printf("退出计算思密达!\n");</span><span class="token comment">//break;</span><span class="token comment">//default:</span><span class="token comment">//printf("What are you 输啥嘞!\n");</span><span class="token comment">//break;</span><span class="token comment">//&#125;</span><span class="token comment">//&#125; while (input);</span><span class="token comment">//&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 1:add 2:sub \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 3:mul 4:div \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 5.XOR 0:exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">XOR</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入两个操作数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"结果为 = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pf</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请选择:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">Calc</span><span class="token punctuation">(</span>Add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token function">Calc</span><span class="token punctuation">(</span>Sub<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token function">Calc</span><span class="token punctuation">(</span>Mul<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token function">Calc</span><span class="token punctuation">(</span>Div<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token function">Calc</span><span class="token punctuation">(</span>XOR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"退出计算思密达!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"What are you 输啥嘞!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="指向函数指针数组的指针"><a href="#指向函数指针数组的指针" class="headerlink" title="指向函数指针数组的指针"></a>指向函数指针数组的指针</h3><p>指向函数指针数组的指针是一个<code>指针</code> 指针指向一个<code>数组</code>，数组的元素都是<code>函数指针</code>;</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">;</span><span class="token comment">//取出数组地址</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数指针</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pfArr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//pfArr是一个函数指针数组</span><span class="token comment">//ppfArr 是一个数组指针,指针指向的数组有4个元素</span><span class="token comment">//指向的数组的每个元素的类型是一个函数指针 int(*)(int, int)</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>ppfArr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>pfArr<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><blockquote><p>回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is:%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"test\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="qsort函数的使用："><a href="#qsort函数的使用：" class="headerlink" title="qsort函数的使用："></a>qsort函数的使用：</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//int main()</span><span class="token comment">//&#123;</span><span class="token comment">//int a = 10;</span><span class="token comment">////int* pa = &amp;a;</span><span class="token comment">////char* pc = &amp;a;</span><span class="token comment">//</span><span class="token comment">////char ch = 'w';</span><span class="token comment">//void* p = &amp;a;</span><span class="token comment">////*p = 0;</span><span class="token comment">////p++;</span><span class="token comment">//</span><span class="token comment">////p = &amp;ch;</span><span class="token comment">////void* 类型的指针 可以接收任意类型的地址</span><span class="token comment">////void* 类型的指针 不能进行解引用操作</span><span class="token comment">////void* 类型的指针 不能进行+-整数的操作</span><span class="token comment">//</span><span class="token comment">//return 0;</span><span class="token comment">//&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp_int</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> e1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> e2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//比较两个整形值的</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>e1 <span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>e2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">cmp_float</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>e1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>e2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*if (*(float*)e1 == *(float*)e2)return 0;else if (*(float*)e1 > *(float*)e2)return 1;elsereturn -1;*/</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">)</span>e1 <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">)</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//强制类型转换解决输出警告</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">cmp_stu_by_age</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> e1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> e2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token operator">*</span><span class="token punctuation">)</span>e1<span class="token punctuation">)</span><span class="token operator">-></span>age <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token operator">*</span><span class="token punctuation">)</span>e2<span class="token punctuation">)</span><span class="token operator">-></span>age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">cmp_stu_by_name</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>e1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> e2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//比较名字就是比较字符串</span><span class="token comment">//字符串比较不能直接用>&lt;=来比较，应该用strcmp函数</span><span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token operator">*</span><span class="token punctuation">)</span>e1<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token operator">*</span><span class="token punctuation">)</span>e2<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sz<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp_int<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> f<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token number">7.0</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">qsort</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> sz<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp_float<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f "</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">qsort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sz<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp_stu_by_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cmp_stu_by_age</span><span class="token comment">//第一个参数：待排序数组的收元素地址</span><span class="token comment">//第二个参数：待排序数组的元素个数</span><span class="token comment">//第三个参数：待排序数组的每个元素的大小-单位是字节</span><span class="token comment">//第四个参数：是函数指针，比较两个元素的所用函数的地址-这个函数使用者自己实现</span><span class="token comment">//函数指针的两个参数是：待比较的两个元素的地址</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//test1();//整型排序</span><span class="token comment">//test2();//浮点排序</span><span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>使用回调函数，模拟实现qsort（采用冒泡的方式）。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//qsort函数简化结果</span><span class="token comment">//void qsort(void* base,</span><span class="token comment">//size_t num,</span><span class="token comment">//size_t width,</span><span class="token comment">//int(*cmp)(const void *e1, const void *e2)</span><span class="token comment">//);</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp_stu_by_age</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> e1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> e2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token operator">*</span><span class="token punctuation">)</span>e1<span class="token punctuation">)</span><span class="token operator">-></span>age <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token operator">*</span><span class="token punctuation">)</span>e2<span class="token punctuation">)</span><span class="token operator">-></span>age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">cmp_stu_by_name</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>e1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> e2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//比较名字就是比较字符串</span><span class="token comment">//字符串比较不能直接用>&lt;=来比较，应该用strcmp函数</span><span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token operator">*</span><span class="token punctuation">)</span>e1<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token operator">*</span><span class="token punctuation">)</span>e2<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">cmp_int</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> e1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> e2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//比较两个整形值</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>e1 <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>e2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//实现bubble_sort函数的程序员不知道，未来排序待比较的两个元素的类型</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> buf1<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span>buf2<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token operator">*</span>buf1<span class="token punctuation">;</span><span class="token operator">*</span>buf1 <span class="token operator">=</span> <span class="token operator">*</span>buf2<span class="token punctuation">;</span><span class="token operator">*</span>buf2 <span class="token operator">=</span> tmp<span class="token punctuation">;</span>buf1<span class="token operator">++</span><span class="token punctuation">;</span>buf2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>base<span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>cmp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>e1<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>e2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//趟数</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//每一趟比较的对数</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//两个元素的比较</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>base <span class="token operator">+</span> j<span class="token operator">*</span>width<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>base <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>width<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//交换</span><span class="token function">Swap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>base <span class="token operator">+</span> j<span class="token operator">*</span>width<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>base <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>width<span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//bubble_sort(s, sz, sizeof(s[0]), cmp_stu_by_age);</span><span class="token function">bubble_sort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sz<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp_stu_by_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C数据的存储</title>
      <link href="posts/fb66a821/"/>
      <url>posts/fb66a821/</url>
      
        <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><ol><li>数据类型详细介绍</li><li>整形在内存中的存储：原码、反码、补码</li><li>大小端字节序介绍及判断</li><li>浮点型在内存中的存储解析</li></ol><h3 id="数据类型介绍"><a href="#数据类型介绍" class="headerlink" title="数据类型介绍"></a>数据类型介绍</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//内置类型</span><span class="token keyword">char</span> <span class="token comment">//字符数据类型</span><span class="token keyword">short</span> <span class="token comment">//短整型</span><span class="token keyword">int</span> <span class="token comment">//整形</span><span class="token keyword">long</span> <span class="token comment">//长整型</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token comment">//更长的整形</span><span class="token keyword">float</span> <span class="token comment">//单精度浮点数</span><span class="token keyword">double</span> <span class="token comment">//双精度浮点数</span></code></pre><p><font style="color:skyblue;">C语言数据类型分为内置类型和自定义类型(构造类型)</font></p><p><strong>类型的意义：</strong></p><p>​    1.类型开辟内存空间的大小（大小决定了使用范围）。</p><p>​    2.决定看待内存空间的视角</p><p><strong>代码实例及图解</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><a href="https://www.imagehub.cc/image/MltCm"><img src="https://s1.imagehub.cc/images/2021/04/17/int-c.png" alt="int-c.png" loading="lazy"></a><a href="https://www.imagehub.cc/image/Ml8rN"><img src="https://s1.imagehub.cc/images/2021/04/17/float-c.png" alt="float-c.png" loading="lazy"></a></p><p>从图例结果可以看到,定义的数值大小一致,但由于数据类型不同,其对应的在内存中存储的值不一样</p><h3 id="类型的基本归类："><a href="#类型的基本归类：" class="headerlink" title="类型的基本归类："></a>类型的基本归类：</h3><h4 id="整形家族："><a href="#整形家族：" class="headerlink" title="整形家族："></a>整形家族：</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token keyword">signed</span> <span class="token keyword">char</span>  <span class="token keyword">short</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span><span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span>  <span class="token keyword">int</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token keyword">signed</span> <span class="token keyword">int</span>  <span class="token keyword">long</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span><span class="token keyword">signed</span> <span class="token keyword">long</span> <span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span></code></pre><h4 id="浮点数家族："><a href="#浮点数家族：" class="headerlink" title="浮点数家族："></a>浮点数家族：</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span><span class="token keyword">double</span></code></pre><h4 id="构造类型："><a href="#构造类型：" class="headerlink" title="构造类型："></a>构造类型：</h4><pre class="language-c" data-language="c"><code class="language-c">数组类型结构体类型 <span class="token keyword">struct</span>枚举类型 <span class="token keyword">enum</span>联合类型 <span class="token keyword">union</span></code></pre><h4 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>pi<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>pc<span class="token punctuation">;</span><span class="token keyword">float</span><span class="token operator">*</span> pf<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> pv<span class="token punctuation">;</span></code></pre><h4 id="空类型："><a href="#空类型：" class="headerlink" title="空类型："></a>空类型：</h4><blockquote><p>void 表示空类型（无类型）<br>通常应用于函数的返回类型、函数的参数、指针类型。</p></blockquote><h3 id="整形在内存中的存储"><a href="#整形在内存中的存储" class="headerlink" title="整形在内存中的存储"></a>整形在内存中的存储</h3><p>一个变量的创建是要在内存中开辟空间的。空间的大小是根据不同的类型而决定的。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>我们知道int类型为<code>a </code>分配四个字节的空间。</p><p>那如何存储？接下来了解下面的概念：</p><h4 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h4><p>计算机中的有符号数有三种表示方法，即原码、反码和补码。</p><p>三种表示方法均有<font style="color:pink;font-size:18px;">符号位和数值位</font>两部分，符号位都是用0表示“正”，用1表示“负”，而数值位三种表示方法各不相同。</p><blockquote><p><strong>原码</strong><br>直接将二进制按照正负数的形式翻译成二进制就可以。</p></blockquote><blockquote><p><strong>反码</strong><br>将原码的符号位不变，其他位依次按位取反就可以得到了。</p></blockquote><blockquote><p><strong>补码</strong><br>反码+1就得到补码。</p></blockquote><p><font style="color:deepskyblue;">正数的原、反、补码都相同。</font></p><p>✏️对于整形来说：数据存放内存中其实存放的是补码。</p><blockquote><p>在计算机系统中，数值一律用补码来表示和存储。原因在于，使用补码，可以将符号位和数值域统一处理； 同时，加法和减法也可以统一处理（CPU只有加法器）此外，补码与原码相互转换，其运算过程是相同的，不需要额外的硬件电路。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//00000000 00000000 00000000 00010100 - 原码</span><span class="token comment">//00000000 00000000 00000000 00010100 - 反码</span><span class="token comment">//00000000 00000000 00000000 00010100 - 补码</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//4个字节-32bit</span><span class="token comment">//10000000 00000000 00000000 00001010 - 原码</span><span class="token comment">//11111111 11111111 11111111 11110101 - 反码</span><span class="token comment">//1111 1111 1111 1111 1111 1111 1111 0110 - 补码</span><span class="token comment">//四位二进制可以转换为16进制数</span><span class="token comment">//变量b的补码转换成16进制数为:</span><span class="token comment">//FFFFFFF6</span><span class="token comment">//转换成地址:0xFFFFFFF6</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>图例A:</strong></p><p><img src="https://s1.imagehub.cc/images/2021/04/17/c.png" alt="c.png" loading="lazy"></p><p>✍<strong>小结:</strong></p><p><img src="https://s1.imagehub.cc/images/2021/04/17/-2021-04-17-200636.png" alt="-2021-04-17-200636.png" loading="lazy"></p><p>我们可以看到对于a和b分别存储的是补码。但是我们发现顺序有点不对劲。 为什么？</p><h4 id="大小端介绍"><a href="#大小端介绍" class="headerlink" title="大小端介绍"></a>大小端介绍</h4><blockquote><p>大端（存储）模式，是指数据的低位保存在内存的高地址中，而数据的高位，保存在内存的低地址中；</p><p>小端（存储）模式，是指数据的低位保存在内存的低地址中，而数据的高位,，保存在内存的高地址中。</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/360037797">为什么存在 大端 模式 小端</a></p><blockquote><p>为什么会有大小端模式之分呢？</p><p>这是因为在计算机系统中，我们是以字节为单位的，每个地址单元都对应着一个字节，一个字节为8bit。但是在C语言中除了8bit的char之外，还有16bit的short型，32bit的long型（要看具体的编译器），另外，对于位数大于8位的处理器，例如16位或者32位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如何将多个字节安排的问题。因此就导致了大端存储模式和小端存储模式。</p><p>例如一个16bit 的short 型x ，在内存中的地址为0x0010 ， x 的值为0x1122 ，那么0x11 为高字节， 0x22为低字节。对于大端模式，就将0x11 放在低地址中，即0x0010 中， 0x22 放在高地址中，即0x0011 中。小端模式，刚好相反。我们常用的X86 结构是小端模式，而KEIL C51 则为大端模式。很多的ARM，DSP都为小端模式。有些ARM处理器还可以由硬件来选择是大端模式还是小端模式。</p></blockquote><h5 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h5><p>设计一个小程序来判断当前机器的字节序</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token function">check_sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//char* p = (char*)&amp;a;</span><span class="token comment">////*p返回1,小端 返回0,大端</span><span class="token comment">//return *p;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//返回1,小端 返回0,大端</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">check_sys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"小端\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"大端\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="浮点型在内存中的存储"><a href="#浮点型在内存中的存储" class="headerlink" title="浮点型在内存中的存储"></a>浮点型在内存中的存储</h3><p><strong>常见的浮点数：</strong><br>        <code>3.14159 1E10 </code></p><blockquote><p>浮点数家族包括： float、double、long double 类型。 </p><p>浮点数表示的范围：<code>float.h</code>中定义</p></blockquote><p>浮点数存储代码例：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">float</span> <span class="token operator">*</span>pFloat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>n<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n的值为：%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*pFloat的值为：%f\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>pFloat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.000000</span><span class="token operator">*</span>pFloat <span class="token operator">=</span> <span class="token number">9.0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num的值为：%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1091567616</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*pFloat的值为：%f\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>pFloat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9.000000</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>num 和*pFloat 在内存中明明是同一个数，为什么浮点数和整数的解读结果会差别这么大？ </p><p>📖详细解读：</p><blockquote><p>根据国际标准IEEE（电气和电子工程协会） 754，任意一个二进制浮点数V可以表示成下面的形式：</p><ul><li>​                (-1)^S * M * 2^E</li><li>​                (-1)^s表示符号位，当s=0，V为正数；当s=1，V为负数。</li><li>​                M表示有效数字，大于等于1，小于2。</li><li>​                2^E表示指数位。</li></ul></blockquote><p>举个🌰：</p><p> 十进制的5.0，写成二进制是101.0 ，相当于1.01×2^2 。 那么，按照上面V的格式，可以得出s=0，M=1.01，E=2。<br>        十进制的-5.0，写成二进制是-101.0 ，相当于-1.01×2^2 。那么，s=1，M=1.01，E=2。</p><p><font style="color:deepskyblue;font-size:17px;">IEEE 754规定： </font></p><p>​        对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。</p><p><img src="https://s1.imagehub.cc/images/2021/04/19/IEEE-754-32.png" alt="IEEE-754-32.png" loading="lazy"></p><p>​        对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。</p><p><img src="https://s1.imagehub.cc/images/2021/04/19/IEEE-754-64.png" alt="IEEE-754-64.png" loading="lazy"></p><p>​        <font style="color:orange;">IEEE 754对有效数字M和指数E，还有一些特别规定。</font> 前面说过， 1≤M&lt;2 ，也就是说，M可以写成1.xxxxxx 的形式，其中xxxxxx表示小数部分。</p><p>​       IEEE 754规定，在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面的xxxxxx部分。比如保存1.01的时候，只保存01，等到读取的时候，再把第一位的1加上去。这样做的目的，是节省1位有效数字。以32位浮点数为例，留给M只有23位，将第一位的1舍去以后，等于可以保存24位有效数字。</p><p>​     <font style="color:orange;">至于指数E，情况就比较复杂。</font><br>​            <font style="color:pink;">首先，E为一个无符号整数（unsigned int）</font> 这意味着，如果E为8位，它的取值范围为<code>0-255</code>；如果E为11位，它的取值范围为<code>0-2047</code>。但是，我们知道，科学计数法中的E是可以出现负数的，所以IEEE 754规定，存入内存时E的真实值必须再加上一个中间数， <font style="color:yellowgreen;">对于8位的E，这个中间数是127；对于11位的E，这个中间数是1023。</font>比如，2^10的E是10，所以保存成32位浮点数时，必须保存成10+127=137，即10001001。</p><h4 id="浮点型数据在内存存放代码例"><a href="#浮点型数据在内存存放代码例" class="headerlink" title="浮点型数据在内存存放代码例:"></a><font style="color:deepskyblue;">浮点型数据在内存存放代码例:</font></h4><h5 id="例F1"><a href="#例F1" class="headerlink" title="例F1"></a>例F1</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">5.5</span><span class="token punctuation">;</span><span class="token comment">//十进制5.5转换成二进制数-->101.1</span><span class="token comment">//转换成浮点数计数法-->(-1)^0 * 1.011*2^2</span><span class="token comment">//S=0 M=1.011 E =2</span><span class="token comment">/*按照IEEE 754规则:最高位符号位为0E实际值为2,8个bit位=>2+127=>129129的二进制序列为=>10000001紧接着存放小数位=>011,但规定float有23个bit位则小数位转换成二进制序列为:011 0000 0000 0000 0000 0000所以浮点数5.5的完整二级制序列为0(符号位)+ 10000001 + 011 0000 0000 0000 0000 0000,即0100 0000 1011 0000 0000 0000 0000 0000转换成16进制数=>0100 = 4 0000 = 01011 = 11 = B...最终浮点数5.5的16进制数为=>0x40b00000*/</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/19/c.png" alt="c.png" loading="lazy"></p><h4 id="指数E从内存中取出可分成三种情况："><a href="#指数E从内存中取出可分成三种情况：" class="headerlink" title="指数E从内存中取出可分成三种情况："></a><font style="color:orange;">指数E从内存中取出可分成三种情况：</font></h4><h5 id="E不全为0或不全为1"><a href="#E不全为0或不全为1" class="headerlink" title="E不全为0或不全为1"></a>E不全为0或不全为1</h5><blockquote><p>这时，浮点数就采用下面的规则表示，即指数E的计算值减去127（或1023），得到真实值，再将有效数字M前加上第一位的1。 比如： 0.5（1/2）的二进制形式为0.1，由于规定正数部分必须为1，即将小数点右移1位，则为1.0*2^(-1)，其阶码为-1+127=126，表示为01111110，而尾数1.0去掉整数部分为0，补齐0到23位00000000000000000000000，则其二进制表示形式为:</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token number">0</span> <span class="token number">01111110</span> <span class="token number">00000000000000000000000</span></code></pre><h5 id="E全为0"><a href="#E全为0" class="headerlink" title="E全为0"></a>E全为0</h5><blockquote><p>这时，浮点数的指数E等于1-127（或者1-1023）即为真实值， 有效数字M不再加上第一位的1，而是还原为0.xxxxxx的小数。这样做是为了表示±0，以及接近于0的很小的数字</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//假设内存中存储这样一个二进制数</span><span class="token number">0</span> <span class="token number">00000000</span> <span class="token number">01100000000000000000000</span><span class="token comment">//则按照全0规则转换为</span><span class="token operator">+</span><span class="token operator">/</span><span class="token operator">-</span>   <span class="token number">0.011</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">^</span><span class="token operator">-</span><span class="token number">126</span></code></pre><h5 id="E全为1"><a href="#E全为1" class="headerlink" title="E全为1"></a>E全为1</h5><blockquote><p>这时，如果有效数字M全为0，表示±无穷大（正负取决于符号位s）</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//假设当前二进制序列值为</span><span class="token number">0</span> <span class="token number">11111111</span> <span class="token number">0110000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span><span class="token number">11111111</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">=</span> E <span class="token operator">+</span> <span class="token number">127</span> <span class="token operator">=</span> <span class="token operator">></span>E <span class="token operator">=</span> <span class="token number">128</span><span class="token comment">//如果转化成计数法将是如下情形(数值将正负无穷大)</span><span class="token operator">+</span><span class="token operator">/</span><span class="token operator">-</span> <span class="token number">1.</span>XXX <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">^</span> <span class="token number">128</span></code></pre><h4 id="✈️例F1解析"><a href="#✈️例F1解析" class="headerlink" title="✈️例F1解析"></a>✈️例F1解析</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*整型9的原反补码:00000000 00000000 00000000 00001001*/</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">/**pFloatS=>0=>正数E=>00000000=>全0情况(-1)^0 * 0.0000000 00000000 00000000 00001001 * 2^-126综上所述:该数值表示正无限趋近于0*/</span><span class="token keyword">float</span> <span class="token operator">*</span>pFloat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>n<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n的值为：%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*pFloat的值为：%f\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>pFloat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.000000</span><span class="token operator">*</span>pFloat <span class="token operator">=</span> <span class="token number">9.0</span><span class="token punctuation">;</span><span class="token comment">/*1001.01.001*2^3(-1)^0 * 1.001 * 2^30(正数) + 3+127=130 + 001 0000 0000 0000 0000 0000即:0 10000010 001 0000 0000 0000 0000 000001000001000100000000000000000000*/</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num的值为：%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1091567616</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*pFloat的值为：%f\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>pFloat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9.000000</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="⚡习题"><a href="#⚡习题" class="headerlink" title="⚡习题"></a>⚡习题</h3><p>下面这些代码例输出结果是什么?</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//变量a的原反补码:</span><span class="token comment">//10000000 00000000 00000000 00000001</span><span class="token comment">//11111111 11111111 11111111 11111110</span><span class="token comment">//11111111 11111111 11111111 11111111</span><span class="token comment">//a一个字节只能存8个bit位->11111111</span><span class="token comment">//a是有符号位char,则最高位为符号位进行整型提升,补码结果:</span><span class="token comment">//11111111 11111111 11111111 11111111</span><span class="token comment">//转换成原码还是10000000 00000000 00000000 00000001,所以打印-1</span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//变量b的补码:11111111</span><span class="token keyword">signed</span> <span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//变量c的补码:11111111</span><span class="token comment">//无符号字符变量c,整型提升高位补0,则32位完整补码为:00000000 00000000 00000000 11111111</span><span class="token comment">//最高位是0,为正数,则原反补相同</span><span class="token comment">//11111111装换成十进制就是255</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" a=%d\n b=%d\n c=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//10000000 00000000 00000000 10000000</span><span class="token comment">//11111111 11111111 11111111 01111111</span><span class="token comment">//11111111 11111111 11111111 10000000 -补码</span><span class="token comment">//10000000</span><span class="token comment">//整型提升结果:</span><span class="token comment">//11111111 11111111 11111111 10000000 -补码</span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span><span class="token comment">//%d - 打印十进制的有符号数字</span><span class="token comment">//%u - 打印十进制的无符号数字 - 则原反补相同</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出补码转换后的十进制结果 - 4294967168</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span><span class="token comment">//Sleep休眠函数头文件</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//无符号数没有符号位(0/1)</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//-1在无符号数定义下被认为是一个超大二进制数(最终转为十进制数输出)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//毫秒单位</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//char的取值范围为 - 128~127</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//下标0-999</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印\0之前的长度</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//0-255</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//i &lt;= 255恒成立</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="😂清醒一下"><a href="#😂清醒一下" class="headerlink" title="😂清醒一下"></a>😂清醒一下</h3><iframe height="691" src="https://www.yunyoujun.cn/air-conditioner/"></iframe>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C基础结构体</title>
      <link href="posts/41ac2d81/"/>
      <url>posts/41ac2d81/</url>
      
        <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>​        结构体类型的声明</li><li>​        结构体初始化</li><li>​        结构体成员访问</li><li>​        结构体传参</li></ul><h3 id="结构体的声明"><a href="#结构体的声明" class="headerlink" title="结构体的声明"></a>结构体的声明</h3><h4 id="结构的基础知识"><a href="#结构的基础知识" class="headerlink" title="结构的基础知识"></a>结构的基础知识</h4><blockquote><p>结构是一些值的集合，这些值称为成员变量。结构的每个成员可以是不同类型的变量。</p></blockquote><h4 id="结构的声明"><a href="#结构的声明" class="headerlink" title="结构的声明"></a>结构的声明</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">tag</span><span class="token punctuation">&#123;</span>member<span class="token operator">-</span>list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>variable<span class="token operator">-</span>list<span class="token punctuation">;</span></code></pre><p><strong>代码实例</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//描述一个学生--一些数据</span><span class="token comment">//struct -  结构体关键字 Stu - 结构体标签 </span><span class="token comment">//struct Stu - 结构体类型</span><span class="token comment">//struct Stu</span><span class="token comment">//&#123;</span><span class="token comment">////成员变量</span><span class="token comment">//char name[20];//名字</span><span class="token comment">//int age;//年龄</span><span class="token comment">//char sex[5];//性别</span><span class="token comment">//char id[20];//学号</span><span class="token comment">//&#125;s1,s2,s3;//分号不能丢</span><span class="token comment">////s1,s2,s3是3个全局结构体变量--全局变量应该少用</span><span class="token comment">//换个写法</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token punctuation">&#123;</span><span class="token comment">//成员变量</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//名字</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//年龄</span><span class="token keyword">char</span> sex<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//性别</span><span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//学号</span><span class="token punctuation">&#125;</span>Stu<span class="token punctuation">;</span><span class="token comment">//Stu在这里被改为Stu</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//创建结构体变量</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s1<span class="token punctuation">;</span><span class="token comment">//局部结构体变量</span>Stu s2<span class="token punctuation">;</span><span class="token comment">//typedef方法</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="结构成员的类型"><a href="#结构成员的类型" class="headerlink" title="结构成员的类型"></a>结构成员的类型</h4><p>结构的成员可以是标量(普通变量)、数组、指针，甚至是其他结构体。</p><h3 id="结构体变量的定义和初始化"><a href="#结构体变量的定义和初始化" class="headerlink" title="结构体变量的定义和初始化"></a>结构体变量的定义和初始化</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Point</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>p1<span class="token punctuation">;</span> <span class="token comment">//声明类型的同时定义变量p1</span><span class="token keyword">struct</span> <span class="token class-name">Point</span> p2<span class="token punctuation">;</span> <span class="token comment">//定义结构体变量p2</span><span class="token comment">//初始化：定义变量的同时赋初值。</span><span class="token keyword">struct</span> <span class="token class-name">Point</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span>y <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> <span class="token comment">//类型声明</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//名字</span><span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">//年龄</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Point</span> p<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>n1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//结构体嵌套初始化</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> n2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//结构体嵌套初始化</span></code></pre><p>代码实例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">T</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>pc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello learner\n"</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">T</span> t <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"study"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> arr<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//study</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>s<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello world</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>s<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.14</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello learner</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="结构体成员的访问"><a href="#结构体成员的访问" class="headerlink" title="结构体成员的访问"></a>结构体成员的访问</h3><h3 id="结构体传参"><a href="#结构体传参" class="headerlink" title="结构体传参"></a>结构体传参</h3><p>结构体变量访问成员 结构变量的成员是通过<font style="color:skyblue;">点操作符（.）</font>访问的。点操作符接受两个操作数。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token punctuation">&#123;</span><span class="token comment">//成员变量</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">short</span> age<span class="token punctuation">;</span><span class="token keyword">char</span> tele<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> sex<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Stu<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Print1</span><span class="token punctuation">(</span>Stu tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name: %s\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age:  %d\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tele: %s\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sex:  %s\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Print2</span><span class="token punctuation">(</span>Stu<span class="token operator">*</span> ps<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name: %s\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age : %d\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tele: %s\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sex : %s\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Stu s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"15598886688"</span><span class="token punctuation">,</span> <span class="token string">"男"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//打印结构体数据</span><span class="token function">Print1</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Print1 和 Print2 打印哪个更好？</span><span class="token comment">/*很显然是Print2Print1的形参接收实参s,形参是实参的临时拷贝需要花费更多时间和空间Print2接收的是内存地址,最大消耗空间为4/8字节*/</span></code></pre><p>💐<strong>标准解答</strong></p><p>函数传参的时候，参数是需要压栈的。 如果传递一个结构体对象的时候，结构体过大，参数压栈的的系统开销比较大，所以会导致性能的下降。</p><p><font style="color:gold;font-size:18px;">结论： 结构体传参的时候，要传结构体的地址。</font></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C基础指针</title>
      <link href="posts/7e3a1394/"/>
      <url>posts/7e3a1394/</url>
      
        <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><ol><li>指针是什么</li><li>指针和指针类型</li><li>野指针</li><li>指针运算</li><li>指针和数组</li><li>二级指针</li><li>指针数组</li></ol><hr><p><strong>指针是什么？</strong></p><p>在计算机科学中，指针（Pointer）是编程语言中的一个对象，利用地址，它的值直接指向（points to）存在电脑存储器中另一个地方的值。由于通过地址能找到所需的变量单元，可以说，地址指向该变量单元。因此，将地址形象化的称为“指针”。意思是通过它能找到以它为地址的<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98%E5%8D%95%E5%85%83/7914266">内存单元</a>。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a><strong>指针</strong></h3><blockquote><p>指针是个变量，存放内存单元的地址（编号）。</p></blockquote><p>代码实例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//在内存中开辟一块空间</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//这里我们对变量a，取出它的地址，可以使用&amp;操作符。</span><span class="token comment">//将a的地址存放在p变量中，p就是一个之指针变量。</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>✍<font style="color:gold;">总结：指针就是变量，用来存放地址的变量。（存放在指针中的值都被当成地址处理）。</font></p><p><strong>问题</strong></p><p>一个小的单元到底是多大？     1个字节</p><p>如何编址？</p><p>经过仔细的计算和权衡我们发现一个字节给一个对应的地址是比较合适的。<br>       对于32位的机器，假设有32根地址线，那么假设每根地址线在寻址的是产生一个电信号正电/负电（1或者0）</p><p>那么32根地址线产生的地址就会是：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000001</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span></code></pre><p><font style="color:skyblue;">那么就有2的32次方个地址。</font><br>       每个地址标识一个字节，那我们就可以给（2^32Byte == 2^32/1024KB == 2^32/1024/1024MB == 2^32/1024/1024/1024GB == 4GB） 4G的空闲进行编址。</p><p><strong>这里我们就明白：</strong></p><p><font style="color:pink;">在32位的机器上</font>，地址是32个0或者1组成二进制序列，那地址就得用4个字节的空间来存储，所以一个指针变量的大小就应该是4个字节。</p><p><font style="color:pink;">那如果在64位机器上</font>，如果有64个地址线，那一个指针变量的大小是8个字节，才能存放一个地址。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>指针是用来存放地址的，地址是唯一标示一块地址空间的。<br>       指针的大小在32位平台是4个字节，在64位平台是8个字节。</p><h4 id="指针和指针类型"><a href="#指针和指针类型" class="headerlink" title="指针和指针类型"></a>指针和指针类型</h4><p>变量有不同的类型，整形，浮点型等。那指针有没有类型呢？ </p><p>准确的说：有的。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//32位系统平台,所以输出为4(字节)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里可以看到，指针的定义方式是： <code>type + *</code> 。 其实： <code>char*</code>类型的指针是为了存放  <code>char</code> 类型变量的地址。  <code>short* </code>类型的指针是为了存放  <code>short </code>类型变量的地址。  <code>int* </code>类型的指针是为了存放<code>int </code>类型变量的地址。</p><h4 id="指针类型的意义"><a href="#指针类型的意义" class="headerlink" title="指针类型的意义"></a>指针类型的意义</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x11223344</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> pa<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//输出结果都一样</span><span class="token comment">//warning 警告: “初始化”: 从“int *”到“char *”的类型不兼容</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//例2</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//vs F10进行程序调试查看int 和 char类型指针区别</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x11223344</span><span class="token punctuation">;</span><span class="token comment">//int* pa=&amp;a;</span><span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>例2结果图示:</p><p><a href="https://www.imagehub.cc/image/M7uh1"><img src="https://s1.imagehub.cc/images/2021/04/15/-2021-04-15-144738.png" alt="-2021-04-15-144738.png" loading="lazy"></a><br><a href="https://www.imagehub.cc/image/M7E0R"><img src="https://s1.imagehub.cc/images/2021/04/15/-2021-04-15-145036.png" alt="-2021-04-15-145036.png" loading="lazy"></a></p><p>✍<strong>指针类型总结:</strong></p><p>​    <font style="color:skyblue;">指针类型决定了指针进行解引用操作的时候，能够访问空间的大小</font></p><p><code>int*p</code>; *p能够访问4个字节</p><p><code>char*p</code>;*p 能够访问1个字节</p><p><code>double* p</code>; *p 能够访问8个字节</p><h5 id="指针-整数"><a href="#指针-整数" class="headerlink" title="指针+-整数"></a>指针+-整数</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x11223344</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//005BFBB0</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> pa <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//005BFBB4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//005BFBB0</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> pc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//005BFBB1</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>✍<font style="color:orange;">总结：指针的类型决定了指针向前或者向后走一步有多大/步长（距离）。</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span>p<span class="token punctuation">;</span> p<span class="token operator">+</span><span class="token number">1</span>—<span class="token operator">></span><span class="token number">4</span><span class="token keyword">char</span><span class="token operator">*</span>p<span class="token punctuation">;</span>p<span class="token operator">+</span><span class="token number">1</span>—<span class="token operator">></span><span class="token number">1</span><span class="token keyword">double</span><span class="token operator">*</span> p<span class="token punctuation">;</span> p<span class="token operator">+</span><span class="token number">1</span>—<span class="token operator">></span><span class="token number">8</span></code></pre><h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><blockquote><p>概念： 野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）</p></blockquote><h4 id="野指针成因"><a href="#野指针成因" class="headerlink" title="野指针成因"></a>野指针成因</h4><ol><li>指针未初始化</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//局部变量指针未初始化，默认为随机值</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>指针越界访问</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//当指针指向的范围超出数组arr的范围时，p就是野指针</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>指针指向的空间释放</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//函数内临时变量a,占4个字节空间,出函数空间还给系统</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="如何规避野指针"><a href="#如何规避野指针" class="headerlink" title="如何规避野指针"></a>如何规避野指针</h4><ol><li>指针初始化</li><li>小心指针越界</li><li>指针指向空间释放即使置NULL</li><li>指针使用之前检查有效性</li></ol><h3 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h3><ul><li>指针+- 整数</li><li>指针-指针</li><li>指针的关系运算</li></ul><h4 id="指针-整数-1"><a href="#指针-整数-1" class="headerlink" title="指针+-整数"></a>指针+-整数</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//p++;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这里指向元素10的地址</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10 8 6 4 2</span>p <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="指针-指针"><a href="#指针-指针" class="headerlink" title="指针-指针"></a>指针-指针</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//指针-指针得到的结果是中间元素个数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-9</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//err,结果是不可预知的</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//方法3--指针-指针实现strlen效果</span><span class="token keyword">int</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> start <span class="token operator">=</span> str<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> end <span class="token operator">=</span> str<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>end <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>end<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//strlen - 求字符串长度</span><span class="token comment">//递归 - 模拟实现了strlen - 计数器的方式1,递归的方式2</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bit"</span><span class="token punctuation">;</span><span class="token comment">//bit\0</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>len <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="指针的关系运算"><a href="#指针的关系运算" class="headerlink" title="指针的关系运算"></a>指针的关系运算</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>vp <span class="token operator">=</span> <span class="token operator">&amp;</span>values<span class="token punctuation">[</span>N_VALUES<span class="token punctuation">]</span><span class="token punctuation">;</span> vp <span class="token operator">></span> <span class="token operator">&amp;</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token operator">--</span>vp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/15/45d4028976b4d0508e4464c357d96f23.png" alt="45d4028976b4d0508e4464c357d96f23.png" loading="lazy"></p><p>代码简化, 这将代码修改如下：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>vp <span class="token operator">=</span> <span class="token operator">&amp;</span>values<span class="token punctuation">[</span>N_VALUES<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> vp <span class="token operator">>=</span> <span class="token operator">&amp;</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vp<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>vp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:tomato;">简化方法实际在绝大部分的编译器上是可以顺利完成任务的，然而我们还是应该避免这样写，因为标准并不保证<br>它可行。</font></p><p>💠<strong>标准规定：</strong></p><p>允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，但是不允许与指向第一个元素之前的那个内存位置的指针进行比较。</p><p><strong>解释图例:</strong></p><p><a href="https://www.imagehub.cc/image/MuRc2"><img src="https://s1.imagehub.cc/images/2021/04/15/-2021-04-15-230844.png" alt="-2021-04-15-230844.png" loading="lazy"></a></p><p>arr为数组,p3为数组第一个指针空间之前的指针,p2为数组最后一个指针后面空间的指针,p1为数组中某个空间位置的指针</p><p><font style="color:deepskyblue;">标准规定用图例来说明就是,p1可以和p2比,p1不能和p3比</font></p><h3 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h3><p>数组名是什么？</p><p>代码实例：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/15/a2bf5e68e15abb5e3627c0a17181c3f7.png" alt="a2bf5e68e15abb5e3627c0a17181c3f7.png" loading="lazy"></p><p>​        可见数组名和数组首元素的地址是一样的。</p><p>✍<strong>结论：</strong></p><p>​        <font style="color:pink;">数组名表示的是数组首元素的地址。</font></p><p>那么这样写代码是可行的：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment">//p存放的是数组首元素的地址</span></code></pre><p>⭐<font style="color:orange;">特殊情况:</font></p><ol><li>&amp;arr- &amp;数组名-数组名不是首元素的地址-数组名表示整个数组–&amp;数组名取出的是整个数组的地址</li><li>sizeof(arr) - sizeof(数组名)～数组名表示的整个数组- sizeof(数组名)计算的是整个数组的大小</li></ol><p><font style="color:deepskyblue;font-size:18px">既然可以把数组名当成地址存放到一个指针中，我们使用指针来访问一个数组就成为可能。</font></p><pre class="language-c" data-language="c"><code class="language-c">##define _CRT_SECURE_NO_WARNINGS<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment">//指针存放数组首元素的地址</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;arr[%d] = %p &lt;====> p+%d = %p\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </code></pre><p><a href="https://www.imagehub.cc/image/MAgOx"><img src="https://s1.imagehub.cc/images/2021/04/16/c.md.png" alt="c.md.png" loading="lazy"></a></p><p>所以p+i 其实计算的是数组arr 下标为i的地址。那我们就可以直接通过指针来访问数组。</p><p>代码实例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment">//指针存放数组首元素的地址</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出数组元素</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h3><p>指针变量也是变量，是变量就有地址，那指针变量的地址存放在哪里？ 这就是二级指针</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span> pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token operator">*</span> ppa <span class="token operator">=</span> <span class="token operator">&amp;</span>pa<span class="token punctuation">;</span><span class="token comment">//ppa就是二级指针</span><span class="token comment">//int*** pppa = &amp;ppa;//pppa就是三级指针</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> ppa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/16/c113a303be2083419.png" alt="c113a303be2083419.png" loading="lazy"></p><p><font style="color:orange;">a的地址存放在pa中 , pa的地址存放在ppa中。pa是一级指针，而ppa是二级指针。</font></p><p><strong>对于二级指针的运算有：</strong></p><p>​            <code>*ppa</code> 通过对<code>ppa</code>中的地址进行解引用，这样找到的是<code>pa</code> ，<code>*ppa</code>其实访问的就是<code>pa</code> .</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">*</span>ppa <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span class="token comment">//等价于 pa = &amp;b;</span></code></pre><p>​        <code>*ppa </code>先通过<code>*ppa</code> 找到<code>pa</code> ,然后对<code>pa</code> 进行解引用操作： <code>*pa</code> ，那找到的是<code>a </code>.</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token operator">*</span>ppa <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">//等价于*pa = 30;</span><span class="token comment">//等价于a = 30;</span></code></pre><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>🤔指针数组是指针还是数组？<br>        <font style="color:lightpink;">答案：是数组。是存放指针的数组。</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">//int* pa = &amp;a;</span><span class="token comment">//int* pb = &amp;b;</span><span class="token comment">//int* pc = &amp;c;</span><span class="token comment">//整型数组 - 存放整型</span><span class="token comment">//字符数组 - 存放字符</span><span class="token comment">//指针数组 - 存放指针</span><span class="token comment">//int arr[10];</span><span class="token keyword">int</span><span class="token operator">*</span> arr2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//指针数组</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10 20 30</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C基础操作符</title>
      <link href="posts/128d7577/"/>
      <url>posts/128d7577/</url>
      
        <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><ol><li>各种操作符的介绍。</li><li>表达式求值</li></ol><hr><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><blockquote><p>分类：<br>算术操作符<br>移位操作符<br>位操作符<br>赋值操作符<br>单目操作符<br>关系操作符<br>逻辑操作符<br>条件操作符<br>逗号表达式<br>下标引用、函数调用和结构成员</p></blockquote><h4 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">+</span> <span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">/</span> %</code></pre><ol><li>除了% 操作符之外，其他的几个操作符可以作用于整数和浮点数。</li><li>对于/ 操作符如果两个操作数都为整数，执行整数除法。而只要有浮点数执行的就是浮点数除<br>法。</li><li>% 操作符的两个操作数<font style="color:pink;">必须为整数</font>。返回的是整除之后的余数。</li></ol><p><strong>代码例</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//求商-商2余1,这里是整型</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//余1</span><span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a=2</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b=%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b=1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c=%lf\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c=2.500000</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a>移位操作符</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">&lt;</span><span class="token operator">&lt;</span> 左移操作符<span class="token operator">></span><span class="token operator">></span> 右移操作符</code></pre><blockquote><p><strong>左移操作符 移位规则：</strong><br>       左边抛弃、右边补0</p></blockquote><blockquote><p><strong>右移操作符 移位规则：</strong><br>       首先右移运算分两种：</p><ol><li>逻辑移位 左边用0填充，右边丢弃</li><li>算术移位 左边用原该值的符号位填充，右边丢弃</li></ol></blockquote><p><strong>代码例:</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token comment">//>>--右移操作符</span><span class="token comment">//移动的是二进制位</span><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以推断出此时采用的是算术移位</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8=1*2^3</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//5的二进制原码:00000000 00000000 00000000 00000101</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//左移后:00000000 00000000 00000000 00001010</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>警告⚠️ ： <font style="color:tomato;">对于移位运算符，不要移动负数位，这个是标准未定义的。</font> 例如：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>num<span class="token operator">>></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//error</span></code></pre><p>📖<font style="color:deepskyblue;">移位操作符和位操作符只适用于整数操作,不能用于浮点数</font></p><h4 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">&amp;</span> <span class="token comment">//按位与</span><span class="token operator">|</span> <span class="token comment">//按位或</span><span class="token operator">^</span> <span class="token comment">//按位异或</span></code></pre><p>✏️<font style="color:lightskyblue;">注：他们的操作数必须是整数。</font></p><blockquote><h5 id="按位与操作-amp"><a href="#按位与操作-amp" class="headerlink" title="按位与操作(&amp;)"></a>按位与操作(&amp;)</h5><p><strong>0&amp;0=0; 0&amp;1=0; 1&amp;0=0; 1&amp;1=1</strong></p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//&amp;--按2进制位与</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//00000000 00000000 00000000 00000011</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//00000000 00000000 00000000 00000101</span><span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span class="token comment">//00000000 00000000 00000000 00000001=>1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c=%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c=2</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><h5 id="按位或运算符（-）"><a href="#按位或运算符（-）" class="headerlink" title="按位或运算符（|）"></a>按位或运算符（|）</h5><ul><li>运算规则：0|0=0； 0|1=1； 1|0=1； 1|1=1；<ul><li>即 ：参加运算的两个对象只要有一个为1，其值为1。</li></ul></li></ul></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// |--按2进制位或</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//00000000 00000000 00000000 00000011</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//00000000 00000000 00000000 00000101</span><span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">|</span>b<span class="token punctuation">;</span><span class="token comment">//00000000 00000000 00000000 00000111</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c=%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c=7</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><h5 id="异或运算符（-）"><a href="#异或运算符（-）" class="headerlink" title="异或运算符（^）"></a>异或运算符（^）</h5><ul><li>运算规则：0^0=0； 0^1=1； 1^0=1； 1^1=0；<ul><li>即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。</li></ul></li></ul></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// |--按2进制异或</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//00000000 00000000 00000000 00000011</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//00000000 00000000 00000000 00000101</span><span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span><span class="token comment">//00000000 00000000 00000000 00000110</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c=%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c=6</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h4><p>1.不能创建临时变量（第三个变量），实现两个数的交换。</p><p><a href="https://www.imagehub.cc/image/MgL5H"><img src="https://s1.imagehub.cc/images/2021/04/13/22efcce09840134b4c4b87b7b9e381e0.md.png" alt="22efcce09840134b4c4b87b7b9e381e0.md.png" loading="lazy"></a></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//方法1--加减法</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d,b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>方法1虽然看似得到结果,但是存在缺陷,例如:当变量a和变量b数值都非常大时,整型int空间将不足 ——— 可能会溢出</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//方法2</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//异或方法</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d,b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>2.求一个整数存储在内存中的二进制中1的个数。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//方法1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//统计num的补码中有几个1</span><span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>num <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"count=%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>方法1虽然看似得到结果,但是存在问题,假设输入值是<code>-1</code>,<code>-1</code>的二进制是32位全1,但是程序运行结果为0</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//方法2</span><span class="token comment">//num&amp;1 == 1 =>最低位一定为1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//输入值初始化</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//计数初始化</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"count=%d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//方法3：</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//计数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>num <span class="token operator">=</span> num<span class="token operator">&amp;</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"二进制中1的个数 = %d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h4><p>赋值操作符是一个很棒的操作符，他可以让你得到一个你之前不满意的值。也就是你可以给自己重新赋值。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> weight <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span><span class="token comment">//体重</span>weight <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span><span class="token comment">//不满意就赋值</span><span class="token keyword">double</span> salary <span class="token operator">=</span> <span class="token number">10000.0</span><span class="token punctuation">;</span>salary <span class="token operator">=</span> <span class="token number">20000.0</span><span class="token punctuation">;</span><span class="token comment">//使用赋值操作符赋值。</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展:"></a>拓展:</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//赋值操作符可以连续使用，比如：</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>a <span class="token operator">=</span> x <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//连续赋值</span><span class="token comment">//这样的代码感觉怎么样？</span><span class="token comment">//那同样的语义，你看看：</span>x <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>a <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//这样的写法是不是更加清晰爽朗而且易于调试。</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="复合赋值符"><a href="#复合赋值符" class="headerlink" title="复合赋值符"></a>复合赋值符</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">+=</span><span class="token operator">-=</span><span class="token operator">*=</span><span class="token operator">/=</span><span class="token operator">%=</span><span class="token operator">>>=</span><span class="token operator">&lt;&lt;=</span><span class="token operator">&amp;=</span><span class="token operator">|=</span><span class="token operator">^=</span></code></pre><p>代码实例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>a <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//复合赋值符</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>x <span class="token operator">=</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>x <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>m <span class="token operator">=</span> m <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>m <span class="token operator">&amp;=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//其他运算符一样的道理。只是这样写更加简洁。</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="单目操作符"><a href="#单目操作符" class="headerlink" title="单目操作符"></a>单目操作符</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">!</span>           逻辑反操作<span class="token operator">-</span>           负值<span class="token operator">+</span>           正值<span class="token operator">&amp;</span>           取地址<span class="token keyword">sizeof</span>      操作数的类型长度（以字节为单位）<span class="token operator">~</span>           对一个数的二进制按位取反<span class="token operator">--</span>          前置、后置<span class="token operator">--</span><span class="token operator">++</span>          前置、后置<span class="token operator">++</span><span class="token operator">*</span>           间接访问操作符<span class="token punctuation">(</span>解引用操作符<span class="token punctuation">)</span><span class="token punctuation">(</span>类型<span class="token punctuation">)</span>       强制类型转换</code></pre><p>代码实例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"条件为假,看不见本句\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"条件为真,输出本句\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span><span class="token comment">//&amp;取地址操作符</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span><span class="token comment">//*解引用操作符</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*p=x=520</span><span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>d <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//sizeof计算变量所占内存空间的大小</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token comment">//printf("%d\n", sizeof int);//sizeof后接类型不能省略括号</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//40</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组类型--40</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//  ~ 按(二进制)位取反</span><span class="token comment">//00000000 00000000 00000000 00000000</span><span class="token comment">//11111111 11111111 11111111 11111111 - 补码</span><span class="token comment">//11111111 11111111 11111111 11111110 - 反码</span><span class="token comment">//10000000 00000000 00000000 00000001 - 原码</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">~</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//++和--运算符</span><span class="token comment">//前置++和--</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span><span class="token comment">//先对a进行自增，然后对使用a，也就是表达式的值是a自增之后的值。x为11。</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token operator">--</span>a<span class="token punctuation">;</span><span class="token comment">//先对a进行自减，然后对使用a，也就是表达式的值是a自减之后的值。y为10;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//后置++和--</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//先对a先使用，再增加，这样x的值是10；之后a变成11；</span><span class="token keyword">int</span> y <span class="token operator">=</span> a<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//先对a先使用，再自减，这样y的值是11；之后a变成10；</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="拓展-1"><a href="#拓展-1" class="headerlink" title="拓展"></a>拓展</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2--short类型</span><span class="token comment">//sizeof包含的表达式不参与实际运算</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//强制类型转换</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.14</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="sizeof和数组"><a href="#sizeof和数组" class="headerlink" title="sizeof和数组"></a>sizeof和数组</h5><h6 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h6><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//问：</span><span class="token comment">//（1）、（2）两个地方分别输出多少？</span><span class="token comment">//（3）、（4）两个地方分别输出多少？</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(2)--随平台不同会有两个结果4/8</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(4)--随平台不同会有两个结果4/8</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(1)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(3)</span><span class="token function">test1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传过去的是数组首元素地址</span><span class="token function">test2</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传过去的是数组首元素地址</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">></span><span class="token operator">>=</span><span class="token operator">&lt;</span><span class="token operator">&lt;=</span><span class="token operator">!=</span> 用于测试“不相等”<span class="token operator">==</span> 用于测试“相等”</code></pre><p>这些关系运算符比较简单,但是我们要注意一些运算符使用时候的陷阱。<br>      <font style="color:tomato;"> ⚠️在编程的过程中== 和=不小心写错，导致的错误。</font></p><h4 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">&amp;&amp;</span> 逻辑与<span class="token operator">||</span> 逻辑或</code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//int c = a&amp;&amp;b;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">||</span>b<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果1--真 0--假</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="360笔试题"><a href="#360笔试题" class="headerlink" title="360笔试题"></a>360笔试题</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//程序输出的结果是什么？</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>i <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>b <span class="token operator">&amp;&amp;</span> d<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//a++先使用后++,所以先为0,后面不计算,之后自增为1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" a = %d\n b = %d\n c = %d\n d = %d\n i = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//a++为真,后面逻辑或都不会进行计算,a自增1为2</span>i <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">||</span> <span class="token operator">++</span>b <span class="token operator">||</span> d<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" a = %d\n b = %d\n c = %d\n d = %d\n i = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="条件操作符-三目操作符"><a href="#条件操作符-三目操作符" class="headerlink" title="条件操作符/三目操作符"></a>条件操作符/三目操作符</h4><pre class="language-matlab" data-language="matlab"><code class="language-matlab">exp1 ? exp2 <span class="token operator">:</span> exp3</code></pre><p>问号前面的条件表达式的部分是要测试的条件。</p><p>这就像 if 语句的括号中的表达式。如果条件是真的，则执行 ? 和 : 之间的语句；否则，执行 : 之后的部分。如果认为有帮助，可以在子表达式周围放置圆括号。<br><strong>如下所示：</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>Z <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="http://c.biancheng.net/uploads/allimg/181115/2-1Q11512525J14.gif" alt="三目操作符图例" loading="lazy"></p><h5 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token number">1.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">else</span>b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//转换成条件表达式，是什么样？</span><span class="token number">2.</span>使用条件表达式实现找两个数中较大值。</code></pre><p>代码实例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//题目1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">else</span>b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//等价于</span>b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token number">3</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//题目2</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>max <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">else</span>max <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">//等价于</span>max <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h4><pre class="language-c" data-language="c"><code class="language-c">exp1<span class="token punctuation">,</span> exp2<span class="token punctuation">,</span> exp3<span class="token punctuation">,</span> …expN</code></pre><p>逗号表达式，就是用逗号隔开的多个表达式。 逗号表达式，从左向右依次执行。</p><p>整个表达式的结果是最后一个表达式的结果。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//代码例1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//括号内的a > b,a不产生值</span><span class="token comment">//a = b + 10 = 12</span><span class="token comment">//b = a+1 = 13</span><span class="token comment">//c = b = 13</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">,</span> a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//代码例2</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> a <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> d <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"判断为真,则输出此句\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//d > 0条件为假,不能输出此句</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//代码例3--伪代码实例</span>a <span class="token operator">=</span> <span class="token function">get_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">count_val</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//业务处理</span>a <span class="token operator">=</span> <span class="token function">get_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">count_val</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果使用逗号表达式，改写：</span><span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token function">get_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count_val</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//业务处理</span><span class="token punctuation">&#125;</span></code></pre><h4 id="下标引用、函数调用和结构成员"><a href="#下标引用、函数调用和结构成员" class="headerlink" title="下标引用、函数调用和结构成员"></a>下标引用、函数调用和结构成员</h4><h5 id="下标引用操作符"><a href="#下标引用操作符" class="headerlink" title="[ ] 下标引用操作符"></a>[ ] 下标引用操作符</h5><p>操作数：一个数组名 + 一个索引值</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建数组</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//实用下标引用操作符。</span><span class="token comment">//[]的两个操作数是arr和9。</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="函数调用操作符"><a href="#函数调用操作符" class="headerlink" title="()函数调用操作符"></a>()函数调用操作符</h5><p>接收一个或者多个操作数：第一个操作数是函数名，剩余的操作数就是传递给函数的参数。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"看到这里的读者,\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//实用（）作为函数调用操作符。</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token string">"加油呀!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实用（）作为函数调用操作符。</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="访问一个结构的成员"><a href="#访问一个结构的成员" class="headerlink" title="访问一个结构的成员"></a>访问一个结构的成员</h5><blockquote><p><code>. </code>结构体.成员名<br><code>-&gt;</code> 结构体指针<code>-&gt;</code>成员名</p></blockquote><p>代码实例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//学生</span><span class="token comment">//struct也是一种类型</span><span class="token comment">//创建一个结构体类型--- struct Stu</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//姓名</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//年龄</span><span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//学号</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//使用struct Stu这个类型创建了一个学生对象s1,并初始化</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"张珊"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"2021520"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/*printf("%s\n",s1.name);printf("%d\n", s1.age);printf("%s\n", s1.id);*/</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token operator">*</span> ps <span class="token operator">=</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">;</span><span class="token comment">//下面方式显得有些繁琐</span><span class="token comment">/*printf("%s\n", (*ps).name);printf("%d\n", (*ps).age);*/</span><span class="token comment">//C语言提供的简单方法</span><span class="token comment">//语法:结构体指针->成员名</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><p><font style="color:skyblue;">表达式求值的顺序一部分是由操作符的优先级和结合性决定。</font><br>       同样，有些表达式的操作数在求值的过程中可能需要转换为其他类型。</p><h4 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h4><p><font style="color:deepskyblue;">C的整型算术运算总是至少以缺省整型类型的精度来进行的。</font><br>       为了获得这个精度，表达式中的字符和短整型操作数在使用之前被转换为普通整型，这种转换称为<font style="color:hotpink;font-size:18px;">整型提升。</font></p><h5 id="整型提升的意义："><a href="#整型提升的意义：" class="headerlink" title="整型提升的意义："></a><font style="color:gold;">整型提升的意义：</font></h5><blockquote><p> 表达式的整型运算要在CPU的相应运算器件内执行，CPU内整型运算器(ALU)的操作数的字节长度<br>一般就是int的字节长度，同时也是CPU的通用寄存器的长度。<br>        因此，即使两个char类型的相加，在CPU执行时实际上也要先转换为CPU内整型操作数的标准长<br>度。<br>       通用CPU（general-purpose CPU）是难以直接实现两个8比特字节直接相加运算（虽然机器指令<br>中可能有这种字节相加指令）。所以，表达式中各种长度可能小于int长度的整型值，都必须先转<br>换为int或unsigned int，然后才能送入CPU去执行运算。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>a <span class="token operator">=</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span></code></pre><p> b和c的值被提升为普通整型，然后再执行加法运算。<br>        加法运算完成之后，结果将被截断，然后再存储于a中。</p><h5 id="整体提升"><a href="#整体提升" class="headerlink" title="整体提升"></a>整体提升</h5><p>整形提升是按照变量的数据类型的符号位来提升的</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//负数的整形提升</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>变量c1的二进制位<span class="token punctuation">(</span>补码<span class="token punctuation">)</span>中只有<span class="token number">8</span>个比特位：<span class="token number">1111111</span>因为 <span class="token keyword">char</span> 为有符号的 <span class="token keyword">char</span>所以整形提升的时候，高位补充符号位，即为<span class="token number">1</span>提升之后的结果是：<span class="token number">11111111111111111111111111111111</span>  <span class="token comment">//正数的整形提升</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>变量c2的二进制位<span class="token punctuation">(</span>补码<span class="token punctuation">)</span>中只有<span class="token number">8</span>个比特位：<span class="token number">00000001</span>因为 <span class="token keyword">char</span> 为有符号的 <span class="token keyword">char</span>所以整形提升的时候，高位补充符号位，即为<span class="token number">0</span>提升之后的结果是：<span class="token number">00000000000000000000000000000001</span><span class="token comment">//无符号整形提升，高位补0</span></code></pre><p>代码实例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//00000000 00000000 00000000 00000011</span><span class="token comment">//00000011 - a</span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//00000000 00000000 00000000 01111111</span><span class="token comment">//01111111 - b</span><span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token comment">//a和b如何相加</span><span class="token comment">//00000000 00000000 00000000 00000011</span><span class="token comment">//00000000 00000000 00000000 01111111</span><span class="token comment">//00000000 00000000 00000000 10000010</span><span class="token keyword">char</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment">//10000010 - c</span><span class="token comment">//整型提升,前面补1</span><span class="token comment">//11111111 11111111 11111111 10000010 --补码</span><span class="token comment">//11111111 11111111 11111111 10000001 --反码</span><span class="token comment">//10000000 00000000 00000000 01111110 --原码</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//整型打印,输出:-126</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>整形提升代码例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//实例1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">0xb6</span><span class="token punctuation">;</span><span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token number">0xb600</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0xb6000000</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0xb6</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0xb600</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0xb6000000</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//程序输出--c</span></code></pre><p>实例1中的a, b要进行整形提升, 但是c不需要整形提升 a, b整形提升之后, 变成了负数, 所以表达式<code>a == 0xb6</code>, <code>b == 0xb600</code> 的结果是假, 但是c不发生整形提升, 则表达式<code>c == 0xb6000000</code> 的结果是真.</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>实例2中的, c只要参与表达式运算, 就会发生整形提升, 表达式 <code>+ c</code>, 就会发生提升, 所以<code>sizeof(+c) </code>是4个字节.<br>       表达式<code>- c</code>也会发生整形提升, 所以<code>sizeof(-c) </code>是4个字节, 但是<code>sizeof(c)</code>, 就是1个字节.</p><h4 id="算术转换"><a href="#算术转换" class="headerlink" title="算术转换"></a>算术转换</h4><p>如果某个操作符的各个操作数属于不同的类型，那么除非其中一个操作数的转换为另一个操作数的类型，否则操作就无法进行。</p><p>下面的层次体系称为<font style="color:deepskyblue;font-size:18px;">寻常算术转换</font>。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token keyword">double</span><span class="token keyword">float</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token keyword">long</span> <span class="token keyword">int</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token keyword">int</span></code></pre><p>⚠️<font style="color:tomato">但是算术转换要合理，要不然会有一些潜在的问题。</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token comment">//隐式转换，会有精度丢失</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="操作符的属性"><a href="#操作符的属性" class="headerlink" title="操作符的属性"></a>操作符的属性</h4><p>复杂表达式的求值有三个影响的因素。</p><ol><li><p>操作符的优先级</p></li><li><p>操作符的结合性</p></li><li><p>是否控制求值顺序。</p></li></ol><p>  🤔两个相邻的操作符先执行哪个？</p><p>  😃取决于他们的优先级。如果两者的优先级相同，取决于他们的结合性。</p><h5 id="操作符优先级"><a href="#操作符优先级" class="headerlink" title="操作符优先级"></a>操作符优先级</h5><p>  <a href="http://c.biancheng.net/view/161.html">C语言运算符优先级和结合性一览表</a></p><p>⚠️<font style="color:gold;">规律：</font></p><ol><li>结合方向只有三个是从右往左，其余都是从左往右。</li><li>所有双目运算符中只有赋值运算符的结合方向是从右往左。</li><li>另外两个从右往左结合的运算符也很好记，因为它们很特殊：一个是单目运算符，一个是三目运算符。</li><li>C语言中有且只有一个三目运算符。</li><li>逗号运算符的优先级最低，要记住。</li><li>此外要记住，对于优先级：算术运算符 &gt; 关系运算符 &gt; 逻辑运算符 &gt; 赋值运算符。逻辑运算符中“逻辑非 !”除外。</li></ol><h4 id="问题表达式"><a href="#问题表达式" class="headerlink" title="问题表达式"></a><font style="color:red;">问题表达式</font></h4><p><strong>例1</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//表达式的求值部分由操作符的优先级决定。</span><span class="token comment">//表达式1</span>a<span class="token operator">*</span>b <span class="token operator">+</span> c<span class="token operator">*</span>d <span class="token operator">+</span> e<span class="token operator">*</span>f</code></pre><p>例1在计算的时候，由于比+的优先级高，只能保证，的计算是比+早，但是优先级并不能决定第三个*比第一个+早执行。</p><p>所以表达式的计算机顺序就可能是：</p><pre class="language-c" data-language="c"><code class="language-c">a<span class="token operator">*</span>bc<span class="token operator">*</span>da<span class="token operator">*</span>b <span class="token operator">+</span> c<span class="token operator">*</span>de<span class="token operator">*</span>fa<span class="token operator">*</span>b <span class="token operator">+</span> c<span class="token operator">*</span>d <span class="token operator">+</span> e<span class="token operator">*</span>f  或者：a<span class="token operator">*</span>bc<span class="token operator">*</span>de<span class="token operator">*</span>fa<span class="token operator">*</span>b <span class="token operator">+</span> c<span class="token operator">*</span>da<span class="token operator">*</span>b <span class="token operator">+</span> c<span class="token operator">*</span>d <span class="token operator">+</span> e<span class="token operator">*</span>f</code></pre><p><strong>例2</strong></p><pre class="language-c" data-language="c"><code class="language-c">c <span class="token operator">+</span> <span class="token operator">--</span>c<span class="token punctuation">;</span></code></pre><p>同上，操作符的优先级只能决定自减–的运算在+的运算的前面，但是我们并没有办法得知，+操作符的左操作数的获取在右操作数之前还是之后求值，所以结果是不可预测的，是有歧义的。</p><p><strong>例3</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//代码3-非法表达式</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">--</span> <span class="token operator">-</span> <span class="token operator">--</span>i <span class="token operator">*</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//vs输出--4</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:tomato;">例3在不同编译器中测试结果是不同的</font></p><p><strong>例4</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">++</span>count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> answer<span class="token punctuation">;</span>answer <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出多少？</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre><code>      虽然在大多数的编译器上求得结果都是相同的。</code></pre><p>​         但是上述代码answer = fun() - fun() * fun(); 中我们只能通过操作符的优先级得知：先算乘法，再算减法。</p><p>​         函数的调用先后顺序无法通过操作符的优先级确定。</p><p><strong>例5</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//12</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//尝试在linux 环境gcc编译器，VS2013环境下都执行，看结果。</span></code></pre><p>Linux环境的结果：<code>12</code> <code>4</code></p><p>例5代码中的第一个+ 在执行的时候，第三个++是否执行，这个是不确定的，因为依靠操作符的优先级和结合性是无法决定第一个+ 和第三个前置++ 的先后顺序。</p><h4 id="🍎总结："><a href="#🍎总结：" class="headerlink" title="🍎总结："></a>🍎总结：</h4><p><font style="color:  #DAA520  ;">我们写出的表达式如果不能通过操作符的属性确定唯一的计算路径，那这个表达式就是存在问题的。</font></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C基础之数组</title>
      <link href="posts/b163066f/"/>
      <url>posts/b163066f/</url>
      
        <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><ol><li>一维数组的创建和初始化</li><li>一维数组的使用</li><li>一维数组在内存中的存储</li><li>二维数组的创建和初始化</li><li>二维数组的使用</li><li>二维数组在内存中的存储</li><li>数组作为函数参数</li><li>数组的应用实例1：三子棋</li><li>数组的应用实例2：扫雷游戏</li></ol><hr><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h4><p>数组是一组相同类型元素的集合。 数组的创建方式：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token class-name">type_t</span>   arr_name   <span class="token punctuation">[</span>const_n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//type_t 是指数组的元素类型</span><span class="token comment">//const_n 是一个常量表达式，用来指定数组的大小</span></code></pre><h4 id="数组创建代码实例"><a href="#数组创建代码实例" class="headerlink" title="数组创建代码实例"></a>数组创建代码实例</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建一个数组--存放整型--10个</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这种创建方式错误</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2.1</span><span class="token punctuation">;</span><span class="token keyword">float</span> arr2<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:deepskyblue;">注：数组创建， []中要给一个常量才可以，不能使用变量。</font></p><h4 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h4><p>数组的初始化是指，在创建数组的同时给数组的内容一些合理初始值（初始化）。 </p><p><font style="color:pink;"><strong>代码实例:</strong></font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//不完全初始化,剩下元素默认初始化为0</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr5<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr6<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token comment">//sizeof计算arr6所占空间大小</span><span class="token comment">//7个元素-char 7*1 = 7</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7</span><span class="token comment">//strlen 求字符串的长度--'\0'之前的字符</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>arr6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4--a b c \0</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3--a b c</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3--a b c</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15---虽然输出15,但理论输出是随机值,因为输出结果是要在字符abc之后找到字符`\0`</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>✏️<a href="https://blog.csdn.net/songjiasheng1314/article/details/88644827">sizeof()和strlen的区别</a></p><h4 id="一维数组的使用"><a href="#一维数组的使用" class="headerlink" title="一维数组的使用"></a>一维数组的使用</h4><p>对于数组的使用我们之前介绍了一个操作符： <code>[ ]</code>    ，下标引用操作符。</p><p><font style="color:pink;"><strong>代码实例1:</strong></font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token comment">//[a][b][c][d][e][f][\0]</span><span class="token comment">//printf("%c\n",arr[3]);//输出d</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//for(i=0;i&lt;6;i++)</span><span class="token comment">//for(i=0;i&lt;(int)strlen(arr);i++)</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:pink;"><strong>代码实例2:</strong></font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//数组的不完全初始化</span><span class="token comment">//计算数组的元素个数</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对数组内容赋值,数组是使用下标来访问的，下标从0开始。所以： </span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//做下标</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//这里写10，好不好？     </span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//输出数组的内容 </span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>sz<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><p><font style="color:gold;font-size:18px;">总结:</font></p><ol><li>数组是使用下标来访问的，下标是从0开始。</li><li>数组的大小可以通过计算得到。</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="一维数组在内存中的存储"><a href="#一维数组在内存中的存储" class="headerlink" title="一维数组在内存中的存储"></a>一维数组在内存中的存储</h4><p>接下来我们探讨数组在内存中的存储</p><p><font style="color:pink;"><strong>代码实例:</strong></font></p><iframe  src="https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&t=seti&wt=sharp&l=auto&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=18px&ph=100px&ln=false&fl=1&fm=MonoLisa&fs=14px&lh=126%25&si=false&es=2x&wm=false&code=%2523define%2520_CRT_SECURE_NO_WARNINGS%250A%2523include%2520%253Cstdio.h%253E%250A%2523include%2520%253Cstring.h%253E%250A%250Aint%2520main%28%29%250A%257B%250A%2509int%2520arr%255B10%255D%2520%253D%2520%257B0%257D%253B%2520%250A%2509int%2520i%2520%253D%25200%253B%250A%2509for%28i%253D0%253B%2520i%253Csizeof%28arr%29%252Fsizeof%28arr%255B0%255D%29%253B%2520%252B%252Bi%29%2520%2520%2520%2520%2520%250A%2509%257B%250A%2509%2509printf%28%2522%2526arr%255B%2525d%255D%2520%253D%2520%2525p%255Cn%2522%252C%2520i%252C%2520%2526arr%255Bi%255D%29%253B%250A%2509%257D%250A%2509return%25200%253B%250A%257D%250A%250A%252F%252F%2520Photo%2520by%2520Davide%2520Pietralunga%2520on%2520Unsplash"  style="width: 704px; height: 382px; border:0; transform: scale(1); overflow:hidden;"  sandbox="allow-scripts allow-same-origin"></iframe><p>输出结果</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> 006FFEE0<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> 006FFEE4<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> 006FFEE8<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> 006FFEEC<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> 006FFEF0<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> 006FFEF4<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> 006FFEF8<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> 006FFEFC<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> 006FFF00<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> 006FFF04</code></pre><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><h4 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//数组创建</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">double</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//数组初始化</span><span class="token comment">//没有数据的被初始化为0</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//行可省略,列不能</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h4><p>二维数组的使用也是通过下标的方式。</p><iframe   src="https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&t=3024-night&wt=sharp&l=auto&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=18px&ph=100px&ln=false&fl=1&fm=MonoLisa&fs=14px&lh=126%25&si=false&es=2x&wm=false&code=%2523define%2520_CRT_SECURE_NO_WARNINGS%250A%2523include%2520%253Cstdio.h%253E%250A%2523include%2520%253Cstring.h%253E%250A%250Aint%2520main%2520%28%29%2520%250A%257B%250A%2509int%2520arr%255B3%255D%255B4%255D%2520%253D%2520%257B%25200%2520%257D%253B%250A%2509int%2520i%2520%253D%25200%253B%250A%2509%252F%252F%25E7%25A1%25AE%25E5%25AE%259A%25E8%25A1%258C%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%25203%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509int%2520j%2520%253D%25200%253B%250A%2509%2509%252F%252F%25E7%25A1%25AE%25E5%25AE%259A%25E5%2588%2597%250A%2509%2509for%2520%28j%2520%253D%25200%253B%2520j%2520%253C%25204%253B%2520j%252B%252B%29%250A%2509%2509%257B%250A%2509%2509%2509arr%255Bi%255D%255Bj%255D%2520%253D%2520i%2520*%25204%2520%252B%2520j%253B%250A%2509%2509%257D%250A%2509%257D%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%25203%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509int%2520j%2520%253D%25200%253B%250A%2509%2509for%2520%28j%2520%253D%25200%253B%2520j%2520%253C%25204%253B%2520j%252B%252B%29%250A%2509%2509%257B%250A%2509%2509%2509printf%2520%28%2522%2525d%2520%2522%252C%2520arr%255Bi%255D%255Bj%255D%29%253B%250A%2509%2509%257D%250A%2509%2509printf%2520%28%2522%255Cn%2522%29%253B%250A%2509%257D%250A%2509return%25200%253B%250A%257D%250A%250A%250A%250A%252F%252F%2520Photo%2520by%2520Carl%2520Nenzen%2520Loven%2520on%2520Unsplash"   style="width: 606px; height: 671px; border:0; transform: scale(1); overflow:hidden;"   sandbox="allow-scripts allow-same-origin"> </iframe><h4 id="二维数组在内存中的存储"><a href="#二维数组在内存中的存储" class="headerlink" title="二维数组在内存中的存储"></a>二维数组在内存中的存储</h4><p>像一维数组一样，这里我们尝试打印二维数组的每个元素。</p><iframe   src="https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&t=a11y-dark&wt=sharp&l=auto&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=15px&ph=100px&ln=false&fl=1&fm=Droid+Sans+Mono&fs=13px&lh=126%25&si=false&es=2x&wm=false&code=%2523define%2520_CRT_SECURE_NO_WARNINGS%250A%2523include%2520%253Cstdio.h%253E%250A%2523include%2520%253Cstring.h%253E%250A%250Aint%2520main%2520%28%29%2520%250A%257B%250A%2509int%2520arr%255B3%255D%255B4%255D%253B%2520%250A%2520%2520%2509int%2520i%2520%253D%25200%253B%250A%2509for%28i%253D0%253B%2520i%253C3%253B%2520i%252B%252B%29%2520%2520%2520%2520%2520%257B%250A%2509%2509int%2520j%2520%253D%25200%253B%250A%2509%2509for%28j%253D0%253B%2520j%253C4%253B%2520j%252B%252B%29%250A%2509%2509%257B%250A%2509%2509%2509printf%28%2522%2526arr%255B%2525d%255D%255B%2525d%255D%2520%253D%2520%2525p%255Cn%2522%252C%2520i%252C%2520j%252C%2526arr%255Bi%255D%255Bj%255D%29%253B%250A%2509%2509%257D%2520%2520%2520%2520%250A%2509%257D%250A%2509return%25200%253B%250A%257D%250A%257D%250A%250A%252F%252F%2520Photo%2520by%2520Willian%2520Justen%2520de%2520Vasconcellos%2520on%2520Unsplash"   style="width: 698px; height: 424px; border:0; transform: scale(1); overflow:hidden;"   sandbox="allow-scripts allow-same-origin"> </iframe><p><font style="color:yellowgreen;">编译结果:</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">00</span>AFFD10<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">00</span>AFFD14<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">00</span>AFFD18<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">00</span>AFFD1C<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">00</span>AFFD20<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">00</span>AFFD24<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">00</span>AFFD28<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">00</span>AFFD2C<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">00</span>AFFD30<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">00</span>AFFD34<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">00</span>AFFD38<span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">00</span>AFFD3C</code></pre><p>✏️<font style="color:skyblue;">通过结果我们可以分析到，其实二维数组在内存中也是连续存储的。</font></p><h3 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h3><p>往往我们在写代码的时候，会将数组作为参数传个函数</p><p>比如：我要实现一个冒泡排序 ,函数将一个整形数组排序。  </p><p><strong>代码例:</strong></p><iframe   src="https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&t=a11y-dark&wt=sharp&l=auto&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=0px&ph=39px&ln=false&fl=1&fm=Droid+Sans+Mono&fs=13px&lh=126%25&si=false&es=2x&wm=false&code=%2523define%2520_CRT_SECURE_NO_WARNINGS%250A%2523include%2520%253Cstdio.h%253E%250A%2523include%2520%253Cstring.h%253E%250A%250Avoid%2520bubble_sort%28int%2520arr%255B%255D%29%250A%257B%250A%2509%252F%252F%25E7%25A1%25AE%25E5%25AE%259A%25E5%2586%2592%25E6%25B3%25A1%25E6%258E%2592%25E5%25BA%258F%25E7%259A%2584%25E6%25AC%25A1%25E6%2595%25B0%250A%2509int%2520i%2520%253D%25200%253B%250A%2509int%2520sz%2520%253D%2520sizeof%28arr%29%2520%252F%2520sizeof%28arr%255B0%255D%29%253B%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%2520sz%2520-%25201%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509%252F%252F%25E6%25AF%258F%25E4%25B8%2580%25E8%25B6%259F%25E5%2586%2592%25E6%25B3%25A1%25E6%258E%2592%25E5%25BA%258F%250A%2509%2509int%2520j%2520%253D%25200%253B%250A%2509%2509for%2520%28j%2520%253D%25200%253B%2520j%2520%253C%2520sz-1-i%253B%2520j%252B%252B%29%250A%2509%2509%257B%250A%2509%2509%2509if%2520%28arr%255Bj%255D%2520%253E%2520arr%255Bj%2520%252B%25201%255D%29%250A%2509%2509%2509%257B%250A%2509%2509%2509%2509int%2520tmp%2520%253D%2520arr%255Bj%255D%253B%250A%2509%2509%2509%2509arr%255Bj%255D%2520%253D%2520arr%255Bj%2520%252B%25201%255D%253B%250A%2509%2509%2509%2509arr%255Bj%2520%252B%25201%255D%2520%253D%2520tmp%253B%250A%2509%2509%2509%257D%250A%250A%2509%2509%257D%250A%2509%257D%250A%257D%250A%250Aint%2520main%28%29%250A%257B%250A%2509int%2520i%2520%253D%25200%253B%250A%2509int%2520arr%255B%255D%2520%253D%2520%257B%25209%252C%25203%252C%25201%252C%25208%252C%25200%252C%25207%252C%25204%252C%25206%252C%25205%252C%25203%252C%25202%2520%257D%253B%250A%250A%2509int%2520sz%2520%253D%2520sizeof%28arr%29%2520%252F%2520sizeof%28arr%255B0%255D%29%253B%250A%250A%2509%252F%252F%25E5%25AF%25B9arr%25E8%25BF%259B%25E8%25A1%258C%25E5%258D%2587%25E5%25BA%258F%25E6%258E%2592%25E5%25BA%258F%250A%2509bubble_sort%28arr%29%253B%252F%252F%25E6%258E%2592%25E5%25BA%258F%25E5%2587%25BD%25E6%2595%25B0%250A%250A%2509for%2520%28%2520i%2520%253D%25200%253B%2520i%2520%253C%2520sz%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509printf%28%2522%2525d%2520%2522%252Carr%255Bi%255D%29%253B%250A%2509%257D%250A%2509return%25200%253B%250A%257D%250A%252F%252F%25E6%2596%25B9%25E6%25B3%25951---%25E9%2594%2599%25E8%25AF%25AF%250A%250A%252F%252F%2520Photo%2520by%2520Sam%2520Lawler%2520on%2520Unsplash"   style="width: 522px; height: 794px; border:0; transform: scale(1); overflow:hidden;"   sandbox="allow-scripts allow-same-origin"> </iframe><p>方法1，出问题，那我们找一下问题，调试之后可以看到 bubble_sort函数内部的 sz，是1。 </p><p><font style="color:tomato;">难道数组作为函数参数的时候，不是把整个数组的传递过去？</font></p><iframe  src="https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&t=a11y-dark&wt=sharp&l=auto&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=0px&ph=39px&ln=false&fl=1&fm=Droid+Sans+Mono&fs=13px&lh=126%25&si=false&es=2x&wm=false&code=%2523define%2520_CRT_SECURE_NO_WARNINGS%250A%2523include%2520%253Cstdio.h%253E%250A%2523include%2520%253Cstring.h%253E%250A%250Avoid%2520bubble_sort%28int%2520arr%255B%255D%252Cint%2520sz%29%250A%257B%250A%2509%252F%252F%25E7%25A1%25AE%25E5%25AE%259A%25E5%2586%2592%25E6%25B3%25A1%25E6%258E%2592%25E5%25BA%258F%25E7%259A%2584%25E6%25AC%25A1%25E6%2595%25B0%250A%2509int%2520i%2520%253D%25200%253B%250A%2509%252F%252Fint%2520sz%2520%253D%2520sizeof%28arr%29%2520%252F%2520sizeof%28arr%255B0%255D%29%253B%252F%252F%25E6%2596%25B9%25E6%25B3%25951%25E9%2580%25A0%25E6%2588%2590%25E7%259A%2584%25E7%25BB%2593%25E6%259E%259C%253Asz%2520%253D%25204%2520%252F%25204%2520%253D%25201%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%2520sz%2520-%25201%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509%252F%252F%25E6%25AF%258F%25E4%25B8%2580%25E8%25B6%259F%25E5%2586%2592%25E6%25B3%25A1%25E6%258E%2592%25E5%25BA%258F%250A%2509%2509int%2520j%2520%253D%25200%253B%250A%2509%2509for%2520%28j%2520%253D%25200%253B%2520j%2520%253C%2520sz-1-i%253B%2520j%252B%252B%29%250A%2509%2509%257B%250A%2509%2509%2509if%2520%28arr%255Bj%255D%2520%253E%2520arr%255Bj%2520%252B%25201%255D%29%250A%2509%2509%2509%257B%250A%2509%2509%2509%2509int%2520tmp%2520%253D%2520arr%255Bj%255D%253B%250A%2509%2509%2509%2509arr%255Bj%255D%2520%253D%2520arr%255Bj%2520%252B%25201%255D%253B%250A%2509%2509%2509%2509arr%255Bj%2520%252B%25201%255D%2520%253D%2520tmp%253B%250A%2509%2509%2509%257D%250A%250A%2509%2509%257D%250A%2509%257D%250A%257D%250A%250Aint%2520main%28%29%250A%257B%250A%2509int%2520i%2520%253D%25200%253B%250A%2509int%2520arr%255B%255D%2520%253D%2520%257B%25209%252C%25203%252C%25201%252C%25208%252C%25200%252C%25207%252C%25204%252C%25206%252C%25205%252C%25203%252C%25202%2520%257D%253B%250A%250A%2509int%2520sz%2520%253D%2520sizeof%28arr%29%2520%252F%2520sizeof%28arr%255B0%255D%29%253B%250A%250A%2509%252F%252F%25E5%25AF%25B9arr%25E8%25BF%259B%25E8%25A1%258C%25E5%258D%2587%25E5%25BA%258F%25E6%258E%2592%25E5%25BA%258F%250A%2509%252F%252F%2520arr%25E6%2598%25AF%25E6%2595%25B0%25E7%25BB%2584%25EF%25BC%258C%25E6%2588%2591%25E4%25BB%25AC%25E5%25AF%25B9%25E6%2595%25B0%25E7%25BB%2584arr%25E8%25BF%259B%25E8%25A1%258C%25E4%25BC%25A0%25E5%258F%2582%25EF%25BC%258C%25E5%25AE%259E%25E9%2599%2585%25E4%25B8%258A%25E4%25BC%25A0%25E9%2580%2592%25E8%25BF%2587%25E5%258E%25BB%25E7%259A%2584%25E6%2598%25AF%25E6%2595%25B0%25E7%25BB%2584arr%25E9%25A6%2596%25E5%2585%2583%25E7%25B4%25A0%25E7%259A%2584%25E5%259C%25B0%25E5%259D%2580--%2526arr%255B0%255D%250A%2509bubble_sort%28arr%252Csz%29%253B%252F%252F%25E6%258E%2592%25E5%25BA%258F%25E5%2587%25BD%25E6%2595%25B0%250A%250A%2509for%2520%28%2520i%2520%253D%25200%253B%2520i%2520%253C%2520sz%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509printf%28%2522%2525d%2520%2522%252Carr%255Bi%255D%29%253B%250A%2509%257D%250A%2509return%25200%253B%250A%257D%250A%250A%252F%252F%2520Photo%2520by%2520note%2520thanun%2520on%2520Unsplash"  style="width: 745px; height: 794px; border:0; transform: scale(1); overflow:hidden;"  sandbox="allow-scripts allow-same-origin"></iframe>分析代码:<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//00BFF828</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//00BFF828</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>结论：</strong><br>                <font style="color:orange;">数组名是数组首元素的地址。（有两个例外）</font></p><p>✍补充：</p><ol><li>sizeof(数组名)，计算整个数组的大小，sizeof内部单独放一个数组名，数组名表示整个数组。</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出40</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>  2.&amp;数组名，取出的是数组的地址。&amp;数组名，数组名表示整个数组。</p><p>除此1,2两种情况之外，所有的数组名都表示数组首元素的地址。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//int sz = sizeof(arr) / sizeof(arr[0]);</span><span class="token comment">/*1.sizeof(数组名) -- 数组名表示整个数组,sizeof(数组名)计算的是整个数组的大小单位是字节2.&amp;数组名，数组名代表整个数组，&amp;数组名，取出的是整个数组的地址*/</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//00D7F940</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> arr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//00D7F944</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//00D7F940</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//00D7F944</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//00D7F940--虽然结果一样,但是这里取出的是整个数组的地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//00D7F960</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>🚀<code>代码优化</code></p><p><font style="color:gold;">我们应该考虑到源数组排序已经是升序的情况</font></p><iframe   src="https://carbon.now.sh/embed?bg=rgba%2874%2C144%2C226%2C1%29&t=material&wt=none&l=auto&ds=false&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=15px&ph=56px&ln=false&fl=1&fm=Fira+Code&fs=14px&lh=152%25&si=false&es=2x&wm=false&code=%2523define%2520_CRT_SECURE_NO_WARNINGS%250A%2523include%2520%253Cstdio.h%253E%250A%2523include%2520%253Cstring.h%253E%250A%250Avoid%2520bubble_sort%28int%2520arr%255B%255D%252C%2520int%2520sz%29%250A%257B%250A%2509%252F%252F%25E7%25A1%25AE%25E5%25AE%259A%25E5%2586%2592%25E6%25B3%25A1%25E6%258E%2592%25E5%25BA%258F%25E7%259A%2584%25E6%25AC%25A1%25E6%2595%25B0%250A%2509int%2520i%2520%253D%25200%253B%250A%2509%252F%252Fint%2520sz%2520%253D%2520sizeof%28arr%29%2520%252F%2520sizeof%28arr%255B0%255D%29%253B%252F%252F%25E6%2596%25B9%25E6%25B3%25951%25E9%2580%25A0%25E6%2588%2590%25E7%259A%2584%25E7%25BB%2593%25E6%259E%259C%253Asz%2520%253D%25204%2520%252F%25204%2520%253D%25201%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%2520sz%2520-%25201%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509%252F%252F%25E6%25AF%258F%25E4%25B8%2580%25E8%25B6%259F%25E5%2586%2592%25E6%25B3%25A1%25E6%258E%2592%25E5%25BA%258F%250A%2509%2509int%2520j%2520%253D%25200%253B%250A%2509%2509int%2520flag%2520%253D%25201%253B%252F%252F%25E5%2581%2587%25E8%25AE%25BE%25E6%2595%25B0%25E7%25BB%2584%25E5%2585%2583%25E7%25B4%25A0%25E5%25B7%25B2%25E7%25BB%258F%25E6%259C%2589%25E5%25BA%258F%250A%2509%2509for%2520%28j%2520%253D%25200%253B%2520j%2520%253C%2520sz%2520-%25201%2520-%2520i%253B%2520j%252B%252B%29%250A%2509%2509%257B%250A%2509%2509%2509if%2520%28arr%255Bj%255D%2520%253E%2520arr%255Bj%2520%252B%25201%255D%29%250A%2509%2509%2509%257B%250A%2509%2509%2509%2509int%2520tmp%2520%253D%2520arr%255Bj%255D%253B%250A%2509%2509%2509%2509arr%255Bj%255D%2520%253D%2520arr%255Bj%2520%252B%25201%255D%253B%250A%2509%2509%2509%2509arr%255Bj%2520%252B%25201%255D%2520%253D%2520tmp%253B%250A%2509%2509%2509%2509flag%2520%253D%25200%253B%252F%252F%25E6%259C%25AC%25E8%25B6%259F%25E6%258E%2592%25E5%25BA%258F%25E5%2585%2583%25E7%25B4%25A0%25E4%25B8%25BA%25E4%25B9%25B1%25E5%25BA%258F%250A%2509%2509%2509%257D%250A%2509%2509%257D%250A%2509%2509%252F%252F%25E7%25A8%258B%25E5%25BA%258F%25E8%25B5%25B0%25E8%25BF%2599%25E9%2587%258C%25E4%25BB%25A3%25E8%25A1%25A8%25E6%2595%25B0%25E7%25BB%2584%25E5%2585%2583%25E7%25B4%25A0%25E5%25B7%25B2%25E7%25BB%258F%25E6%259C%2589%25E5%25BA%258F%250A%2509%2509if%2520%28flag%2520%253D%253D%25201%29%250A%2509%2509%257B%250A%2509%2509%2509break%253B%252F%252F%25E7%259B%25B4%25E6%258E%25A5%25E7%25BB%2588%25E6%25AD%25A2%25E5%2587%25BD%25E6%2595%25B0%25E6%2589%25A7%25E8%25A1%258C%250A%2509%2509%257D%250A%2509%257D%250A%257D%250A%250Aint%2520main%28%29%250A%257B%250A%2509int%2520i%2520%253D%25200%253B%250A%2509int%2520arr%255B%255D%2520%253D%2520%257B%25209%252C%25203%252C%25201%252C%25208%252C%25200%252C%25207%252C%25204%252C%25206%252C%25205%252C%25203%252C%25202%2520%257D%253B%250A%250A%2509int%2520sz%2520%253D%2520sizeof%28arr%29%2520%252F%2520sizeof%28arr%255B0%255D%29%253B%250A%250A%2509%252F%252F%25E5%25AF%25B9arr%25E8%25BF%259B%25E8%25A1%258C%25E5%258D%2587%25E5%25BA%258F%25E6%258E%2592%25E5%25BA%258F%250A%2509%252F%252F%2520arr%25E6%2598%25AF%25E6%2595%25B0%25E7%25BB%2584%25EF%25BC%258C%25E6%2588%2591%25E4%25BB%25AC%25E5%25AF%25B9%25E6%2595%25B0%25E7%25BB%2584arr%25E8%25BF%259B%25E8%25A1%258C%25E4%25BC%25A0%25E5%258F%2582%25EF%25BC%258C%25E5%25AE%259E%25E9%2599%2585%25E4%25B8%258A%25E4%25BC%25A0%25E9%2580%2592%25E8%25BF%2587%25E5%258E%25BB%25E7%259A%2584%25E6%2598%25AF%25E6%2595%25B0%25E7%25BB%2584arr%25E9%25A6%2596%25E5%2585%2583%25E7%25B4%25A0%25E7%259A%2584%25E5%259C%25B0%25E5%259D%2580--%2526arr%255B0%255D%250A%2509bubble_sort%28arr%252C%2520sz%29%253B%252F%252F%25E6%258E%2592%25E5%25BA%258F%25E5%2587%25BD%25E6%2595%25B0%250A%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%2520sz%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509printf%28%2522%2525d%2520%2522%252C%2520arr%255Bi%255D%29%253B%250A%2509%257D%250A%2509return%25200%253B%250A%257D%250A%250A%250A%252F%252F%2520Photo%2520by%2520Michael%2520Olsen%2520on%2520Unsplash"   style="width: 800px; height: 1196px; border:0; transform: scale(1); overflow:hidden;"   sandbox="allow-scripts allow-same-origin"> </iframe><hr><h3 id="数组的应用实例"><a href="#数组的应用实例" class="headerlink" title="数组的应用实例"></a>数组的应用实例</h3><h4 id="1：三子棋"><a href="#1：三子棋" class="headerlink" title="1：三子棋"></a>1：三子棋</h4><p>在工程文件夹中建立<code>game.h</code>,<code>game.c</code>,<code>test.c</code></p><p><strong>代码例:</strong></p><p><code>game.h</code></p><iframe   src="https://carbon.now.sh/embed?bg=rgba%2874%2C144%2C226%2C1%29&t=material&wt=none&l=auto&ds=false&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=15px&ph=56px&ln=false&fl=1&fm=Fira+Code&fs=14px&lh=152%25&si=false&es=2x&wm=false&code=%2523define%2520_CRT_SECURE_NO_WARNINGS%250A%2523define%2520ROW%25203%252F%252F%25E5%25AE%259A%25E4%25B9%2589%25E8%25A1%258C%25E4%25B8%25BA3%250A%2523define%2520COL%25203%252F%252F%25E5%25AE%259A%25E4%25B9%2589%25E5%2588%2597%25E4%25B8%25BA3%250A%250A%2523include%2520%253Cstdio.h%253E%250A%2523include%2520%253Cstdlib.h%253E%250A%2523include%2520%253Ctime.h%253E%250A%250A%250A%252F%252F%25E5%2587%25BD%25E6%2595%25B0%25E5%25A3%25B0%25E6%2598%258E%250Avoid%2520InitBoard%28char%2520board%255BROW%255D%255BCOL%255D%252C%2520int%2520row%252C%2520int%2520col%29%253B%250Avoid%2520DisplayBoard%28char%2520board%255BROW%255D%255BCOL%255D%252C%2520int%2520row%252C%2520int%2520col%29%253B%250Avoid%2520PlayerMove%28char%2520board%255BROW%255D%255BCOL%255D%252C%2520int%2520row%252C%2520int%2520col%29%253B%250Avoid%2520ComputerMove%28char%2520board%255BROW%255D%255BCOL%255D%252C%2520int%2520row%252C%2520int%2520col%29%253B%250A%250A%252F%252F%25E8%25BF%2594%25E5%259B%259E4%25E7%25A7%258D%25E6%25B8%25B8%25E6%2588%258F%25E7%258A%25B6%25E6%2580%2581%250A%252F*%250A1.%25E7%258E%25A9%25E5%25AE%25B6%25E8%25B5%25A2--%27*%27%250A2.%25E7%2594%25B5%25E8%2584%2591%25E8%25B5%25A2--%27%2523%27%250A3.%25E5%25B9%25B3%25E5%25B1%2580--%27Q%27%250A4.%25E4%25B8%258D%25E5%25AE%259A%25E6%2580%2581--%25E8%2583%259C%25E8%25B4%259F%25E6%259C%25AA%25E5%2588%2586--%27C%27%250A*%252F%250Achar%2520IsWin%28char%2520board%255BROW%255D%255BCOL%255D%252C%2520int%2520row%252C%2520int%2520col%29%253B%250A%250A%252F%252F%2520Photo%2520by%2520Janke%2520Laskowski%2520on%2520Unsplash"   style="width: 650px; height: 629px; border:0; transform: scale(1); overflow:hidden;"   sandbox="allow-scripts allow-same-origin"> </iframe><p><code>game.c</code></p><iframe   src="https://carbon.now.sh/embed?bg=rgba%2874%2C144%2C226%2C1%29&t=material&wt=none&l=auto&ds=false&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=15px&ph=56px&ln=false&fl=1&fm=Fira+Code&fs=14px&lh=152%25&si=false&es=2x&wm=false&code=%2523define%2520_CRT_SECURE_NO_WARNINGS%25201%250A%2523include%2520%2522game.h%2522%250A%250A%252F*%25E6%25B8%25B8%25E6%2588%258F%25E7%259A%2584%25E6%2595%25B4%25E4%25B8%25AA%25E7%25AE%2597%25E6%25B3%2595%25E5%25AE%259E%25E7%258E%25B0*%252F%250A%250A%252F%252F%25E5%2588%259D%25E5%25A7%258B%25E5%258C%2596%25E6%25A3%258B%25E7%259B%2598%250Avoid%2520InitBoard%28char%2520board%255BROW%255D%255BCOL%255D%252C%2520int%2520row%252C%2520int%2520col%29%250A%257B%250A%2509int%2520i%2520%253D%25200%253B%250A%2509int%2520j%2520%253D%25200%253B%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%2520row%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509for%2520%28j%2520%253D%25200%253B%2520j%2520%253C%2520col%253B%2520j%252B%252B%29%250A%2509%2509%257B%250A%2509%2509%2509board%255Bi%255D%255Bj%255D%2520%253D%2520%27%2520%27%253B%250A%2509%2509%257D%250A%2509%257D%250A%257D%250A%250A%252F%252F%25E6%25A3%258B%25E7%259B%2598%25E6%2589%2593%25E5%258D%25B0%250Avoid%2520DisplayBoard%28char%2520board%255BROW%255D%255BCOL%255D%252C%2520int%2520row%252C%2520int%2520col%29%250A%257B%250A%2509int%2520i%2520%253D%25200%253B%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%2520row%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509int%2520j%2520%253D%25200%253B%250A%2509%2509for%2520%28j%2520%253D%25200%253B%2520j%2520%253C%2520col%253B%2520j%252B%252B%29%250A%2509%2509%257B%250A%2509%2509%2509%252F%252F1.%2520%25E6%2589%2593%25E5%258D%25B0%25E4%25B8%2580%25E8%25A1%258C%25E7%259A%2584%25E6%2595%25B0%25E6%258D%25AE%250A%2509%2509%2509printf%28%2522%2520%2525c%2520%2522%252C%2520board%255Bi%255D%255Bj%255D%29%253B%250A%2509%2509%2509if%2520%28j%2520%253C%2520col%2520-%25201%29%250A%2509%2509%2509%2509printf%28%2522%257C%2522%29%253B%250A%2509%2509%257D%250A%2509%2509printf%28%2522%255Cn%2522%29%253B%250A%2509%2509%252F%252F2.%2520%25E6%2589%2593%25E5%258D%25B0%25E5%2588%2586%25E5%2589%25B2%25E8%25A1%258C%250A%2509%2509if%2520%28i%2520%253C%2520row%2520-%25201%29%250A%2509%2509%257B%250A%2509%2509%2509for%2520%28j%2520%253D%25200%253B%2520j%2520%253C%2520col%253B%2520j%252B%252B%29%250A%2509%2509%2509%257B%250A%2509%2509%2509%2509printf%28%2522---%2522%29%253B%250A%2509%2509%2509%2509if%2520%28j%2520%253C%2520col%2520-%25201%29%250A%2509%2509%2509%2509%2509printf%28%2522%257C%2522%29%253B%250A%2509%2509%2509%257D%250A%2509%2509%2509printf%28%2522%255Cn%2522%29%253B%250A%2509%2509%257D%250A%250A%2509%257D%250A%257D%250A%252F%252F%25E7%258E%25A9%25E5%25AE%25B6%25E8%2590%25BD%25E5%25AD%2590%250Avoid%2520PlayerMove%28char%2520board%255BROW%255D%255BCOL%255D%252C%2520int%2520row%252C%2520int%2520col%29%250A%257B%250A%2509int%2520x%2520%253D%25200%253B%250A%2509int%2520y%2520%253D%25200%253B%250A%2509printf%28%2522%25E7%258E%25A9%25E5%25AE%25B6%25E8%25B5%25B0%25EF%25BC%259A%253E%255Cn%2522%29%253B%250A%2509while%2520%281%29%250A%2509%257B%250A%2509%2509printf%28%2522%25E8%25AF%25B7%25E8%25BE%2593%25E5%2585%25A5%25E8%25A6%2581%25E4%25B8%258B%25E7%259A%2584%25E5%259D%2590%25E6%25A0%2587%253A%253E%2522%29%253B%250A%2509%2509scanf%28%2522%2525d%2525d%2522%252C%2520%2526x%252C%2520%2526y%29%253B%250A%2509%2509%252F%252F%25E5%2588%25A4%25E6%2596%25ADx%252Cy%25E5%259D%2590%25E6%25A0%2587%25E7%259A%2584%25E5%2590%2588%25E6%25B3%2595%25E6%2580%25A7%250A%2509%2509if%2520%28x%2520%253E%253D%25201%2520%2526%2526%2520x%2520%253C%253D%2520row%2520%2520%2526%2526%2520y%2520%253E%253D%25201%2520%2526%2526%2520y%2520%253C%253D%2520col%29%250A%2509%2509%257B%250A%2509%2509%2509if%2520%28board%255Bx%2520-%25201%255D%255By%2520-%25201%255D%2520%253D%253D%2520%27%2520%27%29%250A%2509%2509%2509%257B%250A%2509%2509%2509%2509board%255Bx%2520-%25201%255D%255By%2520-%25201%255D%2520%253D%2520%27*%27%253B%250A%2509%2509%2509%2509break%253B%250A%2509%2509%2509%257D%250A%2509%2509%2509else%250A%2509%2509%2509%257B%250A%2509%2509%2509%2509printf%28%2522%25E8%25AF%25A5%25E5%259D%2590%25E6%25A0%2587%25E8%25A2%25AB%25E5%258D%25A0%25E7%2594%25A8%255Cn%2522%29%253B%250A%2509%2509%2509%257D%250A%2509%2509%257D%250A%2509%2509else%250A%2509%2509%257B%250A%2509%2509%2509printf%28%2522%25E5%259D%2590%25E6%25A0%2587%25E9%259D%259E%25E6%25B3%2595%25EF%25BC%258C%25E8%25AF%25B7%25E9%2587%258D%25E6%2596%25B0%25E8%25BE%2593%25E5%2585%25A5%21%255Cn%2522%29%253B%250A%2509%2509%257D%250A%2509%257D%250A%257D%250A%252F%252F%25E7%2594%25B5%25E8%2584%2591%25E8%2590%25BD%25E5%25AD%2590%250Avoid%2520ComputerMove%28char%2520board%255BROW%255D%255BCOL%255D%252C%2520int%2520row%252C%2520int%2520col%29%250A%257B%250A%2509int%2520x%2520%253D%25200%253B%250A%2509int%2520y%2520%253D%25200%253B%250A%2509printf%28%2522%25E7%2594%25B5%25E8%2584%2591%25E8%25B5%25B0%253A%253E%255Cn%2522%29%253B%250A%2509while%2520%281%29%250A%2509%257B%250A%250A%2509%2509x%2520%253D%2520rand%28%29%2520%2525%2520row%253B%250A%2509%2509y%2520%253D%2520rand%28%29%2520%2525%2520col%253B%250A%2509%2509if%2520%28board%255Bx%255D%255By%255D%2520%253D%253D%2520%27%2520%27%29%250A%2509%2509%257B%250A%2509%2509%2509board%255Bx%255D%255By%255D%2520%253D%2520%27%2523%27%253B%250A%2509%2509%2509break%253B%250A%2509%2509%257D%250A%2509%257D%250A%250A%257D%250A%250A%252F%252F%25E5%25B9%25B3%25E5%25B1%2580%25E5%2588%25A4%25E6%2596%25AD%25E5%2587%25BD%25E6%2595%25B0%250A%252F%252F%25E8%25BF%2594%25E5%259B%259E1%25E8%25A1%25A8%25E7%25A4%25BA%25E6%25A3%258B%25E7%259B%2598%25E6%25BB%25A1%25E4%25BA%2586%250A%252F%252F%25E8%25BF%2594%25E5%259B%259E0%25EF%25BC%258C%25E8%25A1%25A8%25E7%25A4%25BA%25E6%25A3%258B%25E7%259B%2598%25E6%25B2%25A1%25E6%25BB%25A1%250A%250Aint%2520IsFull%28char%2520board%255BROW%255D%255BCOL%255D%252C%2520int%2520row%252C%2520int%2520col%29%250A%257B%250A%2509int%2520i%2520%253D%25200%253B%250A%2509int%2520j%2520%253D%25200%253B%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%2520row%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509for%2520%28j%2520%253D%25200%253B%2520j%2520%253C%2520col%253B%2520j%252B%252B%29%250A%2509%2509%257B%250A%2509%2509%2509if%2520%28board%255Bi%255D%255Bj%255D%2520%253D%253D%2520%27%2520%27%29%250A%2509%2509%2509%257B%250A%2509%2509%2509%2509return%25200%253B%252F%252F%25E6%25B2%25A1%25E6%25BB%25A1%250A%2509%2509%2509%257D%250A%2509%2509%257D%250A%2509%257D%250A%2509return%25201%253B%252F%252F%25E6%25BB%25A1%25E4%25BA%2586%250A%257D%250A%250A%252F%252F%25E6%25B8%25B8%25E6%2588%258F%25E7%258A%25B6%25E6%2580%2581%25E5%2587%25BD%25E6%2595%25B0%250Achar%2520IsWin%28char%2520board%255BROW%255D%255BCOL%255D%252C%2520int%2520row%252C%2520int%2520col%29%250A%257B%250A%2509int%2520i%2520%253D%25200%253B%250A%2509%252F%252F%25E6%25A8%25AA%25E4%25B8%2589%25E8%25A1%258C%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%2520row%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509if%2520%28board%255Bi%255D%255B0%255D%2520%253D%253D%2520board%255Bi%255D%255B1%255D%2520%2526%2526%2520board%255Bi%255D%255B1%255D%2520%253D%253D%2520board%255Bi%255D%255B2%255D%2520%2526%2526%2520board%255Bi%255D%255B1%255D%2520%21%253D%2520%27%2520%27%29%250A%2509%2509%257B%250A%2509%2509%2509return%2520board%255Bi%255D%255B1%255D%253B%250A%2509%2509%257D%250A%2509%257D%250A%2509%252F%252F%25E7%25AB%2596%25E4%25B8%2589%25E5%2588%2597%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%2520col%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509if%2520%28board%255B0%255D%255Bi%255D%2520%253D%253D%2520board%255B1%255D%255Bi%255D%2520%2526%2526%2520board%255B1%255D%255Bi%255D%2520%253D%253D%2520board%255B2%255D%255Bi%255D%2520%2526%2526%2520board%255B1%255D%255Bi%255D%2520%21%253D%2520%27%2520%27%29%250A%2509%2509%257B%250A%2509%2509%2509return%2520board%255B1%255D%255Bi%255D%253B%250A%2509%2509%257D%250A%2509%257D%250A%2509%252F%252F%25E4%25B8%25A4%25E4%25B8%25AA%25E5%25AF%25B9%25E8%25A7%2592%25E7%25BA%25BF%250A%2509if%2520%28board%255B0%255D%255B0%255D%2520%253D"   style="width: 934px; height: 3317px; border:0; transform: scale(1); overflow:hidden;"   sandbox="allow-scripts allow-same-origin"> </iframe><p><code>test.c</code></p><iframe   src="https://carbon.now.sh/embed?bg=rgba%2874%2C144%2C226%2C1%29&t=material&wt=none&l=auto&ds=false&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=54px&ph=56px&ln=false&fl=1&fm=Fira+Code&fs=14px&lh=152%25&si=false&es=2x&wm=false&code=%2523define%2520_CRT_SECURE_NO_WARNINGS%250A%2523include%2520%253Cstdio.h%253E%250A%2523include%2520%253Cstring.h%253E%250A%2523include%2520%2522game.h%2522%250A%250Avoid%2520menu%28%29%250A%257B%250A%2509printf%28%2522*******************************************%255Cn%2522%29%253B%250A%2509printf%28%2522***********%2520%25201.%2520play%2520%25200.%2520exit%2520%2520************%255Cn%2522%29%253B%250A%2509printf%28%2522*******************************************%255Cn%2522%29%253B%250A%257D%250A%250A%252F%252F%25E6%25B8%25B8%25E6%2588%258F%25E5%2587%25BD%25E6%2595%25B0%250Avoid%2520game%28%29%250A%257B%250A%2509char%2520ret%2520%253D%25200%253B%252F%252F%25E6%25B8%25B8%25E6%2588%258F%25E7%258A%25B6%25E6%2580%2581%25E5%2580%25BC%25E5%2588%259D%25E5%25A7%258B%25E5%258C%2596%250A%2509%252F%252F%25E6%2595%25B0%25E7%25BB%2584--%25E5%25AD%2598%25E6%2594%25BE%25E8%25B5%25B0%25E5%2587%25BA%25E7%259A%2584%25E6%25A3%258B%25E7%259B%2598%25E4%25BF%25A1%25E6%2581%25AF%250A%2509char%2520board%255BROW%255D%255BCOL%255D%2520%253D%2520%257B%25200%2520%257D%253B%250A%2509%252F%252F%25E5%2588%259D%25E5%25A7%258B%25E5%258C%2596%25E6%25A3%258B%25E7%259B%2598%252F%25E6%2595%25B0%25E7%25BB%2584%250A%2509InitBoard%28board%252C%2520ROW%252C%2520COL%29%253B%250A%2509%252F%252F%25E6%2589%2593%25E5%258D%25B0%25E6%25A3%258B%25E7%259B%2598%250A%2509DisplayBoard%28board%252C%2520ROW%252C%2520COL%29%253B%250A%2509%252F%252F%25E4%25B8%258B%25E6%25A3%258B%250A%2509while%2520%281%29%252F%252F%25E5%2588%25A4%25E6%2596%25AD%25E4%25B8%25BA%25E7%259C%259F%252C%25E6%2581%2592%25E8%25BF%2590%25E8%25A1%258C%250A%2509%257B%250A%2509%2509%252F%252F%25E7%258E%25A9%25E5%25AE%25B6%25E4%25B8%258B%25E6%25A3%258B%250A%2509%2509PlayerMove%28board%252C%2520ROW%252C%2520COL%29%253B%250A%2509%2509DisplayBoard%28board%252C%2520ROW%252C%2520COL%29%253B%250A%2509%2509%252F%252F%25E5%2588%25A4%25E6%2596%25AD%25E7%258E%25A9%25E5%25AE%25B6%25E8%25BE%2593%25E8%25B5%25A2%250A%2509%2509ret%2520%253D%2520IsWin%28board%252C%2520ROW%252C%2520COL%29%253B%250A%2509%2509if%2520%28ret%2520%21%253D%2520%27C%27%29%250A%2509%2509%257B%250A%2509%2509%2509break%253B%250A%2509%2509%257D%250A%2509%2509%252F%252F%25E7%2594%25B5%25E8%2584%2591%25E4%25B8%258B%25E6%25A3%258B%250A%2509%2509ComputerMove%28board%252C%2520ROW%252C%2520COL%29%253B%250A%2509%2509DisplayBoard%28board%252C%2520ROW%252C%2520COL%29%253B%250A%2509%2509%252F%252F%25E5%2588%25A4%25E6%2596%25AD%25E7%2594%25B5%25E8%2584%2591%25E8%25BE%2593%25E8%25B5%25A2%250A%2509%2509ret%2520%253D%2520IsWin%28board%252C%2520ROW%252C%2520COL%29%253B%250A%2509%2509if%2520%28ret%2520%21%253D%2520%27C%27%29%250A%2509%2509%257B%250A%2509%2509%2509break%253B%250A%2509%2509%257D%250A%2509%257D%250A%2509if%2520%28ret%2520%253D%253D%2520%27*%27%29%250A%2509%257B%250A%2509%2509printf%28%2522%25E7%25A5%259D%25E8%25B4%25BA%21%25E7%258E%25A9%25E5%25AE%25B6%25E8%25B5%25A2%21%255Cn%2522%29%253B%250A%2509%257D%250A%2509else%2520if%2520%28ret%2520%253D%253D%2520%27%2523%27%29%250A%2509%257B%250A%2509%2509printf%28%2522%25E5%2593%258E%25E5%2591%2580%252C%25E7%2594%25B5%25E8%2584%2591%25E8%25B5%25A2%21%255Cn%2522%29%253B%250A%2509%257D%250A%2509else%250A%2509%257B%250A%2509%2509printf%28%2522nb%252C%25E5%25B9%25B3%25E5%25B1%2580%21%255Cn%2522%29%253B%250A%2509%257D%250A%257D%250A%250A%252F%252F%25E8%258F%259C%25E5%258D%2595%25E5%2587%25BD%25E6%2595%25B0%250Avoid%2520test%28%29%250A%257B%250A%2509int%2520input%2520%253D%25200%253B%252F%252F%25E8%25BE%2593%25E5%2585%25A5%25E5%2580%25BC%25E5%2588%259D%25E5%25A7%258B%25E5%258C%2596%250A%2509%252F%252F%25E8%25B0%2583%25E7%2594%25A8%25E6%2597%25B6%25E9%2597%25B4%25E6%2588%25B3%25E5%25B9%25B6%25E5%25BC%25BA%25E8%25BD%25AC%25E7%25B1%25BB%25E5%259E%258B%250A%2509srand%28%28unsigned%2520int%29time%28NULL%29%29%253B%252F%252F%25E8%25B0%2583%25E7%2594%25A8rand%28%29%25E5%2587%25BD%25E6%2595%25B0%250A%2509do%250A%2509%257B%250A%2509%2509menu%28%29%253B%250A%2509%2509printf%28%2522%25E8%25AF%25B7%25E9%2580%2589%25E6%258B%25A9%253A%253E%255Cn%2522%29%253B%250A%2509%2509scanf%28%2522%2525d%2522%252C%2520%2526input%29%253B%252F%252F%25E6%258E%25A5%25E6%2594%25B6%25E8%25BE%2593%25E5%2585%25A5%25E5%2580%25BC%250A%2509%2509switch%2520%28input%29%250A%2509%2509%257B%250A%2509%2509case%25201%253A%250A%2509%2509%2509game%28%29%253B%250A%2509%2509%2509printf%28%2522%25E4%25B8%2589%25E5%25AD%2590%25E6%25A3%258B%25E6%25B8%25B8%25E6%2588%258F%25E5%25BC%2580%25E5%25A7%258B%21%255Cn%2522%29%253B%250A%2509%2509%2509break%253B%250A%2509%2509case%25200%253A%250A%2509%2509%2509printf%28%2522%25E5%25B7%25B2%25E9%2580%2580%25E5%2587%25BA%25E4%25B8%2589%25E5%25AD%2590%25E6%25A3%258B%25E6%25B8%25B8%25E6%2588%258F%21%255Cn%2522%29%253B%250A%2509%2509%2509break%253B%250A%2509%2509default%253A%250A%2509%2509%2509printf%28%2522what%2520are%2520U%2520%25E8%25BE%2593%25E5%2595%25A5%25E5%2598%259E%21%255Cn%2522%29%253B%250A%2509%2509%2509break%253B%250A%2509%2509%257D%250A%2509%257D%2520while%2520%28input%29%253B%250A%257D%250A%250A%252F%252F%25E4%25B8%2589%25E5%25AD%2590%25E6%25A3%258B%25E6%25B5%258B%25E8%25AF%2595%25E6%25A8%25A1%25E5%259D%2597%250Aint%2520main%28%29%250A%257B%250A%2509test%28%29%253B%250A%2509return%25200%253B%250A%257D%250A%250A%252F%252F%2520Photo%2520by%2520Annie%2520Spratt%2520on%2520Unsplash"   style="width: 667px; height: 2135px; border:0; transform: scale(1); overflow:hidden;"   sandbox="allow-scripts allow-same-origin"> </iframe><h4 id="2：扫雷游戏-初级"><a href="#2：扫雷游戏-初级" class="headerlink" title="2：扫雷游戏(初级)"></a>2：扫雷游戏(初级)</h4><p>⚠️<font style="color:red;">新建一个项目来存放编写此游戏代码,不然可能会和三子棋冲突</font></p><p>建立<code>game.h</code>,<code>game.c</code>,<code>test.c</code></p><p>思路:</p><iframe src="//player.bilibili.com/player.html?aid=927550315&bvid=BV1TT4y1F7Z9&cid=250379227&page=72" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="450px"> </iframe><p><strong>代码例:</strong></p><p><code>game.h</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ROW</span> <span class="token expression"><span class="token number">9</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COL</span> <span class="token expression"><span class="token number">9</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ROWS</span> <span class="token expression">ROW<span class="token operator">+</span><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COLS</span> <span class="token expression">COL<span class="token operator">+</span><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EASY_COUNT</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">void</span> <span class="token function">InitBoard</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> cols<span class="token punctuation">,</span><span class="token keyword">char</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DisplayBoard</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> row<span class="token punctuation">,</span><span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SetMine</span><span class="token punctuation">(</span><span class="token keyword">char</span> board<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">FindMine</span><span class="token punctuation">(</span><span class="token keyword">char</span> mine<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> show<span class="token punctuation">[</span>ROWS<span class="token punctuation">]</span><span class="token punctuation">[</span>COLS<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>game.c</code></p><iframe   src="https://carbon.now.sh/embed?bg=rgba%2874%2C144%2C226%2C1%29&t=material&wt=none&l=auto&ds=false&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=0px&ph=56px&ln=false&fl=1&fm=Fira+Code&fs=14px&lh=152%25&si=false&es=2x&wm=false&code=%2523define%2520_CRT_SECURE_NO_WARNINGS%250A%2523include%2520%2522game.h%2522%250A%250Avoid%2520InitBoard%28char%2520board%255BROWS%255D%255BCOLS%255D%252C%2520int%2520rows%252C%2520int%2520cols%252C%2520char%2520set%29%250A%257B%250A%2509int%2520i%2520%253D%25200%253B%250A%2509int%2520j%2520%253D%25200%253B%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%2520rows%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509for%2520%28j%2520%253D%25200%253B%2520j%2520%253C%2520cols%253B%2520j%252B%252B%29%250A%2509%2509%257B%250A%2509%2509%2509board%255Bi%255D%255Bj%255D%2520%253D%2520set%253B%250A%2509%2509%257D%250A%2509%257D%250A%257D%250A%250Avoid%2520DisplayBoard%28char%2520board%255BROWS%255D%255BCOLS%255D%252C%2520int%2520row%252C%2520int%2520col%29%250A%257B%250A%2509int%2520i%2520%253D%25200%253B%250A%2509int%2520j%2520%253D%25200%253B%250A%2509%252F%252F%25E6%2589%2593%25E5%258D%25B0%25E5%2588%2597%25E5%258F%25B7%250A%2509for%2520%28i%2520%253D%25200%253B%2520i%2520%253C%253D%2520col%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509printf%28%2522%2525d%2520%2522%252C%2520i%29%253B%250A%2509%257D%250A%2509printf%28%2522%255Cn%2522%29%253B%250A%2509for%2520%28i%2520%253D%25201%253B%2520i%2520%253C%2520row%253B%2520i%252B%252B%29%250A%2509%257B%250A%2509%2509printf%28%2522%2525d%2520%2522%252C%2520i%29%253B%252F%252F%25E8%25A1%258C%25E5%258F%25B7%250A%2509%2509for%2520%28j%2520%253D%25201%253B%2520j%2520%253C%253D%2520col%253B%2520j%252B%252B%29%250A%2509%2509%257B%250A%2509%2509%2509printf%28%2522%2525c%2520%2522%252C%2520board%255Bi%255D%255Bj%255D%29%253B%250A%2509%2509%257D%250A%2509%2509printf%28%2522%255Cn%2522%29%253B%250A%2509%257D%250A%257D%250A%250Avoid%2520SetMine%28char%2520board%255BROWS%255D%255BCOLS%255D%252C%2520int%2520row%252C%2520int%2520col%29%250A%257B%250A%2509int%2520count%2520%253D%2520EASY_COUNT%253B%250A%2509while%2520%28count%29%250A%2509%257B%250A%2509%2509int%2520x%2520%253D%2520rand%28%29%2520%2525%2520row%2520%252B%25201%253B%252F%252F1-9%250A%2509%2509int%2520y%2520%253D%2520rand%28%29%2520%2525%2520col%2520%252B%25201%253B%252F%252F1-9%250A%2509%2509if%2520%28board%255Bx%255D%255By%255D%2520%253D%253D%2520%270%27%29%250A%2509%2509%257B%250A%2509%2509%2509board%255Bx%255D%255By%255D%2520%253D%2520%271%27%253B%250A%2509%2509%2509count--%253B%250A%2509%2509%257D%250A%2509%257D%250A%257D%250A%252F%252FASCILL%25E7%25A0%2581%250A%252F%252F%25E5%25AD%2597%25E7%25AC%25A6%25E7%259B%25B8%25E5%2587%258F%25E5%25BE%2597%25E5%2588%25B0%25E6%2595%25B0%25E5%25AD%2597%250A%252F%252F%271%27-%270%27%253D1%250Aget_mine_count%28char%2520mine%255BROWS%255D%255BCOLS%255D%252C%2520int%2520x%252C%2520int%2520y%29%250A%257B%250A%2509return%2509mine%255Bx%2520-%25201%255D%255By%255D%2520%252B%2520mine%255Bx%2520-%25201%255D%255By%2520-%25201%255D%2520%252B%2520mine%255Bx%255D%255By%2520-%25201%255D%2520%252B%250A%2509%2509mine%255Bx%2520%252B%25201%255D%255By%2520-%25201%255D%2520%252B%2520mine%255Bx%2520%252B%25201%255D%255By%255D%2520%252B%2520mine%255Bx%2520%252B%25201%255D%255By%2520%252B%25201%255D%2520%252B%250A%2509%2509mine%255Bx%255D%255By%2520%252B%25201%255D%2520%252B%2520mine%255Bx%2520-%25201%255D%255By%2520%252B%25201%255D%2520-%25208%2520*%2520%270%27%253B%250A%257D%250A%250Avoid%2520FindMine%28char%2520mine%255BROWS%255D%255BCOLS%255D%252C%2520char%2520show%255BROWS%255D%255BCOLS%255D%252C%2520int%2520row%252C%2520int%2520col%29%250A%257B%250A%2509int%2520x%2520%253D%25200%253B%250A%2509int%2520y%2520%253D%25200%253B%250A%2509int%2520win%2520%253D%25200%253B%252F%252F%25E5%2588%2586%25E6%2595%25B0%252F%25E6%258E%2592%25E9%259B%25B7%25E6%2595%25B0%25E5%2588%259D%25E5%25A7%258B%25E5%258C%2596%250A%2509%252F*%250A%2509%25E5%2588%25A4%25E6%2596%25AD%25E6%25B8%25B8%25E6%2588%258F%25E8%25BF%259B%25E8%25A1%258C%25E5%2585%2588%25E5%2586%25B3%25E6%259D%25A1%25E4%25BB%25B6%250A%2509%25E6%25A3%258B%25E7%259B%2598%25E5%25AE%259E%25E9%2599%2585%25E5%25A4%25A7%25E5%25B0%258F9*9%250A%2509%25E6%259C%2580%25E7%25BB%2588%25E8%2583%259C%25E5%2588%25A9%25E6%259D%25A1%25E4%25BB%25B6%25E6%2598%25AF9%2520*%25209%2520-%252010%28%25E9%259B%25B7%25E7%259A%2584%25E4%25B8%25AA%25E6%2595%25B0%29%253D71%250A%2509*%252F%250A%2509while%2520%28win%2520%253C%2520row*col%2520-%2520EASY_COUNT%29%250A%2509%257B%250A%2509%2509printf%28%2522%25E8%25AF%25B7%25E8%25BE%2593%25E5%2585%25A5%25E6%258E%2592%25E9%259B%25B7%25E5%259D%2590%25E6%25A0%2587%253A%253E%255Cn%2522%29%253B%250A%2509%2509scanf%28%2522%2525d%2525d%2522%252C%2520%2526x%252C%2520%2526y%29%253B%250A%2509%2509if%2520%28x%2520%253E%253D%25201%2520%2526%2526%2520x%2520%253C%253D%2520row%2520%2526%2526%2520y%2520%253E%253D%25201%2520%2526%2526%2520y%2520%253C%253D%2520col%29%250A%2509%2509%257B%250A%2509%2509%2509%252F%252F%25E5%259D%2590%25E6%25A0%2587%25E5%2590%2588%25E6%25B3%2595%250A%2509%2509%2509%252F%252F1.%25E7%259B%25B4%25E6%258E%25A5%25E8%25B8%25A9%25E9%259B%25B7%250A%2509%2509%2509if%2520%28mine%255Bx%255D%255By%255D%2520%253D%253D%2520%271%27%29%250A%2509%2509%2509%257B%250A%2509%2509%2509%2509printf%28%2522%25E5%25BE%2588%25E9%2581%2597%25E6%2586%25BE%252C%25E4%25BD%25A0%25E8%25A7%25A6%25E9%259B%25B7%25E6%258C%2582%25E4%25BA%2586%21%255Cn%2522%29%253B%250A%2509%2509%2509%2509DisplayBoard%28mine%252C%2520row%252C%2520col%29%253B%252F%252F%25E5%25B1%2595%25E7%25A4%25BA%25E7%25BB%2593%25E6%259E%259C%250A%2509%2509%2509%2509break%253B%250A%2509%2509%2509%257D%250A%2509%2509%2509else%250A%2509%2509%2509%257B%250A%2509%2509%2509%2509%252F%252F2.%25E9%259D%259E%25E9%259B%25B7%250A%2509%2509%2509%2509%252F%252F%25E8%25AE%25A1%25E7%25AE%2597%25E5%259D%2590%25E6%25A0%2587%25E5%2591%25A8%25E5%259B%25B4%25E6%259C%2589%25E5%2587%25A0%25E4%25B8%25AA%25E5%259C%25B0%25E9%259B%25B7%250A%250A%2509%2509%2509%2509int%2520count%2520%253D%2520get_mine_count%28mine%252C%2520x%252C%2520y%29%253B%250A%2509%2509%2509%2509show%255Bx%255D%255By%255D%2520%253D%2520count%2520%252B%2520%270%27%253B%250A%2509%2509%2509%2509DisplayBoard%28show%252C%2520row%252C%2520col%29%253B%252F%252F%25E5%25B1%2595%25E7%25A4%25BA%25E6%258E%2592%25E9%259B%25B7%25E5%2590%258E%25E9%259B%25B7%25E5%259B%25BE%25E4%25BB%25A5%25E7%25BB%25A7%25E7%25BB%25AD%25E6%25B8%25B8%25E6%2588%258F%250A%2509%2509%2509%2509win%252B%252B%253B%250A%2509%2509%2509%257D%250A%2509%2509%257D%250A%2509%2509else%250A%2509%2509%257B%250A%2509%2509%2509printf%28%2522%25E8%25BE%2593%25E5%2585%25A5%25E5%259D%2590%25E6%25A0%2587%25E9%259D%259E%25E6%25B3%2595%252C%25E8%25AF%25B7%25E5%25B0%258F%25E4%25B8%25BB%25E9%2587%258D%25E6%2596%25B0%25E8%25BE%2593%25E5%2585%25A5%21%253A%253E%255Cn%2522%29%253B%250A%2509%2509%257D%250A%2509%257D%250A%2509if%2520%28win%2520%253D%253D%2520row*col%2520-%2520EASY_COUNT%29%250A%2509%257B%250A%2509%2509printf%28%2522%25E7%25A5%259D%25E8%25B4%25BA%25E4%25BD%25A0%25E9%2580%259A%25E8%25BF%2587%25E6%25B8%25B8%25E6%2588%258F%21%25E6%258E%2592%25E9%259B%25B7%25E6%2588%2590%25E5%258A%259F%21%255Cn%2522%29%253B%250A%2509%2509DisplayBoard%28mine%252C%2520row%252C%2520col%29%253B%252F%252F%25E5%25B1%2595%25E7%25A4%25BA%25E5%25AE%259E%25E9%2599%2585%25E9%259B%25B7%25E5%258C%25BA%25E6%258E%2592%25E5%2588%2597%25E5%259B%25BE%252C%25E6%25BB%25A1%25E8%25B6%25B3%25E7%258E%25A9%25E5%25AE%25B6%25E5%25A5%25BD%25E5%25A5%2587%25E5%25BF%2583%250A%2509%257D%250A%257D"   style="width: 814px; height: 2321px; border:0; transform: scale(1); overflow:hidden;"   sandbox="allow-scripts allow-same-origin"> </iframe><p><code>test.c</code></p><iframe   src="https://carbon.now.sh/embed?bg=rgba%2874%2C144%2C226%2C1%29&t=material&wt=none&l=auto&ds=false&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=32px&ph=56px&ln=false&fl=1&fm=Fira+Code&fs=14px&lh=152%25&si=false&es=2x&wm=false&code=%2523define%2520_CRT_SECURE_NO_WARNINGS%250A%2523include%2520%2522game.h%2522%250A%250Avoid%2520menu%28%29%250A%257B%250A%2509printf%28%2522*******************************************%255Cn%2522%29%253B%250A%2509printf%28%2522***********%2520%25201.%2520play%2520%25200.%2520exit%2520%2520************%255Cn%2522%29%253B%250A%2509printf%28%2522*******************************************%255Cn%2522%29%253B%250A%257D%250A%250Avoid%2520game%28%29%250A%257B%250A%2509%252F%252F%25E9%259B%25B7%25E7%259A%2584%25E4%25BF%25A1%25E6%2581%25AF%25E5%25AD%2598%25E5%2582%25A8%250A%2509printf%28%2522%25E6%2589%25AB%25E9%259B%25B7%25E6%25B8%25B8%25E6%2588%258F%25E5%25BC%2580%25E5%25A7%258B%21%255Cn%2522%29%253B%250A%2509%252F%252F1.%25E5%25B8%2583%25E7%25BD%25AE%25E5%25A5%25BD%25E7%259A%2584%25E9%259B%25B7%25E4%25BF%25A1%25E6%2581%25AF%250A%2509char%2520mine%255BROWS%255D%255BCOLS%255D%2520%253D%2520%257B%25200%2520%257D%253B%252F%252F11*11%250A%250A%2509%252F%252F%25E6%258E%2592%25E6%259F%25A5%25E5%2587%25BA%25E9%259B%25B7%25E7%259A%2584%25E4%25BF%25A1%25E6%2581%25AF%250A%2509char%2520show%255BROWS%255D%255BCOLS%255D%2520%253D%2520%257B%25200%2520%257D%253B%250A%250A%2509%252F%252F%25E5%2588%259D%25E5%25A7%258B%25E5%258C%2596%250A%2509InitBoard%28mine%252C%2520ROWS%252C%2520COLS%252C%270%27%29%253B%250A%2509InitBoard%28show%252C%2520ROWS%252C%2520COLS%252C%27*%27%29%253B%250A%2509%252F%252F%25E6%2589%2593%25E5%258D%25B0%25E6%25A3%258B%25E7%259B%2598%250A%2509%252F%252FDisplayBoard%28mine%252C%2520ROW%252C%2520COL%29%253B%250A%2509DisplayBoard%28show%252C%2520ROW%252C%2520COL%29%253B%250A%2509%252F%252F%25E5%25B8%2583%25E7%25BD%25AE%25E9%259B%25B7%250A%2509SetMine%28mine%252CROW%252CCOL%29%253B%250A%2509%252F%252FDisplayBoard%28mine%252C%2520ROW%252C%2520COL%29%253B%252F%252F%25E5%25B1%2595%25E7%25A4%25BA%25E9%259B%25B7%25E9%2598%25B5%250A%2509%252F%252F%25E6%2589%25AB%25E9%259B%25B7%250A%2509%250A%2509FindMine%28mine%252C%2520show%252C%2520ROW%252C%2520COL%29%253B%250A%257D%250A%250Avoid%2520test%28%29%250A%257B%250A%2509int%2520input%2520%253D%25200%253B%250A%2509srand%28%28unsigned%2520int%29time%28NULL%29%29%253B%252F%252F%25E5%259C%25B0%25E9%259B%25B7%25E9%259A%258F%25E6%259C%25BA%25E5%2587%25BD%25E6%2595%25B0%250A%2509do%250A%2509%257B%250A%2509%2509menu%28%29%253B%250A%2509%2509printf%28%2522%25E8%25AF%25B7%25E9%2580%2589%25E6%258B%25A9%253A%253E%255Cn%2522%29%253B%250A%2509%2509scanf%28%2522%2525d%2522%252C%2520%2526input%29%253B%252F%252F%25E6%258E%25A5%25E6%2594%25B6%25E8%25BE%2593%25E5%2585%25A5%25E5%2580%25BC%250A%2509%2509switch%2520%28input%29%250A%2509%2509%257B%250A%2509%2509case%25201%253A%250A%2509%2509%2509game%28%29%253B%250A%2509%2509%2509printf%28%2522%25E6%2589%25AB%25E9%259B%25B7%25E6%25B8%25B8%25E6%2588%258F%25E5%25BC%2580%25E5%25A7%258B%21%255Cn%2522%29%253B%250A%2509%2509%2509break%253B%250A%2509%2509case%25200%253A%250A%2509%2509%2509printf%28%2522%25E5%25B7%25B2%25E9%2580%2580%25E5%2587%25BA%25E6%25B8%25B8%25E6%2588%258F%21%255Cn%2522%29%253B%250A%2509%2509%2509break%253B%250A%2509%2509default%253A%250A%2509%2509%2509printf%28%2522what%2520are%2520U%2520%25E8%25BE%2593%25E5%2595%25A5%25E5%2598%259E%21%255Cn%2522%29%253B%250A%2509%2509%2509break%253B%250A%2509%2509%257D%250A%2509%257D%2520while%2520%28input%29%253B%250A%257D%250A%250Aint%2520main%28%29%250A%257B%250A%2509test%28%29%253B%250A%2509return%25200%253B%250A%257D"   style="width: 667px; height: 1482px; border:0; transform: scale(1); overflow:hidden;"   sandbox="allow-scripts allow-same-origin"> </iframe>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C基础之函数</title>
      <link href="posts/f4ccff50/"/>
      <url>posts/f4ccff50/</url>
      
        <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲:"></a>大纲:</h3><p><strong>本章主要掌握函数的基本使用和递归</strong></p><ol><li>函数是什么</li><li>库函数</li><li>自定义函数</li><li>函数参数</li><li>函数调用</li><li>函数的嵌套调用和链式访问</li><li>函数的声明和定义</li><li>函数递归</li></ol><hr><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><blockquote><p>维基百科中对函数的定义：子程序<br>              在计算机科学中，子程序（英语：Subroutine, procedure, function, routine, method, subprogram, callable unit），是一个大型程序中的某部分代码，  由一个或多个语句块组 成。它负责完成某项特定任务，而且相较于其他代  码，具备相对的独立性。<br>一般会有输入参数并有返回值，提供对过程的封装和细节的隐藏。这些代码通常被集成为软 件库。</p></blockquote><p><strong>C语言中函数的分类：</strong></p><ol><li>库函数</li><li>自定义函数</li></ol><h4 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h4><h5 id="为什么会有库函数？"><a href="#为什么会有库函数？" class="headerlink" title="为什么会有库函数？"></a>为什么会有库函数？</h5><ol><li><p>我们知道在我们学习C语言编程的时候，总是在一个代码编写完成之后迫不及待的想知道结果，想 把这个结果打印到我们的屏幕上看看。这个时候我们会频繁的使用一个功能：将信息按照一定的格 式打印到屏幕上（printf）。</p></li><li><p>在编程的过程中我们会频繁的做一些字符串的拷贝工作（strcpy）。</p></li><li><p>在编程是我们也计算，总是会计算n的k次方这样的运算（pow）。<br> 像上面我们描述的基础功能，它们不是业务性的代码。我们在开发的过程中每个程序员都可能用的到， 为了支持可移植性和提高程序的效率，所以C语言的基础库中提供了一系列类似的库函数，方便程序员 进行软件开发。</p></li></ol><p>  🌏学习网站:</p><p>  <a href="http://www.cplusplus.com/">www.cplusplus.com</a></p><p>  <a href="https://zh.cppreference.com/">https://zh.cppreference.com/</a></p><h5 id="常用的库函数"><a href="#常用的库函数" class="headerlink" title="常用的库函数"></a>常用的库函数</h5><ul><li>IO函数</li><li>字符串操作函数 </li><li>字符操作函数 </li><li>内存操作函数 </li><li>时间/日期函数 </li><li>数学函数 </li><li>其他库函数</li></ul><p>库函数代码例:</p><p><code>strpy</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//声明</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span></code></pre><p><strong>参数</strong></p><ul><li><strong>dest</strong> – 指向用于存储复制内容的目标数组。</li><li><strong>src</strong> – 要复制的字符串。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"#########"</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出--hello,原数组的\0也会被拷入新数组</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>memset()</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//声明</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span></code></pre><p><strong>参数</strong></p><ul><li><strong>str</strong> – 指向要填充的内存块。</li><li><strong>c</strong> – 要被设置的值。该值以 int 形式传递，但是函数在填充内存块时是使用该值的无符号字符形式。</li><li><strong>n</strong> – 要被设置为该值的字符数。</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello learner"</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出--***** learner</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p><font style="color:gold;">如果库函数能干所有的事情，那还要程序员干什么？ 所以更加重要的是自定义函数。</font></p><p>自定义函数和库函数一样，有函数名，返回值类型和函数参数。  但是不一样的是这些都是我们自己来设计。这给程序员一个很大的发挥空间。</p><p><strong>函数的组成：</strong></p><pre class="language-c" data-language="c"><code class="language-c">ret_type <span class="token function">fun_name</span><span class="token punctuation">(</span>para1<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  statement<span class="token punctuation">;</span><span class="token comment">//语句项 </span><span class="token punctuation">&#125;</span>ret_type 返回类型 fun_name 函数名 para1    函数参数</code></pre><p><strong>自定义函数例:</strong></p><p>找出两个整数中的最大值函数</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">get_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">get_max</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max = %d\n"</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>可以交换两个整形变量的函数</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//非函数方法</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//函数方法</span><span class="token comment">//Swap1函数为原始的错误想法所写,不能实现数值交换,因为子函数不能直接操作主函数地址</span><span class="token comment">//void代表空/无返回值的意思</span><span class="token keyword">void</span> <span class="token function">Swap1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> x<span class="token punctuation">;</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span>y <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Swap2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> pa<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> pb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span><span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span><span class="token operator">*</span>pb <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//输出原始数值</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Swap2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出交换后数值</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p><strong>实际参数（实参）：</strong><br>真实传给函数的参数，叫实参。实参可以是：常量、变量、表达式、函数等。无论实参是何种类 型的量，在进行函数调用时，它们都必须有确定的值，以便把这些值传送给形参。</p><p><strong>形式参数（形参）：</strong><br>形式参数是指函数名后括号中的变量，因为形式参数只有在函数被调用的过程中才实例化（分配 内存单元），所以叫形式参数。形式参数当函数调用完成之后就自动销毁了。因此形式参数只在 函数中有效。</p><p><font style="color:skyblue;">上面Swap1和Swap2函数中的参数 x，y，px，py都是形式参数。在main函数中传给Swap1的num1， num2和传给Swap2函数的&amp;num1，&amp;num2是实际参数。</font></p><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><h4 id="传值调用"><a href="#传值调用" class="headerlink" title="传值调用"></a>传值调用</h4><p>函数的形参和实参分别占有不同内存块，对形参的修改不会影响实参。</p><h4 id="传址调用"><a href="#传址调用" class="headerlink" title="传址调用"></a>传址调用</h4><p>传址调用是把函数外部创建变量的内存地址传递给函数参数的一种调用函数的方式。 这种传参方式可以让函数和函数外边的变量建立起正真的联系，也就是函数内部可以直接操 作函数外部的变量。</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>1.写函数打印100-200的素数</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//是素数返回1,否则返回0</span><span class="token keyword">int</span> <span class="token function">is_prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//产生2到n-1的数试除</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//相当于break,但是比break强,直接退出函数/程序,中止循环和后面代码执行</span><span class="token punctuation">&#125;</span><span class="token comment">//代码能走到这里,说明for循环不满足,说明这个数是素数</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断i是否为素数</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_prime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//前面练习有优化解法</span></code></pre><p>2.每调用一次这个函数，就会将num的值增加1</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token comment">//当写下*p就代表下面的&amp;num</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//但是这里&#123;&#125;里的*p需要加（）才能正确使用</span><span class="token punctuation">&#125;</span><span class="token comment">//++的优先级高于*的优先级，以防混淆加上（）</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num=%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token punctuation">&#125;</span></code></pre><p>3.输出1000-2000年之间的闰年函数</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">is_leap_year</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">%</span><span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>year<span class="token operator">&lt;=</span><span class="token number">2000</span><span class="token punctuation">;</span>year<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断year是否为闰年</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">is_leap_year</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>4.实现一个整形有序数组的二分查找函数</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//本质arr是一个指针</span><span class="token keyword">int</span> <span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//算法实现</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> right <span class="token operator">=</span> sz<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//left&lt;=right说明数组中有元素可被查找</span><span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//中间元素下标</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//arr[mid]=k</span><span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//二分查找</span><span class="token comment">//在一个有序数组中查找具体的某个数</span><span class="token comment">//如果找到了,返回这个数下标,否则返回-1</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组长度</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>k<span class="token punctuation">,</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找不到指定的数字\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找到了,下标为:%d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="函数的嵌套调用和链式访问"><a href="#函数的嵌套调用和链式访问" class="headerlink" title="函数的嵌套调用和链式访问"></a>函数的嵌套调用和链式访问</h3><p>函数和函数之间可以有机的组合的。</p><h4 id="嵌套调用"><a href="#嵌套调用" class="headerlink" title="嵌套调用"></a>嵌套调用</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">new_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你好鸭,C语言学习者!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">three_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">new_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">three_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="链式访问"><a href="#链式访问" class="headerlink" title="链式访问"></a>链式访问</h4><p>把一个函数的返回值作为另外一个函数的参数</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//写法1</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写法2</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4321</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//printf 返回值是大隐元素个数</span></code></pre><h3 id="函数的声明和定义"><a href="#函数的声明和定义" class="headerlink" title="函数的声明和定义"></a>函数的声明和定义</h3><blockquote><p>函数声明：</p><ol><li><p>告诉编译器有一个函数叫什么，参数是什么，返回类型是什么。但是具体是不是存在，无关 紧要。</p></li><li><p>函数的声明一般出现在函数的使用之前。<font style="color:tomato;">要满足先声明后使用。</font></p></li><li><p>函数的声明一般要放在头文件中的。</p></li></ol><p>   函数定义：<br>   函数的定义是指函数的具体实现，交待函数的功能实现。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>sum <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//函数的定义</span><span class="token comment">//会报错</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> z <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token keyword">return</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/04/c.png" alt="c.png" loading="lazy"></p><p>更改:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//函数声明</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>sum <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//函数的定义</span><span class="token comment">//会报错</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> z <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token keyword">return</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>✏️虽然更改后的代码这样写是对的,但是把上面代码中的函数定义放在主函数之前,函数声明就没用了(也不会错,就是以前的写法)</p><p>​     而在实际工作中,函数的定义和声明不是上述用法</p><p><font style="color:orange;">实际开发工程用法举例:</font></p><p>主函数/程序c文件<code>c0304.c</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"add.h"</span><span class="token comment">//引用自定义头文件用双引号</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>sum <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>自定义头文件<code>add.h</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token comment">//函数声明</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>自定义函数实现c文件<code>Add.c</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token comment">//函数的定义</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> z <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token keyword">return</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/04/04/c14214f245f961517.png" alt="c14214f245f961517.png" loading="lazy"></p><p>🌿大工程项目为了避免重复引用多个头文件,一般这样定义</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//test.h的内容  放置函数的声明</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__TEST_H__ </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__TEST_H__</span></span><span class="token comment">//函数的声明</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> #endif <span class="token comment">//__TEST_H__</span></code></pre><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><p>什么是递归？</p><blockquote><p>程序调用自身的编程技巧称为递归（ recursion）。 递归做为一种算法在程序设计语言中广泛应 用。 一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复 杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可 描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。 </p><p><font style="color:deepskyblue;">递归的主要思考方式在于：把大事化小</font></p></blockquote><p>简单递归代码例1:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//死循环打印完成,最后会出现Stack overflow--栈溢出的错误</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="递归的两个必要条件"><a href="#递归的两个必要条件" class="headerlink" title="递归的两个必要条件"></a>递归的两个必要条件</h4><ul><li>存在限制条件，当满足这个限制条件的时候，递归便不再继续。 </li><li>每次递归调用之后越来越接近这个限制条件。</li></ul><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><p>练习1：<br>                接受一个整型值（无符号），按照顺序打印它的每一位。  例如：  输入：1234，输出 1 2 3 4.</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1234</span><span class="token comment">//递归算法</span>  <span class="token comment">//123 4</span>  <span class="token comment">//12 3 4</span>  <span class="token comment">//1 2 3 4</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>练习2：<br>                编写函数不允许创建临时变量，求字符串的长度。</p><p><font style="color:tomato;">用变量</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>str<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//arr是数组,数组传参,传过去的不是整个数组,而是第一个元素的地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"len = %d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:yellowgreen;">不用变量</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//递归方法</span><span class="token comment">//把大事化小</span><span class="token comment">//my_strlen("abc")=>1+my_strlen("bc")</span><span class="token comment">//1+1+my_strlen("c")</span><span class="token comment">//1+1+1+my_strlen("")</span><span class="token comment">//1+1+1+0</span><span class="token comment">//3</span><span class="token keyword">int</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">my_strlen</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里的my_strlen(str+1)相当于从数组字母b地址开始找</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//arr是数组,数组传参,传过去的不是整个数组,而是第一个元素的地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"len = %d\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="递归与迭代"><a href="#递归与迭代" class="headerlink" title="递归与迭代"></a>递归与迭代</h4><p>练习3：<br>            求n的阶乘。（不考虑溢出）</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//int Facl(int n)</span><span class="token comment">//&#123;</span><span class="token comment">//int i = 0;</span><span class="token comment">//int ret = 1;</span><span class="token comment">//for(i=1;i&lt;=n;i++)</span><span class="token comment">//&#123;</span><span class="token comment">//ret *= i;</span><span class="token comment">//&#125;</span><span class="token comment">//return ret;</span><span class="token comment">//&#125;</span><span class="token keyword">int</span> <span class="token function">Fac2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token keyword">return</span> n<span class="token operator">*</span><span class="token function">Fac2</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//求n的阶乘</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个正整数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ret = Facl(n);//循环的方式</span>ret <span class="token operator">=</span> <span class="token function">Fac2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>练习4：<br>            求第n个斐波那契数。（不考虑溢出）</p><blockquote><p>斐波那契数列：</p><img src="https://bkimg.cdn.bcebos.com/formula/fbb0b7c865c14339999bf5f7bd931c28.svg" alt="百度百科" style="zoom:150%;" / loading="lazy"></blockquote><p><font style="color:pink;">规律:这个数列从第3项开始，每一项都等于前两项之和。</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//测试第3个斐波那契数的计算次数,非此题所需代码</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个自然数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//TDD - 测试驱动开发</span>ret <span class="token operator">=</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"count = %d次\n "</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:tomato;">但是我们发现有问题:</font><br>                    在使用 <code>Fib</code>这个函数的时候如果我们要计算第50个斐波那契数字的时候特别耗费时间。 使用 <code>Fib</code>函数求10000的阶乘（不考虑结果的正确性），程序会崩溃。我们看看输出的count，是一个很大很大的值。</p><p><font style="color:orange;">为什么呢？</font><br>我们发现<code>Fib</code>函数在调用的过程中很多计算其实在一直重复。 </p><p> 如果我们把代码修改一下：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">Fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>c <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span>n<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//避免重复计算</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个自然数:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//TDD - 测试驱动开发</span>ret <span class="token operator">=</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数值过大,可能会出现int空间不足---数值溢出</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>✍</p><ol><li>许多问题是以递归的形式进行解释的，这只是因为它比非递归的形式更为清晰。</li><li>但是这些问题的迭代实现往往比递归实现效率更高，虽然代码的可读性稍微差些。</li><li>当一个问题相当复杂，难以用迭代实现时，此时递归实现的简洁性便可以补偿它所带来的运行时开 销。</li></ol><hr><p>函数递归经典题目：</p><ol><li>汉诺塔问题</li><li>青蛙跳台阶问题</li></ol>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C基础分支和循环语句</title>
      <link href="posts/2d42c242/"/>
      <url>posts/2d42c242/</url>
      
        <content type="html"><![CDATA[<blockquote><p>C语言是一门结构化的程序设计语言</p></blockquote><p>程序结构:</p><p>​    1.顺序结构</p><p>​    2.选择结构</p><p>​    3.循环结构</p><hr><p>分支语句<br>            if<br>            switch<br>循环语句<br>            while<br>            for<br>            do while<br>goto语句</p><h3 id="什么是语句？"><a href="#什么是语句？" class="headerlink" title="什么是语句？"></a>什么是语句？</h3><p>C语言中由一个分号 ; 隔开的就是一条语句。 比如：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment">//空语句</span><span class="token punctuation">&#125;</span></code></pre><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>语法结构： </p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//单分支</span><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span>         语句<span class="token punctuation">;</span> <span class="token comment">//双分支</span><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span>语句<span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">else</span>    语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//多分支    </span><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">1</span><span class="token punctuation">)</span>    语句<span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">2</span><span class="token punctuation">)</span>      语句<span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">else</span>    语句<span class="token number">3</span><span class="token punctuation">;</span></code></pre><p>if代码例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//代码1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未成年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//代码2</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未成年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"祝贺成年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//代码3</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未成年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">>=</span><span class="token number">18</span> <span class="token operator">&amp;&amp;</span> age<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"青年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">>=</span><span class="token number">30</span> <span class="token operator">&amp;&amp;</span> age<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"中年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//多次执行</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未成年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"游戏时间受限\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">>=</span><span class="token number">18</span> <span class="token operator">&amp;&amp;</span> age<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"青年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">>=</span><span class="token number">30</span> <span class="token operator">&amp;&amp;</span> age<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"中年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">>=</span><span class="token number">50</span> <span class="token operator">&amp;&amp;</span> age<span class="token operator">&lt;</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"老年\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:skyblue;">如果表达式的结果为真，则语句执行。 </font></p><p><strong>在C语言中如何表示真假？</strong><br>                    0表示假，非0表示真。</p><h4 id="悬空else"><a href="#悬空else" class="headerlink" title="悬空else"></a>悬空else</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//例1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加油\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"努力\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//例2</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加油\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"努力\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:yellowgreen;">编译结果:</font></p><p>​    例1和例2都不能输出任何结果,例1和例2代码除了缩进本质一致,不能输出结果原因是:else有<code>就近原则</code>,例1和例2<code>if</code>条件都为假,不能进入循环,因此不能输出</p><p><font style="color:green;">改正：</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//适当的使用&#123;&#125;可以使代码的逻辑更加清楚</span><span class="token comment">//代码风格很重要</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"haha\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="if书写形式的对比"><a href="#if书写形式的对比" class="headerlink" title="if书写形式的对比"></a>if书写形式的对比</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//代码1</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token comment">//代码2</span><span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//代码3</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//代码4</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>结论:</strong></p><p><font style="color:yellowgreen;">代码2和代码4更好，逻辑更加清晰，不容易出错。</font></p><hr><p><font style="color:gold;font-size:19px;">练习:</font></p><p>1.判断一个数是否为奇数</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您输入的是偶数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"您输入的是奇数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//最简化方法是三目</span></code></pre><p>2.输出1-100之间的奇数</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//高级方法----奇数，就是2的倍数再加上1，2n+1</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//普通方法--本节知识点</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><blockquote><p>switch语句也是一种分支语句。  常常用于多分支的情况。</p></blockquote><p>🐸案例分析:</p><p>​    输入1-7,输出数字对应周一至周日</p><p>如果写成<code> if...else if ...else if</code>的形式太复杂，那我们就得有不一样的语法形式 ——— switch 语句。</p><h4 id="if方法"><a href="#if方法" class="headerlink" title="if方法"></a>if方法</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入1至7的整数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> day<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"今天是周1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> day<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"今天是周2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> day<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"今天是周3\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">==</span> day<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"今天是周4\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> day<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"今天是周5\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">==</span> day<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"今天是周6\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">==</span> day<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"今天是周7\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="switch方法"><a href="#switch方法" class="headerlink" title="switch方法"></a><strong>switch方法</strong></h4><blockquote><p>switch(整型表达式)<br>        {<br>                语句项；<br>        }</p></blockquote><h5 id="语句项"><a href="#语句项" class="headerlink" title="语句项"></a>语句项</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//case语句如下： </span><span class="token keyword">case</span> 整形常量表达式<span class="token operator">:</span>     语句<span class="token punctuation">;</span></code></pre><h5 id="break"><a href="#break" class="headerlink" title="break"></a>break</h5><p>在switch语句中，我们没法直接实现分支，搭配break使用才能实现真正的分支。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入1至7的整数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token comment">//这里举例写  case 1+0: 也正确</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期一\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期二\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期三\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期四\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期五\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期六\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期天\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>✏️<font style="color:lightpink;">break语句的实际效果是把语句列表划分为不同的部分。</font></p><p>有时候我们的需求变了：</p><ol><li>输入1-5输出的是“weekday”;</li><li>输入6-7输出“weekend”</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//switch代码演示 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入1至7的整数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"weekday\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"weekend\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>😊编程好习惯</p><blockquote><p>在最后一个 case 语句的后面加上一条 break语句。  （之所以这么写是可以避免出现在以前的最 后一个 case 语句后面忘了添加 break语句）。</p></blockquote><h4 id="default子句"><a href="#default子句" class="headerlink" title="default子句"></a>default子句</h4><p><font style="color:#F0E68C;">如果表达的值与所有的case标签的值都不匹配怎么办？</font></p><p>​         其实也没什么，结构就是所有的语句都被跳过而已。<br>​                程序并不会终止，也不会报错，因为这种情况在C中并不认为适合错误。</p><p><font style="color:#F0E68C;">如果你并不想忽略不匹配所有标签的表达式的值时该怎么办呢？ </font></p><p>​    你可以在语句列表中增加一条default子句，把下面的标签<br>​                        <code>default：</code><br>​            写在<font style="color:orange;">任何一个</font>case标签可以出现的位置。</p><p><font style="color:deepskyblue;">当 switch表达式的值并不匹配所有case标签的值时，这个default子句后面的语句就会执行。 所以，每个switch语句中只能出现一条default子句。<br>但是它可以出现在语句列表的任何位置，而且语句流会像贯穿一个case标签一样贯穿default子句.</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入1至7的整数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期一\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期二\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期三\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期四\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期五\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期六\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期天\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"用户输入错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>😊编程好习惯</p><blockquote><p>在每个 switch 语句中都放一条default子句是个好习惯，甚至可以在后边再加一个 break 。</p></blockquote><p>练习:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//switch允许嵌套使用              </span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>m<span class="token operator">++</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>m<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"m = %d, n = %d\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出m =5,n=3</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//解析:break终止最近的代码</span></code></pre><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>当条件满足的情况下，if语句后的语句执行，否则不执行。但是这个语句只会执行一次。 但是我们发现生活中很多的实际的例子是：同一件事情我们需要完成很多次。<br>C语言中给我们引入了：while语句，可以实现循环。</p><blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//while 语法结构 </span><span class="token keyword">while</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span>循环语句</code></pre></blockquote><p>代码例:</p><p>​        在屏幕上打印1-10的数字</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="while语句中的break和continue"><a href="#while语句中的break和continue" class="headerlink" title="while语句中的break和continue"></a>while语句中的break和continue</h4><h5 id="break介绍"><a href="#break介绍" class="headerlink" title="break介绍"></a>break介绍</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//break 代码实例</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出--1234</span>i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>✏️<font style="color:deepskyblue;">总结：</font><br>            其实在循环中只要遇到break，就停止后期的所有的循环，直接终止循环。  所以：while中的 break是用于<font style="color:tomato;">永久</font>终止循环的。</p><h5 id="continue介绍"><a href="#continue介绍" class="headerlink" title="continue介绍"></a>continue介绍</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//continue 代码实例1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出--1234,程序未终止</span>i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这里代码为死循环</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//continue 代码实例1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//这里意思就是在变量i等于5的时候停止本次循环,跳过后面代码直接进行下一次循环</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出--2 3 4 6 7 8 9 10 11</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>✏️<font style="color:deepskyblue;">总结:</font><br>                continue是用于终止<font style="color:tomato;">本次循环</font>的，也就是本次循环中continue后边的代码不会再执行，而是直接 跳转到while语句的判断部分。进行下一次循环的入口判断。</p><h4 id="getchar-与putchar"><a href="#getchar-与putchar" class="headerlink" title="getchar()与putchar()"></a>getchar()与putchar()</h4><blockquote><p>getchar()函数的作用是从计算机终端（一般为键盘）获取一个无符号字符。getchar()函数只能接收一个字符，其函数值就是从输入设备获取到的字符。</p><p>putchar语法结构为 <strong>int putchar(int char)</strong> ，其功能是把参数 char 指定的字符（一个无符号字符）写入到标准输出 stdout 中，为C 库函数 ，包含在C 标准库 &lt;stdio.h&gt;中。其输出可以是一个<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6/4768913">字符</a>，可以是介于0~127之间的一个十进制整型数（包含0和127），也可以是用<a href="https://baike.baidu.com/item/char/5156054">char</a>定义好的一个字符型变量。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//代码1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//int ch =getchar();</span><span class="token comment">//EOF--end of file,值为-1</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//ctr+z组合键结束程序</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//printf("%c\n",ch);</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//代码2</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入密码:>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入密码:并存放在Passsword数组中</span><span class="token comment">//程序运行到这里时,缓冲区还剩余一个'\n'</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请确认密码(Y/N):>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getchar()循环读取一下'\n',让缓冲区内容清空,使程序正常往下运行</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//这个循环杜绝了密码带空格情况如--1234 abc</span><span class="token punctuation">&#125;</span>ret <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Y/N</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"确认成功!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"放弃确认!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//代码3</span><span class="token comment">//只打印字符0-9范围的数字字符,具体可参考ASCII码表</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> ch <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>语法:</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">for</span><span class="token punctuation">(</span>表达式<span class="token number">1</span>；表达式<span class="token number">2</span>；表达式<span class="token number">3</span><span class="token punctuation">)</span> 循环语句；</code></pre><blockquote><p>表达式1 表达式1为初始化部分，用于初始化循环变量的。<br>       表达式2 表达式2为条件判断部分，用于判断 循环时候终止。<br>       表达式3 表达式3为调整部分，用于循环条件的调整。</p></blockquote><p>使用for循环  在屏幕上打印1-10的数字。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//for(i=1/*初始化*/; i&lt;=10/*判断部分*/; i++/*调整部分*/) </span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><h4 id="for循环和while循环对比"><a href="#for循环和while循环对比" class="headerlink" title="for循环和while循环对比"></a>for循环和while循环对比</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//代码1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//实现相同的功能，使用while </span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化部分</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//判断部分 </span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//调整部分</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//代码2</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//实现相同的功能</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以发现在while循环中依然存在循环的三个必须条件，但是由于风格的问题使得三个部分很可能偏离 较远，这样查找修改就不够集中和方便。所以，for循环的风格更胜一筹。 for循环使用的频率也最高。</p><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><p>我们发现在for循环中也可以出现break和continue，他们的意义和在while循环中是一样的。  但是还是有些差异：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//代码1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出---1234</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//代码2</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出---1 2 3 4 6 7 8 9 10</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>📖for语句的循环控制变量 一些建议：</p><ol><li>不可在for 循环体内修改循环变量，防止 for 循环失去控制。</li><li>建议for语句的循环控制变量的取值采用<font style="color:hotpink;">“前闭后开区间”</font>写法。</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//前闭后开的写法 </span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//两边都是闭区间 </span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="for循环打印数组"><a href="#for循环打印数组" class="headerlink" title="for循环打印数组"></a>for循环打印数组</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token comment">//前闭后开写法</span><span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="for循环的变种"><a href="#for循环的变种" class="headerlink" title="for循环的变种"></a>for循环的变种</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//变种1 </span><span class="token comment">/*for(;;) &#123;printf("hehe\n");&#125;*/</span><span class="token comment">//变种2 </span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">,</span>y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:skyblue;">变种1:</font></p><pre class="language-html" data-language="html"><code class="language-html">for循环的初始化、调整、判断都可以省略但是∶for循环的判断部分如果被省略，那判断条件就是:恒为正⚠️如果不是非常熟练，建议大家不要随便省略</code></pre><p>易错代码举例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//代码1只输出10次</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//代码2打印100次</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//for循环每一项条件都有他的意义</span></code></pre><p><font style="color:skyblue;">变种2:</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//输出2个hehe</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">,</span>y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>练习:</strong></p><p>请问循环要循环多少次？</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//代码循环0次 for循环括号内判断条件k=0 为假,不进入循环</span></code></pre><h3 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while()循环"></a>do…while()循环</h3><p>do…while()语句的语法：</p><pre class="language-none"><code class="language-none">do循环语句； while(表达式);</code></pre><p>do语句的特点</p><p><font style="color:deepskyblue;">循环至少执行一次，使用的场景有限，所以不是经常使用。</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出10</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="break和continue-1"><a href="#break和continue-1" class="headerlink" title="break和continue"></a>break和continue</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//break代码</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出01234</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//continue代码</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出01234后死循环</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li>计算 n的阶乘。</li><li>计算 1!+2!+3!+……+10!</li><li>在一个有序数组中查找具体的某个数字n。  编写int binsearch(int x, int v[], int n); 功能：在v[0] &lt;=v[1]&lt;=v[2]&lt;= ….&lt;=v[n-1]的数组中查找x.</li><li>编写代码，演示多个字符从两端移动，向中间汇聚。</li><li>编写代码实现，模拟用户登录情景，并且只能登录三次。（只允许输入三次密码，如果密码正确则 提示登录成，如果三次均输入错误，则退出程序。</li></ol><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span><span class="token comment">//练习4--Sleep函数所需头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span><span class="token comment">//练习4--system函数所需头文件</span></span><span class="token comment">//练习1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//不能为0,否则阶乘结果恒为0</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入正整数:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ret <span class="token operator">=</span> ret <span class="token operator">*</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//练习2</span><span class="token comment">//方法1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>n<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ret <span class="token operator">=</span> ret <span class="token operator">*</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//n的阶乘</span>sum <span class="token operator">=</span> sum <span class="token operator">+</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//方法2</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>n <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ret <span class="token operator">=</span> ret <span class="token operator">*</span> n<span class="token punctuation">;</span><span class="token comment">//n的阶乘</span>sum <span class="token operator">=</span> sum <span class="token operator">+</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//练习3</span><span class="token comment">//常规--方法1</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token comment">//想要的数</span><span class="token comment">//写一个代码，在arr数组（有序的）中找到7</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始下标值</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>sz<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找到了,下标是: %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找到\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//二分法--方法2--算法更优</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token comment">//想要的数</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算元素个数</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//左下标</span><span class="token keyword">int</span> right <span class="token operator">=</span> sz<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//右下标</span><span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找到了,下标是: %d\n"</span><span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找到\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//练习4</span><span class="token comment">//编写代码，演示多个字符从两端移动，向中间汇聚</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"welcome to bit!!!"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"#################"</span><span class="token punctuation">;</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//int right = sizeof(arr1)/sizeof(arr1[0])-2;</span><span class="token comment">//-2是正确计算最后一个感叹号下标,字符串数组arr1最后隐含一个字符'\0'</span><span class="token comment">//-1是用在整型int数组</span><span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//下标恒比元素个数少1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//展示被替换数组</span><span class="token comment">//while循环实现</span><span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arr2<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1秒间歇,方便看到过程</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>left<span class="token operator">++</span><span class="token punctuation">;</span>right<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//system执行系统命令的一个函数</span><span class="token comment">//cls--清空屏幕</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//展示最终效果</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//练习5</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> psw<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入密码:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>psw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//==不能用来比较两介字符串是否相等,应该使用一个库函数-strcmp</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>psw<span class="token punctuation">,</span><span class="token string">"520"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"密码正确\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"哦豁!密码错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3次密码输入错误:exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>6.实现从大到小的3个数输出</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入3个数字:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*算法实现*a放最大值*b放第二大c放最小值*/</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> c<span class="token punctuation">;</span>c <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&lt;</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span>c <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"排序结果为:%d %d %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意输入数字带入空格</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>7.打印1-100中3的倍数</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>8.给定2个数,求其最大公约数</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//辗转相除法</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入2个数字:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>m <span class="token operator">%</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>r <span class="token operator">=</span> m<span class="token operator">%</span>n<span class="token punctuation">;</span>m <span class="token operator">=</span> n<span class="token punctuation">;</span>n <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"====================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大公约数为:%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"====================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>9.求得1000-2000年的所有闰年</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//可用逻辑或--||简化</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>year <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>year<span class="token operator">&lt;=</span><span class="token number">2000</span><span class="token punctuation">;</span>year<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断闰年规则</span><span class="token comment">//1.非整百年:能被4整除的为闰年。(如2004年就是闰年,2001年不是闰年)</span><span class="token comment">//2.整百年:能被400整除的是闰年。(如2000年是闰年,1900年不是闰年)</span><span class="token keyword">if</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year<span class="token operator">%</span><span class="token number">100</span> <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\ncount=%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求得闰年总数</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>10.打印100-200的素数</p><blockquote><p>曾称<em>质数</em>。一个大于1的正整数，如果除了1和它本身以外，不能被其他正整数整除，就叫<em>素数</em>。如2，3，5，7，11</p></blockquote><p><strong>试除法</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化素数总数</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断i是否为素数</span><span class="token comment">//产生2->i-1的数字</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//走到这里有2种情况:1.前面if完成2.for循环推荐不满足</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\ncount=%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求得素数总数</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//优化版--方法2</span><span class="token comment">/*i= a * b;*16 = 2 * 8 = 4 * 4;*a和b中至少有一个 &lt;= i的开平方*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化素数总数</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//此处i++改为i+=2跳过偶数--方法3</span><span class="token punctuation">&#123;</span><span class="token comment">//判断i是否为素数</span><span class="token comment">//产生2->i-1的数字</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//sqrt--开平方的数学库函数</span><span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//走到这里有2种情况:1.前面if完成2.for循环推荐不满足</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\ncount=%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求得素数总数</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>11.编写程序数一下1到100的所有整数中出现多少个数字9</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"count=%d\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20个</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>12.计算<code>1/1-1/2+1/3-1/4+1/5 ......+ 1/99 - 1/100</code>的值，打印出结果</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//分母初始化</span><span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> flag<span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">/</span>i<span class="token punctuation">;</span>flag <span class="token operator">=</span> <span class="token operator">-</span>flag<span class="token punctuation">;</span><span class="token comment">//printf("%lf\n",sum);</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>13.求10个整数中最大值</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//最大值初始化</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//下标</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算元素个数</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>sz<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max=%d\n"</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>14打印九九乘法表</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//打印一行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%-2d  "</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><a href="http://c.biancheng.net/view/494.html">C语言九九乘法表（五种输出形式)</a></p><p>15.猜数字游戏(1-100)</p><p>电脑出随机数,玩家猜,判断対误</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"**********************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***********   1.play     *********\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***********   0.exit     *********\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"**********************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//接收随机数</span><span class="token keyword">int</span> guess <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//接收猜的数字</span><span class="token comment">//1.生成1-100随机数</span><span class="token comment">//RAND_MAX---32767</span>ret <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//rand()库文件函数,需要先调用rand()函数</span><span class="token comment">//printf("%d\n",ret);</span><span class="token comment">//2.猜数字</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请猜数字:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>guess<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>guess <span class="token operator">></span> ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"----数字猜大了!----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>guess <span class="token operator">&lt;</span> ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"----数字猜小啦!----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"----您可真厉害!猜中啦!!!----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//猜对游戏中止</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//键盘输入值初始化</span><span class="token comment">//时间戳设置随机数的生成起始点</span><span class="token comment">//time_t time(time_t *timer)</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//srand()函数需要一个随机变化的整型数值</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请选择选项:>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*****您选择开始游戏!*****\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//游戏函数</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"----已退出游戏!----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"----选择错误!----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h3><p> C语言中提供了可以随意滥用的 goto语句和标记跳转的标号。<br>        从理论上 goto语句是没有必要的，实践中没有goto语句也可以很容易的写出代码。<br>        但是某些场合下goto语句还是用得着的，最常见的用法就是终止程序在某些深度嵌套的结构的处理过程<br>        <font style="color:skyblue;">例如一次跳出两层或多层循环。这种情况使用break是达不到目的的。它只能从最内层循环退出到上一层的循环。 </font></p><p>goto代码例：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//这是一个死循环代码</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>flag<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你好,C语言学习者!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">goto</span> flag<span class="token punctuation">;</span><span class="token comment">//flag是goto语句跳转的标识</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>例2</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你好,C语言学习者!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">goto</span> flag<span class="token punctuation">;</span><span class="token comment">//flag是goto语句跳转的标识</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你一定要"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"好好学习鸭!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//最终输出:</span><span class="token comment">//你好,C语言学习者!</span><span class="token comment">//好好学习鸭!</span></code></pre><blockquote><p>goto语句的随意性较大,如果不加以限制,就会破坏结构化设计风格,会导致代码晦涩难懂,降低可读性。</p></blockquote><p>goto语言真正适合的场景如下：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>disaster<span class="token punctuation">)</span>                 <span class="token keyword">goto</span> error<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>…error<span class="token operator">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>disaster<span class="token punctuation">)</span><span class="token comment">// 处理错误情况</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习day3</title>
      <link href="posts/e9497135/"/>
      <url>posts/e9497135/</url>
      
        <content type="html"><![CDATA[<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>auto</td><td>声明自动变量</td></tr><tr><td>short</td><td>声明短整型变量或函数</td></tr><tr><td>int</td><td>声明整型变量或函数</td></tr><tr><td>long</td><td>声明长整型变量或函数</td></tr><tr><td>float</td><td>声明浮点型变量或函数</td></tr><tr><td>double</td><td>声明双精度变量或函数</td></tr><tr><td>char</td><td>声明字符型变量或函数</td></tr><tr><td>struct</td><td>声明结构体变量或函数</td></tr><tr><td>union</td><td>声明共用数据类型</td></tr><tr><td>enum</td><td>声明枚举类型</td></tr><tr><td>typedef</td><td>用以给数据类型取别名</td></tr><tr><td>const</td><td>声明只读变量</td></tr><tr><td>unsigned</td><td>声明无符号类型变量或函数</td></tr><tr><td>signed</td><td>声明有符号类型变量或函数</td></tr><tr><td>extern</td><td>声明变量是在其他文件正声明</td></tr><tr><td>register</td><td>声明寄存器变量</td></tr><tr><td>static</td><td>声明静态变量</td></tr><tr><td>volatile</td><td>说明变量在程序执行中可被隐含地改变</td></tr><tr><td>void</td><td>声明函数无返回值或无参数，声明无类型指针</td></tr><tr><td>if</td><td>条件语句</td></tr><tr><td>else</td><td>条件语句否定分支（与 if 连用）</td></tr><tr><td>switch</td><td>用于开关语句</td></tr><tr><td>case</td><td>开关语句分支</td></tr><tr><td>for</td><td>一种循环语句</td></tr><tr><td>do</td><td>循环语句的循环体</td></tr><tr><td>while</td><td>循环语句的循环条件</td></tr><tr><td>goto</td><td>无条件跳转语句</td></tr><tr><td>continue</td><td>结束当前循环，开始下一轮循环</td></tr><tr><td>break</td><td>跳出当前循环</td></tr><tr><td>default</td><td>开关语句中的“其他”分支</td></tr><tr><td>sizeof</td><td>计算数据类型长度</td></tr><tr><td>return</td><td>子程序返回语句（可以带参数，也可不带参数）循环条件</td></tr></tbody></table><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">register</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//建议把a定义成寄存器变量</span><span class="token comment">//int 定义的变量是有符号的</span><span class="token comment">//这里int等价于 signed int;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>x<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h4><p>​    typedef 顾名思义是类型定义，这里应该理解为类型重命名。</p><p>比如∶</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//typedef ---类型定义----类型重定义;</span><span class="token comment">//将unsigned int重命名为uint_32，所以uint_32也是一个类型名</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> uint_32<span class="token punctuation">;</span></code></pre><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p><font style="color:skyblue;">在C语言中:static是用来修饰变量和函数的</font></p><p>1.修饰局部变量-静态局部变量</p><p>2.修饰全局变量-静态全局变量</p><p>3.修饰函数-静态函数</p><h5 id="修饰局部变量"><a href="#修饰局部变量" class="headerlink" title="修饰局部变量"></a>修饰局部变量</h5><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//static修饰局部变量</span><span class="token comment">//局部变量的生命周期变长I</span><span class="token keyword">static</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//静态局部变量a</span>a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="修饰全局变量"><a href="#修饰全局变量" class="headerlink" title="修饰全局变量"></a>修饰全局变量</h5><p>⚠️<font style="color:orange;">此例在同一工程文件夹下</font></p><p>新建一个C文件<code>addTest.c</code>,写入下面代码</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token keyword">int</span> g_val <span class="token operator">=</span> <span class="token number">2020</span><span class="token punctuation">;</span></code></pre><p>在另一个C文件<code>test.c</code>,写入下面代码</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//extern -- 声明外部符号</span><span class="token keyword">extern</span> <span class="token keyword">int</span> g_val<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"g_val = %d\n"</span><span class="token punctuation">,</span>g_val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时输出--- g_val = 2020</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如果对<code>addTest.c</code>代码进行如下修改</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token keyword">int</span> g_val <span class="token operator">=</span> <span class="token number">2020</span><span class="token punctuation">;</span></code></pre><p>输出:</p><pre class="language-shell" data-language="shell"><code class="language-shell">##无法解析的外部符号 _g_val</code></pre><p>✍<font style="color:deepskyblue;">static 修饰全同变量,改变了变量的作用域,让静态的全局变量只能在其所在源文件生效</font></p><h5 id="static修饰函数"><a href="#static修饰函数" class="headerlink" title="static修饰函数"></a>static修饰函数</h5><p>⚠️<font style="color:orange;">此例在同一工程文件夹下</font></p><p>C文件<code>addTest.c</code>,写入下面代码</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token comment">//这里不加static关键字,test.c输出99</span><span class="token keyword">static</span>  <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token keyword">return</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在另一个C文件<code>test.c</code>,写入下面代码</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//extern -- 声明外部函数</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出:</p><pre class="language-shell" data-language="shell"><code class="language-shell">## 无法解析的外部符号 _Add，该符号在函数 _main 中被引用</code></pre><p>✍<font style="color:deepskyblue;">static修饰函数和修饰全局变量是差不多的,这里也是改变了函数的作用域,只能在函数所在源文件生效</font></p><h4 id="define"><a href="#define" class="headerlink" title="define"></a>define</h4><blockquote><p>C语言中，可以用 <code>#define</code> 定义一个标识符来表示一个常量。</p><p>​        其特点是：定义的标识符不占内存，只是一个临时的符号，预编译后这个符号就不存在了。</p><p><font style="color:skyblue;">预编译又叫预处理。预编译不是编译，而是编译前的处理。这个操作是在正式编译之前由系统自动完成的。</font></p><p>用 #define 定义标识符的一般形式为：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">标识符 常量  </span><span class="token comment">//注意, 最后没有分号</span></span></code></pre><p><code>#define </code>和 <code>#include</code> 一样，也是以<code>“#”</code>开头的。凡是以“#”开头的均为预处理指令，<code>#define</code>也不例外。</p><p>#define又称宏定义，标识符为所定义的宏名，简称宏。标识符的命名规则与前面讲的变量的命名规则是一样的。#define 的功能是将标识符定义为其后的常量。一经定义，程序中就可以直接用标识符来表示这个常量。<font style="color:gold;">变量名表示的是一个变量，但宏名表示的是一个常量。可以给变量赋值，但绝不能给常量赋值。</font></p><p>宏所表示的常量可以是数字、字符、字符串、表达式。其中最常用的是数字。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">//#define 定义标识符常量</span><span class="token comment">//#define MAX 100</span><span class="token comment">//函数的实现</span><span class="token keyword">int</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//#define 定义宏--带参数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span> <span class="token punctuation">(</span>X<span class="token operator">></span>Y<span class="token operator">?</span>X<span class="token operator">:</span>Y<span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//int a = MAX;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span><span class="token comment">//函数方式</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//printf("%d\n",a);//100</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max函数 = %d\n"</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//宏的方式</span>max <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译器解释为 max = (x>y?a:b)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max宏方法 = %d\n"</span><span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>🔺重点内容,宜终身学习</p><blockquote><p>内存</p></blockquote><p>内存是电脑上特别重要的存储器，计算机中所有程序的运行都是在内存中进行的。所以为了有效的使用内存，就把内存划分成一个个小的内存单元，每个内存单元的大小是1个字节。<font style="color:orange;">为了能够有效的访问到内存的每个单元，就给内存单元进行了编号，这些编号被称为该内存单元的地址。</font></p><p>变量都有地址，取出变量地址代码示例如下：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//a占4个字节</span><span class="token comment">//&amp;a--取地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0133F7C8---每个电脑所得值是不一样的,是16进制</span><span class="token comment">//*--解引用操作符</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a = 99</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//00CFFDEC</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>那地址如何存储，需要定义指针变量。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//a占4个字节</span>  <span class="token comment">//*--解引用操作符</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a = 99</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//00CFFDEC</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>指针使用代码实例</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//a占4个字节</span><span class="token comment">//&amp;a--取地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0133F7C8---每个电脑所得值是不一样的,是16进制</span><span class="token comment">//*--解引用操作符/间接访问操作符</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//99</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h4><p>以整形指针举例，可以推广到其他类型，如：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token string">'w'</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">;</span><span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token string">'q'</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="指针变量的大小"><a href="#指针变量的大小" class="headerlink" title="指针变量的大小"></a>指针变量的大小</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> <span class="token expression"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:#DAA520;">结论：指针大小在32位平台是4个字节，64位平台是8个字节</font></p><p><strong>切换64位平台方法vs2010:</strong></p><p>win32下拉 &gt;    配置管理器 &gt;  活动解决方案平台(P):win32 下拉 选择新建 &gt;  键入或选择新平台(P):下拉选择 <code>X64</code>                     </p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>结构体是C语言中特别重要的知识点，结构体使得C语言有能力描述复杂类型。 </p><p>比如描述学生，学生包含： 名字+年龄+性别+学号  这几项信息。</p><p>代码示例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Stu</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//名字     </span>   <span class="token keyword">int</span>  age<span class="token punctuation">;</span><span class="token comment">//年龄     </span>   <span class="token keyword">char</span> sex<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//性别    </span>   <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//学号 </span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//分号一定不要忘</span></code></pre><p>结构体的初始化：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印结构体信息</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"20180101"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//.为结构成员访问操作符</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name = %s age = %d sex = %s id = %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>age<span class="token punctuation">,</span> s<span class="token punctuation">.</span>sex<span class="token punctuation">,</span> s<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//->操作符</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name = %s age = %d sex = %s id = %s\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>name<span class="token punctuation">,</span> ps<span class="token operator">-></span>age<span class="token punctuation">,</span> ps<span class="token operator">-></span>sex<span class="token punctuation">,</span> ps<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>完整代码:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//名字     </span>   <span class="token keyword">int</span>  age<span class="token punctuation">;</span><span class="token comment">//年龄     </span>   <span class="token keyword">char</span> sex<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//性别    </span>   <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//学号 </span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//分号一定不要忘</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印结构体信息</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"20180101"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">//.为结构成员访问操作符</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name = %s age = %d sex = %s id = %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>age<span class="token punctuation">,</span> s<span class="token punctuation">.</span>sex<span class="token punctuation">,</span> s<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//name = 张三 age = 20 sex = 男 id = 20180101</span><span class="token comment">//->操作符</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name = %s age = %d sex = %s id = %s\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>name<span class="token punctuation">,</span> ps<span class="token operator">-></span>age<span class="token punctuation">,</span> ps<span class="token operator">-></span>sex<span class="token punctuation">,</span> ps<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//name = 张三 age = 20 sex = 男 id = 20180101</span><span class="token punctuation">&#125;</span></code></pre><p>⚠️上面代码在本地vs中无法运行,会出现<code>的左侧必须指向结构/联合</code>的报错,C语言在线编译器会通过</p><p><font style="color:tomato;">本地编译不通过原因:</font></p><p>​    <code>name</code>,<code>sex</code>,<code>id</code>是数组,其本质是<code>地址</code></p><p>​    <code>age</code>是真正的变量</p><p>为了vs编译通过,需要<code>strcpy</code>函数</p><blockquote><p>C 库函数 <strong>char *strcpy(char *dest, const char *src)</strong> 把 <strong>src</strong> 所指向的<font style="color:tomato;">字符串</font>复制到 <strong>dest</strong>。</p><p>需要注意的是如果目标数组 dest 不够大，而源字符串的长度又太长，可能会造成缓冲溢出的情况。</p></blockquote><pre class="language-markdown" data-language="markdown"><code class="language-markdown">参数dest -- 指向用于存储复制内容的目标数组。src -- 要复制的字符串。</code></pre><p>例:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//书名--C语言程序设计     </span>   <span class="token keyword">short</span>  price<span class="token punctuation">;</span><span class="token comment">//价格  </span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">Book</span> b1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"C语言程序设计"</span><span class="token punctuation">,</span><span class="token number">99.9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"书本名称为:%s\n"</span><span class="token punctuation">,</span>b1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习day2</title>
      <link href="posts/9e4e41a3/"/>
      <url>posts/9e4e41a3/</url>
      
        <content type="html"><![CDATA[<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>C语言中的常量分为以下以下几种:</p><ul><li>字面常量</li><li>const修饰的常变量</li><li>#define定义的标识符常量</li><li>枚举常量</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//const修饰的常变量num</span><span class="token keyword">const</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">520</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num = %d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">99</span><span class="token punctuation">;</span><span class="token comment">//字面常量</span><span class="token number">3.1415</span><span class="token punctuation">;</span><span class="token comment">//字面常量</span><span class="token comment">//const---常属性</span><span class="token comment">//const int x = 1314;//n是变量，但是又有常属性，所以我们说n是常变量</span><span class="token comment">//int arr[x] = &#123;0&#125;;//err</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span><span class="token expression">定义的标识符常量</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"MAX = %d\n"</span><span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出--MAX = 10</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>枚举是 C 语言中的一种基本数据类型，它可以让数据更简洁，更易读。</p><p>枚举语法定义格式为：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span>　枚举名　<span class="token punctuation">&#123;</span>枚举元素<span class="token number">1</span><span class="token punctuation">,</span>枚举元素<span class="token number">2</span><span class="token punctuation">,</span>……<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">enum</span> <span class="token class-name">Sex</span><span class="token punctuation">&#123;</span>MALE<span class="token punctuation">,</span>FEMALE<span class="token punctuation">,</span>SECRET<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>MALE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>FEMALE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>🔶<strong>注意：</strong>第一个枚举成员的默认值为整型的 0，后续枚举成员的值在前一个成员上加 1。以此类推。</p><h3 id="字符串-转义字符-注释"><a href="#字符串-转义字符-注释" class="headerlink" title="字符串+转义字符+注释"></a>字符串+转义字符+注释</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p><code>&quot;hello dazhao!\n&quot;</code></p><p>这种由双引号( Double Quote )引起来的一串字符称为字符串字面值( String Literal )，或者简称字符串。</p><p>注∶字符串的结束标志是一个<code>\0</code>的转义字符。<font style="color:red;">在计算字符串长度的时候<code>\0</code>是结束标志，不算作字符串内容。</font></p><p>🔹<code>“”</code>是空字符串</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">//数组</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc烫烫烫烫蘢bc---乱码</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>修改:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//相当于'a','b','c',\0</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">//数组</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>数据在计算机上存储的时候，存储的是2进制</p><p>对于诸如<code>#$&amp;xN</code>这类字符,制定了<em>ASCII</em>码表</p><h5 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h5><p>例1</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span><span class="token comment">//不加上可能会出现strlen未定义的报错</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//strlen--string length--计算字符串长度的</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15(其实这个结果是随机值,dev++为6,这里为15是因为找到了\0)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>✍例1这里的随机值是<code>伪随机值</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span><span class="token comment">//不加上可能会出现strlen未定义的报错</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//这里直接写0也可</span><span class="token comment">//strlen--string length--计算字符串长度的</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><blockquote><p>转义字符以<code>\</code>或者<code>\x</code>开头，以<code>\</code>开头表示后跟八进制形式的编码值，以<code>\x</code>开头表示后跟十六进制形式的编码值。对于转义字符来说，只能使用八进制或者十六进制。</p><p>转义字符既可以用于单个字符，也可以用于字符串，并且一个字符串中可以同时使用八进制形式和十六进制形式。</p></blockquote><p>转义字符的初衷是用于 ASCII 编码，所以它的取值范围有限：</p><ul><li>八进制形式的转义字符最多后跟三个数字，也即<code>\ddd</code>，最大取值是<code>\177</code>；</li><li>十六进制形式的转义字符最多后跟两个数字，也即<code>\xdd</code>，最大取值是<code>\x7f</code>。</li></ul><p><font style="color:yellow;">超出范围的转义字符的行为是未定义的，有的编译器会将编码值直接输出，有的编译器会报错。</font></p><table><thead><tr><th>转义字符</th><th>意义</th><th>ASCII码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>响铃(BEL)</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行(LF) ，将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表(HT)</td><td>009</td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>&#39;</td><td>单引号</td><td>039</td></tr><tr><td>&quot;</td><td>双引号</td><td>034</td></tr><tr><td>\</td><td>反斜杠</td><td>092</td></tr><tr><td>?</td><td>在书写连续多个问号时使用，防止他们被解析成三字母词</td><td></td></tr></tbody></table><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(are you ok??)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>vc6++输出结果:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token punctuation">(</span>are you ok<span class="token punctuation">]</span><span class="token comment">//不是我们想要的---(are you ok??)这个结果</span></code></pre><p>单引号、双引号、反斜杠是特殊的字符，不能直接表示：</p><ul><li>单引号是字符类型的开头和结尾，要使用<code>\&#39;</code>表示，也即<code>&#39;\&#39;&#39;</code>；</li><li>双引号是字符串的开头和结尾，要使用<code>\&quot;</code>表示，也即<code>&quot;abc\&quot;123&quot;</code>；</li><li>反斜杠是转义字符的开头，要使用<code>\\</code>表示，也即<code>&#39;\\&#39;</code>，或者<code>&quot;abc\\123&quot;</code>。</li></ul><p>转义字符示例：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"C\tC++\tJava\n\"C\" first appeared!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-shell" data-language="shell"><code class="language-shell">C  C++  Java<span class="token string">"C"</span> first appeared<span class="token operator">!</span></code></pre><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>1.代码中有不需要的代码可以直接删除，也可以注释掉</p><p>2.代码中有些代码比较难懂，可以加一下注释文字</p><p>比如︰</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span><span class="token comment">//不加上可能会出现strlen未定义的报错</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">/*char arr2[] = &#123;'a','b','c','\0'&#125;;//strlen--string length--计算字符串长度的printf("%d\n",strlen(arr1));//3printf("%d\n",strlen(arr2));//3*/</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>注释有两种风格:</strong></p><p>c语言风格的注释<code>/*XXXXXX*/</code><br>                缺陷︰不能嵌套注释</p><p>C++风格的注释<code>//xxXXXXXX</code><br>                可以注释一行也可以注释多行</p><h3 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h3><p>例2</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span><span class="token comment">//不加上可能会出现strlen未定义的报错</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未来的前端工程师,你好鸭\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你要GoodGoodStudy嘛?(1/0)>:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1/0</span><span class="token keyword">if</span><span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"祝贺你将获得好offer!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"可能你要毕业即失业了!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> line <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"成为c语言大佬\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>line <span class="token operator">&lt;=</span><span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"敲一行有效代码:%d\n"</span><span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>line<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>line <span class="token operator">>=</span> <span class="token number">20000</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你将获得一份好offer!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>函数是一组一起执行一个任务的语句。每个 C 程序都至少有一个函数，即主函数 <strong>main()</strong> ，所有简单的程序都可以定义其他额外的函数。</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> z <span class="token operator">=</span> m <span class="token operator">+</span>n<span class="token punctuation">;</span><span class="token keyword">return</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//sum = num1 + num2;</span>sum <span class="token operator">=</span><span class="token function">Add</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum=%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//30</span><span class="token comment">//sum = a + b;</span>sum <span class="token operator">=</span><span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum=%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>函数的特点就是简化代码，代码复用。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>C语言中给了数组的定义:一组相同类型元素的集合</p><p>要存储1-10的数字，怎么存储?</p><h4 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个存放10个整数数字的数组</span></code></pre><h4 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个存放10个整数数字的数组</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用下标访问数组元素--输出9</span>    <span class="token comment">//打印数组0-9</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="运算-操作符"><a href="#运算-操作符" class="headerlink" title="运算/操作符"></a>运算/操作符</h3><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C 语言内置了丰富的运算符，并提供了以下类型的运算符：</p><ul><li><p>算术运算符</p></li><li><p>关系运算符</p></li><li><p>逻辑运算符</p></li><li><p>位运算符</p></li><li><p>赋值运算符</p></li><li><p>杂项运算符</p><hr></li></ul><table><thead><tr><th>&lt;&lt;</th><th>二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</th></tr></thead><tbody><tr><td><strong>&gt;&gt;</strong></td><td><strong>二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</strong></td></tr></tbody></table><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//整型1占4个字节-32bi位</span><span class="token comment">//0000 0000 0000 0000 0000 0000 0000 0001</span><span class="token comment">//对a进行左移一位 a&lt;&lt;1</span><span class="token comment">//0000 0000 0000 0000 0000 0000 0000 0010</span><span class="token comment">//二进制10=1*2^1+0 = 2</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出十进制2</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1,a保持不变</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="二进制-位运算符"><a href="#二进制-位运算符" class="headerlink" title="(二进制)位运算符"></a>(二进制)位运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与操作，按二进制位进行”与”运算。运算规则：<code>0&amp;0=0;    0&amp;1=0;     1&amp;0=0;      1&amp;1=1;</code></td><td align="left">(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符，按二进制位进行”或”运算。运算规则：`0</td><td align="left">0=0;    0</td></tr><tr><td align="left">^</td><td align="left">异或运算符，按二进制位进行”异或”运算。运算规则：<code>0^0=0;    0^1=1;    1^0=1;   1^1=0;</code>对应的二进制位相同，则为0,否则为1</td><td align="left">(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td align="left">~</td><td align="left">取反运算符，按二进制位进行”取反”运算。运算规则：<code>~1=0;    ~0=1;</code></td><td align="left">(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td></tr></tbody></table><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//int c = a&amp;b;</span><span class="token comment">//a 011</span><span class="token comment">//b 101</span><span class="token comment">//c 001</span><span class="token comment">//int c = a|b;</span><span class="token comment">//a 011</span><span class="token comment">//b 101</span><span class="token comment">//c 111</span><span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span><span class="token comment">//a 011</span><span class="token comment">//b 101</span><span class="token comment">//c 110</span><span class="token comment">//printf("a&amp;b=%d\n",c);//十进制1</span><span class="token comment">//printf("a|b=%d\n",c);//十进制7</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a^b=%d\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//十进制6</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td align="left">C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td align="left">+=</td><td align="left">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td align="left">C += A 相当于 C = C + A</td></tr><tr><td align="left">-=</td><td align="left">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td align="left">C -= A 相当于 C = C - A</td></tr><tr><td align="left">*=</td><td align="left">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td align="left">C *= A 相当于 C = C * A</td></tr><tr><td align="left">/=</td><td align="left">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td align="left">C /= A 相当于 C = C / A</td></tr><tr><td align="left">%=</td><td align="left">求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td align="left">C %= A 相当于 C = C % A</td></tr><tr><td align="left">&lt;&lt;=</td><td align="left">左移且赋值运算符</td><td align="left">C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td align="left">&gt;&gt;=</td><td align="left">右移且赋值运算符</td><td align="left">C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td align="left">&amp;=</td><td align="left">按位与且赋值运算符</td><td align="left">C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td align="left">^=</td><td align="left">按位异或且赋值运算符</td><td align="left">C ^= 2 等同于 C = C ^ 2</td></tr><tr><td align="left">|=</td><td align="left">按位或且赋值运算符</td><td align="left">C |= 2 等同于 C = C | 2</td></tr></tbody></table><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> c <span class="token punctuation">;</span>    c <span class="token operator">=</span>  a<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 1 - =  运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">+=</span>  a<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 2 - += 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">-=</span>  a<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 3 - -= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">*=</span>  a<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 4 - *= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">/=</span>  a<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 5 - /= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c  <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>   c <span class="token operator">%=</span>  a<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 6 - %%= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">&lt;&lt;=</span>  <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 7 - &lt;&lt;= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">>>=</span>  <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 8 - >>= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">&amp;=</span>  <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 9 - &amp;= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">^=</span>  <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 10 - ^= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">|=</span>  <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 11 - |= 运算符实例，c 的值 = %d\n"</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><p><font style="color:yellowgreen;">运行结果:</font></p><pre class="language-shell" data-language="shell"><code class="language-shell">Line <span class="token number">1</span> - <span class="token operator">=</span>  运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">21</span>Line <span class="token number">2</span> - <span class="token operator">+=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">42</span>Line <span class="token number">3</span> - -<span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">21</span>Line <span class="token number">4</span> - *<span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">441</span>Line <span class="token number">5</span> - /<span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">21</span>Line <span class="token number">6</span> - %<span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">11</span>Line <span class="token number">7</span> - <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">44</span>Line <span class="token number">8</span> - <span class="token operator">>></span><span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">11</span>Line <span class="token number">9</span> - <span class="token operator">&amp;</span><span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">2</span>Line <span class="token number">10</span> - ^<span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">0</span>Line <span class="token number">11</span> - <span class="token operator">|</span><span class="token operator">=</span> 运算符实例，c 的值 <span class="token operator">=</span> <span class="token number">2</span></code></pre><h4 id="单目运算符"><a href="#单目运算符" class="headerlink" title="单目运算符"></a>单目运算符</h4><p>单目运算符有：!（逻辑反操作、非）、&amp;（取地址符）、sizeof（求长度）、~（按位取反）、++、–、*、(类型)等。</p><p><font style="color:orange;">需要注意的是：</font></p><p>1、&amp;是取地址符，%p打印地址。</p><p>2、🔸sizeof()是操作符，不是函数！</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//sizeof计算的是变量/类型所占空间的大小;单位是字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LINE1=%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LINE2=%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出4,等价于上一句</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出数组大小40,单位是字节</span><span class="token comment">/*计算数组的元素个数个数=数组元素总大小/每个元素的大小*/</span>sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组的元素个数为 = %d\n"</span><span class="token punctuation">,</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>3、++的前置和后置。</p><p>​                举例说明：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//++后置</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d,b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:yellowgreen;">得到的结果：a=11，b=10。</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//++前置</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d,b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:yellowgreen;">得到的结果：a=11，b=11。</font></p><p>4、<code>*</code>在这里是间接访问操作符，主要和指针相关。</p><p>5、(类型)为强制类型转换操作符，例如强制将浮点型数转化成整型数时：</p><p>🌳自动转换规则：</p><ul><li> a）浮点数赋给整型，该浮点数小数被舍去；</li><li> b）整数赋给浮点型，数值不变，但是被存储到相应的浮点型变量中；</li></ul><p><font style="color:skyblue;">强制类型转换形式: <strong>(类型说明符)(表达式)</strong></font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num=%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><font style="color:yellowgreen;">输出的结果：num=3。</font></p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td align="left">(A &amp;&amp; B) 为假。</td></tr><tr><td align="left">||</td><td align="left">称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。</td><td align="left">(A || B) 为真。</td></tr><tr><td align="left">!</td><td align="left">称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td><td align="left">!(A &amp;&amp; B) 为真。</td></tr></tbody></table><p>✏️<font style="color:skyblue;">C语言的真(条件)就是非0</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> c <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&amp;&amp;</span> b <span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 1 - 条件为真\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">||</span> b <span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 2 - 条件为真\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>     <span class="token comment">/* 改变 a 和 b 的值 */</span>   a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&amp;&amp;</span> b <span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 3 - 条件为真\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span>   <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 3 - 条件为假\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Line 4 - 条件为真\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="条件操作符-三目-三元运算符"><a href="#条件操作符-三目-三元运算符" class="headerlink" title="条件操作符(三目/三元运算符)"></a>条件操作符(三目/三元运算符)</h4><p><code>exp1 ? exp2 : exp3</code></p><p><code>表达式1? 表达式2： 表达式3</code><br>       其求值规则为：如果表达式1的值为真，则以表达式2 的值作为条件表达式的值，否则以表达式2的值作为整个条件表达式的值。 条件表达式通常用于赋值语句之中。</p><pre class="language-matlab" data-language="matlab"><code class="language-matlab">max<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span>?a<span class="token operator">:</span>b<span class="token punctuation">;</span> 执行该语句的语义是：如a<span class="token operator">></span>b为真，则把a赋予max，否则把b 赋予max。</code></pre><h4 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码/反码/补码"></a>原码/反码/补码</h4><p><font style="color:skyblue;">只要是整数，内存中存储的都是二进制的补码</font></p><p>**正数:**原码,反码,补码相同</p><p><strong>负数:</strong></p><p><font style="color:gold;">最高符号位数字<code>1</code>代表<code>负数</code>,<code>0</code>代表<code>正数</code></font></p><ul><li>​    原码: 直接按照正负写出的二进制序列</li><li>​    反码:原码的符号位不变,其他位按位取反</li><li>​    补码:反码+1</li></ul><p>例:-2的原/反/补码</p><pre class="language-mathematica" data-language="mathematica"><code class="language-mathematica">&#x2F;&#x2F;-2原码10000000 00000000 00000000 00000010&#x2F;&#x2F;-2反码11111111 11111111 11111111 11111101&#x2F;&#x2F;-2补码11111111 11111111 11111111 11111110</code></pre><hr><h3 id="✍拓展"><a href="#✍拓展" class="headerlink" title="✍拓展"></a>✍拓展</h3><p>vs2010代码格式化快捷键:  <code>ctr+K+F</code></p><p>字符串的结束标志:<code>\0</code></p><p>文件结束标志:EOF - end of file ,其值为<code>-1</code></p><p><code>\b</code>的含义是，将光标从当前位置向前（左）移动一个字符（遇到\n或\r则停止移动），并从此位置开始输出后面的字符（空字符<code>\0</code>和换行符<code>\n</code>除外）<br>        参考文章:<a href="https://blog.csdn.net/harryduanchina/article/details/90751355">https://blog.csdn.net/harryduanchina/article/details/90751355</a></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件二</title>
      <link href="posts/3fae60a6/"/>
      <url>posts/3fae60a6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello!C</title>
      <link href="posts/bf4221aa/"/>
      <url>posts/bf4221aa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>C语言是一门面向过程的计算机编程语言</p><p>编译类语言</p><p>弱类型语言</p><p>静态语言</p></blockquote><p><img src="https://s3.jpg.cm/2021/03/01/0dJmL.jpg" alt="0dJmL.jpg" loading="lazy"></p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token comment">###c代码</span>.c  <span class="token comment">###源文件</span>.h <span class="token comment">###头文件 head</span></code></pre><h4 id="vs2010使用"><a href="#vs2010使用" class="headerlink" title="vs2010使用"></a>vs2010使用</h4><ul><li>vs新建项目（Visual C++） ——–  空项目 ——– “源文件”文件夹里面右键新建C代码文件</li></ul><p><font style="color:skyblue;">选项只有C++，文件后缀命名为<code>.c</code>即可</font></p><ul><li><p>为了代码输出结果易于观看，需要设置输出为控制台</p><p><a href="https://www.imagehub.cc/image/4AeNk"><img src="https://s1.imagehub.cc/images/2021/03/04/vs.jpg" alt="vs.jpg" loading="lazy"></a></p></li></ul><p>运行快捷键：</p><pre class="language-shell" data-language="shell"><code class="language-shell">ctr + F5或ctr + fn + F10</code></pre><h5 id="快捷键自定义设置"><a href="#快捷键自定义设置" class="headerlink" title="快捷键自定义设置"></a>快捷键自定义设置</h5><p>工具 —– 选项 —– 键盘 —–在“显示命令包含“中查找你要修改的快捷键 —– 然后鼠标点击<code>按下快捷键</code>，按下你想要设置的快捷键。然后点”分配“，注意要先将上面的”移除“点一下 —— 确定,设置完成</p><h4 id="C语言学习"><a href="#C语言学习" class="headerlink" title="C语言学习"></a>C语言学习</h4><h5 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h5><p><strong>例1</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello zzy!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>int 整型的意思</p></li><li><p>main()函数是程序的主入口,有且仅有一个</p></li><li><p>printf(“字符串\n”);函数<code>-print function - printf</code> 打印函数;<br>其中<code>\n</code>表示换行的意思。它是一个转义字符，前面在讲字符常量的时候见过。其中 n 是“new line”的缩写，即“新的一行”。</p><p><font style="color:orange;">printf  库函数-c语言本身提供给我们使用的函数</font></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">要使用,"打招呼"<span class="token title important"><span class="token punctuation">#</span>include &lt;stdio.h></span>包含一个叫stdio.h的文件std-标准standard input output</code></pre></li><li><p>return 0; 返回0,这里完成任务 0和整型对应</p></li></ul><h5 id="C语言中标识符的命名规范："><a href="#C语言中标识符的命名规范：" class="headerlink" title="C语言中标识符的命名规范："></a>C语言中标识符的命名规范：</h5><ul><li> 1.标识符由字母、数字、下划线组成，并且首字母不能是数字。</li><li> 2.不能把C的关键字作为用户的标识符，例如：if、for、while等。（注：标识符不能和C语言的关键字相同，也不能和用户自定义的函数或C语言库函数同名）</li><li> 3.标识符长度是由机器上的编译系统决定的，一般的限制为8字符，(注：8字符长度限制是C89标准，C99标准已经扩充长度，其实大部分工业标准都更长)。</li><li> 4.标识符对大小写敏感，即严格区分大小写。一般对变量名用小写，符号常量命名用大写。（注：C语言中字母是区分大小写的，因此score、Score、SCORE分别代表三个不同的标识符）</li><li> 5.标识符命名应做到”见名知意”，例如，长度（外语：length），求和、总计（外语：sum），圆周率（外语：pi）</li></ul><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p><font style="color:deepskyblue;"><code>long long</code>更大的整型 c99标准</font></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token comment">//内存</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//%c ----打印字符串格式的数据</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出  a</span></code></pre><p>✏️<font style="color:skyblue;"><code>sizeof</code></font></p><blockquote><p><em>sizeof</em>() 是一个判断数据类型或者表达式长度的运算符</p></blockquote><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/03/05/-2021-03-05-143215.jpg" alt="-2021-03-05-143215.jpg" loading="lazy"></p><p><font style="color:skyblue;">数据类型long可能为4/8,取决于平台/环境</font></p><h5 id="格式化说明符"><a href="#格式化说明符" class="headerlink" title="格式化说明符"></a>格式化说明符</h5><p>常用的格式化说明符主要有以下几个：</p><table><thead><tr><th>格式化说明符</th><th>说明</th></tr></thead><tbody><tr><td>%d</td><td>按十进制整型数据的实际长度输出。</td></tr><tr><td>%p</td><td>以地址形式打印</td></tr><tr><td>%ld</td><td>输出长整型数据。</td></tr><tr><td>%md</td><td>m 为指定的输出字段的宽度。如果数据的位数小于 m，则左端补以空格，若大于 m，则按实际位数输出。</td></tr><tr><td>%u</td><td>输出无符号整型（unsigned）。输出无符号整型时也可以用 %d，这时是将无符号转换成有符号数，然后输出。但编程的时候最好不要这么写，因为这样要进行一次转换，使 CPU 多做一次无用功。</td></tr><tr><td>%c</td><td>用来输出一个字符。</td></tr><tr><td>%f</td><td>用来输出实数，包括单精度和双精度，以小数形式输出。不指定字段宽度，由系统自动指定，整数部分全部输出，小数部分输出 6 位，超过 6 位的四舍五入。</td></tr><tr><td>%.mf</td><td>输出实数时小数点后保留 m 位，注意 m 前面有个点。</td></tr><tr><td>%o</td><td>以八进制整数形式输出，这个就用得很少了，了解一下就行了。</td></tr><tr><td>%s</td><td>用来输出字符串。用 %s 输出字符串同前面直接输出字符串是一样的。但是此时要先定义字符数组或字符指针存储或指向字符串</td></tr><tr><td>%x（或 %X 或 %#x 或 %#X）</td><td>以十六进制形式输出整数，这个很重要。</td></tr></tbody></table><h6 id="🐦-x、-X、-x、-X-的区别"><a href="#🐦-x、-X、-x、-X-的区别" class="headerlink" title="🐦%x、%X、%#x、%#X 的区别"></a>🐦%x、%X、%#x、%#X 的区别</h6><p>一定要掌握 %x（或 %X 或 %#x 或 %#X），因为调试的时候经常要将内存中的二进制代码全部输出，然后用十六进制显示出来。下面写一个程序看看它们四个有什么区别：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">47</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%X\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%#x\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%#X\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在 V[C++]6.0 中的输出结果：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token number">2f</span><span class="token number">2F</span><span class="token number">0x2f</span><span class="token number">0X2F</span></code></pre><p>从输出结果可以看出：如果是小写的<code>x</code>，输出的字母就是小写的；如果是大写的<code>X</code>，输出的字母就是大写的；如果加一个<code>#</code>，就以标准的十六进制形式输出。</p><p>最好是加一个<code>#</code>，否则如果输出的十六进制数正好没有字母的话会误认为是一个十进制数呢！总之，不加<code>#</code>容易造成误解。但是如果输出 0x2f 或 0x2F，那么人家一看就知道是十六进制。而且<code>%#x</code>和<code>%#X</code>中，笔者觉得大写的比较好，因为大写是绝对标准的十六进制写法。</p><h5 id="输入函数scanf"><a href="#输入函数scanf" class="headerlink" title="输入函数scanf()"></a>输入函数scanf()</h5><p>例:计算两数之和</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//输入数据---使用输入函数scanf</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num1<span class="token punctuation">,</span><span class="token operator">&amp;</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取地址符号&amp;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum=%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>编译结果:</p><p><img src="https://s1.imagehub.cc/images/2021/03/05/1.png" alt="1.png" loading="lazy"></p><p>正确代码:</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//C语言语法规定:变量要定义在当前代码块的最前面</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//输入数据---使用输入函数scanf</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num1<span class="token punctuation">,</span><span class="token operator">&amp;</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取地址符号&amp;</span>sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2021/03/05/-2021-03-05-153510.png" alt="-2021-03-05-153510.png" loading="lazy"></p><p>⚠️<font style="color:tomato;"><code>scanf_s</code>()是vs编译器提供的函数,vs2013及其它编译器会报错,这类不具有跨平台性/可移植性</font></p><p>✍vs报错解决方法:</p><p>​        在代码文件第一行加上如下代码</p><p>​      <font style="color:yellowgreen;">scanf是C语言提供的</font></p><p>✍vs官方解决方法:</p><p>在代码文件第一行加入如下代码</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span></code></pre><p><font style="color:tomato;">其它函数报错也可以用如上代码解决报错</font></p><p>快捷方式:每次新建C文件都会在代码文件头部加入这句代码</p><p><img src="https://s1.imagehub.cc/images/2021/03/05/222.jpg" alt="222.jpg" loading="lazy"></p><p>🤔为什么vs要加入自定义的函数?</p><p>因为诸如 <code>scanf </code> <code>strcpy</code> <code>strlen</code>是C语言提供的不安全函数</p><hr><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p><strong>例2</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>     <span class="token comment">// 声明一个全局变量 a</span><span class="token keyword">int</span> a<span class="token punctuation">;</span>            <span class="token comment">// 定义一个全局变量 a</span><span class="token keyword">extern</span> <span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 定义一个全局变量 a 并给初值。一旦给予赋值，一定是定义，定义才会分配存储空间</span><span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment">//定义一个全局变量 a，并给初值</span></code></pre><p><font style="color:tomato;">声明之后你不能直接使用这个变量，需要定义之后才能使用。</font></p><p>第四个等于第三个，都是定义一个可以被外部使用的全局变量，并给初值。</p><p><font style="color:gold;">定义只能出现在一处。</font>也就是说，不管是 int a 还是 int a=0 都只能出现一次，而那个 extern int a 可以出现很多次。</p><p>当你要引用一个全局变量的时候，你就要声明 extern int a 这时候 extern 不能省略，因为省略了，就变成 int a 这是一个定义，不是声明。</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">变量定义：用于为变量分配存储空间，还可为变量指定初始值。程序中，变量有且仅有一个定义。变量声明：用于向程序表明变量的类型和名字。定义也是声明，extern 声明不是定义。定义也是声明：当定义变量时我们声明了它的类型和名字。extern 声明不是定义：通过使用 extern 关键字声明变量名而不定义它。[注意]变量在使用前就要被定义或者声明。在一个程序中，变量只能定义一次，却可以声明多次。定义分配存储空间，而声明不会。</code></pre><hr><h6 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h6><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//全局变量-定义在代码块&#123;&#125;之外的变量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出20,就近原则</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>局部变量和全局变量的名字建议不要相同-容易误会，产生bug</li><li>当局部变量和全局变量的名字相同的时候，局部变量优先</li></ul><hr><h6 id="变量的作用域和生命周期作用域"><a href="#变量的作用域和生命周期作用域" class="headerlink" title="变量的作用域和生命周期作用域"></a>变量的作用域和生命周期作用域</h6><blockquote><p>作用域( scope )，程序设计概念，通常来说，一段程序代码中所用到的名字并不总是有效/可用的</p><p>而限定这个名字的可用性的代码范围就是这个名字的作用域。</p></blockquote><p>1.局部变量的作用域是变量所在的局部范围。</p><p><strong>eg1</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//局部变量的作用域</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可输出0</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>eg2</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token comment">//局部变量的作用域</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum = %d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//“num”: 未声明的标识符</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>2.全局变量的作用域是整个工程。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> global <span class="token operator">=</span> <span class="token number">2021</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>global<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出---2021</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"测试这个作用域输出结果为:%d\n"</span><span class="token punctuation">,</span>global<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出---测试这个作用域输出结果为:2021</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>生命周期</strong></p><blockquote><p>变量的生命周期指的是变量的创建到变量的销毁之间的一个时间段</p></blockquote><p>1.局部变量的生命周期是∶进入作用域生命周期开始，出作用域生命周期结束。</p><p>2.全局变量的生命周期是∶整个程序的生命周期。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token comment">//开始括号为进入生命周期</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ok</span><span class="token punctuation">&#125;</span><span class="token comment">//结束括号为生命周期完成</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//error</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><p><strong>例3</strong></p><h6 id="变量的内存寻址-与系统有关"><a href="#变量的内存寻址-与系统有关" class="headerlink" title="变量的内存寻址(与系统有关)"></a>变量的内存寻址(与系统有关)</h6><p>(1)内存寻址由大到小，优先分配内存地址比较大的字节给变量，所以说变量越先定义，内存地址就越大。 如下面代码，先定义变量 a,再定义变量 b,打印出 a 的地址是 0x7fff5fbff828,b 的值是 0x7fff5fbff824。a 的地址比 b 的地址大 4 字节。</p><p>(2)变量地址的获取方式：&amp; 变量名。</p><p>(3)输出地址的方式：%p。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token punctuation">;</span>      <span class="token keyword">int</span> b<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a的地址是%p\nb的地址是%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  </code></pre><p>(4)一个变量一定要先初始化才可以使用，因为 c 语言中默认一个没有初始化的变量值是一个不可知的很大值。如下面所示，a 没有初始化，打印出 a 的值是 1606422582。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a的值是%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  </code></pre><p>⚠️例3第一点和第四点有些小伙伴运行结果可能因为环境不同有差异</p><hr>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts踩坑和笔记</title>
      <link href="posts/30455ab0/"/>
      <url>posts/30455ab0/</url>
      
        <content type="html"><![CDATA[<p>由于大赵实习前端工作是做大屏可视化,所以会不可避免的与<code>Echarts</code>打交道</p><p>在校期间也没接触过这方面的技术,所以也在不停地踩坑😅</p><p>鉴于<font style="color:skyblue;">“错不再犯”</font>的原则,我决定将踩过的坑在这里“填平”,并且常用的配置也记录一下下</p><p>毕竟——“好记性不如烂笔头”</p><hr><h3 id="🌳踩坑"><a href="#🌳踩坑" class="headerlink" title="🌳踩坑"></a>🌳<font style="color:tomato;">踩坑</font></h3><h4 id="echarts重复渲染遗留"><a href="#echarts重复渲染遗留" class="headerlink" title="echarts重复渲染遗留"></a>echarts重复渲染遗留</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript">mychart<span class="token punctuation">.</span><span class="token function">setoption</span><span class="token punctuation">(</span>option<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span></code></pre><h3 id="✏️笔记"><a href="#✏️笔记" class="headerlink" title="✏️笔记"></a>✏️<font style="color:gold;">笔记</font></h3><h4 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h4><ul><li><h5 id="去掉网格线"><a href="#去掉网格线" class="headerlink" title="去掉网格线"></a>去掉网格线</h5></li></ul><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// xAxis、yAxis分别加入这句话</span>                           splitLine<span class="token operator">:</span><span class="token punctuation">&#123;</span>     show<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span></code></pre><ul><li><h5 id="y轴加入单位"><a href="#y轴加入单位" class="headerlink" title="y轴加入单位"></a>y轴加入单位</h5></li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//name 键入单位值</span><span class="token comment">//nameTextStyle 单位样式</span><span class="token comment">//eg:</span>name<span class="token operator">:</span> <span class="token string">'次/天/车'</span><span class="token punctuation">,</span>type<span class="token operator">:</span> <span class="token string">'value'</span><span class="token punctuation">,</span>scale<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>nameTextStyle<span class="token operator">:</span> <span class="token punctuation">&#123;</span>color<span class="token operator">:</span> <span class="token string">'orange'</span><span class="token punctuation">,</span>align<span class="token operator">:</span> <span class="token string">'right'</span><span class="token punctuation">,</span>padding<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>fontSize<span class="token operator">:</span> <span class="token string">'100%'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron实战</title>
      <link href="posts/7e7abbb7/"/>
      <url>posts/7e7abbb7/</url>
      
        <content type="html"><![CDATA[<h3 id="项目需求-远程控制"><a href="#项目需求-远程控制" class="headerlink" title="项目需求-远程控制"></a>项目需求-远程控制</h3><p><strong>背景</strong></p><p>提供软件服务时在复杂情况时下（如排查故障、演示功能），通过沟通解决非常低效。</p><p><strong>目标</strong></p><p>希望迅速为用户提供远程协助，能够远程控制用户电脑，提供点击和键入功能，完成排查 故障、演示场景</p><h3 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h3><p><strong>角色</strong></p><p>控制端：客服人员/研发人员 </p><p>傀儡端：用户</p><p><strong>流程</strong></p><p>1.傀儡端告知控制端本机控制码</p><p>2.控制端输入控制码连接傀儡端</p><p>3.傀儡端将捕获的画面传至控制端</p><p>4.控制端的鼠标和键盘指令传送至傀儡端</p><p>傀儡端响应控制指令</p><h3 id="项目关键点分析"><a href="#项目关键点分析" class="headerlink" title="项目关键点分析"></a>项目关键点分析</h3><ol><li><p>傀儡端告知控制端本机控制码</p><p>建立端与控制码的联系 -&gt; 服务端需求</p></li></ol><ol start="2"><li><p>控制端输入控制码连接傀儡端</p><p>建立用户间连接 -&gt; 服务端需求 or 客户端需求</p></li></ol><ol start="3"><li><p>傀儡端将捕获的画面传至控制端</p><p>捕获画面 、播放画面-&gt; 客户端需求<br>用户间画面传输 -&gt; 服务端需求/客户端需求</p></li></ol><ol start="4"><li><p>控制端的鼠标和键盘指令传送至傀儡端</p><p>捕获指令 -&gt; 客户端需求</p><p>用户间指令传输 -&gt; 服务端需求/客户端需求</p></li><li><p>傀儡端响应控制指令</p><p>响应指令 -&gt; 客户端需求</p></li></ol><h3 id="技术关键点"><a href="#技术关键点" class="headerlink" title="技术关键点"></a>技术关键点</h3><ol><li>怎么捕获画面？<br> Electron desktopCapturer</li></ol><blockquote><p>通过[ navigator.mediaDevices.getUserMedia ]API，可以访问那些用于从桌面上捕获音频和视频的媒体源信息。</p><p>进程: Renderer</p></blockquote><ol start="2"><li>怎么完成用户间连接、画面+指令传输？<br>WebRTC<br>Web Real-Time Communications</li></ol><p><img src="https://s3.jpg.cm/2021/01/29/4wu5E.png" alt="4wu5E.png" loading="lazy"></p><p>3.怎么响应控制指令？<br>            robotjs（Node.js）</p><h3 id="项目架构："><a href="#项目架构：" class="headerlink" title="项目架构："></a>项目架构：</h3><p>Electron 与 React 框架结合</p><h4 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h4><p><img src="https://s3.jpg.cm/2021/01/29/4w1NQ.png" alt="4w1NQ.png" loading="lazy"></p><h4 id="与-React-框架结合"><a href="#与-React-框架结合" class="headerlink" title="与 React 框架结合"></a>与 React 框架结合</h4><p>​        • 书写 React， 并且编译它。CRA 其实一个好的选择。</p><p>• 处理引入 electron/node 模块：</p><p>• Webpack 配置：<a href="https://webpack.js.org/con%EF%AC%81guration/target/">https://webpack.js.org/conﬁguration/target/</a></p><p>• window.require</p><p>• Windows 根据环境信息加载本地或者 devServer url</p><p>• electron-is-dev</p><p>• 启动命令适配。等到编译成功再启动 Electron</p><p>• concurently</p><p>• wait on</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron!hello!</title>
      <link href="posts/7ce5dd63/"/>
      <url>posts/7ce5dd63/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="language-shell" data-language="shell"><code class="language-shell">npm i --save-dev electronnpm install --arch&#x3D;ia32 --platform&#x3D;win32 electron #windows 系统打包选择32位,这样可以兼容64位系统</code></pre><h4 id="验证安装成功："><a href="#验证安装成功：" class="headerlink" title="验证安装成功："></a>验证安装成功：</h4><pre class="language-shell" data-language="shell"><code class="language-shell">npx electron -v  #npm &gt; 5.2 使用此命令验证.&#x2F;node_modules&#x2F;.bin&#x2F;electron -v</code></pre><h3 id="原理简入与特点对比"><a href="#原理简入与特点对比" class="headerlink" title="原理简入与特点对比"></a>原理简入与特点对比</h3><p><img src="https://s3.jpg.cm/2021/01/29/4wd0u.png" alt="4wd0u.png" loading="lazy"></p><p><img src="https://s3.jpg.cm/2021/01/29/4wQtz.png" alt="4wQtz.png" loading="lazy"></p><p><img src="https://s3.jpg.cm/2021/01/29/4wlLG.png" alt="4wlLG.png" loading="lazy"></p><h4 id="Node-js-和-Chromiums-整合"><a href="#Node-js-和-Chromiums-整合" class="headerlink" title="Node.js 和 Chromiums 整合"></a>Node.js 和 Chromiums 整合</h4><p>• 难点：Node.js 事件循环基于 libuv，但 Chromium 基于 message bump</p><p>•  Chromium 集成到 Node.js: 用 libuv 实现 messagebump  (nw)</p><p>•  Node.js 集成到 Chromium</p><h4 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h4><p>•  Electron 运行 package.json 的 main 脚本的进程被称为主进程</p><p>•  每个应用只有一个主进程</p><p>• 管理原生 GUI，典型的窗口（BrowserWindow、Tray、Dock、Menu）</p><p>•  创建渲染进程</p><p>•  控制应用生命周期（app）</p><h4 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h4><p>•  展示 Web 页面的进程称为渲染进程</p><p>• 通过 Node.js、Electron 提供的 API 可以跟系统底层打交道</p><p>•  一个 Electron 应用可以有多个渲染进程</p><p><img src="https://s3.jpg.cm/2021/01/29/4w6U4.png" alt="4w6U4.png" loading="lazy"></p><h4 id="Electron-进程间通信的目的"><a href="#Electron-进程间通信的目的" class="headerlink" title="Electron 进程间通信的目的"></a>Electron 进程间通信的目的</h4><p>• 通知事件</p><p>• 数据传输</p><p>• 共享数据</p><h4 id="IPC-模块通信"><a href="#IPC-模块通信" class="headerlink" title="IPC 模块通信"></a>IPC 模块通信</h4><p>• Electron 提供了 IPC 通信模块，主进程的 ipcMain 和 渲染进程的 ipcRenderer</p><p>•  ipcMain、ipcRenderer 都是 EventEmitter 对象</p><h4 id="进程间通信："><a href="#进程间通信：" class="headerlink" title="进程间通信："></a>进程间通信：</h4><p>•  Callback 写法：</p><p>•  ipcRenderer.send </p><p>•  ipcMain.on</p><p>• Promise 写法 (Electron 7.0 之后，处理请求 + 响应模式)</p><p>•  ipcRenderer.invoke</p><p>•  ipcMain.handle</p><h4 id="进程间通信：从主进程到渲染进程"><a href="#进程间通信：从主进程到渲染进程" class="headerlink" title="进程间通信：从主进程到渲染进程"></a>进程间通信：从主进程到渲染进程</h4><p>• 主进程通知渲染进程：</p><p>•  ipcRenderer.on</p><p>•  webContents.send </p><h4 id="页面间（渲染进程与渲染进程间）通信"><a href="#页面间（渲染进程与渲染进程间）通信" class="headerlink" title="页面间（渲染进程与渲染进程间）通信"></a>页面间（渲染进程与渲染进程间）通信</h4><p>•  通知事件</p><p>•  通过主进程转发（Electron 5之前）</p><p>•  ipcRenderer.sendTo  (Electron 5之后)</p><p>•  数据共享</p><p>•  Web 技术（localStorage、sessionStorage、indexedDB）</p><p>•  使用 remote</p><p>经验 &amp; 技巧</p><h3 id="少用-remote-模块"><a href="#少用-remote-模块" class="headerlink" title="少用 remote 模块"></a>少用 remote 模块</h3><p>•  不要用 sync 模式</p><p>• 在请求 + 响应的通信模式下，需要自定义超时限制</p><p><img src="https://s3.jpg.cm/2021/01/29/4wVoX.png" alt="4wVoX.png" loading="lazy"></p><h3 id="练习项目"><a href="#练习项目" class="headerlink" title="练习项目:"></a>练习项目:</h3><p>番茄钟:<a href="https://github.com/webyang-male/Electron.git">https://github.com/webyang-male/Electron.git</a></p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用正则copy</title>
      <link href="posts/4ac003da/"/>
      <url>posts/4ac003da/</url>
      
        <content type="html"><![CDATA[<h5 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h5><ol><li><p>数字：<code>^[0-9]*$</code></p></li><li><p>n位的数字：<code>^\d&#123;n&#125;$</code></p></li><li><p>至少n位的数字：<code>^\d&#123;n,&#125;$</code></p></li><li><p>m-n位的数字：<code>^\d&#123;m,n&#125;$</code></p></li><li><p>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p></li><li><p>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$</code></p></li><li><p>带1-2位小数的正数或负数：<code>^(\-)?\d+(\.\d&#123;1,2&#125;)?$</code></p></li><li><p>正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code></p></li><li><p>有两位小数的正实数：<code>^[0-9]+(.[0-9]&#123;2&#125;)?$</code></p></li><li><p>有1~3位小数的正实数：<code>^[0-9]+(.[0-9]&#123;1,3&#125;)?$</code></p></li><li><p>非零的正整数：<code>^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*​</code>$</p></li><li><p>非零的负整数：<code>^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$</code></p></li><li><p>非负整数：<code>^\d+$ 或 ^[1-9]\d*|0​</code>$</p></li><li><p>非正整数：<code>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</code></p></li><li><p>非负浮点数：</p><pre class="language-none"><code class="language-none">^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code></pre></li><li><p>非正浮点数：</p><pre class="language-none"><code class="language-none">^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code></pre></li><li><p>正浮点数：</p><pre class="language-none"><code class="language-none">^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></pre></li><li><p>负浮点数：</p><pre class="language-none"><code class="language-none">^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></pre></li><li><p>浮点数：</p><pre class="language-none"><code class="language-none">^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></pre></li></ol><h5 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h5><ol><li><p>汉字：<code>^[\u4e00-\u9fa5]&#123;0,&#125;$</code></p></li><li><p>英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;​</code>$</p></li><li><p>长度为3-20的所有字符：<code>^.&#123;3,20&#125;$</code></p></li><li><p>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p></li><li><p>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p></li><li><p>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></p></li><li><p>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p></li><li><p>由数字、26个英文字母或者下划线组成的字符串：</p><pre class="language-none"><code class="language-none">^\w+$ 或 ^\w&#123;3,20&#125;$</code></pre></li><li><p>中文、英文、数字包括下划线：</p><pre class="language-none"><code class="language-none">^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></pre></li><li><p>中文、英文、数字但不包括下划线等符号：</p><pre class="language-none"><code class="language-none">^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</code></pre></li><li><p>```<br>可以输入含有^%&amp;’,;=?$&quot;等字符：[^%&amp;’,;=?$\x22]+ 12 禁止输入含有<del>的字符：[^</del>\x22]+</p><pre class="language-none"><code class="language-none">    ##### 三、特殊需求表达式1. Email地址：</code></pre><p>^\w+([-+.]\w+)*@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$</p><pre class="language-none"><code class="language-none">   2. 域名：</code></pre><p>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</p><pre class="language-none"><code class="language-none">   3. InternetURL：</code></pre><p>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</p><pre class="language-none"><code class="language-none">   4. 手机号码：</code></pre><p>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</p><pre class="language-none"><code class="language-none">   5. 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：</code></pre><p>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</p><pre class="language-none"><code class="language-none">   6. 国内电话号码(0511-4405222、021-87888822)：</code></pre><p>\d{3}-\d{8}|\d{4}-\d{7}</p><pre class="language-none"><code class="language-none">7. 身份证号(15位、18位数字)：</code></pre><p>^\d{15}|\d{18}$</p><pre class="language-none"><code class="language-none">8. 短身份证号码(数字、字母x结尾)：</code></pre><p>^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</p><pre class="language-none"><code class="language-none">9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：</code></pre><p>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p><pre class="language-none"><code class="language-none">10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：</code></pre><p>^[a-zA-Z]\w{5,17}$</p><pre class="language-none"><code class="language-none">11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：</code></pre><p>^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</p><pre class="language-none"><code class="language-none">12. 日期格式：</code></pre><p>^\d{4}-\d{1,2}-\d{1,2}</p><pre class="language-none"><code class="language-none">13. 一年的12个月(01～09和1～12)：</code></pre><p>^(0?[1-9]|1[0-2])$</p><pre class="language-none"><code class="language-none">14. 一个月的31天(01～09和1～31)：</code></pre><p>^((0?[1-9])|((1|2)[0-9])|30|31)$</p><pre class="language-none"><code class="language-none">15. 钱的输入格式(这个实际应用要求很复杂,这里写出常用的)：    校验input输入框的内容为金额,不能为负数，保留两位小数</code></pre><p> /(^<a href="%5B0-9%5D+">1-9</a>?(.[0-9]{1,2})?$)|(^(0){1}$)|(^[0-9].<a href="%5B0-9%5D">0-9</a>?$)/</p><pre class="language-none"><code class="language-none">16. 1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：</code></pre><p>^[1-9][0-9]*$</p><pre class="language-none"><code class="language-none">17. 2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：</code></pre><p>^(0|[1-9][0-9]*)$</p><pre class="language-none"><code class="language-none">18. 3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：</code></pre><p>^(0|-?[1-9][0-9]*)$</p><pre class="language-none"><code class="language-none">19. 4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：</code></pre><p>^[0-9]+(.[0-9]+)?$</p><pre class="language-none"><code class="language-none">20. 5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：</code></pre><p>^[0-9]+(.[0-9]{2})?$</p><pre class="language-none"><code class="language-none">21. 6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：</code></pre><p>^[0-9]+(.[0-9]{1,2})?$</p><pre class="language-none"><code class="language-none">22. 7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：</code></pre><p>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</p><pre class="language-none"><code class="language-none">23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：</code></pre><p>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</p><pre class="language-none"><code class="language-none">24. 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里25. xml文件：</code></pre><p>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</p><pre class="language-none"><code class="language-none">    26. 中文字符的正则表达式：</code></pre><p>[\u4e00-\u9fa5]</p><pre class="language-none"><code class="language-none">27. 双字节字符：</code></pre><p>[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p><pre class="language-none"><code class="language-none">28. 空白行的正则表达式</code></pre><p>：\n\s*\r (可以用来删除空白行)</p><pre class="language-none"><code class="language-none">29. HTML标记的正则表达式：</code></pre><p>&lt;(\S*?)[^&gt;]<em>&gt;.</em>?&lt;/\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p><pre class="language-none"><code class="language-none">30. 首尾空白字符的正则表达式：</code></pre><p>^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p><pre class="language-none"><code class="language-none">     31. 腾讯QQ号：</code></pre><p>1-9{4,} (腾讯QQ号从10000开始)<br>/^1-9{4,10}/<br>微信号正则<br>/^<a href="%5B-_a-zA-Z0-9%5D%7B5,19%7D">a-zA-Z</a>+/</p><pre class="language-none"><code class="language-none">32. 中国邮政编码：</code></pre><p>[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</p><pre class="language-none"><code class="language-none">33. IP地址：</code></pre><p>\d+.\d+.\d+.\d+ (提取IP地址时有用)</p><pre class="language-none"><code class="language-none">34. IP地址：</code></pre><p>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</p><pre class="language-none"><code class="language-none">35. 输入框限制输入中文    &#96;&#96;&#96;html    &lt;input onkeyup&#x3D;&quot;value&#x3D;value.replace([\u4e00-\u9fa5]&#x2F;g,&#39;&#39;)&quot; &#x2F;&gt;</code></pre></li><li><p>6到20位数字+字母组合</p><pre class="language-none"><code class="language-none">&#x2F;^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;6,20&#125;$&#x2F;</code></pre></li></ol><h5 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源:"></a>文章来源:</h5><pre class="language-none"><code class="language-none">作者：zxin出处：http:&#x2F;&#x2F;zxin.cnblogs.com&#x2F;</code></pre><pre><code>作者:  waterCloud出处：https://segmentfault.com/a/1190000020491722</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件</title>
      <link href="posts/5fcafa01/"/>
      <url>posts/5fcafa01/</url>
      
        <content type="html"><![CDATA[<h4 id="vue组件注册"><a href="#vue组件注册" class="headerlink" title="vue组件注册"></a>vue组件注册</h4><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &#123;&#123;msg&#125;&#125;        &lt;!-- 2、组件的使用 --&gt;        &lt;item-one&gt;&lt;&#x2F;item-one&gt;        &lt;item-one&gt;&lt;&#x2F;item-one&gt;        &lt;item-one&gt;&lt;&#x2F;item-one&gt;        &lt;item-one&#x2F;&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        &#x2F;&#x2F; 1、组件注册的语法:Vue.component(&#39;name&#39;, &#123;&#125;)第一个参数是组件名称，第二个参数是模板        &#x2F;&#x2F; 2、组件名定义时可以使用驼峰，但是使用时一定要用-连接        Vue.component(&#39;item-one&#39;, &#123;            template: &#39;&lt;li&gt;这是第一个组件&lt;&#x2F;li&gt;&#39;        &#125;)        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                msg: &quot;像风一样自由&quot;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h4 id="组件注册的单个根元素设置"><a href="#组件注册的单个根元素设置" class="headerlink" title="组件注册的单个根元素设置"></a>组件注册的单个根元素设置</h4><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;div id&#x3D;&quot;app1&quot;&gt;       &lt;item-one&gt;&lt;&#x2F;item-one&gt;       &lt;item-two&gt;&lt;&#x2F;item-two&gt;   &lt;&#x2F;div&gt;   &lt;script&gt;       &#x2F;&#x2F; 当构建一个组件时，不能在一个组件内设置多个同级别元素。它一定要有一个爸爸       Vue.component(&#39;item-one&#39;, &#123;           template: &#96;           &lt;ul&gt;               &lt;li&gt;这是第一个组件&lt;&#x2F;li&gt;               &lt;li&gt;这是第一个组件&lt;&#x2F;li&gt;           &lt;&#x2F;ul&gt;           &#96;       &#125;)       &#x2F;&#x2F; 像这样的组件我们可以定义很多个，但都是静态的，我们不能进行动态的数据渲染。       &#x2F;&#x2F; 注册的组件名要有唯一性       Vue.component(&#39;item-two&#39;, &#123;           template: &#96;           &lt;ul&gt;               &lt;li&gt;这是第二个组件&lt;&#x2F;li&gt;               &lt;li&gt;这是第二个组件&lt;&#x2F;li&gt;           &lt;&#x2F;ul&gt;           &#96;       &#125;)       let vm1 &#x3D; new Vue(&#123;           el: &quot;#app1&quot;,           data: &#123;&#125;       &#125;)   &lt;&#x2F;script&gt;</code></pre><h4 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h4><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;!--        我们想要展示数据，所以诞生了我们的props    --&gt;   &lt;div id&#x3D;&quot;app1&quot;&gt;       &lt;!-- 你怎么传的值，就怎么在props里面接收，就怎么使用 --&gt;       &lt;!-- 简写 --&gt;       &lt;item-one :cuihua&#x3D;&quot;msgs&quot;&gt;&lt;&#x2F;item-one&gt;       &lt;!-- &lt;item-one v-bind:cuihua&#x3D;&quot;msgs&quot;&gt;&lt;&#x2F;item-one&gt; --&gt;   &lt;&#x2F;div&gt;   &lt;script&gt;       Vue.component(&#39;item-one&#39;, &#123;           props: [&#39;cuihua&#39;], &#x2F;&#x2F; 定义一个prop接受父组件的值           template: &#96;           &lt;ul&gt;               &lt;li&gt;&#123;&#123;cuihua&#125;&#125;&lt;&#x2F;li&gt;               &lt;li&gt;&#123;&#123;cuihua&#125;&#125;&lt;&#x2F;li&gt;           &lt;&#x2F;ul&gt;           &#96;       &#125;)       let vm1 &#x3D; new Vue(&#123;           el: &quot;#app1&quot;,           data: &#123;               msg: &quot;像风一样自由&quot;,               msgs: &quot;像风一样自由werwerewrewr&quot;           &#125;       &#125;)   &lt;&#x2F;script&gt;</code></pre><h4 id="父子组件传值-高级"><a href="#父子组件传值-高级" class="headerlink" title="父子组件传值(高级)"></a>父子组件传值(高级)</h4><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;div id&#x3D;&quot;app1&quot;&gt;       &lt;item-one           v-bind:cuihua&#x3D;&quot;msg&quot;           v-bind:goudan&#x3D;&quot;msgs&quot;           v-for&#x3D;&quot;item in list&quot;           v-bind:xiaohua&#x3D;&quot;item&quot;           :key&#x3D;&quot;item.id&quot;           :xiaoming&#x3D;&quot;val&quot;           :xixi&#x3D;&quot;change&quot;       &gt;&lt;&#x2F;item-one&gt;   &lt;&#x2F;div&gt;   &lt;script&gt;       Vue.component(&#39;item-one&#39;, &#123;           props: [&#39;cuihua&#39;, &quot;goudan&quot;, &quot;xiaohua&quot;, &quot;xiaoming&quot;, &quot;xixi&quot;], &#x2F;&#x2F; 可以定义多个prop           template: &#96;&lt;div&gt;               &lt;p @click&#x3D;&quot;xixi&quot;&gt;&#123;&#123;xiaoming&#125;&#125;&#123;&#123;xiaohua.text&#125;&#125;&#123;&#123;cuihua&#125;&#125;&#123;&#123;goudan&#125;&#125;&lt;&#x2F;p&gt;           &lt;&#x2F;div&gt;&#96;       &#125;)       let vm1 &#x3D; new Vue(&#123;           el: &quot;#app1&quot;,           data: &#123;               msg: &quot;像风一样自由&quot;,               msgs: &quot;像风一样自由的女子&quot;,               list: [                   &#123;id: 0, text: &#39;榴莲&#39;&#125;,                   &#123;id: 1, text: &#39;香蕉&#39;&#125;,                   &#123;id: 2, text: &#39;哈密瓜&#39;&#125;,                   &#123;id: 3, text: &#39;西瓜&#39;&#125;               ]           &#125;,           computed: &#123;               val() &#123;                   return 520               &#125;           &#125;,           methods: &#123;               change() &#123;                   console.log(&#39;Hello Vue!&#39;)               &#125;           &#125;,       &#125;)   &lt;&#x2F;script&gt;</code></pre><h4 id="父子组件数据传递之监听子组件事件"><a href="#父子组件数据传递之监听子组件事件" class="headerlink" title="父子组件数据传递之监听子组件事件"></a>父子组件数据传递之监听子组件事件</h4><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;!--         子组件提交事件给父组件        $emit(事件名称，传给事件函数的参数)        需求：使用子组件事件放大列表的字号        1、在父组件中新增一个fontSize数据属性        2、写了一个内联样式，样式关联该数据        3、在子组件内绑定了一个自定义事件，并且触发事件的是一个表达式     --&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;item-one            v-for&#x3D;&quot;item in list&quot;            v-bind:xiaohua&#x3D;&quot;item&quot;            :key&#x3D;&quot;item.id&quot;            :style&#x3D;&quot;&#123;fontSize:fontSize + &#39;em&#39;&#125;&quot;            v-on:cuihua&#x3D;&quot;change&quot;        &gt;&lt;&#x2F;item-one&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        Vue.component(&#39;item-one&#39;, &#123;            props: [&quot;xiaohua&quot;,], &#x2F;&#x2F; 可以定义多个prop            template: &#96;&lt;div&gt;                &lt;p&gt;&#123;&#123;xiaohua.text&#125;&#125;&lt;&#x2F;p&gt;                &lt;button @click&#x3D;&quot;$emit(&#39;cuihua&#39;, 0.1, 1)&quot;&gt;点击放大字号&lt;&#x2F;button&gt;            &lt;&#x2F;div&gt;&#96;        &#125;)        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                list: [                    &#123;id: 0, text: &#39;榴莲&#39;&#125;,                    &#123;id: 1, text: &#39;香蕉&#39;&#125;,                    &#123;id: 2, text: &#39;哈密瓜&#39;&#125;,                    &#123;id: 3, text: &#39;西瓜&#39;&#125;                ],                fontSize: 1            &#125;,            methods: &#123;                change(num, times) &#123;                    this.fontSize +&#x3D; num*times                &#125;            &#125;,                    &#125;)    &lt;&#x2F;script&gt;</code></pre><h4 id="vue动态组件"><a href="#vue动态组件" class="headerlink" title="vue动态组件"></a>vue动态组件</h4><h5 id="tab菜单"><a href="#tab菜单" class="headerlink" title="tab菜单"></a>tab菜单</h5><pre class="language-css" data-language="css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.tab-button</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 6px 10px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.tab-button:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e0e0e0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.tab-button.active</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #e0e0e0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>            <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab in tabs<span class="token punctuation">"</span></span>            <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span>            <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change(tab)<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>tab-button<span class="token punctuation">'</span>, &#123;active: currentTab === tab&#125;]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;&#123;tab&#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- is特性绑定哪个组件就显示哪个组件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTabComponent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;        Vue.component(&#39;tab-home&#39;, &#123;            template: &#96;&lt;div&gt;Home Page&lt;&#x2F;div&gt;&#96;        &#125;)        Vue.component(&#39;tab-list&#39;, &#123;            template: &#96;&lt;div&gt;List Page&lt;&#x2F;div&gt;&#96;        &#125;)        Vue.component(&#39;tab-news&#39;, &#123;            template: &#96;&lt;div&gt;News Page&lt;&#x2F;div&gt;&#96;        &#125;)        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                tabs: [&#39;home&#39;, &#39;list&#39;, &#39;news&#39;],                currentTab: &#39;home&#39;            &#125;,            computed: &#123;                currentTabComponent() &#123;                    return &#39;tab-&#39; + this.currentTab                &#125;            &#125;,            methods: &#123;                change(val) &#123;                    this.currentTab &#x3D; val                &#125;            &#125;,        &#125;)    &lt;&#x2F;script&gt;</code></pre><h4 id="vue动态组件优化"><a href="#vue动态组件优化" class="headerlink" title="vue动态组件优化"></a>vue动态组件优化</h4><pre class="language-vue" data-language="vue"><code class="language-vue"></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue指令三</title>
      <link href="posts/2e793d05/"/>
      <url>posts/2e793d05/</url>
      
        <content type="html"><![CDATA[<h4 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h4><p>可以用 v-on 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p><p><strong>缩写</strong>：<code>@</code></p><h5 id="代码绑定"><a href="#代码绑定" class="headerlink" title="代码绑定"></a>代码绑定</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!-- 当num &gt; 4的时候，就让列表展示，否则就不展示列表 --&gt;        &lt;button @click&#x3D;&quot;num++&quot;&gt;点击增加&lt;&#x2F;button&gt;&lt;button v-on:click&#x3D;&quot;num--&quot;&gt;点击减少&lt;&#x2F;button&gt;        &lt;p&gt;点击次数为:&#123;&#123;num&#125;&#125;&lt;&#x2F;p&gt;        &lt;ul v-if&#x3D;&quot;toggle&quot;&gt;            &lt;li v-for&#x3D;&quot;(cuihua, index) in girls&quot;&gt;                &lt;span :key&#x3D;&quot;index&quot;&gt;&#123;&#123;cuihua.name&#125;&#125;&lt;&#x2F;span&gt;            &lt;&#x2F;li&gt;        &lt;&#x2F;ul&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                girls: [                    &#123;name: &#39;郑爽2&#39;,sex: &#39;女&#39;,age: 14&#125;,                    &#123;name: &#39;郑爽3&#39;,sex: &#39;女&#39;,age: 15&#125;,                    &#123;name: &#39;郑爽1&#39;,sex: &#39;女&#39;,age: 12&#125;,                    &#123;name: &#39;郑爽4&#39;,sex: &#39;女&#39;,age: 17&#125;,                    &#123;name: &#39;郑爽4&#39;,sex: &#39;女&#39;,age: 19&#125;                ],                num: 0            &#125;,            computed: &#123;                toggle: function () &#123;                    return this.num &gt; 4 ? true : false                &#125;            &#125;,        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!-- 当num &gt; 4的时候，就让列表展示，否则就不展示列表 --&gt;        &lt;button @click&#x3D;&quot;add&quot;&gt;点击增加&lt;&#x2F;button&gt;&lt;button v-on:click&#x3D;&quot;num--&quot;&gt;点击减少&lt;&#x2F;button&gt;        &lt;p&gt;点击次数为:&#123;&#123;num&#125;&#125;&lt;&#x2F;p&gt;        &lt;ul v-if&#x3D;&quot;toggle&quot;&gt;            &lt;li v-for&#x3D;&quot;(cuihua, index) in girls&quot;&gt;                &lt;span :key&#x3D;&quot;index&quot;&gt;&#123;&#123;cuihua.name&#125;&#125;&lt;&#x2F;span&gt;            &lt;&#x2F;li&gt;        &lt;&#x2F;ul&gt;        &lt;hr&gt;        &lt;!-- 可以直接调用并且传递参数 --&gt;        &lt;button @click&#x3D;&quot;print(&#39;msg&#39;)&quot;&gt;点击打印&lt;&#x2F;button&gt;        &lt;hr&gt;        &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;text&quot;&gt;        &lt;button @click&#x3D;&quot;print(text)&quot;&gt;点击打印动态参数&lt;&#x2F;button&gt;        &lt;hr&gt;        &lt;!-- 如果需要处理原生DOM事件，可以使用特殊变量$event把它传到方法里面去 --&gt;        &lt;button @click&#x3D;&quot;getDom($event,text)&quot;&gt;点击查看原生事件&lt;&#x2F;button&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                girls: [                    &#123;name: &#39;郑爽2&#39;,sex: &#39;女&#39;,age: 14&#125;,                    &#123;name: &#39;郑爽3&#39;,sex: &#39;女&#39;,age: 15&#125;,                    &#123;name: &#39;郑爽1&#39;,sex: &#39;女&#39;,age: 12&#125;,                    &#123;name: &#39;郑爽4&#39;,sex: &#39;女&#39;,age: 17&#125;,                    &#123;name: &#39;郑爽4&#39;,sex: &#39;女&#39;,age: 19&#125;                ],                num: 0,                text: &#39;&#39;            &#125;,            computed: &#123;                toggle: function () &#123;                    return this.num &gt; 4 ? true : false                &#125;            &#125;,            methods: &#123;                add: function () &#123;                    this.num ++                &#125;,                print(text) &#123;                    console.log(text)                &#125;,                getDom(event, t) &#123;                    console.log(event, t)                &#125;            &#125;,        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!--             .stop 阻止事件冒泡            .prevent 阻止默认事件            .self 当事件在元素本身触发时才触发事件            .capture 添加事件侦听器，使用事件捕获模式            .once 事件只触发一次         --&gt;         &lt;!-- &lt;input v-model&#x3D;&quot;text&quot; v-on:keyup.enter&#x3D;&quot;doThis&quot;&gt;         &lt;input v-model&#x3D;&quot;text&quot; @keyup.enter&#x3D;&quot;doThis&quot;&gt;         &lt;input v-model&#x3D;&quot;text&quot; @keyup.13&#x3D;&quot;doThis&quot;&gt;         &lt;input v-model&#x3D;&quot;text&quot; @keydown.tab&#x3D;&quot;doThis&quot;&gt; --&gt;         &lt;!-- &lt;input v-model&#x3D;&quot;text&quot; @keydown.65&#x3D;&quot;doThis&quot;&gt; --&gt;         &lt;!-- &lt;input v-model&#x3D;&quot;text&quot; @keydown.delete&#x3D;&quot;doThis&quot;&gt; --&gt;         &lt;!-- &lt;input v-model&#x3D;&quot;text&quot; @keydown.esc&#x3D;&quot;doThis&quot;&gt; --&gt;         &lt;!-- &lt;input v-model&#x3D;&quot;text&quot; @keydown.up&#x3D;&quot;doThis&quot;&gt;         &lt;input v-model&#x3D;&quot;text&quot; @keydown.down&#x3D;&quot;doThis&quot;&gt;         &lt;input v-model&#x3D;&quot;text&quot; @keydown.left&#x3D;&quot;doThis&quot;&gt;         &lt;input v-model&#x3D;&quot;text&quot; @keydown.right&#x3D;&quot;doThis&quot;&gt; --&gt;         &lt;!-- 你希望按下ctrl键的时候触发,即使你按下ctrl和alt也会触发的 --&gt;         &lt;!-- &lt;input v-model&#x3D;&quot;text&quot;&gt;        &lt;button @click.ctrl&#x3D;&quot;doThis&quot;&gt;点击&lt;&#x2F;button&gt; --&gt;        &lt;!-- 有且只有ctrl被按下的时候点击才会触发事件 --&gt;        &lt;!-- &lt;input v-model&#x3D;&quot;text&quot;&gt;            &lt;button @click.ctrl.exact&#x3D;&quot;doThis&quot;&gt;点击&lt;&#x2F;button&gt; --&gt;        &lt;!-- 没有任何系统按键被按下时才触发 --&gt;        &lt;input v-model&#x3D;&quot;text&quot;&gt;        &lt;button @click.exact&#x3D;&quot;doThis&quot;&gt;点击&lt;&#x2F;button&gt;            &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                text: &#39;&#39;            &#125;,            methods: &#123;                doThis() &#123;                    console.log(this.text)                &#125;            &#125;,        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="多事件绑定"><a href="#多事件绑定" class="headerlink" title="多事件绑定"></a>多事件绑定</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!-- 如果绑定相同的事件，则触发第一个事件，不会这样写 --&gt;        &lt;!-- &lt;button @click&#x3D;&quot;doThis&quot; @click&#x3D;&quot;show&quot;&gt;点击&lt;&#x2F;button&gt; --&gt;        &lt;!-- &lt;button @click&#x3D;&quot;show&quot; @click&#x3D;&quot;doThis&quot;&gt;点击&lt;&#x2F;button&gt; --&gt;        &lt;!-- 所以我们这里说的是单击和双击两个事件同事绑定 --&gt;        &lt;button @click&#x3D;&quot;doThis&quot; @dblclick&#x3D;&quot;show&quot;&gt;点击&lt;&#x2F;button&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;--        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;&#125;,            methods: &#123;                doThis() &#123;                    console.log(&#39;hello 1 单击&#39;)                &#125;,                show() &#123;                    console.log(&#39;show 1 双击&#39;)                &#125;            &#125;,        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="once指令-不常用"><a href="#once指令-不常用" class="headerlink" title="once指令(不常用)"></a>once指令(不常用)</h5><p>如果我们只想在网页加载时，只渲染一次数据，后期即使是data种的数据变化了，我们也不要再次进行渲染，那么我们可以使用v-once指令。</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;        &lt;!-- v-once只渲染元素或者组件一次 --&gt;        &lt;p v-once&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                msg: &quot;hello&quot;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="v-html-不常用"><a href="#v-html-不常用" class="headerlink" title="v-html(不常用)"></a>v-html(不常用)</h5><p>双大括号把数据解释为普通文本，而非HTML代码。所以在需要输出真正的HTML时，我们就可以使用v-html</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;p&gt;&#123;&#123;span&#125;&#125;&lt;&#x2F;p&gt;        &lt;p v-html&#x3D;&quot;span&quot;&gt;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                msg: &quot;hello&quot;,                span: &quot;&lt;span&gt;这是v-html(不常用)用法&lt;&#x2F;span&gt;&quot;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue指令二</title>
      <link href="posts/6c25ab08/"/>
      <url>posts/6c25ab08/</url>
      
        <content type="html"><![CDATA[<h5 id="v-model指令修饰符"><a href="#v-model指令修饰符" class="headerlink" title="v-model指令修饰符"></a>v-model指令修饰符</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!-- 如果要把用户输入的值类型转换为数值类型，使用.number --&gt;        &lt;p&gt;年龄：&lt;input type&#x3D;&quot;text&quot; v-model.number&#x3D;&quot;age&quot;&gt;&lt;&#x2F;p&gt;        &lt;p&gt;&#123;&#123;age&#125;&#125;&lt;&#x2F;p&gt;        &lt;!-- 如果要把用户输入的值首尾空格去掉使用.trim --&gt;        &lt;p&gt;用户名：&lt;input type&#x3D;&quot;text&quot; v-model.number.trim&#x3D;&quot;name&quot;&gt;&lt;&#x2F;p&gt;        &lt;p&gt;****&#123;&#123;name&#125;&#125;****&lt;&#x2F;p&gt;        &lt;p&gt;密码：&lt;input type&#x3D;&quot;password&quot; v-model.number&#x3D;&quot;password&quot;&gt;&lt;&#x2F;p&gt;        &lt;p&gt;用户名：&lt;input type&#x3D;&quot;text&quot; v-model.number.lazy&#x3D;&quot;name2&quot;&gt;&lt;&#x2F;p&gt;        &lt;p&gt;&#123;&#123;name2&#125;&#125;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                age:&quot;&quot;,                name:&quot;&quot;,                name2:&quot;&quot;,                password:&quot;&quot;            &#125;,            watch: &#123;                password: function(newV, oldV) &#123;                    console.log(newV, typeof newV)                &#125;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h5><p>v-bind指令用于响应更新HTML特性，将一个或多个attribute，或者一个组件prop动态绑定到表达式。</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!-- &lt;img v-bind:src&#x3D;&quot;srcUrl&quot;&gt; --&gt;        &lt;!-- v-bind语法的简写 --&gt;        &lt;img :src&#x3D;&quot;srcUrl&quot; :alt&#x3D;&quot;msg&quot;&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                srcUrl: &#39;.&#x2F;xx.png&#39;,                msg: &#39;当前图片找不到了&#39;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h6 id="v-bind指令的class绑定"><a href="#v-bind指令的class绑定" class="headerlink" title="v-bind指令的class绑定"></a>v-bind指令的class绑定</h6><pre class="language-vue" data-language="vue"><code class="language-vue">    &lt;style&gt;        .active &#123;            width: 300px;            height: 300px;            background: yellow;        &#125;    &lt;&#x2F;style&gt;--------------------------------------------------------------------------------------------------&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!-- 我们可以传给v-bind:class一个对象，来进行动态的切换class --&gt;        &lt;div v-bind:class&#x3D;&quot;&#123;active: isActive&#125;&quot;&gt;            &#123;&#123;msg&#125;&#125;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                msg: &#39;古力娜扎&#39;,                isActive: true            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h6 id="v-bind指令的class绑定之对象绑定"><a href="#v-bind指令的class绑定之对象绑定" class="headerlink" title="v-bind指令的class绑定之对象绑定"></a>v-bind指令的class绑定之对象绑定</h6><pre class="language-vue" data-language="vue"><code class="language-vue">    &lt;style&gt;        .active1 &#123;            width: 300px;            height: 300px;            background: yellow;        &#125;        .active2 &#123;            font-size: 50px;        &#125;        .cuihua &#123;            text-align: center;        &#125;    &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!-- 方法1            可以在一个对象中传入更多的属性来动态切换多个class            还可以跟普通的calss并存        --&gt;        &lt;div        class&#x3D;&quot;cuihua&quot;        v-bind:class&#x3D;&quot;&#123;active1: isActive1, active2: isActive2&#125;&quot;&gt;            &#123;&#123;msg&#125;&#125;        &lt;&#x2F;div&gt;        &lt;!-- 方法2绑定的数据对象可以定义在data里面而不是内联样式中 --&gt;        &lt;div :class&#x3D;&quot;goudanObj&quot;&gt;            &#123;&#123;msg&#125;&#125;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                msg: &#39;古力娜扎&#39;,                isActive1: true,                isActive2: false,             &#x2F;&#x2F;方法2:这里抽离出来                goudanObj: &#123;                    active1: false,                     active2: true                &#125;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h6 id="v-bind指令的class绑定之数组绑定"><a href="#v-bind指令的class绑定之数组绑定" class="headerlink" title="v-bind指令的class绑定之数组绑定"></a>v-bind指令的class绑定之数组绑定</h6><pre class="language-vue" data-language="vue"><code class="language-vue"> &lt;style&gt;        .active1 &#123;            width: 300px;            height: 300px;            background: yellow;        &#125;        .active2 &#123;            font-size: 50px;        &#125;        .cuihua &#123;            text-align: center;        &#125;        .errClass &#123;            color: red;        &#125;  &lt;&#x2F;style&gt;&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!-- 可以把一个数组传给v-bind:class --&gt;        &lt;div            v-bind:class&#x3D;&quot;[class1, class2, class3]&quot;&gt;            &lt;!-- v-bind:class&#x3D;&quot;classArr&quot;&gt; --&gt;            &#123;&#123;msg&#125;&#125;        &lt;&#x2F;div&gt;        &lt;!-- 如果想要根据条件切换列表中的class可以使用三目表达式 --&gt;        &lt;p :class&#x3D;&quot;toggle ? &#39;active2&#39; : &#39;errClass&#39;&quot;&gt;哈哈哈哈&lt;&#x2F;p&gt;        &lt;p :class&#x3D;&quot;toggle ? classArr : &#39;errClass&#39;&quot;&gt;哈哈哈哈&lt;&#x2F;p&gt;        &lt;!-- 这样写也是可以的 --&gt;        &lt;p :class&#x3D;&quot;[class3, &#123;active2: toggle&#125;]&quot;&gt;我的数组中的对象&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                msg: &#39;古力娜扎&#39;,                class1: &#39;active1&#39;,                class2: &#39;active2&#39;,                class3: &#39;cuihua&#39;,                toggle: false,                classArr: [&#39;active1&#39;,&#39;active2&#39;,&#39;cuihua&#39;]            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h6 id="v-bind指令的style绑定"><a href="#v-bind指令的style绑定" class="headerlink" title="v-bind指令的style绑定."></a>v-bind指令的style绑定.</h6><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;div            v-bind:style&#x3D;&quot;&#123;color: &#39;red&#39;, fontSize: 24 + &#39;px&#39;&#125;&quot;&gt;            &#123;&#123;msg&#125;&#125;        &lt;&#x2F;div&gt;        &lt;div            v-bind:style&#x3D;&quot;&#123;color: &#39;red&#39;, fontSize: fontSize + &#39;px&#39;&#125;&quot;&gt;            &#123;&#123;msg&#125;&#125;        &lt;&#x2F;div&gt;        &lt;!-- 上面的方法看起来不太方便，所以我们一般情况下都是会采用对象的形式绑定的 --&gt;        &lt;p :style&#x3D;&quot;styleData&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;        &lt;!-- style也是可以使用数组语法把多个样式对象应用到同一个元素中的 --&gt;        &lt;p :style&#x3D;&quot;[styleData, styleData2]&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                msg: &#39;古力娜扎&#39;,                fontSize: 46,                styleData: &#123;                    width: &#39;300px&#39;,                    height: &#39;300px&#39;,                    background: &#39;yellow&#39;                &#125;,                styleData2: &#123;                    color: &#39;red&#39;,                    fontSize: &#39;60px&#39;                &#125;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="v-for指令遍历数组"><a href="#v-for指令遍历数组" class="headerlink" title="v-for指令遍历数组"></a>v-for指令遍历数组</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;li v-for&#x3D;&quot;(goudan, index) in girls&quot;&gt;            &lt;!-- &lt;span&gt;&#123;&#123;goudan&#125;&#125;&lt;&#x2F;span&gt; --&gt;            &lt;span :key&#x3D;&quot;index&quot;&gt;&#123;&#123;index&#125;&#125;---&#123;&#123;goudan.name&#125;&#125;---&#123;&#123;goudan.sex&#125;&#125;---&#123;&#123;goudan.home&#125;&#125;&lt;&#x2F;span&gt;        &lt;&#x2F;li&gt;        &lt;!-- 也可以使用of替代in --&gt;        &lt;li v-for&#x3D;&quot;(item, index) of girls&quot;&gt;            &lt;span&gt;&#123;&#123;item.name&#125;&#125;是我的&#123;&#123;index+1&#125;&#125;号女朋友&lt;&#x2F;span&gt;        &lt;&#x2F;li&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                girls: [                    &#123;name: &quot;郑爽&quot;, sex: &quot;女&quot;, home: &quot;china&quot;&#125;,                    &#123;name: &quot;佟丽娅&quot;, sex: &quot;女&quot;, home: &quot;china&quot;&#125;,                    &#123;name: &quot;王丽坤&quot;, sex: &quot;女&quot;, home: &quot;china&quot;&#125;,                    &#123;name: &quot;古力娜扎&quot;, sex: &quot;女&quot;, home: &quot;china&quot;&#125;,                    &#123;name: &quot;迪丽热巴&quot;, sex: &quot;女&quot;, home: &quot;china&quot;&#125;                ]            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="v-for指令遍历对象"><a href="#v-for指令遍历对象" class="headerlink" title="v-for指令遍历对象"></a>v-for指令遍历对象</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!-- v-for渲染元素列表的时候，默认是“就地更新”的原则             直接对数据对象进行新增操作，不会立即触发网页重新渲染            只有更改了某个已经存在的属性值之后，才会进行渲染        --&gt;        &lt;li v-for&#x3D;&quot;(value, key, index) in girl&quot;&gt;            &#123;&#123;index&#125;&#125;--&#123;&#123;key&#125;&#125;--&#123;&#123;value&#125;&#125;        &lt;&#x2F;li&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                girl: &#123;                    name: &#39;郑爽&#39;,                    sex: &#39;女&#39;,                    age: 28                &#125;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="v-for指令之数组更新检测"><a href="#v-for指令之数组更新检测" class="headerlink" title="v-for指令之数组更新检测"></a>v-for指令之数组更新检测</h5><p>Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些方法会改变vue实例里面的数组本身。这些被包裹过的方法包括：</p><ol><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ol><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;!-- push、pop、shift、unshift、splice、sort、reverse会改变原数组本身 --&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;li v-for&#x3D;&quot;(cuihua, index) in girls&quot;&gt;            &#123;&#123;cuihua&#125;&#125;--&#123;&#123;index&#125;&#125;        &lt;&#x2F;li&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                girls: [                    &#123;name: &#39;郑爽1&#39;,sex: &#39;女&#39;,age: 12&#125;,                    &#123;name: &#39;郑爽2&#39;,sex: &#39;女&#39;,age: 14&#125;,                    &#123;name: &#39;郑爽3&#39;,sex: &#39;女&#39;,age: 15&#125;,                    &#123;name: &#39;郑爽4&#39;,sex: &#39;女&#39;,age: 17&#125;,                    &#123;name: &#39;郑爽4&#39;,sex: &#39;女&#39;,age: 19&#125;                ],                arr: [3,2,5,7,9]            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h6 id="v-for指令之过滤排序"><a href="#v-for指令之过滤排序" class="headerlink" title="v-for指令之过滤排序"></a>v-for指令之过滤排序</h6><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!-- filter、concat、slice不会改变原数组而是返回一个新数组 --&gt;        &lt;!-- 当我们需要显示一个经过过滤或者排序之后的数组，而不是去改变原数组        这种情况下我们就可以使用计算属性，返回一个过滤后或者是排序后的数组 --&gt;        &lt;li v-for&#x3D;&quot;(cuihua, index) in filterArr&quot;&gt;            &#123;&#123;cuihua&#125;&#125;--&#123;&#123;index&#125;&#125;        &lt;&#x2F;li&gt;        &lt;hr&gt;        &lt;!-- 在计算属性不适用的情况下，比如在嵌套的v-for循环中，可以使用一个方法来写 --&gt;        &lt;li v-for&#x3D;&quot;(cuihua, index) in filterData(girls)&quot;&gt;            &#123;&#123;cuihua&#125;&#125;--&#123;&#123;index&#125;&#125;        &lt;&#x2F;li&gt;        &lt;hr&gt;        &lt;!-- v-for指令范围：也可以接受整数，这种情况下，它会把模板重复渲染对应的次数 --&gt;        &lt;li v-for&#x3D;&quot;num in 5&quot;&gt;            hello world        &lt;&#x2F;li&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                girls: [                    &#123;name: &#39;郑爽1&#39;,sex: &#39;女&#39;,age: 12&#125;,                    &#123;name: &#39;郑爽2&#39;,sex: &#39;女&#39;,age: 14&#125;,                    &#123;name: &#39;郑爽3&#39;,sex: &#39;女&#39;,age: 15&#125;,                    &#123;name: &#39;郑爽4&#39;,sex: &#39;女&#39;,age: 17&#125;,                    &#123;name: &#39;郑爽4&#39;,sex: &#39;女&#39;,age: 19&#125;                ],                arr: [3,2,5,7,9]            &#125;,            computed: &#123;                filterArr: function() &#123;                    return this.girls.filter( function (item) &#123;                        return item.age &gt; 14                    &#125;)                &#125;            &#125;,            methods: &#123;                filterData: function (cuihua) &#123;                    return cuihua.filter(function (item) &#123;                        return item.age &lt; 15                    &#125;)                &#125;            &#125;,        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="v-for指令之注意点"><a href="#v-for指令之注意点" class="headerlink" title="v-for指令之注意点"></a><font style="color:tomato;">v-for指令之注意点</font></h5><h6 id="不要在同一元素上使用-v-if-和-v-for"><a href="#不要在同一元素上使用-v-if-和-v-for" class="headerlink" title="不要在同一元素上使用 v-if 和 v-for"></a>不要在同一元素上使用 v-if 和 v-for</h6><p>当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。当如果你的目的是有条件地跳过循环的执行，那么可以将 v-if 置于外层元素 </p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!--             不要在同一个元素上使用v-if和v-for            当他们处在同一节点，v-for优先级比v-if高，就意味着v-if会分别重复运行在每一个v-for循环中         --&gt;         &lt;!-- 下面这个是错误写法，千万不要这样写 --&gt;        &lt;li v-for&#x3D;&quot;(cuihua, index) in girls&quot; v-if&#x3D;&quot;toggle&quot;&gt;            &lt;span :key&#x3D;&quot;index&quot;&gt;&#123;&#123;cuihua&#125;&#125;--&#123;&#123;index&#125;&#125;&lt;&#x2F;span&gt;        &lt;&#x2F;li&gt;        &lt;!-- 最好是写在外层 --&gt;        &lt;ul v-if&#x3D;&quot;toggle&quot;&gt;            &lt;li v-for&#x3D;&quot;(cuihua, index) in girls&quot;&gt;                &lt;span :key&#x3D;&quot;index&quot;&gt;&#123;&#123;cuihua&#125;&#125;--&#123;&#123;index&#125;&#125;&lt;&#x2F;span&gt;            &lt;&#x2F;li&gt;        &lt;&#x2F;ul&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                girls: [                    &#123;name: &#39;郑爽2&#39;,sex: &#39;女&#39;,age: 14&#125;,                    &#123;name: &#39;郑爽3&#39;,sex: &#39;女&#39;,age: 15&#125;,                    &#123;name: &#39;郑爽1&#39;,sex: &#39;女&#39;,age: 12&#125;,                    &#123;name: &#39;郑爽4&#39;,sex: &#39;女&#39;,age: 17&#125;,                    &#123;name: &#39;郑爽4&#39;,sex: &#39;女&#39;,age: 19&#125;                ],                toggle: false            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h6 id="必加key属性"><a href="#必加key属性" class="headerlink" title="必加key属性"></a>必加key属性</h6><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;!--             有相同父元素的子元素必须有独特的key值，重复的key会造成渲染错误            不要使用对象或是数组之类的非基本类型值作为key，使用字符串或者数值类型的值         --&gt;        &lt;li v-for&#x3D;&quot;(cuihua, index) in girls&quot;&gt;            &lt;span :key&#x3D;&quot;index&quot;&gt;&#123;&#123;cuihua&#125;&#125;--&#123;&#123;index&#125;&#125;&lt;&#x2F;span&gt;        &lt;&#x2F;li&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                girls: [                    &#123;name: &#39;郑爽2&#39;,sex: &#39;女&#39;,age: 14&#125;,                    &#123;name: &#39;郑爽3&#39;,sex: &#39;女&#39;,age: 15&#125;,                    &#123;name: &#39;郑爽1&#39;,sex: &#39;女&#39;,age: 12&#125;,                    &#123;name: &#39;郑爽4&#39;,sex: &#39;女&#39;,age: 17&#125;,                    &#123;name: &#39;郑爽4&#39;,sex: &#39;女&#39;,age: 19&#125;                ]            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue指令一</title>
      <link href="posts/57a585a1/"/>
      <url>posts/57a585a1/</url>
      
        <content type="html"><![CDATA[<h5 id="一、指令简介"><a href="#一、指令简介" class="headerlink" title="一、指令简介"></a>一、指令简介</h5><p>指令是带有v-前缀的特殊特性。指令特性的值预期是单个JavaScript表达式。<br>       <font style="color:skyblue;">指令的职责是：当表达式的值改变时，将其产生的连带影响，响应式的作用于DOM。</font></p><h5 id="二、指令学习"><a href="#二、指令学习" class="headerlink" title="二、指令学习"></a>二、指令学习</h5><h6 id="1、v-if指令"><a href="#1、v-if指令" class="headerlink" title="1、v-if指令"></a>1、v-if指令</h6><p>if指令可以完全根据表达式的值在DOM中生成或移除一个元素。如果v-if表达式赋值为false，那么对应的元素就会从DOM中移除；否则，对应元素的一个克隆将被重新插入DOM中。记住，这个是直接决定是否在网页进行渲染，而不是元素是否显示。</p><h6 id="2、v-else指令"><a href="#2、v-else指令" class="headerlink" title="2、v-else指令"></a>2、v-else指令</h6><p>v-else就是JavaScript中else的意思，它必须跟着v-if，充当else功能。</p><h6 id="3、v-else-if指令"><a href="#3、v-else-if指令" class="headerlink" title="3、v-else-if指令"></a>3、v-else-if指令</h6><p>v-else-if，顾名思义，充当v-if的“else-if块”，可以连续使用。类似于v-else，v-else-if也必须紧跟在带v-if或者v-else-if的元素之后。<br><strong>注意：这些条件判断只会有一个生效</strong></p><h6 id="4、v-show指令"><a href="#4、v-show指令" class="headerlink" title="4、v-show指令"></a>4、v-show指令</h6><p>v-show指令是根据表达式的值来显示或者隐藏HTML元素。当v-show赋值为false时，元素将被隐藏。查看DOM时，会发现元素上多了一个内联样式<code>style=&quot;display:none&quot;</code>。</p><h6 id="5、v-if和v-show指令详解"><a href="#5、v-if和v-show指令详解" class="headerlink" title="5、v-if和v-show指令详解"></a>5、v-if和v-show指令详解</h6><p>在切换v-if模块时，vue.js有一个局部编译/卸载过程，因为v-if中的模板可能包括数据绑定或子组件。v-if是真实的条件渲染，因为它会确保条件块在切换时合适的销毁与重建条件块内的事件监听器和子组件。</p><p>v-if是惰性的 一一 如果初始渲染时条件为假，则什么也不做，在条件第一次变为真时才开始局部编译（编译会被缓存起来）。</p><p>相比之下，v-show简单的多 一一 元素始终被编译并保留，只是简单地基于切换。</p><p>一般来说，v-if有更高的切换消耗，而v-show有更高的初始渲染消耗。</p><p>因此，如果需要频繁的切换，则使用v-show较好；如果在运行时条件改变较少，则使用v-if较好。</p><h6 id="6、v-model指令"><a href="#6、v-model指令" class="headerlink" title="6、v-model指令"></a>6、v-model指令</h6><p>v-model指令用来在input、select、text、checkbox、radio等表单控件元素上创建双向数据绑定。根据控件类型v-model自动选取正确的方法更新元素。尽管有点神奇，但是v-model不过是语法糖，在用户输入事件中更新数据。</p><p><strong>v-model指令详解</strong></p><p>v-model会忽略所有表单元素的value、checked、selected特性的初始值而总是将Vue实例的数据作为数据来源。你应该通过JavaScript在组件的data选项中声明初始值。</p><p>v-model在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p><ol><li>text 和 textarea元素使用 value 属性和 input 事件</li><li>checkbox 和 radio 使用 checked 属性和 change 事件</li><li>select 字段将 value 作为 prop 并将change 作为事件</li></ol><p>v-model指令修饰符：</p><ol><li>number：如果想自动将用户的输入值转为数值类型，可以给 v-model添加number修饰符</li><li>trim：如果要自动过滤用户输入的首尾空白字符，可以给 v-model添加trim修饰符</li></ol><hr><h5 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;p v-if&#x3D;&quot;toggle&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;              &#x2F;&#x2F;值为false时,没有dom元素,不仅仅是视觉上的&quot;消失&quot;                toggle: false,&#x2F;&#x2F;为true显示                msg: &quot;今天心情真好啊&quot;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;p v-if&#x3D;&quot;toggle&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;        &lt;p v-else&gt;这里是else的内容&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;              &#x2F;&#x2F;toggle值为false,只展示v-else的p标签内容              &#x2F;&#x2F;toggle值为true,只展示v-if(条件成立)的p标签内容                toggle: false,                msg: &quot;今天心情真好啊&quot;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;p v-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; 1&quot;&gt;1&lt;&#x2F;p&gt;        &lt;p v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; 2&quot;&gt;2&lt;&#x2F;p&gt;        &lt;p v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; 3&quot;&gt;3&lt;&#x2F;p&gt;        &lt;p v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; 4&quot;&gt;4&lt;&#x2F;p&gt;        &lt;p v-else-if&#x3D;&quot;type &#x3D;&#x3D;&#x3D; 5&quot;&gt;5&lt;&#x2F;p&gt;        &lt;p v-else&gt;6&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                type: 1&#x2F;&#x2F;这里输出1            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;p v-show&#x3D;&quot;toggle&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                toggle: true,                msg: &quot;今天心情真好啊&quot;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;p&gt;姓名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot;&gt;&lt;&#x2F;p&gt;        &lt;p&gt;&#123;&#123;state ? &quot;zzq&quot; : name&#125;&#125;&lt;&#x2F;p&gt;        &lt;p&gt;姓名：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot;&gt;&lt;&#x2F;p&gt;        &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;p&gt;        &lt;p&gt;            性别：            &lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;man&quot; value&#x3D;&quot;男&quot; v-model&#x3D;&quot;sex&quot;&gt;            &lt;label for&#x3D;&quot;man&quot;&gt;男&lt;&#x2F;label&gt;            &lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;woman&quot; value&#x3D;&quot;女&quot; v-model&#x3D;&quot;sex&quot;&gt;            &lt;label for&#x3D;&quot;woman&quot;&gt;女&lt;&#x2F;label&gt;        &lt;&#x2F;p&gt;        &lt;p&gt;            你的职业是？            &lt;select v-model&#x3D;&quot;work&quot;&gt;                &lt;option value&#x3D;&quot;程序员&quot;&gt;程序员&lt;&#x2F;option&gt;                &lt;option value&#x3D;&quot;医生&quot;&gt;医生&lt;&#x2F;option&gt;                &lt;option value&#x3D;&quot;老师&quot;&gt;老师&lt;&#x2F;option&gt;                &lt;option value&#x3D;&quot;律师&quot;&gt;律师&lt;&#x2F;option&gt;            &lt;&#x2F;select&gt;        &lt;&#x2F;p&gt;        &lt;p&gt;            你喜欢二哈吗？(单个复选框绑定布尔值)            &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;dog&quot;&gt;        &lt;&#x2F;p&gt;        &lt;p&gt;            你的女朋友是？(多个复选框绑定到同一个数组)            &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;girl&quot; value&#x3D;&quot;郑爽&quot;&gt;郑爽            &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;girl&quot; value&#x3D;&quot;王丽坤&quot;&gt;王丽坤            &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;girl&quot; value&#x3D;&quot;佟丽娅&quot;&gt;佟丽娅            &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;girl&quot; value&#x3D;&quot;古力娜扎&quot;&gt;古力娜扎            &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;girl&quot; value&#x3D;&quot;迪丽热巴&quot;&gt;迪丽热巴        &lt;&#x2F;p&gt;        &lt;p&gt;            你对自己的评价？            &lt;textarea v-model&#x3D;&quot;desc&quot;&gt;&lt;&#x2F;textarea&gt;            &lt;span&gt;&#123;&#123;desc&#125;&#125;&lt;&#x2F;span&gt;            &lt;textarea&gt;&#123;&#123;desc&#125;&#125;&lt;&#x2F;textarea&gt;        &lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                name: &quot;&quot;,                state: true,                sex: &#39;&#39;,                work: &#39;程序员&#39;,                dog: true,                girl: [],                desc: &quot;goodJob&quot;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue01</title>
      <link href="posts/ed14a2da/"/>
      <url>posts/ed14a2da/</url>
      
        <content type="html"><![CDATA[<h5 id="vue实例创建与插值"><a href="#vue实例创建与插值" class="headerlink" title="vue实例创建与插值"></a>vue实例创建与插值</h5><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;div id&#x3D;&quot;app&quot;&gt;  &#123;&#123; message &#125;&#125;&lt;&#x2F;div&gt;var app &#x3D; new Vue(&#123;  el: &#39;#app&#39;,  data: &#123;    message: &#39;Hello Vue!&#39;  &#125;&#125;)&#x2F;&#x2F;Hello Vue!</code></pre><h5 id="vue的表达式插值"><a href="#vue的表达式插值" class="headerlink" title="vue的表达式插值"></a>vue的表达式插值</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;p&gt;&#123;&#123;msg + &#39;hello world&#39;&#125;&#125;&lt;&#x2F;p&gt;        &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;&#x2F;p&gt;        &lt;p&gt;&#123;&#123;num * 10&#125;&#125;&lt;&#x2F;p&gt;        &lt;p&gt;&#123;&#123;num &#x2F; 10&#125;&#125;&lt;&#x2F;p&gt;        &lt;p&gt;&#123;&#123;msg * 10&#125;&#125;&lt;&#x2F;p&gt;        &lt;p&gt;&#123;&#123;state ? &#39;我是真的&#39; : &#39;我是假的&#39;&#125;&#125;&lt;&#x2F;p&gt;        &lt;p&gt;&#123;&#123;msg.split(&quot;,&quot;)&#125;&#125;&lt;&#x2F;p&gt;        &lt;!-- 错误示例 --&gt;        &lt;!-- &lt;p&gt;&#123;&#123;var a &#x3D; 1&#125;&#125;&lt;&#x2F;p&gt; --&gt;        &lt;!-- &lt;p&gt;&#123;&#123;if(1)&#123;return msg&#125;&#125;&#125;&lt;&#x2F;p&gt; --&gt;    &lt;&#x2F;div&gt;    &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                msg: &#39;xx,真好看&#39;,                num: 10,                state: 1            &#125;        &#125;)    &lt;&#x2F;script&gt;</code></pre><h5 id="vue的计算属性"><a href="#vue的计算属性" class="headerlink" title="vue的计算属性"></a>vue的计算属性</h5><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;p&gt;是没有使用计算属性：&lt;span&gt;&#123;&#123;msg.split(&#39;&#39;).reverse().join(&#39;&#39;)&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;        &lt;p&gt;使用计算属性：&lt;span&gt;&#123;&#123;reverseMsg&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;        &lt;p&gt;&#123;&#123;num * 1000 &#x2F; 5 + 124&#125;&#125;&lt;&#x2F;p&gt;        &lt;p&gt;&#123;&#123;add&#125;&#125;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;        &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                msg: &#39;小尤好看&#39;,                num: 10            &#125;,            computed: &#123;              &#x2F;&#x2F; 计算属性的 getter                reverseMsg: function() &#123;                   &#x2F;&#x2F; &#96;this&#96; 指向 vm1 实例                    return this.msg.split(&#39;&#39;).reverse().join(&#39;&#39;)                &#125;,                add: function() &#123;                    return this.num * 1000 &#x2F; 5 + 10                &#125;            &#125;        &#125;)    &lt;&#x2F;script&gt;</code></pre><h6 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a><a href="https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84-setter">计算属性的 setter</a></h6><p>计算属性默认只有 getter，不过在需要时你也可以提供一个 setter：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue@2.6.12"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app1"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>info<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">let</span> vm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            el<span class="token operator">:</span> <span class="token string">"#app1"</span><span class="token punctuation">,</span>            data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                msg<span class="token operator">:</span> <span class="token string">'风一样的男子'</span><span class="token punctuation">,</span>                age<span class="token operator">:</span> <span class="token number">18</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                info<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// getter</span>                    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">+</span> <span class="token string">'就是我,永远的'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'岁'</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token comment">// setter</span>                    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'大赵菌'</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token comment">// setter</span><span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> newValue<span class="token punctuation">;</span><span class="token comment">//动态赋值msg</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> newValue<span class="token punctuation">;</span><span class="token comment">//动态赋值age</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://source.acexy.cn/view/XatVU4r" loading="lazy"></p><h6 id="methos方法"><a href="#methos方法" class="headerlink" title="methos方法"></a>methos方法</h6><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;p&gt;使用computed方法：&lt;span&gt;&#123;&#123;reverserMsg&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;        &lt;p&gt;使用methods方法：&lt;span&gt;&#123;&#123;revers()&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;        &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                msg1: &#39;风一样的女子&#39;,                msg2: &#39;今天天气真好&#39;            &#125;,            computed: &#123;                reverserMsg: function() &#123;                    return this.msg1.split(&quot;&quot;).reverse().join(&quot;&quot;)                &#125;            &#125;,            methods: &#123;                revers: function() &#123;                    return this.msg2.split(&quot;&quot;).reverse().join(&quot;&quot;)                &#125;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h6 id="watch侦听属性"><a href="#watch侦听属性" class="headerlink" title="watch侦听属性"></a>watch侦听属性</h6><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;body&gt;    &lt;div id&#x3D;&quot;app1&quot;&gt;        &lt;p&gt;&#123;&#123;name&#125;&#125;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;        &lt;script&gt;        let vm1 &#x3D; new Vue(&#123;            el: &quot;#app1&quot;,            data: &#123;                name: &#39;zzq&#39;,                msg: &#39;像风一样自由&#39;            &#125;,            watch: &#123;                &#x2F;&#x2F; 在msg的值改变的时候，我们去改变name的值                msg: function(newValue, oldValue) &#123;                    console.log(newValue, oldValue)                    if (newValue) &#123;                        this.name &#x3D; &quot;xinxin&quot;                    &#125; else &#123;                        this.name &#x3D;&quot;小刘&quot;                    &#125;                &#125;,                name: function() &#123;                    &#x2F;&#x2F; ...                &#125;            &#125;        &#125;)    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;</code></pre><h5 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h5>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue初识</title>
      <link href="posts/5a0e1d77/"/>
      <url>posts/5a0e1d77/</url>
      
        <content type="html"><![CDATA[<h5 id="一、基本的设计模式"><a href="#一、基本的设计模式" class="headerlink" title="一、基本的设计模式"></a>一、基本的设计模式</h5><h6 id="1、基本设计模式之MVC模式"><a href="#1、基本设计模式之MVC模式" class="headerlink" title="1、基本设计模式之MVC模式"></a>1、基本设计模式之MVC模式</h6><p><a href="https://www.imagehub.cc/image/eHbiT"><img src="https://s1.imagehub.cc/images/2020/12/28/mvc.png" alt="mvc.md.png" loading="lazy"></a></p><h6 id="2、基本设计模式之MVP模式"><a href="#2、基本设计模式之MVP模式" class="headerlink" title="2、基本设计模式之MVP模式"></a>2、基本设计模式之MVP模式</h6><p><img src="https://s1.imagehub.cc/images/2020/12/28/mvp.png" alt="mvp.png" loading="lazy"></p><h6 id="3、基本设计模式之MVVM模式"><a href="#3、基本设计模式之MVVM模式" class="headerlink" title="3、基本设计模式之MVVM模式"></a>3、基本设计模式之MVVM模式</h6><p><img src="https://s1.imagehub.cc/images/2020/12/28/mvvm.png" alt="mvvm.png" loading="lazy"></p><h5 id="二、SPA和MPA"><a href="#二、SPA和MPA" class="headerlink" title="二、SPA和MPA"></a>二、SPA和MPA</h5><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、SPASPA应用：SinglePage Application应用，即单页面应用。只有一个主页面的应用，一开始只加载一次js、css等相关资源。所有的内容都包含在主页面，对每一个功能模块组件化。单页应用跳转，就是切换相关组件，仅刷新局部资源。2、MPAMPA应用：MultiPage Application应用，即多页面应用。有多个独立的页面的应用，每个页面必须重复加载js、css等相关资源。多页应用跳转，需要整页资源刷新。3、SPA和MPA对比</code></pre><p><a href="https://www.imagehub.cc/image/eiPE6"><img src="https://s1.imagehub.cc/images/2020/12/28/spampa.png" alt="spampa.png" loading="lazy"></a></p><h5 id="四、Vue的使用"><a href="#四、Vue的使用" class="headerlink" title="四、Vue的使用"></a>四、Vue的使用</h5><h6 id="1、Vue的引入"><a href="#1、Vue的引入" class="headerlink" title="1、Vue的引入"></a>1、Vue的引入</h6><p>可以使用cdn引入，或者是把源码下载下来然后引入。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>使用Vue开发项目，可以在谷歌浏览器中安装Vue开发工具<code>Vue.js devtools</code>(在谷歌商店安装，需要fq哦~)</p><h6 id="2、Vue的实例创建和插值"><a href="#2、Vue的实例创建和插值" class="headerlink" title="2、Vue的实例创建和插值"></a>2、Vue的实例创建和插值</h6><p>每一个Vue应用都是通过用Vue函数创建一个新的Vue实例</p><p>el：绑定的元素<br>       data：绑定的数据对象<br>       文本插值是最基本的形式，使用双大括号<code>&#123;&#123;&#125;&#125;`（Mustache语法糖）       例子中的标签`&#123;&#123;msg&#125;&#125;</code>将会被相应的数据对象msg属性的值替换掉，当msg的值改变时，文本中的值也会联动地发生变化。</p><h6 id="3、Vue的表达式插值"><a href="#3、Vue的表达式插值" class="headerlink" title="3、Vue的表达式插值"></a>3、Vue的表达式插值</h6><p>Mustache语法糖也接受表达式形式的值，表达式可以有JavaScript表达式构成。表达式是各种数值、变量、运算符的综合体。简单的表达式可以是常量或者变量的名称。表达式的值是其运算结果。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 1、JS表达式</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>msg <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 在原始值上除以100</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token boolean">true</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 值为真,则渲染出1,否则渲染出0</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>“ <span class="token punctuation">,</span> ”<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 把值对应的字符串进行处理</span><span class="token comment">// 2、无效示例</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 这是一条语句, 不是表达式</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> message <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">//控制流程的代码也是没有用的</span></code></pre><h6 id="4、Vue的计算属性-computed"><a href="#4、Vue的计算属性-computed" class="headerlink" title="4、Vue的计算属性:computed"></a>4、Vue的计算属性:computed</h6><p>模板内的表达式非常便利，但是设计他们的初衷是用于简单运算的，在模板中放入太多的逻辑会让模板过重切难以维护。所以针对这样复杂的处理逻辑，我们引入计算属性这一技术来实现。</p><h6 id="5、Vue的计算属性的setter"><a href="#5、Vue的计算属性的setter" class="headerlink" title="5、Vue的计算属性的setter"></a>5、Vue的计算属性的setter</h6><p>计算属性默认只有getter(只能读取不能设置),不过在需要时你也可以提供一个setter</p><h6 id="6、Vue的方法-methods"><a href="#6、Vue的方法-methods" class="headerlink" title="6、Vue的方法:methods"></a>6、Vue的方法:methods</h6><p>我们可以把同一个功能函数定义为一个方法，跟计算属性相比，计算属性是依赖缓存的，只在响应式依赖发生变化时它们才会重新求值。</p><h6 id="7、Vue的侦听属性-watch"><a href="#7、Vue的侦听属性-watch" class="headerlink" title="7、Vue的侦听属性:watch"></a>7、Vue的侦听属性:watch</h6><p>Vue提供了一种更通用的方式–‘侦听属性’，来观察和响应Vue实例上的数据变动，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方法是最有用的。</p><h6 id="计算属性："><a href="#计算属性：" class="headerlink" title="计算属性："></a>计算属性：</h6><p>三种对于数据变化监听机制：<br>1、 computed：一个属性依赖于多个属性时，推荐使用<br>2、 watch()：多个属性依赖一个属性是，推荐使用<br>3、 Set、get：set对一个属性设置值时，会自动的调用相应的回掉函数，get的回调函数会根据，函数内部依赖的属性的改变而自动改变</p><h5 id="五、-vue原理简析"><a href="#五、-vue原理简析" class="headerlink" title="五、 vue原理简析"></a>五、 vue原理简析</h5><p>vue响应式实现的原理；<br> 为此网上看过相关视频和搜索相关资料，得到的简单的一句总结是：<br> 通过<code>Object.defineProperty</code>去劫持<code>data</code>里的属性，将<code>data</code>全部属性替换成<code>getter</code>和<code>setter</code>，配合<code>发布者和订阅者模式</code>，每一个组件都有一个<code>watcher</code>实例，当我们对<code>data</code>属性赋值和改变，就会触发<code>setter</code>，<code>setter</code>会通知<code>watcher</code>，从而使它关联的组件进行重新渲染。</p><h6 id="Object-defineProerty详解"><a href="#Object-defineProerty详解" class="headerlink" title="Object.defineProerty详解"></a><code>Object.defineProerty</code>详解</h6><h6 id="Object-defineProerty的基础用法"><a href="#Object-defineProerty的基础用法" class="headerlink" title="Object.defineProerty的基础用法"></a><code>Object.defineProerty</code>的基础用法</h6><p>首先这个使基于对象的方法</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span><span class="token punctuation">&#123;</span>text<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//value: 14,</span>  <span class="token comment">//writable: true,</span>  configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token operator">=</span>val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><code>value</code> 该属性的值,可以是任何有效的 JavaScript 值（数值，对象，函数等）</li><li><code>configurable</code>当它值为<code>true</code>时，才能添加对象属性描述和删除，该值如果改成<code>false</code>将不可逆；</li><li><code>writable</code> 当它值为<code>true</code>时，才能对该属性<code>value</code>进行赋值改变</li><li><code>enumerable</code> 当它值为<code>true</code>时，能对该属性进行枚举</li><li><code>get</code> 属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象（由于继承关系，这里的this并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值</li><li><code>set</code>属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。</li></ul><p><font style="color:skyblue;">这里vue主要用到的是属性的<code>getter</code>和<code>setter</code>方法</font></p><h6 id="⚠️注意-get和set不能和writable及value共存，否则浏览器会报错"><a href="#⚠️注意-get和set不能和writable及value共存，否则浏览器会报错" class="headerlink" title="⚠️注意 get和set不能和writable及value共存，否则浏览器会报错"></a>⚠️注意 <code>get</code>和<code>set</code>不能和<code>writable</code>及<code>value</code>共存，否则浏览器会报错</h6><pre class="language-shell" data-language="shell"><code class="language-shell">Uncaught TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute, <span class="token comment"># at Function.defineProperty (&lt;anonymous>)</span></code></pre><h6 id="Object-defineProerty-VS-proxy"><a href="#Object-defineProerty-VS-proxy" class="headerlink" title="Object.defineProerty VS proxy"></a>Object.defineProerty VS proxy</h6><p>vue2.0主要是通过<code>Object.defineProerty</code>来劫持对象属性，更改<code>getter</code>和<code>setter</code>方法， vue3.0用<code>proxy</code>来替代2.0的核心功能，那么他们之间究竟有什么不同呢？</p><p><strong>Object.defineProperty</strong></p><ul><li>不能监听到数组length属性的变化；</li><li>不能监听对象的添加；</li><li>只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历。</li></ul><p><strong>Proxy</strong></p><ul><li><p>可以监听数组length属性的变化；</p></li><li><p>可以监听对象的添加；</p></li><li><p>可代理整个对象，不需要对对象进行遍历，极大提高性能；</p></li><li><p>多达13种的拦截远超Object.defineProperty只有get和set两种拦截。</p><p>链接：<a href="https://juejin.cn/post/6872992692268990478">https://juejin.cn/post/6872992692268990478</a><br>来源：掘金</p></li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/7/2/16bb0e8e859904a2?imageslim" alt="vue生命周期" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello flutter</title>
      <link href="posts/4f4728a/"/>
      <url>posts/4f4728a/</url>
      
        <content type="html"><![CDATA[<p><svg t="1608995651198" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1959" width="32" height="32"><path d="M610.730667 0L98.133333 512 256 669.866667 925.184 0.512h-313.898667L610.730667 0z m0.597333 472.405333l-276.096 275.498667 276.053333 276.053333H925.866667l-275.626667-275.968 275.626667-275.626666h-314.496z" p-id="1960" fill="#1296db"></path></svg></p><h4 id="跨平台框架的发展历史"><a href="#跨平台框架的发展历史" class="headerlink" title="跨平台框架的发展历史"></a>跨平台框架的发展历史</h4><p><img src="https://s1.imagehub.cc/images/2020/12/30/apphistory.png" alt="apphistory.png" loading="lazy"></p><p>图片原文:<a href="https://blog.csdn.net/pkx1993/article/details/81221256">https://blog.csdn.net/pkx1993/article/details/81221256</a></p><h5 id="3个时代跨平台框架对比"><a href="#3个时代跨平台框架对比" class="headerlink" title="3个时代跨平台框架对比"></a>3个时代跨平台框架对比</h5><p><img src="https://s1.imagehub.cc/images/2020/12/30/3.png" alt="3.png" loading="lazy"></p><h5 id="其他文章"><a href="#其他文章" class="headerlink" title="其他文章:"></a>其他文章:</h5><hr><h4 id="Flutter常用命令"><a href="#Flutter常用命令" class="headerlink" title="Flutter常用命令"></a>Flutter常用命令</h4><h5 id="Flutter-SDK分支"><a href="#Flutter-SDK分支" class="headerlink" title="Flutter SDK分支"></a>Flutter SDK分支</h5><pre class="language-shell" data-language="shell"><code class="language-shell">flutter channel</code></pre><h5 id="升级flutter-SDK和依赖包"><a href="#升级flutter-SDK和依赖包" class="headerlink" title="升级flutter SDK和依赖包"></a>升级flutter SDK和依赖包</h5><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#升级（此命令会同时更新 Flutter SDK 和你的 Flutter 项目依赖包）</span>flutter upgrade<span class="token comment">#获取依赖包（只更新项目依赖包，不包括 Flutter SDK）</span>flutter packages get<span class="token comment">#升级依赖包（只更新项目依赖包，不包括 Flutter SDK）</span>flutter packages upgrade</code></pre><h5 id="查看环境依赖-是否安装成功"><a href="#查看环境依赖-是否安装成功" class="headerlink" title="查看环境依赖(是否安装成功)"></a>查看环境依赖(是否安装成功)</h5><pre class="language-shell" data-language="shell"><code class="language-shell">flutter doctor<span class="token comment">#查看详细信息</span>flutter doctor -v</code></pre><h5 id="分析项目代码"><a href="#分析项目代码" class="headerlink" title="分析项目代码"></a>分析项目代码</h5><pre class="language-shell" data-language="shell"><code class="language-shell">flutter analyze</code></pre><h5 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h5><table><thead><tr><th>常用命令</th><th>含义</th></tr></thead><tbody><tr><td>–version</td><td>查看Flutter版本</td></tr><tr><td>-h或者–help</td><td>打印所有命令行用法信息</td></tr><tr><td>analyze</td><td>分析项目的Dart代码。</td></tr><tr><td>build</td><td>Flutter构建命令。</td></tr><tr><td>channel</td><td>列表或开关Flutter通道。</td></tr><tr><td>clean</td><td>删除构建/目录。</td></tr><tr><td>config</td><td>配置Flutter设置。</td></tr><tr><td>create</td><td>创建一个新的Flutter项目。</td></tr><tr><td>devices</td><td>列出所有连接的设备。</td></tr><tr><td>drive</td><td>为当前项目运行Flutter驱动程序测试。</td></tr><tr><td>format</td><td>格式一个或多个Dart文件。</td></tr><tr><td>fuchsia_reload</td><td>在Fuchsia上进行热重载。</td></tr><tr><td>help</td><td>显示帮助信息的Flutter。</td></tr><tr><td>install</td><td>在附加设备上安装Flutter应用程序。</td></tr><tr><td>logs</td><td>显示用于运行Flutter应用程序的日志输出。</td></tr><tr><td>packages</td><td>命令用于管理Flutter包。</td></tr><tr><td>precache</td><td>填充了Flutter工具的二进制工件缓存。</td></tr><tr><td>run</td><td>在附加设备上运行你的Flutter应用程序。</td></tr><tr><td>screenshot</td><td>从一个连接的设备截图。</td></tr><tr><td>stop</td><td>停止在附加设备上的Flutter应用。</td></tr><tr><td>test</td><td>对当前项目的Flutter单元测试。</td></tr><tr><td>trace</td><td>开始并停止跟踪运行的Flutter应用程序。</td></tr></tbody></table><h4 id="IDE插件配置"><a href="#IDE插件配置" class="headerlink" title="IDE插件配置"></a>IDE插件配置</h4><h5 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h5><ul><li><a href="https://developer.android.com/studio/index.html">Android Studio</a>, 3.0或更高版本.</li></ul><p>或者，您也可以使用IntelliJ：</p><ul><li><a href="https://www.jetbrains.com/idea/download/">IntelliJ IDEA Community</a>, version 2017.1或更高版本.</li><li><a href="https://www.jetbrains.com/idea/download/">IntelliJ IDEA Ultimate</a>, version 2017.1 或更高版本.</li></ul><h5 id="安装Flutter和Dart插件"><a href="#安装Flutter和Dart插件" class="headerlink" title="安装Flutter和Dart插件"></a>安装Flutter和Dart插件</h5><p>需要安装两个插件:</p><ul><li><code>Flutter</code>插件： 支持Flutter开发工作流 (运行、调试、热重载等).</li><li><code>Dart</code>插件： 提供代码分析 (输入代码时进行验证、代码补全等).</li></ul><p>要安装这些:</p><ol><li>启动Android Studio.</li><li>打开插件首选项 (<strong>Preferences&gt;Plugins</strong> on macOS, <strong>File&gt;Settings&gt;Plugins</strong> on Windows &amp; Linux).</li><li>选择 <strong>Browse repositories…</strong>, 选择 Flutter 插件并点击 <code>install</code>.</li><li>重启Android Studio后插件生效.</li></ol><p><em>VS Code:</em> 轻量级编辑器，支持Flutter运行和调试.</p><h5 id="安装-VS-Code"><a href="#安装-VS-Code" class="headerlink" title="安装 VS Code"></a>安装 VS Code</h5><ul><li><a href="https://code.visualstudio.com/">VS Code</a>, 安装1.20.1或更高版本.</li></ul><h5 id="安装Flutter插件"><a href="#安装Flutter插件" class="headerlink" title="安装Flutter插件"></a>安装Flutter插件</h5><ol><li>启动 VS Code</li><li>调用 <strong>View&gt;Command Palette…</strong></li><li>输入 ‘install’, 然后选择 <strong>Extensions: Install Extension</strong> action</li><li>在搜索框输入 <code>flutter</code> , 在搜索结果列表中选择 ‘Flutter’, 然后点击 <strong>Install</strong></li><li>选择 ‘OK’ 重新启动 VS Code</li></ol><h5 id="通过Flutter-Doctor验证设置"><a href="#通过Flutter-Doctor验证设置" class="headerlink" title="通过Flutter Doctor验证设置"></a>通过Flutter Doctor验证设置</h5><ol><li>调用 <strong>View&gt;Command Palette…</strong></li><li>输入 ‘doctor’, 然后选择 <strong>‘Flutter: Run Flutter Doctor’</strong> action</li><li>查看“OUTPUT”窗口中的输出是否有问题</li></ol><h4 id="避坑博客"><a href="#避坑博客" class="headerlink" title="避坑博客"></a>避坑博客</h4><pre class="language-markdown" data-language="markdown"><code class="language-markdown">Android studio 安装 flutter 和Dart 插件时， 最好是到插件官网下载对应的插件版本。Android studio 3.1的版本对应的分别是 。 一定要保持版本号一致，否则会导致磁盘安装也是失败的。✏️插件官网地址：http://plugins.jetbrains.com/androidstudio</code></pre><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>不管未来有新的框架出现、还是老框架更新迭代，我们需要做的是掌握核心原理才能真正利于不败之地。</p><p>对于实际项目:</p><ul><li>中短期项目,建议使用React-Native</li><li>长期项目，建议使用Flutter</li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-中间件</title>
      <link href="posts/cd7eefda/"/>
      <url>posts/cd7eefda/</url>
      
        <content type="html"><![CDATA[<p><strong>中间件概念</strong></p><p><code>express-middleware.js</code></p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">var <span class="token keyword">http</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>var url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span>var cookie <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./middlewares/cookie'</span><span class="token punctuation">)</span>var postBody <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./middlewares/post-body'</span><span class="token punctuation">)</span>var query <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./middlewares/query'</span><span class="token punctuation">)</span>var session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./middlewares/session'</span><span class="token punctuation">)</span>var <span class="token keyword">server</span> <span class="token operator">=</span> <span class="token keyword">http</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>function <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">/</span><span class="token operator">/</span> 解析表单 get 请求体  <span class="token operator">/</span><span class="token operator">/</span> 解析表单 post 请求体  <span class="token operator">/</span><span class="token operator">/</span> 解析 Cookie  <span class="token operator">/</span><span class="token operator">/</span> 处理 Session  <span class="token operator">/</span><span class="token operator">/</span> 使用模板引擎  <span class="token operator">/</span><span class="token operator">/</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> 解析请求地址中的 get 参数  <span class="token operator">/</span><span class="token operator">/</span> var urlObj <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> req<span class="token punctuation">.</span>query <span class="token operator">=</span> urlObj<span class="token punctuation">.</span>query  <span class="token function">query</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> 解析请求地址中的 post 参数  <span class="token operator">/</span><span class="token operator">/</span> req<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token operator">/</span><span class="token operator">/</span>   foo<span class="token punctuation">:</span> <span class="token string">'bar'</span>  <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">&#125;</span>  <span class="token function">postBody</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> 解析 Cookie  <span class="token operator">/</span><span class="token operator">/</span> req<span class="token punctuation">.</span>cookies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token operator">/</span><span class="token operator">/</span>   isLogin<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">&#125;</span>  <span class="token function">cookie</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> 配置 Session  <span class="token operator">/</span><span class="token operator">/</span> req<span class="token punctuation">.</span>session <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token function">session</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> 配置模板引擎  res<span class="token punctuation">.</span>render <span class="token operator">=</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'xxx'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">/</span><span class="token operator">/</span> 处理    <span class="token operator">/</span><span class="token operator">/</span> query、body、cookies、session、render API 成员  <span class="token punctuation">&#125;</span> else <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'xx'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">/</span><span class="token operator">/</span> 处理  <span class="token punctuation">&#125;</span>  <span class="token operator">/</span><span class="token operator">/</span> 上面的过程都是了为了在后面做具体业务操作处理的时候更方便<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">server</span><span class="token punctuation">.</span><span class="token keyword">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3000. running...'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><strong>Express中的中间件</strong></p><p><code>express-middleware1.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 中间件：处理请求的，本质就是个函数</span><span class="token comment">// 在 Express 中，对中间件有几种分类</span><span class="token comment">// 当请求进来，会从第一个中间件开始进行匹配</span><span class="token comment">//    如果匹配，则进来</span><span class="token comment">//       如果请求进入中间件之后，没有调用 next 则代码会停在当前中间件</span><span class="token comment">//       如果调用了 next 则继续向后找到第一个匹配的中间件</span><span class="token comment">//    如果不匹配，则继续判断匹配下一个中间件</span><span class="token comment">//    </span><span class="token comment">// 不关心请求路径和请求方法的中间件</span><span class="token comment">// 也就是说任何请求都会进入这个中间件</span><span class="token comment">// 中间件本身是一个方法，该方法接收三个参数：</span><span class="token comment">//    Request 请求对象</span><span class="token comment">//    Response 响应对象</span><span class="token comment">//    next     下一个中间件</span><span class="token comment">// 当一个请求进入一个中间件之后，如果不调用 next 则会停留在当前中间件</span><span class="token comment">// 所以 next 是一个方法，用来调用下一个中间件的</span><span class="token comment">// 调用 next 方法也是要匹配的（不是调用紧挨着的那个）</span><span class="token comment">// app.use(function (req, res, next) &#123;</span><span class="token comment">//   console.log('1')</span><span class="token comment">//   next()</span><span class="token comment">// &#125;)</span><span class="token comment">// app.use(function (req, res, next) &#123;</span><span class="token comment">//   console.log('2')</span><span class="token comment">//   next()</span><span class="token comment">// &#125;)</span><span class="token comment">// app.use(function (req, res, next) &#123;</span><span class="token comment">//   console.log('3')</span><span class="token comment">//   res.send('333 end.')</span><span class="token comment">// &#125;)</span><span class="token comment">// app.use(function (req, res, next) &#123;</span><span class="token comment">//   console.log(1)</span><span class="token comment">//   next()</span><span class="token comment">// &#125;)</span><span class="token comment">// app.use('/b', function (req, res, next) &#123;</span><span class="token comment">//   console.log('b')</span><span class="token comment">// &#125;)</span><span class="token comment">// 以 /xxx 开头的路径中间件</span><span class="token comment">// app.use('/a', function (req, res, next) &#123;</span><span class="token comment">//   console.log('a')</span><span class="token comment">//   next()</span><span class="token comment">// &#125;)</span><span class="token comment">// app.use(function (req, res, next) &#123;</span><span class="token comment">//   console.log('2')</span><span class="token comment">//   next()</span><span class="token comment">// &#125;)</span><span class="token comment">// app.use('/a', function (req, res, next) &#123;</span><span class="token comment">//   console.log('a 2')</span><span class="token comment">// &#125;)</span><span class="token comment">// 除了以上中间件之外，还有一种最常用的</span><span class="token comment">// 严格匹配请求方法和请求路径的中间件</span><span class="token comment">// app.get</span><span class="token comment">// app.post</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/abc'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/abc'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'abc 2'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'/ 2'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 如果没有能匹配的中间件，则 Express 会默认输出：Cannot GET 路径</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app is running at port 3000.'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><strong>配置中间件</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// app.get('/abc', function (req, res, next) &#123;</span><span class="token comment">//   console.log('abc')</span><span class="token comment">//   // req.foo = 'bar'</span><span class="token comment">//   req.body = &#123;&#125;</span><span class="token comment">//   next()</span><span class="token comment">// &#125;)</span><span class="token comment">// app.get('/abc', function (req, res, next) &#123;</span><span class="token comment">//   console.log(req.body)</span><span class="token comment">//   console.log('abc 2')</span><span class="token comment">// &#125;)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'.d/sa./d.sa/.dsa'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// return res.status(500).send('Server Error')</span>      <span class="token comment">// 当调用 next 的时候，如果传递了参数，则直接往后找到带有 四个参数的应用程序级别中间件</span>      <span class="token comment">// 当发生错误的时候，我们可以调用 next 传递错误对象</span>      <span class="token comment">// 然后就会被全局错误处理中间件匹配到并处理之</span>      <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'/ 2'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./abc'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// return res.status(500).send('Server Error') </span>      <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 配置错误处理中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app is running at port 3000.'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-Promise</title>
      <link href="posts/4fd126b/"/>
      <url>posts/4fd126b/</url>
      
        <content type="html"><![CDATA[<h4 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h4><p><strong>目录</strong></p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">├── data├── a.txt├── b.txt├── c.txt├── callback_hell.js</code></pre><p><code>callback_hell.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// return console.log('读取失败')</span>    <span class="token comment">// 抛出异常</span>    <span class="token comment">//    1. 阻止程序的执行</span>    <span class="token comment">//    2. 把错误消息打印到控制台</span>    <span class="token keyword">throw</span> err  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// return console.log('读取失败')</span>      <span class="token comment">// 抛出异常</span>      <span class="token comment">//    1. 阻止程序的执行</span>      <span class="token comment">//    2. 把错误消息打印到控制台</span>      <span class="token keyword">throw</span> err    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// return console.log('读取失败')</span>        <span class="token comment">// 抛出异常</span>        <span class="token comment">//    1. 阻止程序的执行</span>        <span class="token comment">//    2. 把错误消息打印到控制台</span>        <span class="token keyword">throw</span> err      <span class="token punctuation">&#125;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>⚠️这里的异步代码输出的结果不一定保证按顺序执行,即使文件(内容)大小一致.</p><p>​    理论文件内容越多,执行时间越长,输出越靠后(这个也不一定)</p><hr><p>为了保证代码结果按顺序输出,代码进行嵌套</p><p>这时就形成了<code>回调地狱</code>:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// return console.log('读取失败')</span>    <span class="token comment">// 抛出异常</span>    <span class="token comment">//    1. 阻止程序的执行</span>    <span class="token comment">//    2. 把错误消息打印到控制台</span>    <span class="token keyword">throw</span> err  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// return console.log('读取失败')</span>      <span class="token comment">// 抛出异常</span>      <span class="token comment">//    1. 阻止程序的执行</span>      <span class="token comment">//    2. 把错误消息打印到控制台</span>      <span class="token keyword">throw</span> err    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// return console.log('读取失败')</span>        <span class="token comment">// 抛出异常</span>        <span class="token comment">//    1. 阻止程序的执行</span>        <span class="token comment">//    2. 把错误消息打印到控制台</span>        <span class="token keyword">throw</span> err      <span class="token punctuation">&#125;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><img src="https://ftp.bmp.ovh/imgs/2020/12/cbb80eb5ca3ab209.png" loading="lazy"></p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>为了解决以上编码方式带来的问题（回调地狱嵌套），所以在EcmaScript 6中新增了一个 API —– Promise<br>       Promise的英文就是承诺、保证的意思（l promise you)</p><p>一个 Promise 必然处于以下几种状态之一：</p><blockquote><p> 待定（pending）: 初始状态，既没有被兑现，也没有被拒绝。<br>        已兑现（fulfilled）: 意味着操作成功完成。<br>        已拒绝（rejected）: 意味着操作失败。</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span> Promise构造函数<span class="token operator">:</span> <span class="token function">Promise</span> <span class="token punctuation">(</span><span class="token parameter">excutor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span> excutor函数<span class="token operator">:</span> <span class="token function">同步执行</span>  <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span> resolve函数<span class="token operator">:</span> 内部定义成功时我们调用的函数 <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span> reject函数<span class="token operator">:</span> 内部定义失败时我们调用的函数 <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then方法</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span> onResolved函数<span class="token operator">:</span> <span class="token function">成功的回调函数</span>  <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span> onRejected函数<span class="token operator">:</span> <span class="token function">失败的回调函数</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">catch方法</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">onRejected</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span> Promise<span class="token punctuation">.</span><span class="token function-variable function">resolve方法</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span> Promise<span class="token punctuation">.</span><span class="token function-variable function">reject方法</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">.</span> Promise<span class="token punctuation">.</span><span class="token function-variable function">all方法</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  </code></pre><h5 id="promiseApi-js"><a href="#promiseApi-js" class="headerlink" title="promiseApi.js"></a><code>promiseApi.js</code></h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//Promise是一个构造函数</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建Promise容器</span><span class="token comment">//Promise容器一旦创建,就开始执行里面的代码</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//失败了,承诺容器中的任务失败了</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//承诺容器中的任务成功了</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 输出结果:1243hello aaa */</span></code></pre><p>一个简单Promise实例</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//   resolve(data)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p1    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//p1就是那个承诺</span>        <span class="token comment">//当p1成功然后(then)做指定的操作</span>        <span class="token comment">//then 方法接收的 function 就是容器中的 resolve函数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出123</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h5 id="Promise基本语法"><a href="#Promise基本语法" class="headerlink" title="Promise基本语法"></a>Promise基本语法</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./data/a.txt"</span><span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//异步任务</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//失败调用</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//成功调用</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//p1就是那个new出来的Promise实例</span>    <span class="token comment">//当p1成功然后(then)做指定的操作</span>    <span class="token comment">//then 方法接收的 function 就是容器中的 resolve函数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里接收的 function 就是容器中的 reject函数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件读取失败"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此时来解决前面的回调地狱嵌套</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p1  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment">// 当 p1 读取成功的时候</span>    <span class="token comment">// 当前函数中 return 的结果就可以在后面的 then 中 function 接收到</span>    <span class="token comment">// 当你 return 123 后面就接收到 123</span>    <span class="token comment">//      return 'hello' 后面就接收到 'hello'</span>    <span class="token comment">//      没有 return 后面收到的就是 undefined</span>    <span class="token comment">// 上面那些 return 的数据没什么卵用</span>    <span class="token comment">// 真正有用的是：我们可以 return 一个 Promise 对象</span>    <span class="token comment">// 当 return 一个 Promise 对象的时候，后续的 then 中的 方法的第一个参数会作为 p2 的 resolve</span>    <span class="token comment">// </span>    <span class="token keyword">return</span> p2  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件失败了'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> p3  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h5 id="简易封装Promise版本的readFile"><a href="#简易封装Promise版本的readFile" class="headerlink" title="简易封装Promise版本的readFile"></a>简易封装Promise版本的readFile</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">'./data/c.txt'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h5 id="简易封装Promise版本的ajax方法"><a href="#简易封装Promise版本的ajax方法" class="headerlink" title="简易封装Promise版本的ajax方法"></a>简易封装Promise版本的ajax方法</h5><pre class="language-js" data-language="js"><code class="language-js">   <span class="token comment">//封装后的callback写法</span><span class="token comment">// pGet('http://127.0.0.1:3000/users/4', function (data) &#123;</span>   <span class="token comment">//   console.log(data)</span>   <span class="token comment">// &#125;)</span><span class="token comment">//封装后的Promise写法</span>   <span class="token function">pGet</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:3000/users/4'</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">pGet</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> oReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// 当请求加载成功之后要调用指定的函数</span>       oReq<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 我现在需要得到这里的 oReq.responseText</span>         callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>oReq<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>oReq<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>       oReq<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>       oReq<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>       oReq<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token comment">// 这个 get 是 callback 方式的 API</span>   <span class="token comment">// 可以使用 Promise 来解决这个问题</span>   <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">var</span> oReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 当请求加载成功之后要调用指定的函数</span>     oReq<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 我现在需要得到这里的 oReq.responseText</span>       <span class="token function">callback</span><span class="token punctuation">(</span>oReq<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     oReq<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>     oReq<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span></code></pre><h4 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章:"></a>推荐文章:</h4><p>阮一峰ES6</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-MongoDB</title>
      <link href="posts/dee15e19/"/>
      <url>posts/dee15e19/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>官网：[<a href="https://www.mongodb.com/]">https://www.mongodb.com/]</a><br>       手册：[<a href="https://docs.mongodb.com/manual/]">https://docs.mongodb.com/manual/]</a><br>       中文手册: [<a href="https://www.mongodb.org.cn/]">https://www.mongodb.org.cn/]</a><br>                        [<a href="https://docs.mongoing.com/]">https://docs.mongoing.com/]</a></p><p>传统的数据库都是结构性数据库，如MySQL、SQL Server、Oracle、Access等数据库。有行和列的概念，数据有关系并且数据不是散的。每个表中，都有明确的字段，每行记录，都有这些字段，不能有的行有，有的行没有。</p><p>MongoDB是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>打开下载链接：<br>[<a href="https://www.mongodb.com/try/download/community]">https://www.mongodb.com/try/download/community]</a><br>(如果是32位的，用这个地址:[<a href="http://dl.mongodb.org/dl/win32/x86_64]">http://dl.mongodb.org/dl/win32/x86_64]</a>)</p></li><li><p>选择对应的下载版本,下载msi程序</p></li><li><p>下载完毕后进行安装，默认或者自定义都可以（建议默认）</p></li><li><p>安装的过程中注意不要勾选‘Install MongoDB Compass’。MongoDB Compass是一个图形界面管理工具，不安装没有问题的，我们用<a href='https://robomongo.org/'>Robo 3T</a>这个图形界面管理工具。</p><p>具体安装步骤自行参考网上教程</p></li></ol><h4 id="详细使用"><a href="#详细使用" class="headerlink" title="详细使用"></a>详细使用</h4><p>第一步需要连接数据库，建议大家配置好环境变量。然后打开cmd，执行mongo命令</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>mongo</td><td>使用数据库</td></tr><tr><td>show dbs</td><td>列出所有数据库</td></tr><tr><td>show collections</td><td>查看全部集合(表)</td></tr><tr><td>use 数据库名字</td><td>使用和新建数据库</td></tr><tr><td>db</td><td>查看当前操作的数据库</td></tr><tr><td>db.数据库名称.insert()</td><td>插入数据</td></tr><tr><td>db.数据库库名称.find()</td><td>查找数据</td></tr><tr><td>db.数据库名称.update()</td><td>修改数据</td></tr><tr><td>db.数据库名称.remove()</td><td>删除数据</td></tr><tr><td>db.数据库名称.drop()</td><td>删除集合</td></tr><tr><td>db.dropDatabase()</td><td>删除数据库</td></tr></tbody></table><p><strong>关系比较符：</strong><br>   小于：$lt<br>   小于或等于：$lte<br>   大于：$gt<br>   大于或等于：$gte<br>   不等于：$ne<br>   属于：$in</p><p><strong>等于</strong> : 在MongoDB中什么字段等于什么值其实就是 “ : “ 来搞定 比如 “name” : “jack”</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"jack"</span></code></pre><h4 id="启动和关闭数据库"><a href="#启动和关闭数据库" class="headerlink" title="启动和关闭数据库"></a>启动和关闭数据库</h4><p>启动</p><pre class="language-shell" data-language="shell"><code class="language-shell"> <span class="token comment"># mongodb默认使用执行mongod命令所处盘符根目录下的/data/db 作为自己的数据存储目录</span> <span class="token comment"># 在第一次执行该命令之前先自己手动新建一个/data/db</span>mongod</code></pre><p>如果想要修改默认的数据存储目录，可以</p><pre class="language-shell" data-language="shell"><code class="language-shell">mongod --dbpath<span class="token operator">=</span>数据存储目录路径</code></pre><p>停止</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#在开启服务的控制台,直接ctrl+c即可停止</span><span class="token comment">#直接关闭开启服务的控制台</span><span class="token comment">#输入 exit 命令退出关闭</span></code></pre><h4 id="初识mongoose"><a href="#初识mongoose" class="headerlink" title="初识mongoose"></a>初识mongoose</h4><blockquote><p>Mongoose是在node.js异步环境下对mongodb进行便捷操作的对象模型工具</p></blockquote><p><strong>案例目录</strong></p><p><img src="https://s1.imagehub.cc/images/2020/12/25/mongoose.png" alt="mongoose.png" loading="lazy"></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 连接 MongoDB 数据库</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost/test'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useMongoClient<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mongoose<span class="token punctuation">.</span>Promise <span class="token operator">=</span> global<span class="token punctuation">.</span>Promise<span class="token punctuation">;</span><span class="token comment">// 创建一个模型</span><span class="token comment">// 就是在设计数据库</span><span class="token comment">// MongoDB 是动态的，非常灵活，只需要在代码中设计你的数据库就可以了</span><span class="token comment">// mongoose 这个包就可以让你的设计编写过程变的非常的简单</span><span class="token keyword">var</span> Cat <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Cat'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> String <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 实例化一个 Cat</span>  <span class="token keyword">var</span> kitty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'喵喵'</span> <span class="token operator">+</span> i <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 持久化保存 kitty 实例</span>  kitty<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'meow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://s1.imagehub.cc/images/2020/12/25/mongoose1-1.png" alt="mongoose1-1.png" loading="lazy"></p><h4 id="MongoDB数据库概念"><a href="#MongoDB数据库概念" class="headerlink" title="MongoDB数据库概念"></a>MongoDB数据库概念</h4><ul><li>可以有多个数据库</li><li>一个数据库中可以有多个集合（表)</li><li>一个集合中可以有多个文档（表记录)</li><li>文档结构很灵活，没有任何限制</li><li>MongoDB非常灵活，不需要像 MySQL一样先创建数据库、表、设计表<ul><li>需要插入数据的时候，只需要指定往哪个数据库的哪个集合操作就可以了</li><li>—切都由MongoDB自动完成建库建表</li></ul></li></ul><h5 id="MongoDB支持哪些数据类型"><a href="#MongoDB支持哪些数据类型" class="headerlink" title="MongoDB支持哪些数据类型"></a>MongoDB支持哪些数据类型</h5><pre class="language-js" data-language="js"><code class="language-js">StringIntegerDoubleBooleanObjectObject <span class="token constant">ID</span>ArraysMin<span class="token operator">/</span>Max KeysDatetimeCode （用于在文档中存储 JavaScript 代码）Regular Expression等</code></pre><h4 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h4><p><code>npm</code>安装Mongoose:</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">npm</span> <span class="token function">install</span> mongoose</code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token keyword">var</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token comment">// 1. 连接数据库</span><span class="token comment">// 指定连接的数据库不需要存在，当你插入第一条数据之后就会自动被创建出来</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost/itcast'</span><span class="token punctuation">)</span><span class="token comment">// 2. 设计文档结构（表结构）</span><span class="token comment">// 字段名称就是表结构中的属性名称</span><span class="token comment">// 约束的目的是为了保证数据的完整性，不要有脏数据</span><span class="token keyword">var</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  username<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> String<span class="token punctuation">,</span>    required<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 必须有</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  password<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> String<span class="token punctuation">,</span>    required<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  email<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> String  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 3. 将文档结构发布为模型</span><span class="token comment">//    mongoose.model 方法就是用来将一个架构发布为 model</span><span class="token comment">//    第一个参数：传入一个大写名词单数字符串用来表示你的数据库名称</span><span class="token comment">//                 mongoose 会自动将大写名词的字符串生成 小写复数 的集合名称</span><span class="token comment">//                 例如这里的 User 最终会变为 users 集合名称</span><span class="token comment">//    第二个参数：架构 Schema</span><span class="token comment">//   </span><span class="token comment">//    返回值：模型构造函数</span><span class="token keyword">var</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span><span class="token comment">// 4. 当我们有了模型构造函数之后，就可以使用这个构造函数对 users 集合中的数据为所欲为了（增删改查）</span><span class="token comment">// **********************</span><span class="token comment">// #region /新增数据</span><span class="token comment">// **********************</span><span class="token comment">// var admin = new User(&#123;</span><span class="token comment">//   username: 'zs',</span><span class="token comment">//   password: '123456',</span><span class="token comment">//   email: 'admin@admin.com'</span><span class="token comment">// &#125;)</span><span class="token comment">// admin.save(function (err, ret) &#123;</span><span class="token comment">//   if (err) &#123;</span><span class="token comment">//     console.log('保存失败')</span><span class="token comment">//   &#125; else &#123;</span><span class="token comment">//     console.log('保存成功')</span><span class="token comment">//     console.log(ret)</span><span class="token comment">//   &#125;</span><span class="token comment">// &#125;)</span><span class="token comment">// **********************</span><span class="token comment">// #endregion /新增数据</span><span class="token comment">// **********************</span><span class="token comment">// **********************</span><span class="token comment">// #region /查询数据</span><span class="token comment">// **********************</span><span class="token comment">// User.find(function (err, ret) &#123;</span><span class="token comment">//   if (err) &#123;</span><span class="token comment">//     console.log('查询失败')</span><span class="token comment">//   &#125; else &#123;</span><span class="token comment">//     console.log(ret)</span><span class="token comment">//   &#125;</span><span class="token comment">// &#125;)</span><span class="token comment">// User.find(&#123;</span><span class="token comment">//   username: 'zs'</span><span class="token comment">// &#125;, function (err, ret) &#123;</span><span class="token comment">//   if (err) &#123;</span><span class="token comment">//     console.log('查询失败')</span><span class="token comment">//   &#125; else &#123;</span><span class="token comment">//     console.log(ret)</span><span class="token comment">//   &#125;</span><span class="token comment">// &#125;)</span><span class="token comment">// User.findOne(&#123;</span><span class="token comment">//   username: 'zs'</span><span class="token comment">// &#125;, function (err, ret) &#123;</span><span class="token comment">//   if (err) &#123;</span><span class="token comment">//     console.log('查询失败')</span><span class="token comment">//   &#125; else &#123;</span><span class="token comment">//     console.log(ret)</span><span class="token comment">//   &#125;</span><span class="token comment">// &#125;)</span><span class="token comment">// **********************</span><span class="token comment">// #endregion /查询数据</span><span class="token comment">// **********************</span><span class="token comment">// **********************</span><span class="token comment">// #region /删除数据</span><span class="token comment">// **********************</span><span class="token comment">// User.remove(&#123;</span><span class="token comment">//   username: 'zs'</span><span class="token comment">// &#125;, function (err, ret) &#123;</span><span class="token comment">//   if (err) &#123;</span><span class="token comment">//     console.log('删除失败')</span><span class="token comment">//   &#125; else &#123;</span><span class="token comment">//     console.log('删除成功')</span><span class="token comment">//     console.log(ret)</span><span class="token comment">//   &#125;</span><span class="token comment">// &#125;)</span><span class="token comment">// **********************</span><span class="token comment">// #endregion /删除数据</span><span class="token comment">// **********************</span><span class="token comment">// **********************</span><span class="token comment">// #region /更新数据</span><span class="token comment">// **********************</span><span class="token comment">// User.findByIdAndUpdate('5a001b23d219eb00c8581184', &#123;</span><span class="token comment">//   password: '123'</span><span class="token comment">// &#125;, function (err, ret) &#123;</span><span class="token comment">//   if (err) &#123;</span><span class="token comment">//     console.log('更新失败')</span><span class="token comment">//   &#125; else &#123;</span><span class="token comment">//     console.log('更新成功')</span><span class="token comment">//   &#125;</span><span class="token comment">// &#125;)</span><span class="token comment">// **********************</span><span class="token comment">// #endregion /更新数据</span><span class="token comment">// **********************</span></code></pre><h4 id="mongoose官方文档"><a href="#mongoose官方文档" class="headerlink" title="mongoose官方文档"></a><a href="http://www.mongoosejs.net/">mongoose</a>官方文档</h4><p><a href="http://www.mongoosejs.net/docs/api.html#Model">http://www.mongoosejs.net/docs/api.html#Model</a></p><hr><h4 id="Node操作MySQL数据库"><a href="#Node操作MySQL数据库" class="headerlink" title="Node操作MySQL数据库"></a>Node操作MySQL数据库</h4><p>安装</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> i --save mysql</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1. 创建连接</span><span class="token keyword">var</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>  user<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  password<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  database<span class="token operator">:</span> <span class="token string">'students'</span> <span class="token comment">//数据库名</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 连接数据库 打开冰箱门</span>connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入一条数据显示效果</span><span class="token comment">//表字段--id username password</span><span class="token comment">// connection.query('INSERT INTO users VALUES(NULL, "admin", "123456")', function (error, results, fields) &#123;</span><span class="token comment">//   if (error) throw error;</span><span class="token comment">//   console.log('The solution is: ', results);</span><span class="token comment">// &#125;);</span><span class="token comment">// 3. 执行数据操作 把大象放到冰箱</span>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM `users`'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The solution is: '</span><span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. 关闭连接 关闭冰箱门</span>connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-studyDay11</title>
      <link href="posts/fcbe0fc1/"/>
      <url>posts/fcbe0fc1/</url>
      
        <content type="html"><![CDATA[<h4 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h4><h5 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h5><ul><li>请求方法</li><li>请求路径</li><li>请求处理函数</li></ul><h5 id="get"><a href="#get" class="headerlink" title="get:"></a>get:</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//当你以GET方法请求/的时候，执行对应的处理函数</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello express!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//express推荐写法res.send()</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h5 id="post"><a href="#post" class="headerlink" title="post:"></a>post:</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//当你以POST方法请求/的时候，执行对应的处理函数</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello express post!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//express推荐写法res.send()</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="静态服务"><a href="#静态服务" class="headerlink" title="静态服务"></a>静态服务</h4><p>目录</p><p><a href="https://img.kuibu.net/image/jUvM5"><img src="https://b2.kuibu.net/file/imgdisk/2020/12/24/express_node9075d568306f6988.png" alt="express_node9075d568306f6988.png" loading="lazy"></a></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment">//1.创建app</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>第一种<span class="token comment">//当以/public/开头的时候，去./poblic/目录查找对应的资源</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public/'</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'./public/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//可以直接访问127.0.01：3000/public/index.html</span>第二种<span class="token comment">//当省略第一个参数时，则可以通过省略/public的方式来访问</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'./public/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//可以直接访问127.0.01：3000/index.html</span><span class="token comment">//127.0.01：3000/public/index.html这个url则会报错</span>第三种<span class="token comment">//必须是/a/public/中的资源具体路径</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/abc/'</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'./public/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//127.0.01：3000/abc/index.html才能访问public的东西，可以理解为abc是public的别名</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'helloworld'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listien</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'running...'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="回调函数callback"><a href="#回调函数callback" class="headerlink" title="回调函数callback"></a>回调函数callback</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 函数也是一种数据类型</span><span class="token comment">// 参数</span><span class="token comment">// 返回值</span><span class="token comment">// 函数太灵活了，无所不能</span><span class="token comment">// 一般情况下，把函数作为参数的目的就是为了获取函数内部的异步操作结果</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// JavaScript 单线程、事件循环</span><span class="token comment">//例1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 不会等待</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//1 3 2 hello</span><span class="token comment">//不成立的情况</span><span class="token comment">//例2</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> ret <span class="token operator">=</span> x <span class="token operator">+</span> y    <span class="token keyword">return</span> ret  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//到这里执行就结束了，不会等到前面的定时器，所以直接就返回了默认值 undefined</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1 3 undefined 2</span><span class="token comment">//例3</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> ret<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ret <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1 3 undefined 2</span><span class="token comment">//成立情况</span><span class="token keyword">var</span> ret<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里不一定要2000ms,只要保证在add()调用之后执行就可</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 注意：凡是需要得到一个函数内部异步操作的结果</span>   setTimeout   readFile   writeFile   ajax<span class="token comment">// 这种情况必须通过：回调函数</span></code></pre><p><strong>回调函数</strong>🌰</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//callback就是回调函数</span>  <span class="token comment">//var x = 10;</span>  <span class="token comment">//var y = 20;</span>  <span class="token comment">//var callback = function(ret)&#123;console.log(ret)&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> ret <span class="token operator">=</span> x <span class="token operator">+</span> y    <span class="token function">callback</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//1,30</span></code></pre><h4 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h4><p>npm5以前，没有package-lock.json这个文件<br>       npm5以后才加入这个文件的</p><p>当安装包的时候，npm都会生成或者更新package-lock.json这个文件<br>•    npm5以后的版本安装包不需要加–save参数，它会自动保存依赖信息<br>•    当安装包的时候，会自动创建或者更新package-lock.json这个文件<br>•    package-lock.json这个文件会自动保存node_modules中所包含的信息(版本，下载地址)<br>•    这样的话重新npm install的时候速度就可以提升</p><p>•    从文件来看，有一个lock称之为锁<br>•    这个lock是用来锁定版本的</p><p>•    如果项目依赖了1.1.1版本<br>•    在没有package-lock.json文件的情况下，重新npm install其实会下载最新的版本，而不是 1.1.1<br>•    我们的目的是希望可以锁住1.1.1这个版本<br>•    所以这个package-lock.json文件的另一个作用是锁定版本，防止自动升级新版</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-studyDay10</title>
      <link href="posts/8bb93f57/"/>
      <url>posts/8bb93f57/</url>
      
        <content type="html"><![CDATA[<p>一、简介</p><p>Express 是一种保持最低程度规模的灵活Node.js Web应用程序框架，为Web和移动应用程序提供一组强大的功能。Express框架是后台的Node框架。</p><p>二、性能</p><p>Express 提供精简的基本Web应用程序功能，而不会隐藏您了解和青睐的Node.js功能。Express不对Node.js已有的特性进行二次抽象，我们只是在它之上扩展了Web应用所需的功能。丰富的HTTP工具以及来自Content框架的中间件随取随用，创建强健、友好的API变得快速又简单。</p><p>三、起步教程</p><h6 id="配置package-json，使用npm安装依赖"><a href="#配置package-json，使用npm安装依赖" class="headerlink" title="配置package.json，使用npm安装依赖"></a>配置package.json，使用npm安装依赖</h6><ul><li>1、新建一个项目目录，在项目目录下，打开cmd,快速初始化一个项目依赖文件package.json</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm init -y</code></pre><ul><li>2、在项目目录中打开cmd安装Express</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install express --save</code></pre><p>用–save安装的模块会添加到package.json文件中的dependencies里，以后运行项目目录中的npm i将自动安装依赖项列表中的模块。</p><ul><li>3、在项目目录下创建app.js文件，文件中写入以下代码</li></ul><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Example app listening on port 3000!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><ul><li>4、在项目目录中打开cmd，运行以下命令</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">node app.js</code></pre><p>此时在浏览器中访问<code>http://localhost:3000</code>就能看到服务器成功开启。而访问其他的路径则会以404 Not Found响应。</p><h6 id="使用Express应用程序生成器"><a href="#使用Express应用程序生成器" class="headerlink" title="使用Express应用程序生成器"></a>使用Express应用程序生成器</h6><ul><li>1、首先打开cmd安装一下express</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm i express-generator -g</code></pre><ul><li>2、使用以下命令创建我们的第一个Express应用程序</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">express --view&#x3D;pug Express-demo</code></pre><ul><li>3、根据提示依次执行以下命令，进入项目目录中并且安装依赖</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">cd Express-demo</code></pre><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install</code></pre><ul><li>4、启动程序<br>在MasOS或Linux上，采用以下命令运行此应用程序</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">$ DEBUG&#x3D;Expree-demo:* npm start</code></pre><p>在Windows上，使用以下命令：（|符号是<code>或者</code>的意思）</p><pre class="language-cmd" data-language="cmd"><code class="language-cmd">set DEBUG&#x3D;Expree-demo:* &amp; npm start | npm start&#123;2个命令可选&#125;</code></pre><p>然后在浏览器中输入 <a href="http://localhost:3000/">http://localhost:3000/</a> 访问此应用程序。</p><h6 id="Express初次感知"><a href="#Express初次感知" class="headerlink" title="Express初次感知"></a>Express初次感知</h6><p><code>app.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 0. 安装</span><span class="token comment">// 1. 引包</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment">// 2. 创建你服务器应用程序</span><span class="token comment">//    也就是原来的 http.createServer</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 在 Express 中开放资源就是一个 API 的事儿</span><span class="token comment">// 公开指定目录</span><span class="token comment">// 只要这样做了，你就可以直接通过 /public/xx 的方式访问 public 目录中的所有资源了</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public/'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'./public/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 访问http://localhost:3000/public/js/main.js看看</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/static/'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'./static/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/node_modules/'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'./node_modules/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 模板引擎，在 Express 也是一个 API 的事儿</span><span class="token comment">// 得到路径</span><span class="token comment">// 一个一个的判断</span><span class="token comment">// 以前的代码很丑</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 在 Express 中可以直接 req.query 来获取查询字符串参数</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你好，我是 Express!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/pinglun'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// req.query</span>  <span class="token comment">// 在 Express 中使用模板引擎有更好的方式：res.render('文件名， &#123;模板对象&#125;)</span>  <span class="token comment">// 可以自己尝试去看 art-template 官方文档：如何让 art-template 结合 Express 来使用</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 当服务器收到 get 请求 / 的时候，执行回调处理函数</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;!DOCTYPE html>&lt;html lang="en">  &lt;head>    &lt;meta charset="UTF-8" />    &lt;title>Document&lt;/title>  &lt;/head>&lt;body>  &lt;h1>hello Express！你好&lt;/h1>&lt;/body>&lt;/html></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 相当于 server.listen</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app is running at port 3000.'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.longdoer.com/2020/12/24/express-demob0d5766135f31de4.png" alt="express-demob0d5766135f31de4.png" loading="lazy"></p><h6 id="文件操作路径和模块标识路径问题"><a href="#文件操作路径和模块标识路径问题" class="headerlink" title="文件操作路径和模块标识路径问题"></a>文件操作路径和模块标识路径问题</h6><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment">// 我们使用的所有文件操作的 API 都是异步的</span><span class="token comment">// 就像你的 ajax 请求一样</span><span class="token comment">// 文件操作中的相对路径可以省略 ./</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'data/a.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取失败'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>在模块加载中，相对路径中的<code>./</code>不能省略</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'data/foo.js'</span><span class="token punctuation">)</span><span class="token comment">//Error: Cannot find module 'data/foo.js'</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./data/foo.js'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token comment">//hello</span><span class="token comment">//hello Node!</span></code></pre><p>在文件操作的相对路径中</p><blockquote><p><code>./data/a.txt </code>  相对于当前目录<br>      <code> data/a.txt</code>      相对于当前目录<br>       <code>/data/a.txt </code>   绝对路径，当前文件模块所处磁盘根目录<br>      <code> C:/xx/xx...</code>    绝对路径</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//输出 hello Node!</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取失败'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 这里如果忽略了 . 则也是磁盘根目录</span><span class="token comment">//require('/data/foo.js')</span><span class="token comment">//Error: Cannot find module 'data/foo.js'</span></code></pre><p><img src="https://cdn.longdoer.com/2020/12/24/node_roadMapTipsc7367aaa6dfdd8e3.png" alt="node_roadMapTipsc7367aaa6dfdd8e3.png" loading="lazy"></p><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><p>nodemon是一种工具，可以自动检测到目录中的文件更改时通过重新启动应用程序来调试基于node.js的应用程序。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><pre class="language-cpp" data-language="cpp"><code class="language-cpp">npm install <span class="token operator">-</span>g nodemon<span class="token comment">//或</span>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev nodemon</code></pre><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><pre class="language-cpp" data-language="cpp"><code class="language-cpp">nodemon   <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span>js <span class="token comment">// 启动node服务</span></code></pre><pre class="language-cpp" data-language="cpp"><code class="language-cpp">nodemon <span class="token punctuation">.</span><span class="token operator">/</span>main<span class="token punctuation">.</span>js localhost <span class="token number">6677</span> <span class="token comment">// 在本地6677端口启动node服务</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token string">"start"</span><span class="token builtin class-name">:</span> <span class="token string">"ts-node -r tsconfig-paths/register nodemon src/main.ts"</span>,</code></pre><h5 id="延迟重启"><a href="#延迟重启" class="headerlink" title="延迟重启"></a>延迟重启</h5><pre class="language-css" data-language="css"><code class="language-css">nodemon -delay10 main.jsnodemon --delay 2.5 server.jsnodemon --delay 2500ms server.js</code></pre><p>这个就类似于js函数中的函数节流,只在最后一次更改的文件往后延迟重启.避免了短时间多次重启的局面.</p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>nodemon支持本地和全局配置文件。这些通常是命名的<code>nodemon.json</code>，可以位于当前工作目录或主目录中。可以使用该<code>--config &lt;file&gt;</code>选项指定备用本地配置文件。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"verbose"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"ignore"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*.test.js"</span><span class="token punctuation">,</span> <span class="token string">"fixtures/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"execMap"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"rb"</span><span class="token operator">:</span> <span class="token string">"ruby"</span><span class="token punctuation">,</span>    <span class="token property">"pde"</span><span class="token operator">:</span> <span class="token string">"processing --sketch=&#123;&#123;pwd&#125;&#125; --run"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Doc"><a href="#Doc" class="headerlink" title="Doc"></a>Doc</h5><ul><li><a href="https://links.jianshu.com/go?to=https://www.npmjs.com/package/nodemon">nodemon</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-studyDay9</title>
      <link href="posts/636457e/"/>
      <url>posts/636457e/</url>
      
        <content type="html"><![CDATA[<h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><blockquote><p>node package manager</p></blockquote><h3 id="Package-json"><a href="#Package-json" class="headerlink" title="Package.json"></a>Package.json</h3><p>建议每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样)，给人踏实的感觉</p><p>这个文件可以通过<code>npm init</code> 的方式来自动初始化出来。</p><p>对于咱们目前来讲，最有用的是<code>package.json</code>文件中的[dependencies]选项，可以用来帮我们保存第三方包的依赖信息。</p><p>如果你的<code>node_modules</code>删除了也不用担心，我们只需要:<code>npm install</code>就会自动把(package .json)中的<code>dependencies </code>中所有的依赖项都下载回来。</p><p>✏️建议执行[npm install包名的的时候都加上<code>--save</code>这个选项，目的是用来保存依赖项信息</p><p>快速创建:</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> init -y</code></pre><p>使用一下命令能安装所有依赖</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span></code></pre><p>package.json介绍官网：[<a href="http://docs.npmjs.com/files/package.json]">http://docs.npmjs.com/files/package.json]</a></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="1-首先在项目中打开终端输入指令npm-init或者npm-init-y-4"><a href="#1-首先在项目中打开终端输入指令npm-init或者npm-init-y-4" class="headerlink" title="1.首先在项目中打开终端输入指令npm init或者npm init -y      4"></a>1.首先在项目中打开终端输入指令<code>npm init</code>或者<code>npm init -y </code>     4</h4><p> -y 的意思是默认全部同意</p><p>作用是在初始化的时候帮助你生成一个package. json的文件,永远不要删除这个文件</p><p><code>注意事项</code>:项目运行中不要删除<code>package.json</code>这个文件，这个文件会记录当前项目的各种依赖</p><h4 id="2-安装包"><a href="#2-安装包" class="headerlink" title="2.安装包"></a>2.安装包</h4><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span>  包名字  <span class="token punctuation">(</span>可以@加版本<span class="token punctuation">)</span> -参数<span class="token punctuation">(</span>S, D, g<span class="token punctuation">)</span> </code></pre><p>简写:   npm   i   包名    -参数</p><p>安装后会在项目目录中生产node modules文件夹</p><p>参数:</p><ul><li><p>-S –save 安装在当前项目下，生产环境(不仅仅在开发过程中需要，上线之 后也需要)</p></li><li><p>-D –save–dev安装在当前项目下，开发环境(写代码时候用，上线不用)</p></li><li><p>-g   安装在全局，般是在node的安装目录</p></li></ul><h4 id="3-npm换源"><a href="#3-npm换源" class="headerlink" title="3.npm换源"></a>3.npm换源</h4><p>npm的服务器在国外，可能会出现网络波动问题可以将他换源成淘宝镜像npm</p><p>换淘宝镜像指令: npm config set registry  https:// registry. npm. taobao. org</p><p>换回原来的服务器: npm config set registry <a href="https://registry.npmjs.org/(%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0publish%E5%B0%B1%E8%A6%81%E6%8D%A2%E5%9B%9E%E5%8E%BB)">https://registry.npmjs.org/(需要用到publish就要换回去)</a></p><h4 id="4-卸载"><a href="#4-卸载" class="headerlink" title="4.卸载:"></a>4.卸载:</h4><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> uninstall 包名- 参数<span class="token function">npm</span>   un 包名-参数</code></pre><h4 id="5-更新"><a href="#5-更新" class="headerlink" title="5.更新:"></a>5.更新:</h4><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> update 包名</code></pre><h4 id="6-查看项目的包列表"><a href="#6-查看项目的包列表" class="headerlink" title="6.查看项目的包列表"></a>6.查看项目的包列表</h4><pre class="language-sh" data-language="sh"><code class="language-sh">npm list</code></pre><h4 id="7-查看全局包列表"><a href="#7-查看全局包列表" class="headerlink" title="7.查看全局包列表"></a>7.查看全局包列表</h4><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> list -g</code></pre><h3 id="常用NPM命令扩展"><a href="#常用NPM命令扩展" class="headerlink" title="常用NPM命令扩展"></a>常用NPM命令扩展</h3><pre class="language-cmd" data-language="cmd"><code class="language-cmd">&#x2F;&#x2F; 安装淘宝镜像 解决被墙,网速卡问题npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm init | npm init -y创建项目依赖文件package.json</code></pre><pre class="language-package.json" data-language="package.json"><code class="language-package.json">&quot;dependencies&quot;: &#123;    &quot;gulp&quot;: &quot;^3.9.1&quot;&#125;&#x2F;&#x2F; package.json中安装的依赖包前面的符号代表的意思&#x2F;&#x2F; ~匹配最近的小版本依赖包，比如~1.1.2会匹配所有1.1.x版本，但不包括1.2.0&#x2F;&#x2F; ^匹配最新的大版本依赖包，比如^3.4.5会匹配所有3.x.x的包，包括3.5.0，但不包括4.0.0&#x2F;&#x2F; *安装最新版本的依赖包</code></pre><ul><li>1.安装模块</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install   &#x2F;&#x2F; 项目中存在package.json文件并且写入了依赖配置时，会下载所有的依赖包</code></pre><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install 包名   &#x2F;&#x2F; 本地安装依赖包</code></pre><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install 包名 -g   &#x2F;&#x2F; 全局安装依赖包</code></pre><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install 包名@版本号   &#x2F;&#x2F; 安装指定版本</code></pre><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install 包名 --save&#x2F;-S   &#x2F;&#x2F; 安装包信息将加入到dependencies(生产阶段的依赖)</code></pre><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm install 包名 --save-dev&#x2F;-D   &#x2F;&#x2F; 安装包信息将加入到devDependencies(开发阶段的依赖)</code></pre><ul><li>2.卸载模块</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm uninstall [包名|包名@版本] [-S|--save|-D|--save-dev]</code></pre><p>删除的同时也会把依赖信息也去除</p><p>npm un -S 包名</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> uninstall --save包名 </code></pre><ul><li>3.更新模块</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm update [-g] [包名]npm  -g  update  包名  #  全局更新npm  update  包名  #  本地更新</code></pre><ul><li>4.清理本地缓存</li></ul><pre class="language-cmd" data-language="cmd"><code class="language-cmd">npm cache clean</code></pre><ul><li>5.查看指定命令的使用帮助</li></ul><p>npm 命令 –help</p><pre class="language-shell" data-language="shell"><code class="language-shell">//例如我忘记了uninstall 命令的简写了，这个时候，可以输入<span class="token function">npm</span> uninstall --help  来查看使用帮助</code></pre><h4 id="npm命令博客推荐"><a href="#npm命令博客推荐" class="headerlink" title="npm命令博客推荐"></a>npm命令博客推荐</h4><p><a href="https://www.cnblogs.com/itlkNote/p/6830682.html">https://www.cnblogs.com/itlkNote/p/6830682.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-studyDay8</title>
      <link href="posts/713175e8/"/>
      <url>posts/713175e8/</url>
      
        <content type="html"><![CDATA[<p><strong>所需代码文件:</strong></p><p><code>foo.js</code></p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo 文件模块被加载了'</span><span class="token punctuation">)</span></code></pre><p><code>main.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./foo'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 如果是非路径形式的模块标识</p><p><code>main.js</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'foo.js'</span><span class="token punctuation">)</span><span class="token comment">//报错</span></code></pre><p>这时,Node不会把它(foo.js)当做路径,可能会把它认作核心模块或者第三方模块</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token operator">/</span><span class="token operator">/</span> 路径形式的模块：<span class="token operator">/</span><span class="token operator">/</span>  <span class="token punctuation">.</span><span class="token operator">/</span> 当前目录，不可省略<span class="token operator">/</span><span class="token operator">/</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span> 上一级目录，不可省略<span class="token operator">/</span><span class="token operator">/</span>  <span class="token operator">/</span>xxx 几乎不用<span class="token operator">/</span><span class="token operator">/</span>  d<span class="token punctuation">:</span><span class="token operator">/</span>a<span class="token operator">/</span>foo<span class="token punctuation">.</span>js 几乎不用<span class="token operator">/</span><span class="token operator">/</span>  首位的 <span class="token operator">/</span> 在这里表示的是当前文件模块所属磁盘根路径<span class="token operator">/</span><span class="token operator">/</span>  <span class="token punctuation">.</span>js 后缀名可以省略<span class="token operator">/</span><span class="token operator">/</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./foo.js'</span><span class="token punctuation">)</span></code></pre><p>核心模块的本质也是文件<br>       核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//例:</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span></code></pre><h4 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a><strong>第三方模块</strong></h4><p><strong>文件目录:</strong></p><pre class="language-none"><code class="language-none">├── demoProjject│ ├── node_modules(art-template下载依赖包)│ ├── main.js│ ├── foo.js</code></pre><p><font style="color:skyblue;">凡是第三方模块都必须通过 npm 来下载</font><br>使用的时候就可以通过 require(‘包名’) 的方式来进行加载才可以使用<br>不可能有任何一个第三方包和核心模块的名字是一样的<br>既不是核心模块、也不是路径形式的模块<br>先找到当前文件所处目录中的 <code>node_modules</code> 目录</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">node_modules<span class="token operator">/</span>art<span class="token operator">-</span>templatenode_modules<span class="token operator">/</span>art<span class="token operator">-</span>template<span class="token operator">/</span>package<span class="token punctuation">.</span>json 文件node_modules<span class="token operator">/</span>art<span class="token operator">-</span>template<span class="token operator">/</span>package<span class="token punctuation">.</span>json 文件中的 main 属性  </code></pre><p>​    main 属性中就记录了 art-template 的入口模块<br>           然后加载使用这个第三方包<br>           实际上最终加载的还是文件</p><hr><p>  如果 package.json 文件不存在或者 main 指定的入口模块是也没有<br>         则 node 会自动找该目录下的 index.js<br>         <font style="color:tomato;">也就是说 index.js 会作为一个默认备选项</font></p><p>举个🌰:</p><p>我们首先在 <code>node_modules 目录中建立一个名为</code>a`的文件夹/目录</p><p>在目录a下建立<code>foo.js</code> <code>index.js</code> <code>package.json</code> <code>main.js</code>4个文件</p><p><code>foo.js</code></p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'目录a中的foo 文件模块被加载了'</span><span class="token punctuation">)</span></code></pre><p><code>package.json</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span><span class="token comment">//这里先不写</span><span class="token punctuation">&#125;</span></code></pre><p><code>index.js</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'目录a中的index.js文件模块被加载了'</span><span class="token punctuation">)</span></code></pre><p><code>main.js</code>(node运行文件)</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span></code></pre><p><strong>场景1</strong></p><p><code>package.json</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span><span class="token comment">//这里先不写</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//输出</span>目录a中的index<span class="token punctuation">.</span>js文件模块被加载了</code></pre><p><strong>场景2</strong></p><p><code>package.json</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span><span class="token string">"main"</span><span class="token operator">:</span><span class="token string">"foo.js"</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//输出</span>目录a中的foo 文件模块被加载了</code></pre><p><strong>场景3</strong></p><p><code>package.json</code>直接删掉,不存在了</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//输出</span>目录a中的index<span class="token punctuation">.</span>js文件模块被加载了</code></pre><p>如果以上所有任何一个条件都不成立，则会进入上一级目录中的<code>node_modules</code>目录查找</p><p>如果上一级还没有，则继续往上上一级查找<br>       如果直到当前磁盘根目录还找不到，最后报错：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">can not find module xxx</code></pre><p>⚠️我们一个项目有且只有一个 <code>node_modules</code>，放在项目根目录中，这样的话项目中所有的子目录中的代码都可以加载到第三方包<br>       不会出现有多个 <code>node_modules</code></p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token operator">/</span><span class="token operator">/</span> 模块查找机制<span class="token operator">/</span><span class="token operator">/</span>    优先从缓存加载<span class="token operator">/</span><span class="token operator">/</span>    核心模块<span class="token operator">/</span><span class="token operator">/</span>    路径形式的文件模块<span class="token operator">/</span><span class="token operator">/</span>    第三方模块<span class="token operator">/</span><span class="token operator">/</span>      node_modules<span class="token operator">/</span>art<span class="token operator">-</span>template<span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span>      node_modules<span class="token operator">/</span>art<span class="token operator">-</span>template<span class="token operator">/</span>package<span class="token punctuation">.</span>json<span class="token operator">/</span><span class="token operator">/</span>      node_modules<span class="token operator">/</span>art<span class="token operator">-</span>template<span class="token operator">/</span>package<span class="token punctuation">.</span>json main<span class="token operator">/</span><span class="token operator">/</span>      <span class="token keyword">index</span><span class="token punctuation">.</span>js 备选项<span class="token operator">/</span><span class="token operator">/</span>      进入上一级目录找 node_modules<span class="token operator">/</span><span class="token operator">/</span>      按照这个规则依次往上找，直到磁盘根目录还找不到，最后报错：Can not find moudle xxx<span class="token operator">/</span><span class="token operator">/</span>    一个项目有且仅有一个 node_modules 而且是存放到项目的根目录</code></pre><p><a href="http://www.ipicbed.com/image/sp3sg"><img src="https://cdn.longdoer.com/2020/12/24/art-templatec640e0e08e913a29.png" alt="art-templatec640e0e08e913a29.md.png" loading="lazy"></a></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-studyDay7</title>
      <link href="posts/e18e6879/"/>
      <url>posts/e18e6879/</url>
      
        <content type="html"><![CDATA[<h4 id="exports和module-expots的区别"><a href="#exports和module-expots的区别" class="headerlink" title="exports和module-expots的区别"></a>exports和module-expots的区别</h4><p>在 Node 中，每个模块内部都有一个自己的 module 对象<br>       该 module 对象中，有一个成员叫：<code>exports</code> 也是一个对象<br>       也就是说如果你需要对外导出成员，只需要把导出的成员挂载到 <code>module.exports </code>中</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// var module = &#123;</span><span class="token comment">//   exports: &#123;</span><span class="token comment">//     ....</span><span class="token comment">//   &#125;</span><span class="token comment">// &#125;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span><span class="token comment">// 谁来 require 我，谁就得到 module.exports</span><span class="token comment">// 默认在代码的最后有一句：</span><span class="token comment">// 一定要记住，最后 return 的是 module.exports</span><span class="token comment">// 不是 exports</span><span class="token comment">// 所以你给 exports 重新赋值不管用，</span><span class="token comment">// return module.exports</span></code></pre><p>我们发现，每次导出接口成员的时候都通过<code> module.exports.xxx = xxx</code> 的方式很麻烦，点儿的太多了<br>所以，Node 为了简化你的操作，专门提供了一个变量：exports 等于 <code>module.exports</code></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 两者一致，那就说明，我可以使用任意一方来导出内部成员</span><span class="token comment">// console.log(exports === module.exports)//=>true</span></code></pre><p>那么上面代码等价于</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span></code></pre><p>当一个模块需要导出单个成员的时候<br>       直接给 exports 赋值是不管用的</p><pre class="language-js" data-language="js"><code class="language-js">exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">456</span><span class="token comment">//导出结果&#123;a:123,b:456&#125;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//给 exports 赋值会断开和 module.exports 之间的引用</span><span class="token comment">//同理，给 module.exports 重新赋值也会断开</span><span class="token comment">//这里导致 exports !== module.exports</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  foo<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">&#125;</span><span class="token comment">// 但是这里又重新建立两者的引用关系</span>exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exportsexports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token comment">//这时候输出 &#123;foo: bar&#125;</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token comment">// &#123;foo: bar, a: 123&#125;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span><span class="token comment">// exports !== module.exports</span><span class="token comment">// 最终 return 的是 module.exports</span><span class="token comment">// 所以无论你 exports 中的成员是什么都没用</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token number">456</span><span class="token punctuation">&#125;</span><span class="token comment">// &#123;foo: 'haha', a: 123&#125;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'haha'</span><span class="token comment">// 没关系，混淆你的</span>exports<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">456</span><span class="token comment">// 重新建立了和 module.exports 之间的引用关系了</span>exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports<span class="token comment">// 由于在上面建立了引用关系，所以这里是生效的</span><span class="token comment">// &#123;foo: 'haha', a: 789&#125;</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">789</span><span class="token comment">// 前面再牛逼，在这里都全部推翻了，重新赋值</span><span class="token comment">// 最终得到的是 Function</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 真正去使用的时候：</span><span class="token comment">//    导出多个成员：exports.xxx = xxx</span><span class="token comment">//    导出多个成员也可以：module.exports = &#123;</span><span class="token comment">//                        &#125;</span><span class="token comment">//    导出单个成员：module.exports</span></code></pre><p> 如果你实在分不清楚 exports 和 module.exports<br>        你可以选择忘记 exports<br>        而只使用 module.exports 也没问题</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>xxx <span class="token operator">=</span> xxxmoudle<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="node优先从缓存加载"><a href="#node优先从缓存加载" class="headerlink" title="node优先从缓存加载"></a>node优先从缓存加载</h4><p>代码🌰</p><p><code>main.js</code></p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span> 优先从缓存加载<span class="token operator">/</span><span class="token operator">/</span> 由于 在 a 中已经加载过 b 了<span class="token operator">/</span><span class="token operator">/</span> 所以这里不会重复加载<span class="token operator">/</span><span class="token operator">/</span> 可以拿到其中的接口对象，但是不会重复执行里面的代码<span class="token operator">/</span><span class="token operator">/</span> 这样做的目的是为了避免重复加载，提高模块加载效率var fn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span></code></pre><p><code>a.js</code></p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a.js 被加载了'</span><span class="token punctuation">)</span>var fn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span></code></pre><p><code>b.js</code></p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b.js 被加载了'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello bbb'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>输出:</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">a<span class="token punctuation">.</span>js 被加载了b<span class="token punctuation">.</span>js 被加载了<span class="token punctuation">[</span>Function <span class="token punctuation">(</span>anonymous<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Function <span class="token punctuation">(</span>anonymous<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-studyDay6</title>
      <link href="posts/968958ef/"/>
      <url>posts/968958ef/</url>
      
        <content type="html"><![CDATA[<h4 id="客户端渲染流程简图"><a href="#客户端渲染流程简图" class="headerlink" title="客户端渲染流程简图"></a>客户端渲染流程简图</h4><p><img src="https://cdn.longdoer.com/2020/12/23/ea0e1906df9035d409ec6d1d8ec642a11b207a334f87a2f5.png" alt="ea0e1906df9035d409ec6d1d8ec642a11b207a334f87a2f5.png" loading="lazy"></p><h4 id="服务端渲染流程简图"><a href="#服务端渲染流程简图" class="headerlink" title="服务端渲染流程简图"></a>服务端渲染流程简图</h4><p><img src="https://cdn.longdoer.com/2020/12/23/eb59338b6e307e4d557c15b87248ac01f8cd08c4426dcb53.png" alt="eb59338b6e307e4d557c15b87248ac01f8cd08c4426dcb53.png" loading="lazy"></p><h3 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h3><h4 id="Node-js-的模块"><a href="#Node-js-的模块" class="headerlink" title="Node.js 的模块"></a>Node.js 的模块</h4><p>JavaScript 做为一门为网页添加交互功能的简单脚本语言问世，在诞生时并不包含模块系统，随着 JavaScript 解决问题越来越复杂，把所有代码写在一个文件内，用 function 区分功能单元已经不能支撑复杂应用开发了，ES6 带来了大部分高级语言都有的 class 和 module，方便开发者组织代码</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">'lodash'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Fun</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Fun<span class="token punctuation">;</span></code></pre><p>上面三行代码展示了一个模块系统最重要的两个要素 import 和 export</p><ol><li><code>export</code>用于规定模块的对外接口</li><li><code>import</code>用于输入其他模块提供的功能</li></ol><p>而在 ES6 之前，社区出现了很多模块加载方案，最主要的有 CommonJS 和 AMD 两种，Node.js 诞生早于 ES6，模块系统使用的是类似 CommonJS 的实现，遵从几个原则</p><ol><li>一个文件是一个模块，文件内的变量作用域都在模块内</li><li>使用 <code>module.exports</code> 对象导出模块对外接口</li><li>使用 <code>require</code> 引入其它模块</li></ol><pre class="language-js" data-language="js"><code class="language-js">circle<span class="token punctuation">.</span>js<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token constant">PI</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Math<span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token constant">PI</span> <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>上面代码就实现了 Node.js 的一个模块，模块没有依赖其它模块，导出了方法 <code>area</code> 计算圆的面积</p><pre class="language-js" data-language="js"><code class="language-js">test<span class="token punctuation">.</span>js<span class="token keyword">const</span> area <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./circle.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">半径为 4 的圆的面积是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>模块依赖了 circle.js，使用其对外暴露的 area 方法，计算圆的面积</p><h4 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h4><p>模块对外暴露接口使用 module.exports，常见的有两种用法：为其添加属性或赋值到新对象</p><pre class="language-js" data-language="js"><code class="language-js">test<span class="token punctuation">.</span>js<span class="token comment">// 添加属性</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>prop1 <span class="token operator">=</span> xxx<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>funA <span class="token operator">=</span> xxx<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>funB <span class="token operator">=</span> xxx<span class="token punctuation">;</span><span class="token comment">// 赋值到全新对象</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  prop1<span class="token punctuation">,</span>    funA<span class="token punctuation">,</span>  funB<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>两种写法是等价的，使用时候没区别</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> mod <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./test.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span>prop1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span><span class="token function">funA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还有另外一种直接使用 <code>exports</code> 对象的方法，但是只能对其添加属性，不能赋值到新对象，后面会介绍原因</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 正确的写法：添加属性</span>exports<span class="token punctuation">.</span>prop1 <span class="token operator">=</span> xxx<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>funA <span class="token operator">=</span> xxx<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>funB <span class="token operator">=</span> xxx<span class="token punctuation">;</span><span class="token comment">// 赋值到全新对象</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  prop1<span class="token punctuation">,</span>    funA<span class="token punctuation">,</span>  funB<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="require-‘id’"><a href="#require-‘id’" class="headerlink" title="require(‘id’)"></a>require(‘id’)</h4><h5 id="模块类型"><a href="#模块类型" class="headerlink" title="模块类型"></a>模块类型</h5><p>require 用法比较简单，id 支持模块名和文件路径两种类型</p><h5 id="模块名"><a href="#模块名" class="headerlink" title="模块名"></a>模块名</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>示例中的 fs、lodash 都是模块名，fs 是 Node.js 内置的核心模块，lodash 是通过 npm 安装到 <code>node_modules</code> 下的第三方模块，如果出现重名，优先使用系统内置模块</p><p>因为一个项目内可能会包含多个 node_modules 文件夹（Node.js 比较失败的设计），第三方模块查找过程会遵循就近原则逐层上溯（可以在程序中打印 <code>module.paths</code> 查看具体查找路径），直到根据 <code>NODE_PATH</code> 环境变量查找到文件系统根目录，具体过程可以参考<a href="https://nodejs.org/docs/latest-v12.x/api/modules.html#modules_loading_from_node_modules_folders">官方文档</a></p><p>此外，Node.js 还会搜索以下的全局目录列表：</p><ul><li>$HOME/.node_modules</li><li> $HOME/.node_libraries</li><li> $PREFIX/lib/node</li></ul><p>其中 <code>$HOME</code> 是用户的主目录， <code>$PREFIX</code> 是 Node.js 里配置的 <code>node_prefix</code>。强烈建议将所有的依赖放在本地的 node_modules 目录，这样将会更快地加载，且更可靠</p><h5 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h5><p>模块还可以可以使用文件路径加载，这是项目内自定义模块的通用加载方式，路径可以省略拓展名，会按照 .js、.json、.node 顺序尝试</p><ul><li>以 <code>&#39;/&#39;</code> 为前缀的模块是文件的绝对路径，按照系统路径查找模块</li><li>以 <code>&#39;./&#39;</code> 为前缀的模块是相对于当前调用 require 方法的文件，不受后续模块在哪里被使用到影响</li></ul><h4 id="单次加载-amp-循环依赖"><a href="#单次加载-amp-循环依赖" class="headerlink" title="单次加载 &amp; 循环依赖"></a>单次加载 &amp; 循环依赖</h4><p>模块在第一次加载后会被缓存到 <code>Module._cache</code> ，如果每次调用 <code>require(&#39;foo&#39;)</code> 都解析到同一文件，则返回相同的对象，同时多次调用 <code>require(foo)</code> 不会导致模块的代码被执行多次。 Node.js 根据实际的文件名缓存模块，因此从不同层级目录引用相同模块不会重复加载。</p><p>理解的模块单次加载机制方便我们理解模块循环依赖后的现象</p><pre class="language-js" data-language="js"><code class="language-js">a<span class="token punctuation">.</span>jsconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a 开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在 a 中，b.done = %j'</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a 结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span>jsconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b 开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在 b 中，a.done = %j'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b 结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>main.js</code>:</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'main 开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在 main 中，a.done=%j，b.done=%j'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当 main.js 加载 a.js 时，a.js 又加载 b.js,此时，b.js 会尝试去加载 a.js</p><p>为了防止无限的循环会返回一个 a.js 的 exports 对象的 <strong>未完成的副本</strong> 给 b.js 模块，然后 b.js 完成加载，并将 exports 对象提供给 a.js 模块</p><p>因此示例的输出是</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">main 开始a 开始b 开始在 b 中，a.done = falseb 结束在 a 中，b.done = truea 结束在 main 中，a.done=true，b.done=true</code></pre><p>看不懂上面的过程也没关系，日常工作根本用不到，即使看懂了也不要在项目中使用循环依赖！</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>Node.js 每个文件都是一个模块，模块内的变量都是局部变量，不会污染全局变量，在执行模块代码之前，Node.js 会使用一个如下的函数封装器将模块封装</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 模块的代码实际上在这里</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>__filename：当前模块文件的绝对路径</li><li> __dirname：当前模块文件据所在目录的绝对路径</li><li>module：当前的模块实例</li><li>require：加载其它模块的方法，module.require 的快捷方式</li><li>exports：导出模块接口的对象，module.exports 的快捷方式</li></ul><p>回头看看最开始的问题，为什么 exports 对象不支持赋值为其它对象？把上面函数添加一句 exports 对象来源就很简单了</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> module<span class="token punctuation">,</span> __filename<span class="token punctuation">,</span> __dirname</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 模块的代码实际上在这里</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其它模块 require 到的肯定是模块的 module.exports 对象，如果把 exports 对象赋值给其它对象，就和 module.exports 对象断开了连接，自然就没用了</p><h3 id="在-Node-js-中使用-ES-Module"><a href="#在-Node-js-中使用-ES-Module" class="headerlink" title="在 Node.js 中使用 ES Module"></a>在 Node.js 中使用 ES Module</h3><p>随着 ES6 使用越来越广泛，Node.js 也支持了 ES6 Module，有几种方法</p><h4 id="babel-构建"><a href="#babel-构建" class="headerlink" title="babel 构建"></a>babel 构建</h4><p>使用 babel 构建是在 v12 之前版本最简单、通用的方式，具体配置参考 <a href="https://babeljs.io/docs/en/babel-preset-env">@babel/preset-env</a></p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token punctuation">.</span>babelrc<span class="token punctuation">&#123;</span>  <span class="token string">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token string">"targets"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"node"</span><span class="token operator">:</span> <span class="token string">"8.9.0"</span><span class="token punctuation">,</span>        <span class="token string">"esmodules"</span><span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><h4 id="原生支持"><a href="#原生支持" class="headerlink" title="原生支持"></a>原生支持</h4><p>在 v12 后可以使用原生方式支持 ES Module</p><ol><li>开启 <code>--experimental-modules</code> </li><li>模块名修改为 <code>.mjs</code> （强烈不推荐使用）或者 package.json 中设置 <code>&quot;type&quot;: module</code> </li></ol><p>这样 Node.js 会把 js 文件都当做 ES Module 来处理，更多详情参考<a href="https://nodejs.org/dist/latest-v13.x/docs/api/esm.html">官方文档</a></p><h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h3><p><a href="https://www.yuque.com/sunluyong/node/module">https://www.yuque.com/sunluyong/node/module</a></p><h3 id="简述导出的使用规则"><a href="#简述导出的使用规则" class="headerlink" title="简述导出的使用规则"></a>简述导出的使用规则</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 如果一个模块需要直接导出单个成员，而非挂载的方式(得到的就是:函数,字符串)</span><span class="token comment">// 那这个时候必须使用下面这种方式</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token comment">//最终输出结果以这个为准,后者会覆盖前者</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">&#125;</span></code></pre><p><strong>导出多个成员</strong></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  str<span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-studyDay5</title>
      <link href="posts/f800955/"/>
      <url>posts/f800955/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>art-template 是一个简约、超快的模板引擎。</p><p>它采用作用域预声明的技术来优化模板渲染速度，从而获得接近 JavaScript 极限的运行性能，并且同时支持 NodeJS 和浏览器。<a href="http://aui.github.io/art-template/rendering-test/">在线速度测试</a>。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>拥有接近 JavaScript 渲染极限的的性能</li><li>调试友好：语法、运行时错误日志精确到模板所在行；支持在模板文件上打断点（Webpack Loader）</li><li>支持 Express、Koa、Webpack</li><li>支持模板继承与子模板</li><li>浏览器版本仅 6KB 大小</li></ol><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>art-template 同时支持两种模板语法。标准语法可以让模板更容易读写；原始语法具有强大的逻辑处理能力。</p><p><strong>标准语法</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> user<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>原始语法</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> user<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>原始语法兼容 <a href="http://ejs.co/">EJS</a>、<a href="http://underscorejs.org/#template">Underscore</a>、<a href="https://lodash.com/docs/#template">LoDash</a> 模板。</p><h2 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/tpl-user.art'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    user<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'aui'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 基于模板名渲染模板</span><span class="token function">template</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将模板源代码编译成函数</span>template<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将模板源代码编译成函数并立刻执行</span>template<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> data<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="node使用"><a href="#node使用" class="headerlink" title="node使用"></a>node使用</h2><p><code>tpl.html</code></p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&#123;&#123; title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>大家好，我叫：&#123;&#123; name &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我今年 &#123;&#123; age &#125;&#125; 岁了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我来自 &#123;&#123; province &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我喜欢：&#123;&#123;each hobbies&#125;&#125; &#123;&#123; $value &#125;&#125; &#123;&#123;/each&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'&#123;&#123; title &#125;&#125;'</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 安装：</span><span class="token comment">//    npm install art-template</span><span class="token comment">//    该命令在哪执行就会把包下载到哪里。默认会下载到 node_modules 目录中</span><span class="token comment">//    node_modules 不要改，也不支持改。</span><span class="token comment">// 在 Node 中使用 art-template 模板引擎</span><span class="token comment">// 模板引起最早就是诞生于服务器领域，后来才发展到了前端。</span><span class="token comment">// </span><span class="token comment">// 1. 安装 npm install art-template</span><span class="token comment">// 2. 在需要使用的文件模块中加载 art-template</span><span class="token comment">//    只需要使用 require 方法加载就可以了：require('art-template')</span><span class="token comment">//    参数中的 art-template 就是你下载的包的名字</span><span class="token comment">//    也就是说你 isntall 的名字是什么，则你 require 中的就是什么</span><span class="token comment">// 3. 查文档，使用模板引擎的 API</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment">// 这里不是浏览器</span><span class="token comment">// template('script 标签 id', &#123;对象&#125;)</span><span class="token comment">// var tplStr = `</span><span class="token comment">// &lt;!DOCTYPE html></span><span class="token comment">// &lt;html lang="en"></span><span class="token comment">// &lt;head></span><span class="token comment">//   &lt;meta charset="UTF-8"></span><span class="token comment">//   &lt;title>Document&lt;/title></span><span class="token comment">// &lt;/head></span><span class="token comment">// &lt;body></span><span class="token comment">//   &lt;p>大家好，我叫：&#123;&#123; name &#125;&#125;&lt;/p></span><span class="token comment">//   &lt;p>我今年 &#123;&#123; age &#125;&#125; 岁了&lt;/p></span><span class="token comment">//   &lt;h1>我来自 &#123;&#123; province &#125;&#125;&lt;/h1></span><span class="token comment">//   &lt;p>我喜欢：&#123;&#123;each hobbies&#125;&#125; &#123;&#123; $value &#125;&#125; &#123;&#123;/each&#125;&#125;&lt;/p></span><span class="token comment">// &lt;/body></span><span class="token comment">// &lt;/html></span><span class="token comment">// `</span><span class="token comment">//注意这里的引用文件路径!!!依据自己实际存放/新建的位置</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./tpl.html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件失败了'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 默认读取到的 data 是二进制数据</span>  <span class="token comment">// 而模板引擎的 render 方法需要接收的是字符串</span>  <span class="token comment">// 所以我们在这里需要把 data 二进制数据转为 字符串 才可以给模板引擎使用</span>  <span class="token keyword">var</span> ret <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'zhao'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    province<span class="token operator">:</span> <span class="token string">'湖北'</span><span class="token punctuation">,</span>    hobbies<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">'写代码'</span><span class="token punctuation">,</span>      <span class="token string">'看书'</span><span class="token punctuation">,</span>      <span class="token string">'打游戏'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    title<span class="token operator">:</span> <span class="token string">'个人信息'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h2 id="浏览器使用"><a href="#浏览器使用" class="headerlink" title="浏览器使用"></a>浏览器使用</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>06-在浏览器中使用art-template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--     注意：在浏览器中需要引用 lib/template-web.js 文件    强调：模板引擎不关心你的字符串内容，只关心自己能认识的模板标记语法，例如 &#123;&#123;&#125;&#125;    &#123;&#123;&#125;&#125; 语法被称之为 mustache 语法，八字胡啊。   --></span>     <span class="token comment">&lt;!-- 注意这里的引用路径 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/art-template/lib/template-web.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span>    <span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>      <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>大家好，我叫：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>我今年 <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> 岁了<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>我来自 <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> province <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>我喜欢：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>each hobbies<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> $value <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">/</span>each<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'tpl'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">'zy'</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>      province<span class="token operator">:</span> <span class="token string">'北京市'</span><span class="token punctuation">,</span>      hobbies<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">'写代码'</span><span class="token punctuation">,</span>        <span class="token string">'唱歌'</span><span class="token punctuation">,</span>        <span class="token string">'打游戏'</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-studyDay4</title>
      <link href="posts/788739c3/"/>
      <url>posts/788739c3/</url>
      
        <content type="html"><![CDATA[<h4 id="ip地址和端口号"><a href="#ip地址和端口号" class="headerlink" title="ip地址和端口号"></a>ip地址和端口号</h4><ol><li><p>ip 地址用来定位计算机</p></li><li><p>端口号用来定位具体的应用程序</p></li><li><p>一切需要联网通信的软件都会占用一个端口号   端口号的范围从0- 65536之间</p></li><li><p>在计算机中有一些默认端口号，最好不要去使用</p><p>例如http 服务的80</p></li><li><p>我们在开发过程中使用一些简单好记的就可以了，例如3000、5000等没什么含义</p></li><li><p>可以同时开启多个服务，但一定要确保不同服务占用的端口号不一致才可以.在一台计算机中,同一个端口号同一时间只能被一个程序占用</p></li></ol><p><img src="https://cdn.longdoer.com/2020/12/22/ipe6df9e9e9eb203e5.png" alt="ipe6df9e9e9eb203e5.png" loading="lazy"></p><p>代码🌰:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ip 地址用来定位计算机</span><span class="token comment">// 端口号用来定位具体的应用程序</span><span class="token comment">// 所有需要联网通信的应用程序都会占用一个端口号</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 2. 监听 request 请求事件，设置请求处理函数</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到请求了，请求路径是：'</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求我的客户端的地址是：'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>remoteAddress<span class="token punctuation">,</span> req<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>remotePort<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello nodejs'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功，可以访问了。。。'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="响应内容类型Content-type"><a href="#响应内容类型Content-type" class="headerlink" title="响应内容类型Content-type"></a>响应内容类型Content-type</h4><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token operator">/</span><span class="token operator">/</span> require<span class="token operator">/</span><span class="token operator">/</span> 端口号var <span class="token keyword">http</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>var <span class="token keyword">server</span> <span class="token operator">=</span> <span class="token keyword">http</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">server</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">/</span><span class="token operator">/</span> 在服务端默认发送的数据，其实是 utf8 编码的内容  <span class="token operator">/</span><span class="token operator">/</span> 但是浏览器不知道你是 utf8 编码的内容  <span class="token operator">/</span><span class="token operator">/</span> 浏览器在不知道服务器响应内容的编码的情况下会按照当前操作系统的默认编码去解析  <span class="token operator">/</span><span class="token operator">/</span> 中文操作系统默认是 gbk  <span class="token operator">/</span><span class="token operator">/</span> 解决方法就是正确的告诉浏览器我给你发送的内容是什么编码的  <span class="token operator">/</span><span class="token operator">/</span> 在 <span class="token keyword">http</span> 协议中，Content<span class="token operator">-</span>Type 就是用来告知对方我给你发送的数据内容是什么类型  <span class="token operator">/</span><span class="token operator">/</span> res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain; charset=utf-8'</span><span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello 世界'</span><span class="token punctuation">)</span>  var url <span class="token operator">=</span> req<span class="token punctuation">.</span>url  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/plain'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">/</span><span class="token operator">/</span> text<span class="token operator">/</span>plain 就是普通文本    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain; charset=utf-8'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello 世界'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> else <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/html'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">/</span><span class="token operator">/</span> 如果你发送的是 html 格式的字符串，则也要告诉浏览器我给你发送是 text<span class="token operator">/</span>html 格式的内容    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;p>hello html &lt;a href="">点我&lt;/a>&lt;/p>'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">server</span><span class="token punctuation">.</span><span class="token keyword">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running...'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="发送文件中的数据以及Content-Type内容类型"><a href="#发送文件中的数据以及Content-Type内容类型" class="headerlink" title="发送文件中的数据以及Content-Type内容类型"></a>发送文件中的数据以及Content-Type内容类型</h4><p>文件目录结构</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">resource|├── ab2.jpg|└── hello.txt|└── index.html|└── main.css|└── main.jsnode-http-fs.js</code></pre><p><code>node-http-fs.js</code></p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1.</span> 结合 fs 发送文件中的数据<span class="token operator">/</span><span class="token operator">/</span> <span class="token number">2.</span> Content<span class="token operator">-</span>Type<span class="token operator">/</span><span class="token operator">/</span>    <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>tool<span class="token punctuation">.</span>oschina<span class="token punctuation">.</span>net<span class="token operator">/</span>commons<span class="token operator">/</span><span class="token operator">/</span>    不同的资源对应的 Content<span class="token operator">-</span>Type 是不一样的<span class="token operator">/</span><span class="token operator">/</span>    图片不需要指定编码<span class="token operator">/</span><span class="token operator">/</span>    一般只为字符数据才指定编码var <span class="token keyword">http</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>var fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>var <span class="token keyword">server</span> <span class="token operator">=</span> <span class="token keyword">http</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">server</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">/</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html  var url <span class="token operator">=</span> req<span class="token punctuation">.</span>url  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">/</span><span class="token operator">/</span> 肯定不这么干    <span class="token operator">/</span><span class="token operator">/</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'&lt;!DOCTYPE html>&lt;html lang="en">&lt;head>&lt;meta charset="UTF-8">&lt;title>Document&lt;/title>&lt;/head>&lt;body>&lt;h1>首页&lt;/h1>&lt;/body>/html>'</span><span class="token punctuation">)</span>    <span class="token operator">/</span><span class="token operator">/</span> 我们要发送的还是在文件中的内容    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./resource/index.html'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain; charset=utf-8'</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'文件读取失败，请稍后重试！'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> else <span class="token punctuation">&#123;</span>        <span class="token operator">/</span><span class="token operator">/</span> data 默认是二进制数据，可以通过 <span class="token punctuation">.</span>toString 转为咱们能识别的字符串        <span class="token operator">/</span><span class="token operator">/</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 支持两种数据类型，一种是二进制，一种是字符串        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> else <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/xiaoming'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">/</span><span class="token operator">/</span> url：统一资源定位符    <span class="token operator">/</span><span class="token operator">/</span> 一个 url 最终其实是要对应到一个资源的    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./resource/ab2.jpg'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain; charset=utf-8'</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'文件读取失败，请稍后重试！'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> else <span class="token punctuation">&#123;</span>        <span class="token operator">/</span><span class="token operator">/</span> data 默认是二进制数据，可以通过 <span class="token punctuation">.</span>toString 转为咱们能识别的字符串        <span class="token operator">/</span><span class="token operator">/</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 支持两种数据类型，一种是二进制，一种是字符串        <span class="token operator">/</span><span class="token operator">/</span> 图片就不需要指定编码了，因为我们常说的编码一般指的是：字符编码        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'image/jpeg'</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">server</span><span class="token punctuation">.</span><span class="token keyword">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running...'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="小demo-—-实现简易Apache"><a href="#小demo-—-实现简易Apache" class="headerlink" title="小demo —  实现简易Apache"></a>小demo —  实现简易Apache</h4><p>目录结构</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">apache│ ├── www│ │ ├── apple│ │ │ ├── login<span class="token punctuation">.</span>html│ │ ├── a<span class="token punctuation">.</span>txt│ │ ├── img│ │ │ ├── ab1<span class="token punctuation">.</span>jpg│ │ ├── <span class="token keyword">index</span><span class="token punctuation">.</span>html</code></pre><p>代码🌰</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment">// 1. 创建 Server</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 2. 监听 Server 的 request 请求事件，设置请求处理函数</span><span class="token comment">//    请求</span><span class="token comment">//      处理</span><span class="token comment">//    响应</span><span class="token comment">//    一个请求对应一个响应，如果在一个请求的过程中，已经结束响应了，则不能重复发送响应。</span><span class="token comment">//    没有请求就没有响应。</span><span class="token comment">// </span><span class="token comment">// 咱们以前使用过 Apache 服务器软件，这个软件默认有一个 www 目录，所有存放在 www 目录中的资源都可以通过网址来浏览</span><span class="token comment">// 127.0.0.1:80/a.txt</span><span class="token comment">// 127.0.0.1:80/index.html</span><span class="token comment">// 127.0.0.1:80/apple/login.html</span><span class="token keyword">var</span> wwwDir <span class="token operator">=</span> <span class="token string">'D:/apache/www'</span><span class="token comment">//注意这里的路径是你自己的实际项目路径</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url  <span class="token comment">// / index.html</span>  <span class="token comment">// /a.txt wwwDir + /a.txt</span>  <span class="token comment">// /apple/login.html wwwDir + /apple/login.html</span>  <span class="token comment">// /img/ab1.jpg wwwDir + /img/ab1.jpg</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>wwwDir <span class="token operator">+</span> <span class="token string">'/index.html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// if (err) &#123;</span>      <span class="token comment">//   res.end('404 Not Found.')</span>      <span class="token comment">// &#125; else &#123;</span>      <span class="token comment">// &#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// return 有两个作用：</span>        <span class="token comment">//  1. 方法返回值</span>        <span class="token comment">//  2. 阻止代码继续往后执行</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/a.txt'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>wwwDir <span class="token operator">+</span> <span class="token string">'/a.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/index.html'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>wwwDir <span class="token operator">+</span> <span class="token string">'/index.html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/apple/login.html'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>wwwDir <span class="token operator">+</span> <span class="token string">'/apple/login.html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 3. 绑定端口号，启动服务</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'running...'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>简约版:</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">var <span class="token keyword">http</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span>var fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>var <span class="token keyword">server</span> <span class="token operator">=</span> <span class="token keyword">http</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>var wwwDir <span class="token operator">=</span> <span class="token string">'D:/apache/www'</span><span class="token keyword">server</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  var url <span class="token operator">=</span> req<span class="token punctuation">.</span>url  <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">/</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html  <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">/</span>a<span class="token punctuation">.</span>txt wwwDir <span class="token operator">+</span> <span class="token operator">/</span>a<span class="token punctuation">.</span>txt  <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">/</span>apple<span class="token operator">/</span>login<span class="token punctuation">.</span>html wwwDir <span class="token operator">+</span> <span class="token operator">/</span>apple<span class="token operator">/</span>login<span class="token punctuation">.</span>html  <span class="token operator">/</span><span class="token operator">/</span> <span class="token operator">/</span>img<span class="token operator">/</span>ab1<span class="token punctuation">.</span>jpg wwwDir <span class="token operator">+</span> <span class="token operator">/</span>img<span class="token operator">/</span>ab1<span class="token punctuation">.</span>jpg    var filePath <span class="token operator">=</span> <span class="token string">'/index.html'</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">!==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    filePath <span class="token operator">=</span> url  <span class="token punctuation">&#125;</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>wwwDir <span class="token operator">+</span> filePath<span class="token punctuation">,</span> function <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">3.</span> 绑定端口号，启动服务<span class="token keyword">server</span><span class="token punctuation">.</span><span class="token keyword">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'running...'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-studyDay3</title>
      <link href="posts/e6e3ac60/"/>
      <url>posts/e6e3ac60/</url>
      
        <content type="html"><![CDATA[<p>Node为JavaScript:提供了很多服务器级别的API，这些API绝大多数都被包装到了一个具名的核心模块中了。例如文件操作的<code>|fs]</code>核心模块，http服务构建的<code>[http]</code>模块，<code>path </code>路径操作模块、<code>os</code>操作系统信息模块…</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 用来获取机器信息的</span><span class="token keyword">var</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token comment">// 用来操作路径的</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment">// 获取当前机器的 CPU 信息</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// memory 内存</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">totalmem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 获取一个路径中的扩展名部分</span><span class="token comment">// extname extension name</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">'c:/users/hello.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="简单的模块🌰"><a href="#简单的模块🌰" class="headerlink" title="简单的模块🌰"></a>简单的模块🌰</h4><p> require是一个方法,它的作用就是用来加载模块的</p><p><strong>在Node中，模块有三种:</strong></p><p>一、原生模块<br>Node.js自带的模块，属于Node.js本身的一些方法属性。</p><p>例如:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1、http模块2、fs模块磁盘操作，文件操作3、url模块处理 url型的字符串</code></pre><p>二、第三方模块<br>俗称包，依赖等，例如npm商店中下载的jQuery，用于方便我们操作的nodemon等脚本都属于第三方模块。</p><p>三、自定义模块<br>此类模块是自己命名定义的，尽量不与原生模块的命名发生冲突，自定义模块大多用于完成自己的项目需求。</p><p><font style="color:deepskyblue;font-size:18px;">相对路径必须加<code>./</code></font></p><p>举个🌰</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">└── simpleModule├── a<span class="token punctuation">.</span>js├── b<span class="token punctuation">.</span>js</code></pre><p><code>a.js</code></p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a is start !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里文件后缀名.js可以省略</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a is end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>b.js</code></p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b被加载执行啦~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.longdoer.com/2020/12/20/module_node7172e8380e3b8915.png" alt="module_node7172e8380e3b8915.png" loading="lazy"></p><p>在 Node 中，没有全局作用域，只有模块作用域</p><p>👆代码示例目录结构如上</p><p><code>a.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//      外部访问不到内部</span><span class="token comment">//      内部也访问不到外部</span><span class="token comment">//      默认都是封闭的</span><span class="token comment">//    既然是模块作用域，那如何让模块与模块之间进行通信</span><span class="token comment">//    有时候，我们加载文件模块的目的不是为了简简单单的执行里面的代码，更重要是为了使用里面的某个成员</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'aaa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a is start !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a is end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo 的值是：'</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span></code></pre><p><code>b.js</code></p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b start'</span><span class="token punctuation">)</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'bbb'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b end'</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.longdoer.com/2020/12/20/module_node1488e9fb0dbe50c86.png" alt="module_node1488e9fb0dbe50c86.png" loading="lazy"></p><p>🐛如果我们尝试定义一个函数,然后在另一个模块调用了呢?</p><p><code>a.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'aaa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a is start !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a is end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo 的值是：'</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span></code></pre><p><code>b.js</code></p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b start'</span><span class="token punctuation">)</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'bbb'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b end'</span><span class="token punctuation">)</span></code></pre><p>输出结果:</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">^</span>ReferenceError<span class="token operator">:</span> add is not defined<span class="token comment">//add函数未定义</span></code></pre><p>很显然,函数也行不通emmm</p><h4 id="简单的模块加载与导出"><a href="#简单的模块加载与导出" class="headerlink" title="简单的模块加载与导出"></a>简单的模块加载与导出</h4><p>require 方法有两个作用：</p><p>  \1. 加载文件模块并执行里面的代码</p><p>  \2. 拿到被加载文件模块导出的接口对象</p><p>目录:</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">└── requireAndImport├── a<span class="token punctuation">.</span>js├── b<span class="token punctuation">.</span>js</code></pre><p><code>a.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>b.js</code></p><pre class="language-none"><code class="language-none">var foo &#x3D; &#39;zy&#39;;</code></pre><p>输出:</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">^</span>ReferenceError<span class="token operator">:</span> foo is not defined</code></pre><p>  在每个文件模块中都提供了一个对象：<code>exports</code></p><p><code> exports</code>默认是一个空对象</p><p> 你要做的就是把所有需要被外部访问的成员挂载到这个<code> exports</code> 对象中</p><p>代码例:[ 目录结构如上 ]</p><p><code>a.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123; foo: 'hello' &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello</span></code></pre><p><code>b.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'zy'</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span></code></pre><p>输出:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token string">'hello'</span> <span class="token punctuation">&#125;</span>hello</code></pre><p><strong>函数导出简单例子:</strong></p><p><code>a.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>b.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'zy'</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token number">619</span></code></pre><p><strong>变量导出简单例子:</strong></p><p><code>a.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>b.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token comment">//如果没有这句导出,a.js的输出就是undefined</span><span class="token comment">//原因嘛,前面你看了,你懂得</span></code></pre><p>输出:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token number">18</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node studyDay2</title>
      <link href="posts/641a1746/"/>
      <url>posts/641a1746/</url>
      
        <content type="html"><![CDATA[<p><font style="color:deepskyblue;">在Node中专门提供了一个核心模块: http</font></p><span id="more"></span>  <p>http 这个模块的职责就是帮你创建编写服务器的</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token operator">/</span><span class="token operator">/</span><span class="token number">1.</span>加载<span class="token keyword">http</span>核心模块var <span class="token keyword">http</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">2.</span>使用<span class="token keyword">http</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法创建一个web服务器<span class="token operator">/</span><span class="token operator">/</span> 返回一个<span class="token keyword">Server</span>实例var <span class="token keyword">server</span> <span class="token operator">=</span> <span class="token keyword">http</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">3.</span>服务器<span class="token operator">--</span>提供对数据的服务<span class="token operator">/</span><span class="token operator">/</span> 发请求<span class="token operator">/</span><span class="token operator">/</span> 接收请求<span class="token operator">/</span><span class="token operator">/</span> 处理请求<span class="token operator">/</span><span class="token operator">/</span> 给个反馈<span class="token punctuation">(</span>发送响应<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span> 注册request请求事件<span class="token operator">/</span><span class="token operator">/</span> 当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数<span class="token punctuation">:</span>回调处理函数<span class="token keyword">server</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到客户端的请求啦!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">4.</span>绑定端口号<span class="token punctuation">,</span>启动服务器<span class="token keyword">server</span><span class="token punctuation">.</span><span class="token keyword">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功了，可以通过http://127.0.0.1:3000/来访问'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.longdoer.com/2020/12/19/http_node6b80bcc5239309fa.png" alt="http_node6b80bcc5239309fa.png" loading="lazy"></p><p>✏️这时候你通过这个链接打开网页,hi发现网页一直在转圈,是因为我们的服务器没有对浏览器(客户端)进行回复,所以浏览器一直在等待</p><p>tips:本地终端<code>ctr + c</code>快捷键可以终止服务</p><h3 id="发送响应"><a href="#发送响应" class="headerlink" title="发送响应"></a>发送响应</h3><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token operator">/</span><span class="token operator">/</span><span class="token number">1.</span>加载<span class="token keyword">http</span>核心模块var <span class="token keyword">http</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">2.</span>使用<span class="token keyword">http</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法创建一个web服务器<span class="token operator">/</span><span class="token operator">/</span> 返回一个<span class="token keyword">Server</span>实例var <span class="token keyword">server</span> <span class="token operator">=</span> <span class="token keyword">http</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">3.</span>服务器<span class="token operator">--</span>提供对数据的服务<span class="token operator">/</span><span class="token operator">*</span> request 请求事件处理函数，需要接收两个参数<span class="token punctuation">:</span>    Request请求对象    请求对象可以用来获取客户端的一些请求信息，例如请求路径    Response 响应对象    响应对象可以用来给客户端发送响应消息 <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">server</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">/</span><span class="token operator">/</span>  收到客户端的请求啦<span class="token operator">!</span>请求路径是<span class="token punctuation">:</span><span class="token operator">/</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到客户端的请求啦!请求路径是:'</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">4.</span>绑定端口号<span class="token punctuation">,</span>启动服务器<span class="token keyword">server</span><span class="token punctuation">.</span><span class="token keyword">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功了，可以通过http://127.0.0.1:3000/来访问'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="响应回复"><a href="#响应回复" class="headerlink" title="响应回复"></a>响应回复</h4><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token operator">/</span><span class="token operator">/</span><span class="token number">1.</span>加载<span class="token keyword">http</span>核心模块var <span class="token keyword">http</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">2.</span>使用<span class="token keyword">http</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法创建一个web服务器<span class="token operator">/</span><span class="token operator">/</span> 返回一个<span class="token keyword">Server</span>实例var <span class="token keyword">server</span> <span class="token operator">=</span> <span class="token keyword">http</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">3.</span>服务器<span class="token operator">--</span>提供对数据的服务<span class="token operator">/</span><span class="token operator">*</span> request 请求事件处理函数，需要接收两个参数<span class="token punctuation">:</span>    Request请求对象    请求对象可以用来获取客户端的一些请求信息，例如请求路径    Response 响应对象    响应对象可以用来给客户端发送响应消息 <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">server</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">/</span><span class="token operator">/</span>收到客户端的请求啦<span class="token operator">!</span>请求路径是<span class="token punctuation">:</span><span class="token operator">/</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到客户端的请求啦!请求路径是:'</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>response对象有一个方法<span class="token punctuation">:</span> write可以用来给客户端发送响应数据    <span class="token operator">/</span><span class="token operator">/</span>write可以使用多次，但是最后一定要使用end 来结束响应，否则客户端会一直等待    response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'zy!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'node'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span>end告诉客户端，我的话说完了，你可以呈递给用户了    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">4.</span>绑定端口号<span class="token punctuation">,</span>启动服务器<span class="token keyword">server</span><span class="token punctuation">.</span><span class="token keyword">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功了，可以通过http://127.0.0.1:3000/来访问'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>这里无论页面路径是什么,页面返回的信息都是<code>zy!node</code></p><p>举个🌰</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">urlresponse<span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>zy<span class="token operator">!</span>node<span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span><span class="token number">1</span>zy<span class="token operator">!</span>node<span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>xyzzy<span class="token operator">!</span>node<span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>xyz<span class="token operator">/</span><span class="token number">12</span><span class="token operator">%</span>$     zy<span class="token operator">!</span>node</code></pre><h3 id="🤔思考"><a href="#🤔思考" class="headerlink" title="🤔思考"></a>🤔思考</h3><h4 id="根据不同请求路径返回不同结果"><a href="#根据不同请求路径返回不同结果" class="headerlink" title="根据不同请求路径返回不同结果"></a>根据不同请求路径返回不同结果</h4><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token operator">/</span><span class="token operator">/</span><span class="token number">1.</span>加载<span class="token keyword">http</span>核心模块<span class="token operator">/</span><span class="token operator">/</span><span class="token number">1.</span>创建 <span class="token keyword">Server</span>var <span class="token keyword">http</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>const <span class="token keyword">server</span> <span class="token operator">=</span> <span class="token keyword">http</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">2.</span>监听 request请求事件<span class="token punctuation">,</span>设置请求处理函数<span class="token keyword">server</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到客户端的请求啦!请求路径是:'</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">*</span>     <span class="token operator">/</span><span class="token operator">/</span>这里的方式比较麻烦<span class="token punctuation">,</span>推荐更简单的方法<span class="token punctuation">,</span>直接end的同时发送响应数据    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">' node'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token operator">/</span><span class="token operator">/</span>简单方法    <span class="token operator">/</span><span class="token operator">/</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello Node'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">/</span><span class="token operator">/</span>根据不同的请求路径发送不同的响应结果    <span class="token operator">/</span><span class="token operator">/</span><span class="token number">1</span>．获取请求路径    <span class="token operator">/</span><span class="token operator">/</span>req<span class="token punctuation">.</span>url获取到的是端口号之后的那一部分路径    <span class="token operator">/</span><span class="token operator">/</span>也就是说所有的url都是以<span class="token operator">/</span>开头的    <span class="token operator">/</span><span class="token operator">/</span><span class="token number">2</span>．判断路径处理响应    var url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"index page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> else <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"login page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> else <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"404 Not Found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">3.</span>绑定端口号<span class="token punctuation">,</span>启动服务器<span class="token keyword">server</span><span class="token punctuation">.</span><span class="token keyword">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功了，可以访问 http://127.0.0.1:3000/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h5 id="返回一个数组数据"><a href="#返回一个数组数据" class="headerlink" title="返回一个数组数据"></a>返回一个数组数据</h5><pre class="language-nginx" data-language="nginx"><code class="language-nginx">var <span class="token keyword">http</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1.</span> 创建 <span class="token keyword">Server</span>var <span class="token keyword">server</span> <span class="token operator">=</span> <span class="token keyword">http</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">2.</span> 监听 request 请求事件，设置请求处理函数<span class="token keyword">server</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到请求了，请求路径是：'</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求我的客户端的地址是：'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>remoteAddress<span class="token punctuation">,</span> req<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>remotePort<span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">' world'</span><span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> 上面的方式比较麻烦，推荐使用更简单的方式，直接 end 的同时发送响应数据  <span class="token operator">/</span><span class="token operator">/</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello nodejs'</span><span class="token punctuation">)</span>  <span class="token operator">/</span><span class="token operator">/</span> 根据不同的请求路径发送不同的响应结果  <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1.</span> 获取请求路径  <span class="token operator">/</span><span class="token operator">/</span>    req<span class="token punctuation">.</span>url 获取到的是端口号之后的那一部分路径  <span class="token operator">/</span><span class="token operator">/</span>    也就是说所有的 url 都是以 <span class="token operator">/</span> 开头的  <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">2.</span> 判断路径处理响应  var url <span class="token operator">=</span> req<span class="token punctuation">.</span>url  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'index page'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> else <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/login'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'login page'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> else <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/products'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    var products <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span> <span class="token string">'苹果 X'</span><span class="token punctuation">,</span>        price<span class="token punctuation">:</span> <span class="token number">8888</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span> <span class="token string">'小米 Alpha'</span><span class="token punctuation">,</span>        price<span class="token punctuation">:</span> <span class="token number">18000</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span> <span class="token string">'oppo R7'</span><span class="token punctuation">,</span>        price<span class="token punctuation">:</span> <span class="token number">1999</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>    <span class="token operator">/</span><span class="token operator">/</span> 响应内容只能是二进制数据或者字符串    <span class="token operator">/</span><span class="token operator">/</span>  数字    <span class="token operator">/</span><span class="token operator">/</span>  对象    <span class="token operator">/</span><span class="token operator">/</span>  数组    <span class="token operator">/</span><span class="token operator">/</span>  布尔值    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>products<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>试试看parse  <span class="token punctuation">&#125;</span> else <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found.'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span> <span class="token number">3.</span> 绑定端口号，启动服务<span class="token keyword">server</span><span class="token punctuation">.</span><span class="token keyword">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功，可以访问了。。。'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node studyDay1</title>
      <link href="posts/fd1346fc/"/>
      <url>posts/fd1346fc/</url>
      
        <content type="html"><![CDATA[<p>在 Node中，采用 EcmaScript进行编码 ——  没有 BOM、DOM,和浏览器中的<code>Javascript</code>不一样</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><span id="more"></span>  <p>node 命令编译结果:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">^</span>ReferenceError<span class="token operator">:</span> window is not defined    at Object<span class="token punctuation">.</span><span class="token operator">&lt;</span>anonymous<span class="token operator">></span> <span class="token punctuation">(</span><span class="token constant">E</span><span class="token operator">:</span>\tzktWebProject\kj\node\node1<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">)</span>    at Module<span class="token punctuation">.</span><span class="token function">_compile</span> <span class="token punctuation">(</span>internal<span class="token operator">/</span>modules<span class="token operator">/</span>cjs<span class="token operator">/</span>loader<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">1063</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">)</span>    at Object<span class="token punctuation">.</span>Module<span class="token punctuation">.</span>_extensions<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">js</span> <span class="token punctuation">(</span>internal<span class="token operator">/</span>modules<span class="token operator">/</span>cjs<span class="token operator">/</span>loader<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">1092</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span>    at Module<span class="token punctuation">.</span><span class="token function">load</span> <span class="token punctuation">(</span>internal<span class="token operator">/</span>modules<span class="token operator">/</span>cjs<span class="token operator">/</span>loader<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">928</span><span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">)</span>    at Function<span class="token punctuation">.</span>Module<span class="token punctuation">.</span><span class="token function">_load</span> <span class="token punctuation">(</span>internal<span class="token operator">/</span>modules<span class="token operator">/</span>cjs<span class="token operator">/</span>loader<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">769</span><span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">)</span>    at Function<span class="token punctuation">.</span>executeUserEntryPoint <span class="token punctuation">[</span><span class="token keyword">as</span> runMain<span class="token punctuation">]</span> <span class="token punctuation">(</span>internal<span class="token operator">/</span>modules<span class="token operator">/</span>run_main<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">72</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span>    at internal<span class="token operator">/</span>main<span class="token operator">/</span>run_main_module<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">47</span></code></pre><p>当然会报错啦!</p><p><font style="color:deepskyblue;">浏览器中的 JavaScript是没有文件操作的能力的但是 Node中的JavaScript具有文件操作的能力</font></p><ul><li>fs是<code>file-system</code>的简写,就是文件系统的意思</li><li>在Node中如果想要进行文件操作，就必须引入fs 这个核心模块</li><li>在fs这个核心模块中，就提供了所有的文件操作相关的AP工   例如:<code> fs.readFile</code>就是用来读取文件的</li></ul><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>代码🌰:</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token operator">/</span><span class="token operator">/</span><span class="token number">1.</span>使用require方法加载fs核心模块var fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">2.</span>读取文件<span class="token operator">/</span><span class="token operator">/</span>第一个参数是<span class="token operator">--</span><span class="token operator">-</span>需要读取的文件路径<span class="token operator">/</span><span class="token operator">/</span>第二个参数是<span class="token operator">--</span><span class="token operator">-</span>一个回调函数<span class="token operator">/</span><span class="token operator">*</span>回调函数接收<span class="token number">2</span>个参数<span class="token punctuation">:</span>error    如果读取失败，error就是错误对象    如果读取成功，error就是nulldata    如果读取失败，error就是错误对象    如果读取成功，data就是读取到的数据    成功        data 数据        error null    失败        data null        error 错误对象<span class="token operator">*</span><span class="token operator">/</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'fs.txt'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>Buffer <span class="token number">68</span> <span class="token number">65</span> <span class="token number">6</span>c <span class="token number">6</span>c <span class="token number">6</span>f <span class="token number">20</span> <span class="token number">6</span>e <span class="token number">6</span>f <span class="token number">64</span> <span class="token number">65</span> <span class="token number">2</span>e <span class="token number">6</span>a <span class="token number">73</span> <span class="token number">21</span> <span class="token number">0</span>d <span class="token number">0</span>a <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">20</span> <span class="token number">2</span>d <span class="token number">2</span>d <span class="token number">57</span> <span class="token number">72</span> <span class="token number">69</span> <span class="token number">74</span> <span class="token number">74</span> <span class="token number">65</span> <span class="token number">6</span>e <span class="token number">20</span> <span class="token number">62</span> <span class="token number">79</span> <span class="token number">20</span> <span class="token number">7</span>a <span class="token number">7</span>a <span class="token number">79</span> <span class="token number">2</span>e<span class="token operator">></span>    <span class="token operator">/</span><span class="token operator">*</span>       这里打印出来的data结果不是乱码<span class="token punctuation">,</span>是一个二进制数据 <span class="token number">0</span> <span class="token operator">/</span> <span class="token number">1</span>      文件中存储的其实都是二进制数据 <span class="token number">0</span> <span class="token operator">/</span> <span class="token number">1</span>     这里为什么看到的不是<span class="token number">0</span>和<span class="token number">1</span>呢<span class="token operator">?</span>原因是二进制转为<span class="token number">16</span>进制了<span class="token punctuation">.</span>但是无论是<span class="token number">2</span>进制还是 <span class="token number">16</span>进制<span class="token punctuation">,</span>人类都不认识     所以我们可以通过 toString 方法把其转为我们能认识的字符     <span class="token operator">*</span><span class="token operator">/</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><img src="https://cdn.longdoer.com/2020/12/19/nodefs4d94b8a69972a7c7.png" alt="nodefs4d94b8a69972a7c7.png" loading="lazy"></p><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><p>(还是上面的目录结构哦亲)</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//1.使用require方法加载fs核心模块</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个参数:文件路径</span><span class="token comment">//第二个参数:文件内容</span><span class="token comment">/* 成功:    文件写入成功    error是null失败:    文件写入失败    error就是错误对象 */</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'fs.txt'</span><span class="token punctuation">,</span> <span class="token string">'大家好鸭~我是Node.js!'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件写入成功啦!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>假设我们尝试读取一个不存在的文件,会报错嘛?</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'fs1.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//啥反应也没有,艹</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>我们打印一下:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.使用require方法加载fs核心模块</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.读取文件</span><span class="token comment">//第一个参数是---需要读取的文件路径</span><span class="token comment">//第二个参数是---一个回调函数</span><span class="token comment">/*回调函数接收2个参数:error    如果读取失败，error就是错误对象    如果读取成功，error就是nulldata    如果读取失败，error就是错误对象    如果读取成功，data就是读取到的数据    成功        data 数据 undefined--没有数据        error null    失败        data null        error 错误对象*/</span><span class="token comment">//fs1.txt这个文件是不存在的啦</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'fs1.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//error是一个对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>输出结果:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>Error<span class="token operator">:</span> <span class="token constant">ENOENT</span><span class="token operator">:</span> no such file or directory<span class="token punctuation">,</span> open <span class="token string">'E:\tzktWebProject\kj\node\fs1.txt'</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>  errno<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">4058</span><span class="token punctuation">,</span>  code<span class="token operator">:</span> <span class="token string">'ENOENT'</span><span class="token punctuation">,</span>  syscall<span class="token operator">:</span> <span class="token string">'open'</span><span class="token punctuation">,</span>  path<span class="token operator">:</span> <span class="token string">'E:\\tzktWebProject\\kj\\node\\fs1.txt'</span><span class="token punctuation">&#125;</span><span class="token keyword">undefined</span></code></pre><p>所以这样的代码是不合理的,没有文件,你就要给我一个报错的响应啊!</p><p>读操作代码优化:</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token operator">/</span><span class="token operator">/</span><span class="token number">1.</span>使用require方法加载fs核心模块const <span class="token punctuation">&#123;</span> log <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'console'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>var fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">2.</span>读取文件<span class="token operator">/</span><span class="token operator">/</span>第一个参数是<span class="token operator">--</span><span class="token operator">-</span>需要读取的文件路径<span class="token operator">/</span><span class="token operator">/</span>第二个参数是<span class="token operator">--</span><span class="token operator">-</span>一个回调函数<span class="token operator">/</span><span class="token operator">*</span>回调函数接收<span class="token number">2</span>个参数<span class="token punctuation">:</span>error    如果读取失败，error就是错误对象    如果读取成功，error就是nulldata    如果读取失败，error就是错误对象    如果读取成功，data就是读取到的数据    成功        data 数据        error null    失败        data null        error 错误对象<span class="token operator">*</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span>在这里就可以通过判断error来确认是否有错误发生fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'fs.txt'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"读取文件失败,可能是文件不存在了呢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> else <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>写操作也是上述思路哦👆</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello!Node.js</title>
      <link href="posts/96097eb6/"/>
      <url>posts/96097eb6/</url>
      
        <content type="html"><![CDATA[<h4 id="Node简介"><a href="#Node简介" class="headerlink" title="Node简介"></a>Node简介</h4><p><svg t="1608995713012" class="icon" viewBox="0 0 1280 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2791" width="48" height="48"><path d="M632.6 904c-4.2 0-8.4-1.2-12.2-3.2L582 878c-5.8-3.2-3-4.4-1-5 7.6-2.6 9.2-3.2 17.4-8 0.8-0.4 2-0.2 2.8 0.2l29.6 17.6c1 0.6 2.6 0.6 3.6 0L750 816c1-0.6 1.8-1.8 1.8-3.2v-133.4c0-1.4-0.6-2.6-1.8-3.2l-115.6-66.6c-1-0.6-2.4-0.6-3.6 0l-115.6 66.6c-1.2 0.6-1.8 2-1.8 3.2v133.4c0 1.2 0.8 2.4 1.8 3l31.6 18.2c17.2 8.6 27.8-1.6 27.8-11.6v-131.8c0-1.8 1.4-3.4 3.4-3.4h14.6c1.8 0 3.4 1.4 3.4 3.4v131.8c0 23-12.4 36-34.2 36-6.6 0-12 0-26.6-7.2l-30.4-17.4c-7.4-4.4-12.2-12.4-12.2-21v-133.4c0-8.6 4.6-16.8 12.2-21l115.6-66.8c7.4-4.2 17-4.2 24.2 0l115.6 66.8c7.4 4.4 12.2 12.4 12.2 21v133.4c0 8.6-4.6 16.8-12.2 21l-115.6 66.8c-3.4 2.2-7.6 3.4-12 3.4z m93.4-131.6c0-25-16.8-31.6-52.4-36.4-36-4.8-39.6-7.2-39.6-15.6 0-7 3-16.2 29.6-16.2 23.8 0 32.6 5.2 36.2 21.2 0.4 1.6 1.6 2.6 3.2 2.6h15c1 0 1.8-0.4 2.4-1 0.6-0.8 1-1.6 0.8-2.6-2.4-27.6-20.6-40.4-57.6-40.4-33 0-52.6 14-52.6 37.2 0 25.4 19.6 32.2 51.2 35.4 37.8 3.8 40.8 9.2 40.8 16.6 0 13-10.4 18.4-34.8 18.4-30.6 0-37.4-7.6-39.6-22.8-0.2-1.6-1.6-2.8-3.4-2.8h-15c-1.8 0-3.4 1.4-3.4 3.4 0 19.4 10.6 42.6 61.2 42.6 37 0 58-14.4 58-39.6z m109-100.2c0 12.2-10 22.2-22.2 22.2s-22.2-10-22.2-22.2c0-12.6 10.4-22.2 22.2-22.2 12-0.2 22.2 9.6 22.2 22.2z m-3.6 0c0-10.4-8.4-18.6-18.8-18.6-10.2 0-18.6 8.2-18.6 18.6 0 10.4 8.4 18.8 18.6 18.8 10.4-0.2 18.8-8.6 18.8-18.8z m-9 12.4h-5.2c-0.2-1.2-1-7.6-1-7.8-0.4-1.4-0.8-2.2-2.6-2.2h-4.4v10h-4.8v-25h8.6c3 0 8.8 0 8.8 6.6 0 4.6-3 5.6-4.8 6.2 3.4 0.2 3.6 2.4 4.2 5.6 0.2 2 0.6 5.4 1.2 6.6z m-5.6-17.6c0-3.4-2.4-3.4-3.6-3.4h-4v7h3.8c3.2 0 3.8-2.2 3.8-3.6zM274.6 382c0-5.4-2.8-10.2-7.4-12.8l-122.6-70.6c-2-1.2-4.4-1.8-6.8-2h-1.2c-2.4 0-4.6 0.8-6.8 2L7.4 369.2C2.8 371.8 0 376.8 0 382l0.2 190c0 2.6 1.4 5 3.6 6.4 2.2 1.4 5 1.4 7.4 0L84 536.6c4.6-2.8 7.4-7.6 7.4-12.8v-88.8c0-5.2 2.8-10.2 7.4-12.8l31-17.8c2.4-1.4 4.8-2 7.4-2 2.6 0 5.2 0.6 7.4 2l31 17.8c4.6 2.6 7.4 7.6 7.4 12.8v88.8c0 5.2 2.8 10.2 7.4 12.8l72.8 41.8c2.2 1.4 5.2 1.4 7.4 0 2.2-1.2 3.6-3.8 3.6-6.4l0.4-190zM945 174.6v352.8c0 5.2-2.8 10.2-7.4 12.8l-122.6 70.8c-4.6 2.6-10.2 2.6-14.8 0l-122.6-70.8c-4.6-2.6-7.4-7.6-7.4-12.8v-141.6c0-5.2 2.8-10.2 7.4-12.8l122.6-70.8c4.6-2.6 10.2-2.6 14.8 0l30.6 17.6c3.4 2 7.8-0.6 7.8-4.4v-188c0-5.6 6-9.2 11-6.4l73 40.8c4.6 2.4 7.6 7.4 7.6 12.8z m-92 257.8c0-1.4-0.8-2.6-1.8-3.2l-42-24.4c-1.2-0.6-2.6-0.6-3.8 0l-42 24.4c-1.2 0.6-1.8 1.8-1.8 3.2v48.6c0 1.4 0.8 2.6 1.8 3.2l42 24.2c1.2 0.6 2.6 0.6 3.6 0l42-24.2c1.2-0.6 1.8-1.8 1.8-3.2v-48.6z m419.6-1.4c4.6-2.6 7.4-7.6 7.4-12.8V384c0-5.2-2.8-10.2-7.4-12.8l-121.8-70.8c-4.6-2.6-10.2-2.6-14.8 0l-122.6 70.8c-4.6 2.6-7.4 7.6-7.4 12.8v141.6c0 5.4 2.8 10.2 7.4 12.8l121.8 69.4c4.4 2.6 10 2.6 14.6 0l73.6-41c5-2.8 5-10 0-12.8L1100 483.2c-2.4-1.4-3.8-3.8-3.8-6.4v-44.4c0-2.6 1.4-5 3.8-6.4l38.4-22.2c2.2-1.4 5.2-1.4 7.4 0l38.4 22.2c2.2 1.4 3.8 3.8 3.8 6.4v34.8c0 5.6 6.2 9.2 11.2 6.4l73.4-42.6zM1118 438c-0.8 0.6-1.4 1.4-1.4 2.4v27.2c0 1 0.6 2 1.4 2.4l23.6 13.6c0.8 0.6 2 0.6 2.8 0L1168 470c0.8-0.6 1.4-1.4 1.4-2.4v-27.2c0-1-0.6-2-1.4-2.4l-23.6-13.6c-0.8-0.6-2-0.6-2.8 0L1118 438z m-508.4 87v-140.8c0-5.2-3.2-10.2-7.8-12.8l-122.2-70.4c-4.2-2.4-10-2.8-14.8 0l-122.2 70.4c-4.6 2.6-7.8 7.4-7.8 12.8v140.8c0 5.6 3.8 10.4 8 12.8l122.4 70.4c4.8 2.8 10.4 2.6 14.8 0l122-70.4c3.6-2 6.2-5.4 7.2-9.4 0.2-1 0.4-2.2 0.4-3.4z m-148.6-249.8l-1.6 1h2.2l-0.6-1z m152.4 260.4l-0.8-1.4v1.8l0.8-0.4z" p-id="2792" fill="#55B576"></path></svg></p><h5 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h5><p>Node.js是一个JavaScript运行环境。实质上是对Chrome V8引擎进行了封装。Node.js对一些特殊用例进行优化，提供替代的API，使得V8在非浏览器环境下运行的更好。</p><p>V8引擎本身就是用于Chrome浏览器的JS解释部分，但是Ryan Dahl把这个V8搬到了服务器上，用于做服务器的软件。</p><p>Node.js是一个让JavaScript运行在服务器端的开发平台。它不是一种独立的语言，跟PHP、Python的“既是语言，也是平台”不同，Node.js使用JavaScript进行编程，运行在JavaScript引擎上（V8）。</p><p>与PHP、.net等后端语言相比，Node.js跳过了Apache、Nginx、IIS等HTTP服务器，它自己不用建设在任何服务器软件之上。Node.js没有Web容器。</p><p>Node.js自身的哲学是花最小的硬件成本，追求更高的并发，更高的性能处理。</p><p>Node.js官网地址：[<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a>(下载LTS长期支持板，安装过程中勾选Add to Path)</p><h5 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h5><p><strong>1、单线程</strong></p><table><thead><tr><th>单线程</th></tr></thead><tbody><tr><td>优点：操作系统不用再有线程创建、销毁、的时间开销。</td></tr><tr><td>缺点：一个用户造成了线程的崩溃，整个服务器就崩溃了，其他人也就崩溃了。</td></tr></tbody></table><p><strong>2、非阻塞I/O</strong><br>访问磁盘和网络这样的I/O 请求会比较慢,所以我们希望，在读取文件或通过网络发送消息时，运行平台不会阻塞业务逻辑的执行。</p><p>Node.js采用了非阻塞型I/O机制，比如在执行访问数据库代码的时候，会立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。</p><p>当某个I/O执行完毕时，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。</p><table><thead><tr><th>阻塞模式</th><th>非阻塞型模式</th></tr></thead><tbody><tr><td>一个线程只能够处理一项任务，要想提高吞吐量必须通过多线程</td><td>一个线程永远在执行计算操作，这个线程的CPU核心利用率永远是100%。</td></tr></tbody></table><p>所以由此可见，Node.js采用了一种很有哲理的解决方案：与其人多，但是好多人闲着，还不如一个人玩命，往死里干活。</p><p><strong>3、事件驱动 event-driven</strong><br>在Node中，客户端请求建立连接，提交数据等行为，会触发相应的事件。在Node中，在一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数的途中，可以转而处理其他事件(比如又有新用户连接了)，然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。</p><p>综上所述，我们的Node三大特点，实际上一个特点，离开谁都不行，离开了任何一个都玩转不了。<br>Node.js很像一个抠门的餐厅老板，只聘请1个服务生。但是结果却请很多服务员效率还高。<br>要记住<strong>Node.js中所有的I/O都是异步的，回调函数，套回调函数。</strong></p><h5 id="三、适合开发什么"><a href="#三、适合开发什么" class="headerlink" title="三、适合开发什么"></a>三、适合开发什么</h5><p>当应用程序需要处理大量并发的I/O，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候，Node就很适合。Node也很适合和webscoket配合，开发长连接的实时交互应用程序。<br>比如：</p><ul><li>用户表单收集</li><li>考试系统</li><li>聊天室</li></ul><h5 id="四、基本使用"><a href="#四、基本使用" class="headerlink" title="四、基本使用"></a>四、基本使用</h5><p><code>cmd</code>  在对应的项目文件夹下输入cmd,然后输入<code>node</code>命令进入cmd窗口的node环境编译<br><code>         vscode</code>   鼠标右键对应文件夹  –  选择在<strong>终端中打开</strong>   或者<code>ctr +数字1键位左边的反字符串</code>。然后输入<code>node</code>命令进入node环境编译，输入       <code>node d </code>轻击<code>tab</code>键可以自动补全相对路径</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h4><p><code>.clear</code> 从<strong>当前</strong>删除控制台命令记录</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript之lib.d.ts</title>
      <link href="posts/3157abc1/"/>
      <url>posts/3157abc1/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是lib-d-ts"><a href="#什么是lib-d-ts" class="headerlink" title="什么是lib.d.ts"></a>什么是lib.d.ts</h3><p>当你安装Typescript时，会顺带安装lib.d.ts等声明文件。此文件包含了avascript运行时以及DOM中存在各种常见的环境声明。</p><ul><li>它自动包含在和ypescript项目的编译上下文中</li><li>它能让你快速并始书写经过类型检查的Javascript代码</li></ul><p>你可以通过指定<code>--noLib </code>的编译器命令行标志（或者在<code>tsconfig.json</code>中指定选项<code>noLib: true，</code>编译选项)从上下文中排除此文件(不过不建议)。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">tsc <span class="token operator">--</span>noLib</code></pre><p><code>test.ts</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> prop<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">let</span> s<span class="token operator">=</span>prop<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这段代码的类型检查正常，因为<code>lib.d.ts</code> 为所有Javascript对象定义了<code>toString</code>方法。</p><h3 id="lib-d-ts的内部"><a href="#lib-d-ts的内部" class="headerlink" title="lib.d.ts的内部"></a>lib.d.ts的内部</h3><p><code>lib.d.ts</code>的内容主要是一些变量声明(如: window、document、math)和一些类似的接口声明(如: window、Document、Math)。</p><p>最简单的方式寻找代码的类型(如: Math.floor）)是使用IDE的 F12键跳转到定义(使用方式是,把鼠标放在对应的方法代码上，再按下f12键)</p><p><img src="https://cdn.longdoer.com/2020/12/19/lib53cdf8bf9a6f648f.png" alt="lib53cdf8bf9a6f648f.png" loading="lazy"></p><h3 id="修改lib-d-ts之全局window"><a href="#修改lib-d-ts之全局window" class="headerlink" title="修改lib.d.ts之全局window"></a>修改lib.d.ts之全局window</h3><p>在TypeScript 中，接口是开放式的，这意味着当你想使用不存在的成员时，你仅仅是需要添加它们至<code>lib.d.ts</code>中的接口声明中，Typescript将会自动接收它。</p><p>注意，你需要在全局模块中做这些修改，以使这些接口与<code>lib.d.ts </code>相关联。建议在项目文件夹中创建一个称为 globals.d.ts 的特殊文件,这样既可修改全局也不会影响其他的项目代码</p><p><code>globle.d.ts</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">&#123;</span>    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="修改lib-d-ts之全局Math"><a href="#修改lib-d-ts之全局Math" class="headerlink" title="修改lib.d.ts之全局Math"></a>修改lib.d.ts之全局Math</h3><p>当你想在Math全局变量上添加你需要的属性时，你仅需要把它添加至Math 的全局接口上即可</p><p><img src="https://cdn.longdoer.com/2020/12/19/math_tsc57af5ba0b651c81.png" alt="math_tsc57af5ba0b651c81.png" loading="lazy"></p><p><img src="https://cdn.longdoer.com/2020/12/19/ts_libbf4e5172e9640fa8.png" alt="ts_libbf4e5172e9640fa8.png" loading="lazy"></p><h3 id="修改lib-d-ts之全局Date"><a href="#修改lib-d-ts之全局Date" class="headerlink" title="修改lib.d.ts之全局Date"></a>修改lib.d.ts之全局Date</h3><p>接口<code>DateConstructor </code>(即Date的数据格式)与你在上文中看到的 Math 和 window 接口一样，因为它涵盖了可以使用的 Date 全局变量的成员(如: Date.now())。除此之外，它还包含了可以让你创建Date 实例的构造函数签名(如: new Date())</p><p><img src="https://cdn.longdoer.com/2020/12/19/tslib_date1a3ed214dbad91ff.png" alt="tslib_date1a3ed214dbad91ff.png" loading="lazy"></p><h3 id="修改lib-d-ts之全局string"><a href="#修改lib-d-ts之全局string" class="headerlink" title="修改lib.d.ts之全局string"></a>修改lib.d.ts之全局string</h3><p>在<code>lib.d.ts </code>里string，与Date类似(全局变量 string，StringConstructor接口，String接口)。但是值得注意的是，string 接口也会影响字符串字面量</p><p><img src="https://cdn.longdoer.com/2020/12/19/lib_ts_stringb3296083bbe44edb.png" alt="lib_ts_stringb3296083bbe44edb.png" loading="lazy"></p><h3 id="自定义lib-d-ts"><a href="#自定义lib-d-ts" class="headerlink" title="自定义lib.d.ts"></a>自定义lib.d.ts</h3><p>如上文说提及，使用<code>--noLib </code>编译选项会导致 Typescript 排除自动包含的 <code>lib.d.ts </code>文件。那为啥需要实现这种功能呢?</p><ul><li>运行的Javascript环境与基于标准浏览器运行时环境有很大不同;</li><li>希望在代码里严格的控制全局变量，例如: lib.d.ts定义了item作为全局变量，你并不希望它泄漏到你的代码里。</li></ul><p>一旦你排除了默认的<code> lib.d.ts</code> 文件，你可以在编译上下文中包含一个类似命名的文件，Typescript将选择它进行类型检查。</p><p>⚠️小心使用<code>--noLib</code>选项，一旦你使用使用了它，当你把你的项目分享给其他人时，它们也将被迫使用<code>--noLib</code>选项，更糟糕的是，如果将这些代码放入你的项目中，你可能需要将它放入你的基于<code>lib </code>代码中。</p><h3 id="–lib选项"><a href="#–lib选项" class="headerlink" title="–lib选项"></a>–lib选项</h3><p>设置编译目标为es6时，能导致lib.d.ts包含更多的像Promise 的现代(es6）内容的环境声明.一些时候，你想要解耦编译目标（生成的JavaScript版本）和环境库支持之间的关系。例如对于Promise，你的编译目标是<code>--target es5</code>，但是你仍然想使用它，这个时候，你可以使用<code>lib</code> 对它进行控制。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">></span>tsc <span class="token operator">--</span>target es5 <span class="token operator">--</span>lib dom<span class="token punctuation">,</span>es6</code></pre><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><p><font style="color:skyblue;">你可以通过命令行或者在tsconfig.json中提供此选项(推荐)</font></p><p><code>config.json</code></p><p><img src="https://cdn.longdoer.com/2020/12/19/tsconfig_lib2dc84c242b6e84fd.png" alt="tsconfig_lib2dc84c242b6e84fd.png" loading="lazy"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><img src="https://cdn.longdoer.com/2020/12/19/lib-1679cef2b11d760e9.png" alt="lib-1679cef2b11d760e9.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块解析机制</title>
      <link href="posts/2342084e/"/>
      <url>posts/2342084e/</url>
      
        <content type="html"><![CDATA[<h2 id="模块解析策略之Node策略"><a href="#模块解析策略之Node策略" class="headerlink" title="模块解析策略之Node策略"></a>模块解析策略之Node策略</h2><p><font style="color:skyblue;">非相对模块名的解析是个完全不同的过程</font>。Node会在一个特殊的文件夹node_modules里查找你的模块(我们在node环境下用npm安装组件时，会有选项提示是当前项目安装还是全局安装，这个不同的选项就会决定插件会存储在用户电脑的哪个文件里)。</p><p>还是用上面例子，但假设</p><p>/root/src/ moduleA.js里使用的是非相对路径导入<code>var x = require(&quot; moduleB”);</code>。Node则会以右侧的顺序去解析moduleB，直到有一个匹配上。</p><p>node_modules可能与当前文件在同一级目录下，或者在上层目录里。Node会向上级目录遍历，查找每个node_modules直到它找到要加载的模块。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">/</span>root<span class="token operator">/</span>src<span class="token operator">/</span>node_modules<span class="token operator">/</span>moduleB<span class="token punctuation">.</span>js<span class="token operator">/</span>root<span class="token operator">/</span>src<span class="token operator">/</span>node_modules<span class="token operator">/</span>moduleB<span class="token operator">/</span><span class="token keyword">package</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>如果指定了 <span class="token string">"main"</span>属性<span class="token punctuation">)</span><span class="token operator">/</span>root<span class="token operator">/</span>src<span class="token operator">/</span>node_modules<span class="token operator">/</span>moduleB<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">/</span>root<span class="token operator">/</span>node_modules<span class="token operator">/</span>moduleB<span class="token punctuation">.</span><span class="token function">js</span><span class="token punctuation">(</span>上跳了一级<span class="token punctuation">)</span><span class="token operator">/</span>root<span class="token operator">/</span>node_modules<span class="token operator">/</span>moduleB<span class="token operator">/</span><span class="token keyword">package</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>如果指定了 <span class="token string">"main"</span>属性<span class="token punctuation">)</span><span class="token operator">/</span>root<span class="token operator">/</span> node_modules<span class="token operator">/</span>moduleB<span class="token operator">/</span>index<span class="token punctuation">.</span>js<span class="token operator">/</span>node_modules<span class="token operator">/</span>moduleB<span class="token punctuation">.</span>js（上跳了一级<span class="token punctuation">)</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>moduleB<span class="token operator">/</span><span class="token keyword">package</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>如果指定了<span class="token string">"main"</span>属性<span class="token punctuation">)</span><span class="token operator">/</span>node_modules<span class="token operator">/</span>moduleB<span class="token operator">/</span>index<span class="token punctuation">.</span>js</code></pre><h2 id="模块解析策略之TypeScript模块解析策略-相对"><a href="#模块解析策略之TypeScript模块解析策略-相对" class="headerlink" title="模块解析策略之TypeScript模块解析策略(相对)"></a>模块解析策略之TypeScript模块解析策略(相对)</h2><p>Typescript是模仿Node.js运行时的解析策略来在编译阶段定位模块定义文件。</p><p>因此,TypeScript在Node解析逻辑基础上增加了TypeScript源文件的扩展名（.ts，.tsx和.d.ts)。同时，Typescript在package.json里使用字段”types”来表示类似”main”的意义– 编译器会使用它来找到要使用的”main”定义文件。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">比如，有一个导入语句<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> b <span class="token punctuation">&#125;</span><span class="token keyword">from</span> <span class="token string">"./moduleB"</span>在<span class="token operator">/</span>root<span class="token operator">/</span>src<span class="token operator">/</span>moduleA<span class="token punctuation">.</span> ts<span class="token punctuation">.</span>里，会以下面的流程来定位<span class="token string">"./moduleB"</span><span class="token operator">:</span><span class="token operator">/</span>root<span class="token operator">/</span>src<span class="token operator">/</span>moduleB<span class="token punctuation">.</span>ts<span class="token operator">/</span>root<span class="token operator">/</span>src<span class="token operator">/</span>moduleB<span class="token punctuation">.</span>tsx<span class="token operator">/</span>root<span class="token operator">/</span>src<span class="token operator">/</span>moduleB<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts<span class="token operator">/</span>root<span class="token operator">/</span>src<span class="token operator">/</span>moduleB<span class="token operator">/</span><span class="token keyword">package</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>如果指定了<span class="token string">"types"</span>属性<span class="token punctuation">)</span><span class="token operator">/</span>root<span class="token operator">/</span>src<span class="token operator">/</span>moduleB <span class="token operator">/</span>index<span class="token punctuation">.</span>ts<span class="token operator">/</span>root<span class="token operator">/</span>src<span class="token operator">/</span>moduleB <span class="token operator">/</span>index<span class="token punctuation">.</span>tsx<span class="token operator">/</span>root<span class="token operator">/</span>src<span class="token operator">/</span>moduleB<span class="token operator">/</span>index<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts</code></pre><h2 id="模块解析策略之TypeScript模块解析策略-非相对"><a href="#模块解析策略之TypeScript模块解析策略-非相对" class="headerlink" title="模块解析策略之TypeScript模块解析策略(非相对)"></a>模块解析策略之TypeScript模块解析策略(非相对)</h2><p>类似地，非相对的导入会遵循Node.js的解析逻辑，首先查找文件，然后是合适的文件夹。</p><p>因此/root/src/moduleA.ts文件里的import { b }frommoduleB”会以右侧的查找顺序解析:</p><p><img src="https://cdn.longdoer.com/2020/12/14/ts-1e845a66f90e777e8.png" alt="ts-1e845a66f90e777e8.png" loading="lazy"></p><p>不要被这里步骤的数量吓到- Typescript只是在步骤（8）和（15)向上跳了两次目录。这并不比Node.js里的流程复杂。</p><h2 id="模块解析策略之附加的模块解析标记"><a href="#模块解析策略之附加的模块解析标记" class="headerlink" title="模块解析策略之附加的模块解析标记"></a>模块解析策略之附加的模块解析标记</h2><p><strong>有时工程源码结构与输出结构不同</strong>。通常是要经过一系统的构建步骤最后生成输出。它们包括将.ts编译成.js，将不同位置的依赖拷贝至一个输出位置。最终结果就是运行时的模块名与包含它们声明的源文件里的模块名不同。或者最终输出文件里的模块路径与编译时的源文件路径不同了。</p><p>Typescript编译器有一些额外的标记用来通知编译器在源码编译成最终输出的过程中都发生了哪个转换</p><p>有一点要特别注意的是编译器不会进行这些转换操作;它只是利用这些信息来指导模块的导入。</p><h2 id="模块解析策略之附加的模块解析标记-BaseURL"><a href="#模块解析策略之附加的模块解析标记-BaseURL" class="headerlink" title="模块解析策略之附加的模块解析标记(BaseURL)"></a>模块解析策略之附加的模块解析标记(BaseURL)</h2><p>在利用AMD模块加载器的应用里使用baseUrl是常见做法，它要求在运行时模块都被放到了一个文件夹里。这些模块的源码可以在不同的目录下，但是构建脚本会将它们集中到一起。</p><p><font style="color:tomato;">设置baseUrl来告诉编译器到哪里去查找模块。所有非相对模块导入都会被当做相对于baseurl。</font>(相当于手动设立根目录)</p><p>baseUrl的值由以下两者之一决定:</p><ol><li>命令行中baseUrl的值(如果给定的路径是相对的，那么将相对于当前路径进行计算)</li><li>tsconfig.json’里的baseurl属性(如果给定的路径是相对的，那么将相对于’tsconfig.json’路径进行计算)</li></ol><p>注意相对模块的导入不会被设置的baseUr1所影响，因为它们总是相对于导入它们的文件。</p><h2 id="模块解析策略之附加的模块解析标记-路径映射"><a href="#模块解析策略之附加的模块解析标记-路径映射" class="headerlink" title="模块解析策略之附加的模块解析标记(路径映射)"></a>模块解析策略之附加的模块解析标记(路径映射)</h2><p>有时模块不是直接放在baseUrl下面。比如，充分”jquery”模块地导入，在运行时可能被解释为<code>&quot;node_modules/jquery/dist/jquery.slim.min.js&quot;</code>。</p><p>Typescript编译器通过使用tsconfig.json文件里的”paths”来支持这样的声明映射</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">&#123;</span>    <span class="token string">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span><span class="token comment">//指定的paths的根目录</span>        <span class="token string">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"jquery"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"node_modules/jquery/dist/jquery"</span>            <span class="token punctuation">]</span> <span class="token comment">//此处映射是相当于"baseUrl"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>请注意”paths”是相对于”baseUrl”进行解析。如果”baseUrl”被设置成了除”.”外的其它值，比如tsconfig.json所在的目录，那么映射必须要做相应的改变。如果你在上例中设置了“baseUrl”: “./src”，那么jquery应该映射到<code>&quot;../node_modules/jquery/dist/jquery&quot;</code>。</p><p>通过”paths”我们还可以指定复杂的映射，包括指定多个回退位置。</p><p>假设在一个工程配置里，有一些模块位于一处，而其它的则在另个的位置。构建过程会将它们集中至一处。工程结构可能如下:</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">projectRoot├── folderl│   ├── file1.ts (imports 'folder1/file2' and 'folder2/file3')│   └── file2.ts├── generated│   ├── folder1│   ├── folder2│     └── file3.ts│  └── tsconfig.json</code></pre><p>它告诉编译器所有匹配”*”(所有的值)模式的模块导入会在以下两个位置查找</p><p>1.” * “:表示名字不发生改变，所以映射为<code>&lt;moduleName&gt; =&gt;&lt;baseUrl&gt; /&lt;moduleName&gt;</code></p><ol start="2"><li><code>&quot;generated/*&quot;</code>表示模块名添加了“generated”前缀，所以映射为<code>&lt;moduleName&gt; =&gt; &lt;baseUr1&gt;/generated/&lt;moduleName&gt;</code></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">&#123;</span>  <span class="token string">"compilerOptions"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token string">"baseUrl"</span><span class="token operator">:</span><span class="token string">"."</span><span class="token punctuation">,</span>      <span class="token string">"paths"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token string">"*"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">"*"</span><span class="token punctuation">,</span>            <span class="token string">"generated/*"</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>相应的<code>tsconfig.json</code>文件</p><h5 id="按照这个逻辑，编译器将会如下尝试解析这两个导入"><a href="#按照这个逻辑，编译器将会如下尝试解析这两个导入" class="headerlink" title="按照这个逻辑，编译器将会如下尝试解析这两个导入:"></a>按照这个逻辑，编译器将会如下尝试解析这两个导入:</h5><h6 id="导入’folder1-file2’"><a href="#导入’folder1-file2’" class="headerlink" title="导入’folder1/file2’"></a>导入’folder1/file2’</h6><ol><li>匹配’*’模式且通配符捕获到整个名字。</li><li>尝试列表里的第一个替换:’*’-&gt; folder1/file2。</li><li>替换结果为非相对名–与baseurl合并-&gt;projectRoot/folder1/file2.ts。</li><li>文件存在,完成。</li></ol><h5 id="导入’folder2-file3’"><a href="#导入’folder2-file3’" class="headerlink" title="导入’folder2/file3’"></a>导入’folder2/file3’</h5><ol><li>匹配”*’模式且通配符捕获到整个名字。</li><li>尝试列表里的第一个替换:’*’-&gt; folder2/file</li><li>替换结果为非相对名-与baseUrl合并-&gt;projectRoot/folder2/file3.ts。</li><li>文件不存在，跳到第二个替换。</li><li>第二个替换: ‘generated/*’ -&gt; generated/folder2/file3。</li><li>替换结果为非相对名-与baseurl合并-&gt;projectRoot/generated/folder2/file3.ts</li><li>文件存在。完成。</li></ol><h2 id="模块解析策略之附加的模块解析标记-利用rootDirs指定虚拟目录"><a href="#模块解析策略之附加的模块解析标记-利用rootDirs指定虚拟目录" class="headerlink" title="模块解析策略之附加的模块解析标记(利用rootDirs指定虚拟目录)"></a>模块解析策略之附加的模块解析标记(利用rootDirs指定虚拟目录)</h2><p>有时多个目录下的工程源文件在编译时会进行合并放在某个输出目录下。这可以看做一些源目录创建了一个“虚拟”目录。</p><p>利用rootDirs，可以告诉编译器生成这个虚拟目录的roots;因此编译器可以在“虚拟”目录下解析相对模块导入，就好像它们被合并在了一起一样。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">src└── view   └── view<span class="token punctuation">.</span><span class="token function">ts</span> <span class="token punctuation">(</span>imports <span class="token string">'./templatel'</span><span class="token punctuation">)</span>   └── view2<span class="token punctuation">.</span>ts generated└── templates   └── views    └── templates<span class="token punctuation">.</span><span class="token function">ts</span> <span class="token punctuation">(</span>imports <span class="token string">'./view2'</span><span class="token punctuation">)</span></code></pre><p><strong>比如，有上面的工程结构</strong></p><p>src/views里的文件是用于控制uI的用户代码。generated/templates是UI模版，在构建时通过模版生成器自动生成。构建中的一步会将/src/views和/generated/templates/views的输出拷贝到同一个目录下.在运行时，视图可以假设它的模版与它同在一个目录下,因此可以使用相对导入”./template”。</p><p>可以使用”rootDirs”来告诉编译器。“rootDirs”指定了一个roots列表，列表里的内容会在运行时被合并。因此，针对这个例子， tsconfig.json如下:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">&#123;</span>  <span class="token string">"compilerOptions"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token string">"rootDirs"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token string">"src/views"</span><span class="token punctuation">,</span>        <span class="token string">"generated/templates/views"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>每当编译器在某一rootDirs的子目录下发现了相对模块导入，它就会尝试从每一个rootDirs中导入。</p><p>rootDirs的灵活性不仅仅局限于其指定了要在逻辑上合并的物理目录列表。<font style="color:tomato;">它提供的数组可以包含任意数量的任何名字的目录，不论它们是否存在。</font>这允许编译器以类型安全的方式处理复杂捆绑(bundles)和运行时的特性，比如条件引入和工程特定的加载器插件。</p><h2 id="模块解析策略之附加的模块解析标记-跟踪模块解析"><a href="#模块解析策略之附加的模块解析标记-跟踪模块解析" class="headerlink" title="模块解析策略之附加的模块解析标记(跟踪模块解析)"></a>模块解析策略之附加的模块解析标记(跟踪模块解析)</h2><p>编译器在解析模块时可能访问当前文件夹外的文件。这会导致很难诊断模块为什么没有被解析，或解析到了错误的位置。通过<code>--traceResolution</code>启用编译器的模块解析跟踪，它会告诉我们在模块解析过程中发生了什么。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ts <span class="token keyword">from</span> <span class="token string">" ./ moudle/Math"</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>   <span class="token keyword">enum</span> test<span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>使用–traceResolution调用编译器。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">></span> tsc <span class="token operator">--</span>traceResolution</code></pre><p><FONT STYLE="color:tomato;font-size:18px;">需要留意的地方</FONT></p><p>1．导入的名字及位置</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">===</span><span class="token operator">===</span> Resolving <span class="token keyword">module</span> <span class="token string">'typescript'</span> <span class="token keyword">from</span> <span class="token string">'src/app.ts'</span><span class="token punctuation">.</span> <span class="token operator">===</span><span class="token operator">===</span></code></pre><p>2．编译器使用的策略</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">Module resolution kind <span class="token keyword">is</span> not specified，using <span class="token string">'NodeJs'</span><span class="token punctuation">.</span></code></pre><p>3．最终结果</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">==</span> Module name <span class="token string">'typescript'</span> was successfully resolved to<span class="token string">'node_modules/typescript/lib/types.cnipt..d.ts.'</span><span class="token punctuation">.</span> <span class="token operator">===</span><span class="token operator">===</span><span class="token operator">==</span></code></pre><h2 id="模块解析策略之附加的模块解析标记-使用–noResolve"><a href="#模块解析策略之附加的模块解析标记-使用–noResolve" class="headerlink" title="模块解析策略之附加的模块解析标记(使用–noResolve)"></a>模块解析策略之附加的模块解析标记(使用–noResolve)</h2><p>正常来讲编译器会在开始编译之前解析模块导入。每当它成功地解析了对一个文件 import，这个文件被会加到一个文件列表里，以供编译器稍后处理。</p><p><code>--noResolve</code>编译选项告诉编译器:不要添加任何不是在命令行上传入的文件到编译列表。编译器仍然会尝试解析模块，但是只要没有指定这个文件，那么它就不会被包含在内。</p><p><code>test.ts</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">A</span> <span class="token keyword">from</span> <span class="token string">"moduleA"</span><span class="token comment">// oK, moduLeA passed on the command-Line</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">B</span> <span class="token keyword">from</span> <span class="token string">"moduleB"</span><span class="token comment">// Error TS02: Cannot find module 'moduLeB '.</span></code></pre><p>使用–noResolve编译app.ts:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">tsc app<span class="token punctuation">.</span>ts moduleA<span class="token punctuation">.</span>ts <span class="token operator">--</span>noResolve</code></pre><blockquote><p>可能正确找到moduleA，因为它在命令行上指定了。</p><p>找不到moduleB，因为没有在命令行上传递。</p></blockquote><h2 id="模块解析策略之附加的模块解析标记-注意点"><a href="#模块解析策略之附加的模块解析标记-注意点" class="headerlink" title="模块解析策略之附加的模块解析标记(注意点)"></a>模块解析策略之附加的模块解析标记(注意点)</h2><p><FONT STYLE="color:deepskyblue;font-size:18px;">为什么在exclude列表里的模块还会被编译器使用</font></p><p>⚠️<code>tsconfig.json</code>将文件夹转变一个“工程”，如果不指定任何“exclude”或“files”，文件夹里的所有文件包括tsconfig.json和所有的子目录都会在编译列表里。如果你想利用“exclude”排除某些文件，甚至你想指定所有要编译的文件列表，请使用“files”。</p><p>有些是被<code>tsconfig.json</code>自动加入的。它不会涉及到上面讨论的模块解析。如果编译器识别出一个文件是模块导入目标(比如moduleA被排除了，但是moduleB用import 导入了这个模块)，它就会加到编译列表里，不管它是否被排除了。</p><p>因此，要从编译列表中排除一个文件，你需要在排除它的同时，还要排除所有对它进行import或使用了<code>/// &lt;reference path=&quot;...”/&gt;</code>指令的文件。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tsconfig</title>
      <link href="posts/f5f0046a/"/>
      <url>posts/f5f0046a/</url>
      
        <content type="html"><![CDATA[<h2 id="命名空间和模块的陷阱"><a href="#命名空间和模块的陷阱" class="headerlink" title="命名空间和模块的陷阱"></a>命名空间和模块的陷阱</h2><h3 id="一．对模块使用"><a href="#一．对模块使用" class="headerlink" title="一．对模块使用   "></a>一．对模块使用   <reference></h3><p>一个常见的错误是使用<code>&lt;reference&gt;</code>引用模块文件，引用模块文件应该使用<code>import</code></p><p>要理解这之间的区别，我们首先应该弄清编译器是如何根据import路径（例如，import x from “…”;或import x = require(“ …”)里面的…,等等)来定位模块的类型信息。</p><ol><li>首先尝试去查找相应路径下的.ts文件</li><li>再查找.tsx文件(jsx语法的文件，也是一种JavaScript的超集,现在广泛运用于React中)</li><li>再查找.d.ts文件(当你安装 TypeScript时，会顺带安装 lib.d.ts等声明文件。此文件包含了JavaScript运行时以及DOM中存在各种常见的环境声明。node中也有这种类似的库文件)</li><li>如果这些文件都找不到，编译器会查找外部模块声明(其他模块的输出项).</li></ol><h3 id="二．不必要的命名空间"><a href="#二．不必要的命名空间" class="headerlink" title="二．不必要的命名空间"></a>二．不必要的命名空间</h3><p>如果你想把命名空间转换为模块，它可能会像下面的示例一样:</p><p>shapes.ts</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">namespace</span> Shapes<span class="token punctuation">&#123;</span>    <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Triangle</span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span>    <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Square</span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>test.ts</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> shapes <span class="token keyword">from</span> <span class="token string">"./moudle/shapes"</span><span class="token punctuation">;</span><span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">shapes</span><span class="token punctuation">.</span>Shapes<span class="token punctuation">.</span><span class="token function">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shapes<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>TypeScript里模块的一个特点是<strong>不同的模块永远也不会在相同的作用域内使用相同的名字</strong>。因为使用模块的人会为它们命名，<strong>所以完全没有必要把导出的符号包裹在一个命名空间里</strong>。这样我们还是要去使用到原模块文件里面的对象名称，这样就变的格外的麻烦</p><p>下面是改进的🌰:</p><p>shapes.ts</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Triangle</span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Square</span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span></code></pre><p>test.ts</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> shapes <span class="token keyword">from</span> <span class="token string">"./moudle/shapes"</span><span class="token punctuation">;</span><span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">shapes</span><span class="token punctuation">.</span>Shapes<span class="token punctuation">.</span><span class="token function">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shapes<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意:不应该对模块使用命名空间，使用命名空间是为了提供逻辑分组和避免命名冲突。模块文件本身已经是一个逻辑分组，并且它的名字是由导入这个模块的代码指定，所以没有必要为导出的对象增加额外的模块层。</p><h2 id="tsconfig-json概述"><a href="#tsconfig-json概述" class="headerlink" title="tsconfig.json概述"></a>tsconfig.json概述</h2><p>如果一个目录下存在一个tsconfig.json文件，那么它意味着这个目录是TypeScript项目的根目录。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">├── moudle│ ├── shapes<span class="token punctuation">.</span>ts├── test<span class="token punctuation">.</span>ts├── tsconfig<span class="token punctuation">.</span>json</code></pre><p><code>tsconfig.json</code>文件中指定了用来编译这个项目的根文件和编译选项。一个项目可以通过以下方式之一来编译:</p><ol><li>不带任何输入文件的情况下调用tsc，编译器会从当前目录开始去查找<code>tsconfig. json</code>文件，逐级<font style="color:red;">向上搜索父目录。</font></li><li>不带任何输入文件的情况下调用tsc，且使用命令行参数–project(或-p）指定一个包含<code>tsconfig.json</code>文件的目录。</li><li>当命令行上指定了输入文件时，<code>tsconfig.json</code>文件会被忽略。”files”指定一个包含相对或绝对文件路径的列表。</li></ol><p><a href="http://www.ipicbed.com/image/gbgdg"><img src="https://cdn.longdoer.com/2020/12/13/tsfb293d008985ca7b.png" alt="tsfb293d008985ca7b.md.png" loading="lazy"></a></p><p><img src="https://cdn.longdoer.com/2020/12/14/tsb5050eb752c625a7.png" alt="tsb5050eb752c625a7.png" loading="lazy"></p><h2 id="tsconfig-json细节"><a href="#tsconfig-json细节" class="headerlink" title="tsconfig.json细节"></a>tsconfig.json细节</h2><p>“include(包括)”和exclude(排除)”属性指定一个文件glob匹配模式列表。支持的glob通配符有:</p><p>1.*匹配o或多个字符(不包括目录分隔符)</p><p>2.?匹配一个任意字符(不包括目录分隔符)</p><p>3.**/递归匹配任意子目录</p><p><img src="https://cdn.longdoer.com/2020/12/14/ts_includf8eeef00fb0128a0.png" alt="ts_includf8eeef00fb0128a0.png" loading="lazy"></p><p><img src="https://cdn.longdoer.com/2020/12/14/exc_ts33e020f19a3b1623.png" alt="exc_ts33e020f19a3b1623.png" loading="lazy"></p><ol><li>如果一个glob模式里的某部分只包含<code>*</code>或<code>.*</code>，那么仅有<font style="color:red;">支持的文件扩展名类型被包含在内</font>(比如默认.ts,.tsx,和.d.ts,如果allowJs设置能true还包含.js和.jsx).</li><li>如果”files”和”include”都没有被指定，编译器默认包含当前目录和子目录下所有的TypeScript文件(.ts，.d.ts和.tsx)，排除在”exclude”里指定的文件。使用“outDir”指定的目录下的文件永远会被编译器排除，除非你明确地使用”files”将其包含进来（这时就算用exclude指定也没用).</li></ol><h3 id="tsconfig-json之extends继承配置"><a href="#tsconfig-json之extends继承配置" class="headerlink" title="tsconfig.json之extends继承配置"></a>tsconfig.json之extends继承配置</h3><p>tsconfig.json文件可以利用extends属性从另一个配置文件里继承配置</p><p>extends是tsconfig.json文件里的顶级属性（与compileroptions，files，include，和exclude一样)。extends的值是一个字符串，包含指向另一个要继承文件的路径。</p><p>在原文件里的配置先被加载，然后被来至继承文件里的配置重写。如果发现循环引用，则会报错。来至所继承配置文件的files，include和exclude覆盖源配置文件的属性。配置文件里的相对路径在解析时相对于它所在的文件。</p><p><img src="https://cdn.longdoer.com/2020/12/14/tsconf_-1bdfe6659d2cf5aa8.png" alt="tsconf_-1bdfe6659d2cf5aa8.png" loading="lazy"></p><h3 id="tsconfig-json其他细节"><a href="#tsconfig-json其他细节" class="headerlink" title="tsconfig.json其他细节"></a>tsconfig.json其他细节</h3><ul><li>使用”include”引入的文件可以使用”exclude”属性过滤。然而，通过“files”属性明确指定的文件却总是会被包含在内，不管”exclude”如何设置。如果没有特殊指定,<font style="color:red;">“exclude”默认情况下会排除node_modules，bower_components， jspm_packages和<code>&lt;outDir&gt;</code>目录</font>。</li><li>任何被”files”或”include”<font style="color:red;">指定的文件所引用的文件</font>也会被包含进来。A.ts引用了B.ts，因此B.ts不能被排除，除非引用它的A.ts在”exclude”列表中。</li><li>需要注意编译器不会去引入那些可能做为输出的文件;比如，假设我们包含了index.ts，那么index.d.ts和index.js会被排除在外。通常来讲，不推荐只有扩展名的不同来区分同目录下的文件。</li><li>tsconfig.json文件可以是个空文件，但编译会直接报错。</li><li>在命令行上指定的编译选项会覆盖在tsconfig.json文件里的相应选项。</li></ul><h2 id="tsconfig-json编译选项"><a href="#tsconfig-json编译选项" class="headerlink" title="tsconfig.json编译选项"></a>tsconfig.json编译选项</h2><h4 id="types-typeRoots和types"><a href="#types-typeRoots和types" class="headerlink" title="(@types, typeRoots和types)"></a>(@types, typeRoots和types)</h4><p>默认所有可见的“@types”包会在编译过程中被包含进来（这个包是指那些大型的插件或是库)</p><p>node_modules/@types文件夹下以及它们子文件夹下的所有包都是可见的;也就是说，<code>./node_modules/@types/，../node_modules/@types/和../ ../node_modules/@types/</code>等等。</p><p>如果指定了typeRoots(包的根目录)，只有typeRoots下面的包才会被包含进来。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"typeRoots"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./typings"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>这个配置文件会包含所有<code>./typings</code>下面的包，而不包含<code>./ node_modules/@types</code>里面的包。</p><p>如果指定了types，只有被列出来的包才会被包含进来。</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"types"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node"</span><span class="token punctuation">,</span><span class="token string">"express"</span><span class="token punctuation">,</span><span class="token string">"koa"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>这个tsconfig.json文件将仅会包含<code>./node_modules/@types/node</code>,</p><p><code>./node_modules/@types/koa </code>和<code>./node_modules/@types/express/@types/</code>,<code>node_modules/@types/*</code>里面的<strong>其它包</strong>不会被引入进来。</p><p><font style="color:tomato;">指定”types”:[]来禁用自动引入@types包。</font></p><p>注意，自动引入只在你使用了全局的声明(相反于模块）时是重要的。如果你使用import “foo”语句，Typescript仍然会查找node_modules和node_modules/@types文件夹来获取foo包。</p><h2 id="tsconfig-json的编译器命令"><a href="#tsconfig-json的编译器命令" class="headerlink" title="tsconfig.json的编译器命令"></a>tsconfig.json的编译器命令</h2><p><img src="https://cdn.longdoer.com/2020/12/14/ts_command4ed545e1a4a41c14.png" alt="ts_command4ed545e1a4a41c14.png" loading="lazy"></p><p> – lib：编译时要使用的库</p><p>注意:如果–lib没有指定默认注入的库的列表。默认注入的库为:<br>                    ：ES5: DOM,ES5,ScriptHost<br>                    ：ES6: DOM,ES6,DOM.Iterable,ScriptHost</p><p><img src="https://cdn.longdoer.com/2020/12/14/ts_command-183e41d4de5aaefcb.png" alt="ts_command-183e41d4de5aaefcb.png" loading="lazy"></p><p><img src="https://cdn.longdoer.com/2020/12/14/ts_command-24b03c06461aa22a6.png" alt="ts_command-24b03c06461aa22a6.png" loading="lazy"></p><p><img src="https://cdn.longdoer.com/2020/12/14/ts_command-31bbb6473515e373d.png" alt="ts_command-31bbb6473515e373d.png" loading="lazy"></p><p><img src="https://cdn.longdoer.com/2020/12/14/ts_command-44fcb5703aa76529c.png" alt="ts_command-44fcb5703aa76529c.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何通过 Loader 实现特殊资源加载？</title>
      <link href="posts/1b888e05/"/>
      <url>posts/1b888e05/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>url/src/href/@import</title>
      <link href="posts/1044f31f/"/>
      <url>posts/1044f31f/</url>
      
        <content type="html"><![CDATA[<h2 id="一、URL的概念"><a href="#一、URL的概念" class="headerlink" title="一、URL的概念"></a>一、URL的概念</h2><blockquote><p>统一资源定位符（或称统一资源定位器/定位地址、URL地址等，英语：Uniform Resource Locator，常缩写为URL），有时也被俗称为<strong>网页地址（网址）。</strong>如同在网络上的门牌，是因特网上标准的资源的地址（Address）。</p></blockquote><h2 id="二、URL的格式"><a href="#二、URL的格式" class="headerlink" title="二、URL的格式"></a>二、URL的格式</h2><h2 id="2-1-标准格式"><a href="#2-1-标准格式" class="headerlink" title="2.1 标准格式"></a><strong>2.1 标准格式</strong></h2><blockquote><p>协议类型:[//服务器地址[:端口号]][/资源层级UNIX文件路径]文件名?查询</p></blockquote><h2 id="2-2-完整格式"><a href="#2-2-完整格式" class="headerlink" title="2.2 完整格式"></a><strong>2.2 完整格式</strong></h2><blockquote><p>协议类型:[//[访问资源需要的凭证信息@]服务器地址[:端口号]][/资源层级UNIX文件路径]文件名?查询</p></blockquote><p>其中【访问凭证信息@；:端口号；?查询；#片段ID】都属于选填项。</p><h2 id="三、URL的语法规则"><a href="#三、URL的语法规则" class="headerlink" title="三、URL的语法规则"></a>三、URL的语法规则</h2><p>比如网址 <a href="https://link.zhihu.com/?target=http://segmentfault.com/html/index.asp">http://segmentfault.com/html/index.asp</a>，必须遵守以下的语法规则：</p><blockquote><p>scheme://host.domain:port/path/filename</p></blockquote><h2 id="3-1-说明"><a href="#3-1-说明" class="headerlink" title="3.1 说明"></a><strong>3.1 说明</strong></h2><p>（1）<strong>scheme</strong> - 定义因特网服务的类型。最常见的类型是 http （2）<strong>host</strong> - 定义域主机（http 的默认主机是 www） （3）<strong>domain</strong> - 定义因特网域名，比如 <a href="https://link.zhihu.com/?target=http://w3school.com.cn">http://w3school.com.cn</a> （4）**:port** - 定义主机上的端口号（http 的默认端口号是 80） （5）<strong>path</strong> - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。 （6）<strong>filename</strong> - 定义文档/资源的名称</p><h2 id="3-2-URL-Schemes"><a href="#3-2-URL-Schemes" class="headerlink" title="3.2 URL Schemes"></a><strong>3.2 URL Schemes</strong></h2><p>以下是其中一些最流行的 scheme：</p><p>Scheme访问用于…http超文本传输协议以 http:// 开头的普通网页。不加密。https安全超文本传输协议安全网页。加密所有信息交换。ftp文件传输协议用于将文件下载或上传至网站。file</p><p>您计算机上的文件。</p><h2 id="四、URL的类型"><a href="#四、URL的类型" class="headerlink" title="四、URL的类型"></a>四、URL的类型</h2><h2 id="4-1-绝对URL"><a href="#4-1-绝对URL" class="headerlink" title="4.1 绝对URL"></a><strong>4.1 绝对URL</strong></h2><blockquote><p>绝对URL（absolute URL）显示文件的完整路径，这意味着绝对URL本身所在的位置与被引用的实际文件的位置<strong>无关</strong>。</p></blockquote><h2 id="4-2-相对URL"><a href="#4-2-相对URL" class="headerlink" title="4.2 相对URL"></a><strong>4.2 相对URL</strong></h2><blockquote><p>相对URL（relative URL）以包含URL本身的文件夹的位置为<strong>参考点</strong>，描述目标文件夹的位置。</p></blockquote><p>一般来说，对于<strong>同一服务器</strong>上的文件，应该总是使用<strong>相对URL</strong>，它们更容易输入，而且在将页面从本地系统转移到服务器上时更方便，只要每个文件的相对位置保持不变，链接就仍然是有效地。</p><p>以下为建立路径所使用的几个特殊符号，及其所代表的意义。</p><p>（1） <code>.</code>：代表<strong>目前所在的目录</strong>，相对路径。 如： <code>&lt;a&gt;</code>文本 <code>&lt;/a&gt;</code> 或 <code>&lt;img</code> <code>src=&quot;./abc&quot;</code> <code>/&gt;</code></p><p>（2） <code>..</code>：代表<strong>上一层</strong>目录，相对路径。 如： <code>&lt;a&gt;</code>文本 <code>&lt;/a&gt;</code> 或 <code>&lt;img</code> <code>src=&quot;../abc&quot;</code> <code>/&gt;</code></p><p>（3） <code>../../</code>：代表的是<strong>上一层目录的上一层</strong>目录，相对路径。 如： <code>&lt;img</code> <code>src=&quot;../../abc&quot;</code> <code>/&gt;</code></p><p>（4） <code>/</code>：代表<strong>根目录</strong>，绝对路径。 如：[文本] <code>(/abc)</code> 或 <code>&lt;img</code> <code>src=&quot;/abc&quot;</code> <code>/&gt;</code></p><h2 id="五、href的概念"><a href="#五、href的概念" class="headerlink" title="五、href的概念"></a>五、href的概念</h2><h2 id="5-1-规范解释"><a href="#5-1-规范解释" class="headerlink" title="5.1 规范解释"></a><strong>5.1 规范解释</strong></h2><blockquote><p>href (Hypertext Reference)指定网络资源的位置，从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系。</p></blockquote><h2 id="5-2-通俗理解"><a href="#5-2-通俗理解" class="headerlink" title="5.2 通俗理解"></a><strong>5.2 通俗理解</strong></h2><p>href 目的不是为了引用资源，而是为了建立联系，让当前标签能够链接到目标地址。</p><h2 id="六、src的概念"><a href="#六、src的概念" class="headerlink" title="六、src的概念"></a>六、src的概念</h2><p>source（缩写），指向外部资源的位置，指向的内容将会应用到文档中当前标签所在位置。</p><h2 id="七、href和src的区别"><a href="#七、href和src的区别" class="headerlink" title="七、href和src的区别"></a>七、href和src的区别</h2><h2 id="7-1-请求资源类型不同"><a href="#7-1-请求资源类型不同" class="headerlink" title="7.1 请求资源类型不同"></a><strong>7.1 请求资源类型不同</strong></h2><p>（1）href 指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的联系。</p><p>（2）在请求 src 资源时会将其指向的资源下载并应用到文档中，比如 JavaScript 脚本，img 图片；</p><h2 id="7-2-作用结果不同"><a href="#7-2-作用结果不同" class="headerlink" title="7.2 作用结果不同"></a><strong>7.2 作用结果不同</strong></h2><p>（1）href 用于在当前文档和引用资源之间确立联系；</p><p>（2）src 用于替换当前内容；</p><h2 id="7-3-浏览器解析方式不同"><a href="#7-3-浏览器解析方式不同" class="headerlink" title="7.3 浏览器解析方式不同"></a><strong>7.3 浏览器解析方式不同</strong></h2><p>（1）若在文档中添加 ，浏览器会识别该文档为 CSS 文件，就会<strong>并行下载资源并且不会停止对当前文档的处理。</strong>这也是为什么建议使用 link 方式加载 CSS，而不是使用 @import 方式。</p><p>（2）当浏览器解析到 ，会<strong>暂停其他资源的下载和处理，</strong>直到将该资源加载、编译、执行完毕，图片和框架等也如此，类似于将所指向资源应用到当前内容。这也是为什么建议把 js 脚本放在底部而不是头部的原因。</p><h2 id="八、link和-import的区别"><a href="#八、link和-import的区别" class="headerlink" title="八、link和@import的区别"></a>八、link和@import的区别</h2><p>两者都是外部引用 CSS 的方式，但是存在一定的区别：</p><p>（1）link是XHTML标签，除了能够加载CSS，还可以定义RSS等其他事务；而@import属于CSS范畴，只可以加载CSS。</p><p>（2）link引用CSS时，在页面载入时同时加载；@import需要页面完全载入以后再加载。</p><p>（3）link是XHTML标签，无兼容问题；@import则是在CSS2.1提出的，低版本的浏览器不支持。</p><p>（4）link支持使用Javascript控制DOM改变样式；而@import不支持。</p><h2 id="参考-https-zhuanlan-zhihu-com-p-35571428"><a href="#参考-https-zhuanlan-zhihu-com-p-35571428" class="headerlink" title="参考:https://zhuanlan.zhihu.com/p/35571428"></a>参考:<a href="https://zhuanlan.zhihu.com/p/35571428">https://zhuanlan.zhihu.com/p/35571428</a></h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 Webpack 实现模块化打包？</title>
      <link href="posts/fc816eb/"/>
      <url>posts/fc816eb/</url>
      
        <content type="html"><![CDATA[<p>对模块化打包方案或工具的设想或者说是诉求：</p><ol><li><p>能够将散落的模块打包到一起；</p></li><li><p>能够编译代码中的新特性；</p></li><li><p>能够支持不同种类的前端资源模块。</p></li></ol><p><img src="https://s0.lgstatic.com/i/image3/M01/04/CD/CgoCgV6dE8qATeN7AAHuGzEsqjI585.png" loading="lazy"></p><p>目前，前端领域有一些工具能够很好的满足以上这 3 个需求，其中最为主流的就是 Webpack、Parcel 和 Rollup，我们以 Webpack 为例：</p><ul><li><p>Webpack 作为一个模块打包工具，本身就可以解决模块化代码打包的问题，将零散的 JavaScript 代码打包到一个 JS 文件中。</p></li><li><p>对于有环境兼容问题的代码，Webpack 可以在打包过程中通过 Loader 机制对其实现编译转换，然后再进行打包。</p></li><li><p>对于不同类型的前端模块类型，Webpack 支持在 JavaScript 中以模块化的方式载入任意类型的资源文件，例如，我们可以通过 Webpack 实现在 JavaScript 中加载 CSS 文件，被加载的 CSS 文件将会通过 style 标签的方式工作。</p></li></ul><p>除此之外，Webpack 还具备代码拆分的能力，它能够将应用中所有的模块按照我们的需要分块打包。这样一来，就不用担心全部代码打包到一起，产生单个文件过大，导致加载慢的问题。我们可以把应用初次加载所必需的模块打包到一起，其他的模块再单独打包，等到应用工作过程中实际需要用到某个模块，再异步加载该模块，实现增量加载，或者叫作渐进式加载，非常适合现代化的大型 Web 应用。</p><h4 id="Webpack-快速上手"><a href="#Webpack-快速上手" class="headerlink" title="Webpack 快速上手"></a>Webpack 快速上手</h4><p>Webpack 作为目前最主流的前端模块打包器，提供了一整套前端项目模块化方案，而不仅仅局限于对 JavaScript 的模块化。通过 Webpack，我们可以轻松的对前端项目开发过程中涉及的所有资源进行模块化。</p><p>接下来将通过一个案例，快速了解 Webpack 的基本使用，具体操作如下所示：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">└─ 02-configuation   ├── src   │   ├── heading.js   │   └── index.js   └── index.html</code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// ./src/heading.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h2'</span><span class="token punctuation">)</span>  element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">'Hello webpack'</span>  element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello webpack'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> element<span class="token punctuation">&#125;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// ./src/index.js</span><span class="token keyword">import</span> createHeading <span class="token keyword">from</span> <span class="token string">'./heading.js'</span><span class="token keyword">const</span> heading <span class="token operator">=</span> <span class="token function">createHeading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>heading<span class="token punctuation">)</span></code></pre><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Webpack - 快速上手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><blockquote><p>type=”module” 这种用法是 ES Modules 中提出的标准，用来区分加载的是一个普通 JS 脚本还是一个模块。</p></blockquote><p>安装完成之后，webpack-cli 所提供的 CLI 程序就会出现在 node_modules/.bin 目录当中，我们可以通过 npx 快速找到 CLI 并运行它，具体操作如下：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">$ npx webpack <span class="token operator">--</span>versionv4<span class="token punctuation">.</span><span class="token number">42.1</span></code></pre><blockquote><p> npx 是 npm 5.2 以后新增的一个命令，可以用来更方便的执行远程模块或者项目 node_modules 中的 CLI 程序。</p></blockquote><p>这里我们使用的 Webpack 版本是 v4.42.1，有了 Webpack 后，就可以直接运行 webpack 命令来打包 JS 模块代码，具体操作如下：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx">$ npx webpack</code></pre><p>这个命令在执行的过程中，Webpack 会自动从 src/index.js 文件开始打包，然后根据代码中的模块导入操作，自动将所有用到的模块代码打包到一起。</p><p>完成之后，控制台会提示：顺着 index.js 有两个 JS 文件被打包到了一起。与之对应的就是项目的根目录下多出了一个 dist 目录，我们的打包结果就存放在这个目录下的 main.js 文件中，具体操作如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/11/FC/Ciqah16dFAaAMNccAADOAanBuOA265.png" loading="lazy"></p><p>这里我们回到 index.html 中修改引入文件的路径，由于打包后的代码就不会再有 import 和 export 了，所以我们可以删除 type=”module”。再次回到浏览器中，查看这个页面，这时我们的代码仍然可以正常工作，index.html 的代码如下所示：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Webpack - 快速上手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dist/main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>我们也可以将 Webpack 命令定义到 npm scripts 中，这样每次使用起来会更加方便，具体如下：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token punctuation">&#123;</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"01-getting-started"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"0.1.0"</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"n/a"</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">"zce &lt;w@zce.me> (https://zce.me)"</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"webpack"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"webpack"</span><span class="token punctuation">:</span> <span class="token string">"^4.42.1"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-cli"</span><span class="token punctuation">:</span> <span class="token string">"^3.3.11"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>对于 Webpack 最基本的使用，总结下来就是：先安装 webpack 相关的 npm 包，然后使用 webpack-cli 所提供的命令行工具进行打包。</p><h4 id="配置-Webpack-的打包过程"><a href="#配置-Webpack-的打包过程" class="headerlink" title="配置 Webpack 的打包过程"></a>配置 Webpack 的打包过程</h4><p>Webpack 4 以后的版本支持零配置的方式直接启动打包，整个过程会按照约定将 src/index.js 作为打包入口，最终打包的结果会存放到 dist/main.js 中。</p><p>但很多时候我们需要自定义这些路径约定，例如，在下面这个案例中，我需要它的打包入口是 src/main.js，那此时我们通过配置文件的方式修改 Webpack 的默认配置，在项目的根目录下添加一个 webpack.config.js，具体结构如下：</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown"> └─ 02-configuation<span class="token code keyword">    ├── src</span><span class="token code keyword">    │ ├── heading.js</span><span class="token code keyword">    │ └── main.js</span><span class="token code keyword">    ├── index.html</span><span class="token code keyword">    ├── package.json</span><span class="token list punctuation">+</span>   └── webpack.config.js ···················· Webpack 配置文件</code></pre><p>webpack.config.js 是一个运行在 Node.js 环境中的 JS 文件，也就是说我们需要按照 CommonJS 的方式编写代码，这个文件可以导出一个对象，我们可以通过所导出对象的属性完成相应的配置选项。</p><p>这里先尝试添加一个 entry 属性，这个属性的作用就是指定 Webpack 打包的入口文件路径。我们将其设置为 src/main.js，具体代码如下所示：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// ./webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">&#125;</span></code></pre><p>配置完成之后，回到命令行终端重新运行打包命令，此时 Webpack 就会从 src/main.js 文件开始打包。</p><p>除了 entry 的配置以外，我们还可以通过 output 属性设置输出文件的位置。output 属性的值必须是一个对象，通过这个对象的 filename 指定输出文件的文件名称，path 指定输出的目录，具体代码如下所示：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// ./webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'output'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>TIPS：webpack.config.js 是运行在 Node.js 环境中的代码，所以直接可以使用 path 之类的 Node.js 内置模块。</p><p>由于 Webpack 支持的配置有很多，篇幅的关系，这里我们就不一一介绍了，详细的文档你可以在 Webpack 的官网中找到：<a href="https://webpack.js.org/configuration/#options">https://webpack.js.org/configuration/#options</a></p><h4 id="让配置文件支持智能提示"><a href="#让配置文件支持智能提示" class="headerlink" title="让配置文件支持智能提示"></a>让配置文件支持智能提示</h4><p>在这里，我想跟你分享我在编写 Webpack 配置文件时用过的一个小技巧，因为 Webpack 的配置项比较多，而且很多选项都支持不同类型的配置方式。如果你刚刚接触 Webpack 的配置，这些配置选项一定会让你感到头大。如果开发工具能够为 Webpack 配置文件提供智能提示的话，这种痛苦就会减小很多，配置起来，效率和准确度也会大大提高。</p><p>我们知道， VSCode 对于代码的自动提示是根据成员的类型推断出来的，换句话说，如果 VSCode 知道当前变量的类型，就可以给出正确的智能提示。即便你没有使用 TypeScript 这种类型友好的语言，也可以通过类型注释的方式去标注变量的类型。</p><p>默认 VSCode 并不知道 Webpack 配置对象的类型，我们通过 import 的方式导入 Webpack 模块中的 Configuration 类型，然后根据类型注释的方式将变量标注为这个类型，这样我们在编写这个对象的内部结构时就可以有正确的智能提示了，具体代码如下所示：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// ./webpack.config.js</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Configuration <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'webpack'</span><span class="token comment">/** * @type &#123;Configuration&#125; */</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config</code></pre><p>需要注意的是：我们添加的 import 语句只是为了导入 Webpack 配置对象的类型，这样做的目的是为了标注 config 对象的类型，从而实现智能提示。在配置完成后一定要记得注释掉这段辅助代码，因为在 Node.js 环境中默认还不支持 import 语句，如果执行这段代码会出现错误。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// ./webpack.config.js</span><span class="token comment">// 一定记得运行 Webpack 前先注释掉这里。</span><span class="token comment">// import &#123; Configuration &#125; from 'webpack' </span><span class="token comment">/** * @type &#123;Configuration&#125; */</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config</code></pre><p>加上类型标注实现智能提示的效果，如下所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/05/10/CgoCgV6dX8WAT4jvAJhTWS1vldA516.gif" loading="lazy"></p><p>使用 import 语句导入 Configuration 类型的方式固然好理解，但是在不同的环境中还是会有各种各样的问题，例如我们这里在 Node.js 环境中，就必须要额外注释掉这个导入类型的语句，才能正常工作。</p><p>所以我一般的做法是直接在类型注释中使用 import 动态导入类型，具体代码如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// ./webpack.config.js</span><span class="token comment">/** @type &#123;import('webpack').Configuration&#125; */</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config</code></pre><p>这种方式同样也可以实现载入类型，而且相比于在代码中通过 import 语句导入类型更为方便，也更为合理。</p><p>不过需要注意一点，这种导入类型的方式并不是 ES Modules 中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import#%E5%8A%A8%E6%80%81import">Dynamic Imports</a>，而是 TypeScript 中提供特性。虽然我们这里只是一个 JavaScript 文件，但是在 VSCode 中的类型系统都是基于 TypeScript 的，所以可以直接按照这种方式使用，详细信息你可以参考这种 <a href="https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types">import-types</a> 的文档。</p><p>其次，这种 @type 类型注释的方式是基于 <a href="https://jsdoc.app/">JSDo</a><a href="https://jsdoc.app/tags-type.html">c</a> 实现的。JSDoc 中类型注释的用法还有很多，详细可以参考<a href="https://jsdoc.app/tags-type.html">官方文档中对 @type 标签的介绍</a>。</p><h4 id="Webpack-工作模式"><a href="#Webpack-工作模式" class="headerlink" title="Webpack 工作模式"></a>Webpack 工作模式</h4><p>Webpack 4 新增了一个工作模式的用法，这种用法大大简化了 Webpack 配置的复杂程度。你可以把它理解为针对不同环境的几组预设配置：</p><ul><li>production 模式下，启动内置优化插件，自动优化打包结果，打包速度偏慢；</li><li>development 模式下，自动优化打包速度，添加一些调试过程中的辅助插件；</li><li>none 模式下，运行最原始的打包，不做任何额外处理。</li></ul><p>针对工作模式的选项，如果你没有配置一个明确的值，打包过程中命令行终端会打印一个对应的配置警告。在这种情况下 Webpack 将默认使用 production 模式去工作。</p><p>production 模式下 Webpack 内部会自动启动一些优化插件，例如，自动压缩打包后的代码。这对实际生产环境是非常友好的，但是打包的结果就无法阅读了。</p><p>修改 Webpack 工作模式的方式有两种：</p><ul><li>通过 CLI –mode 参数传入；</li><li>通过配置文件设置 mode 属性。</li></ul><p>上述三种 Webpack 工作模式的详细差异我们不再赘述了，你可以在官方文档中查看：<a href="https://webpack.js.org/configuration/mode/">https://webpack.js.org/configuration/mode/</a></p><h4 id="打包结果运行原理"><a href="#打包结果运行原理" class="headerlink" title="打包结果运行原理"></a>打包结果运行原理</h4><p>最后，我们来一起学习 Webpack 打包后生成的 bundle.js 文件，深入了解 Webpack 是如何把这些模块合并到一起，而且还能正常工作的。</p><p>为了更好的理解打包后的代码，我们先将 Webpack 工作模式设置为 none，这样 Webpack 就会按照最原始的状态进行打包，所得到的结果更容易理解和阅读。</p><p>按照 none 模式打包完成后，我们打开最终生成的 bundle.js 文件，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/8B/13/Cgq2xl6dFMCAIUxiAAGa_XXbqjc578.png" loading="lazy"></p><p>我们可以先把代码全部折叠起来，以便于了解整体的结构，如下图所示：</p><blockquote><p>TIPS：<br>-VSCode 中折叠代码的快捷键是 Ctrl + K，Ctrl + 0 （macOS：Command + K，Command + 0）</p></blockquote><p><img src="https://s0.lgstatic.com/i/image3/M01/11/FD/Ciqah16dFM-AVj_BAABXnvvMgEs140.png" loading="lazy"></p><p>整体生成的代码其实就是一个立即执行函数，这个函数是 Webpack 工作入口（webpackBootstrap），它接收一个 modules 参数，调用时传入了一个数组。</p><p>展开这个数组，里面的元素均是参数列表相同的函数。这里的函数对应的就是我们源代码中的模块，也就是说每个模块最终被包裹到了这样一个函数中，从而实现模块私有作用域，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/04/CE/CgoCgV6dFNiAE5w5AACemkpDN74095.png" loading="lazy"></p><p>我们再来展开 Webpack 工作入口函数，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/8B/13/Cgq2xl6dFOOASkRMAAKy8jLkXaM933.png" loading="lazy"></p><p>这个函数内部并不复杂，而且注释也很清晰，最开始定义了一个 installedModules 对象用于存放或者缓存加载过的模块。紧接着定义了一个 require 函数，顾名思义，这个函数是用来加载模块的。再往后就是在 require 函数上挂载了一些其他的数据和工具函数，这些暂时不用关心。</p><p>这个函数执行到最后调用了 require 函数，传入的模块 id 为 0，开始加载模块。模块 id 实际上就是模块数组的元素下标，也就是说这里开始加载源代码中所谓的入口模块，如下图所示：</p><p><img src="https://s0.lgstatic.com/i/image3/M01/8B/13/Cgq2xl6dFOyAHCNzAAKy8jLkXaM393.png" loading="lazy"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>整体上对于 Webpack 的基本使用其实并不复杂，特别是在 Webpack 4 以后，很多配置都已经被简化了，在这种配置并不复杂的前提下，开发人员对它的掌握程度主要就体现在了是否能够理解它的工作机制和原理上了。</p><p>就拿 Webpack 打包过后的结果来说，大多数的开发者其实根本不会关心它内部的结构是怎样的，又是如何运行起来的，总觉得不需要关心，但是当这种“不用关心”的事情越积越多，整个开发过程不可控的点也会随之增多，当出现问题时，也就很难定位问题的根源了。</p><p>其实通过我们的探索你会发现，当你打开“黑盒子”后，里面的东西并没有想象的那么复杂，很多时候你离成功就只有一步之遥，而驱使你走向成功的其实是你的好奇心。在我看来，好奇心应该是一个优秀开发者的基本素质，对待未知的好奇就是我们进步的源泉，与君共勉。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后我来总结一下本篇的重点，你也可以通过这几个重点反思一下掌握与否：</p><ol><li>Webpack 是如何满足模块化打包需求的。</li><li>Webpack 打包的配置方式以及一个可以实现配置文件智能提示的小技巧。</li><li>Webpack 工作模式特性的作用。</li><li>通过 Webpack 打包后的结果是如何运行起来的？</li></ol><h3 id="⚠️踩坑"><a href="#⚠️踩坑" class="headerlink" title="⚠️踩坑"></a>⚠️踩坑</h3><p> serve包:<a href="https://www.npmjs.com/package/serve">https://www.npmjs.com/package/serve</a></p><p>最后打包成bundle.js之后，serve运行的之前，html中要修改为src=”dist/bundle.js”不要用原来的main.js</p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack解决了什么问题</title>
      <link href="posts/7e63b3f5/"/>
      <url>posts/7e63b3f5/</url>
      
        <content type="html"><![CDATA[<h6 id="模块化的演进过程"><a href="#模块化的演进过程" class="headerlink" title="模块化的演进过程"></a>模块化的演进过程</h6><p>随着互联网的深入发展，前端技术标准发生了巨大的变化。早期的前端技术标准根本没有预料到前端行业会有今天这个规模，所以在设计上存在很多缺陷，导致我们现在去实现前端模块化时会遇到诸多问题。虽然说，如今绝大部分问题都已经被一些标准或者工具解决了，但在这个演进过程中依然有很多东西值得我们思考和学习，所以接下来我想先介绍一下前端方向落实模块化的几个代表阶段。</p><h5 id="1-文件划分方式"><a href="#1-文件划分方式" class="headerlink" title="1 - 文件划分方式"></a>1 - 文件划分方式</h5><p>最早我们会基于文件划分的方式实现模块化，也就是 Web 最原始的模块系统。具体做法是将每个功能及其相关状态数据各自单独放到不同的 JS 文件中，约定每个文件是一个独立的模块。使用某个模块将这个模块引入到页面中，一个 script 标签对应一个模块，然后直接调用模块中的成员（变量 / 函数）。</p><pre class="language-markdown" data-language="markdown"><code class="language-markdown">└─ stage-1    ├── module-a.js    ├── module-b.js    └── index.html</code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// module-a.js </span><span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'moduleA#foo'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// module-b.js </span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">'something'</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>title<span class="token operator">></span>Stage <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"module-a.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"module-b.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token comment">// 直接使用全局成员</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 可能存在命名冲突</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">'other'</span> <span class="token comment">// 数据可能会被修改</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>😅缺点：</p><ul><li><p>模块直接在全局工作，大量模块成员污染全局作用域；</p></li><li><p>没有私有空间，所有模块内的成员都可以在模块外部被访问或者修改；</p></li><li><p>一旦模块增多，容易产生命名冲突；</p></li><li><p>无法管理模块与模块之间的依赖关系；</p></li><li><p>在维护的过程中也很难分辨每个成员所属的模块。</p></li></ul><p><font style="color:deepskyblue;">总之，这种原始“模块化”的实现方式完全依靠约定实现，一旦项目规模变大，这种约定就会暴露出种种问题，非常不可靠，所以我们需要尽可能解决这个过程中暴露出来的问题。</font></p><h5 id="2-–-命名空间方式"><a href="#2-–-命名空间方式" class="headerlink" title="2 – 命名空间方式"></a>2 – 命名空间方式</h5><p>后来，我们约定每个模块只暴露一个全局对象，所有模块成员都挂载到这个全局对象中，具体做法是在第一阶段的基础上，通过将每个模块“包裹”为一个全局对象的形式实现，这种方式就好像是为模块内的成员添加了“命名空间”，所以我们又称之为命名空间方式。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// module-a.js</span>window<span class="token punctuation">.</span>moduleA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">method1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'moduleA#method1'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// module-b.js</span>window<span class="token punctuation">.</span>moduleB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  data<span class="token operator">:</span> <span class="token string">'something'</span>  <span class="token function-variable function">method1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'moduleB#method1'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>title<span class="token operator">></span>Stage <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"module-a.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"module-b.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    moduleA<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    moduleB<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 模块成员依然可以被修改</span>    moduleA<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">'foo'</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p><font style="color:deepskyblue;">这种命名空间的方式只是解决了命名冲突的问题，但是其它问题依旧存在。</font></p><h5 id="3-–-IIFE"><a href="#3-–-IIFE" class="headerlink" title="3 – IIFE"></a>3 – IIFE</h5><p>使用立即执行函数表达式（IIFE，Immediately-Invoked Function Expression）为模块提供私有空间。具体做法是将每个模块成员都放在一个立即执行函数所形成的私有作用域中，对于需要暴露给外部的成员，通过挂到全局对象上的方式实现。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// module-a.js</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'module-a'</span>  <span class="token keyword">function</span> <span class="token function">method1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'#method1'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  window<span class="token punctuation">.</span>moduleA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    method1<span class="token operator">:</span> method1  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// module-b.js</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'module-b'</span>  <span class="token keyword">function</span> <span class="token function">method1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'#method1'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  window<span class="token punctuation">.</span>moduleB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    method1<span class="token operator">:</span> method1  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><font style="color:deepskyblue;">这种方式带来了私有成员的概念，私有成员只能在模块成员内通过闭包的形式访问，这就解决了前面所提到的全局作用域污染和命名冲突的问题。</font></p><h5 id="4-IIFE-依赖参数"><a href="#4-IIFE-依赖参数" class="headerlink" title="4 - IIFE 依赖参数"></a>4 - IIFE 依赖参数</h5><p>在 IIFE 的基础之上，我们还可以利用 IIFE 参数作为依赖声明使用，这使得每一个模块之间的依赖关系变得更加明显。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// module-a.js</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 通过参数明显表明这个模块的依赖</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'module-a'</span>  <span class="token keyword">function</span> <span class="token function">method1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">'#method1'</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> margin<span class="token operator">:</span> <span class="token string">'200px'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  window<span class="token punctuation">.</span>moduleA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    method1<span class="token operator">:</span> method1  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span></code></pre><h5 id="模块加载的问题"><a href="#模块加载的问题" class="headerlink" title="模块加载的问题"></a>模块加载的问题</h5><p>以上 4 个阶段是早期的开发者在没有工具和规范的情况下对模块化的落地方式，这些方式确实解决了很多在前端领域实现模块化的问题，但是仍然存在一些没有解决的问题。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Evolution<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/jquery<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module-a.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module-b.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    moduleA<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    moduleB<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>最明显的问题就是：模块的加载。在这几种方式中虽然都解决了模块代码的组织问题，但模块加载的问题却被忽略了，我们都是通过 script 标签的方式直接在页面中引入的这些模块，这意味着模块的加载并不受代码的控制，时间久了维护起来会十分麻烦。<font style="color:#CD853F;">试想一下，如果你的代码需要用到某个模块，如果 HTML 中忘记引入这个模块，又或是代码中移除了某个模块的使用，而 HTML 还忘记删除该模块的引用，都会引起很多问题和不必要的麻烦。</font></p><p>更为理想的方式应该是在页面中引入一个 JS 入口文件，其余用到的模块可以通过代码控制，<font style="color:gold;">按需加载</font>进来。</p><h5 id="模块化规范的出现"><a href="#模块化规范的出现" class="headerlink" title="模块化规范的出现"></a>模块化规范的出现</h5><p>除了模块加载的问题以外，目前这几种通过约定实现模块化的方式，不同的开发者在实施的过程中会出现一些细微的差别，因此，为了统一不同开发者、不同项目之间的差异，我们就需要制定一个行业标准去规范模块化的实现方式。</p><p>再接合我们刚刚提到的模块加载的问题，我们现在的需求就是两点：</p><ul><li>一个统一的模块化标准规范</li><li>一个可以自动加载模块的基础库</li></ul><p>提到模块化规范，可能会想到 CommonJS 规范，它是 Node.js 中所遵循的模块规范，该规范约定，一个文件就是一个模块，每个模块都有单独的作用域，通过 module.exports 导出成员，再通过 require 函数载入模块。现如今的前端开发者应该对其有所了解，但是如果我们想要在浏览器端直接使用这个规范，那就会出现一些新的问题。</p><p>CommonJS 约定的是以同步的方式加载模块，因为 Node.js 执行机制是在启动时加载模块，执行过程中只是使用模块，所以这种方式不会有问题。但是如果要在浏览器端使用同步的加载模式，就会引起大量的同步模式请求，导致应用运行效率低下。</p><p>所以在早期制定前端模块化标准时，并没有直接选择 CommonJS 规范，而是专门为浏览器端重新设计了一个规范，叫做 AMD （ Asynchronous Module Definition） 规范，即异步模块定义规范。同期还推出了一个非常出名的库，叫做 Require.js，它除了实现了 AMD 模块化规范，本身也是一个非常强大的模块加载器。</p><p><font style="color:#BDB76B;">在 AMD 规范中约定每个模块通过 define() 函数定义，这个函数默认可以接收两个参数，第一个参数是一个数组，用于声明此模块的依赖项；第二个参数是一个函数，参数与前面的依赖项一一对应，每一项分别对应依赖项模块的导出成员，这个函数的作用就是为当前模块提供一个私有空间。如果在当前模块中需要向外部导出成员，可以通过 return 的方式实现。</font></p><p><img src="https://s0.lgstatic.com/i/image3/M01/89/DC/Cgq2xl6YeWWAZhc-AAIVA96nDrk023.png" loading="lazy"></p><p>除此之外，Require.js 还提供了一个 require() 函数用于自动加载模块，用法与 define() 函数类似，<font style="color:tomato;">区别在于 require() 只能用来载入模块，而  define() 还可以定义模块。</font>当 Require.js 需要加载一个模块时，内部就会自动创建 script 标签去请求并执行相应模块的代码。</p><p><img src="https://s0.lgstatic.com/i/image3/M01/03/97/CgoCgV6YeWWAZBOiAAFbOHcA3-o771.png" loading="lazy"></p><p>目前绝大多数第三方库都支持 AMD 规范，但是它使用起来相对复杂，而且当项目中模块划分过于细致时，就会出现同一个页面对 js 文件的请求次数过多的情况，从而导致效率降低。在当时的环境背景下，AMD 规范为前端模块化提供了一个标准，但这只是一种妥协的实现方式，并不能成为最终的解决方案。</p><p>同期出现的规范还有淘宝的 Sea.js，只不过它实现的是另外一个标准，叫作 CMD，这个标准类似于 CommonJS，在使用上基本和 Require.js 相同，可以算上是重复的轮子。但随着前端技术的发展，Sea.js 后来也被 Require.js 兼容了。如果感兴趣可了解一下 <a href="https://seajs.github.io/seajs/docs/">Seajs官网</a>。</p><p><img src="https://s0.lgstatic.com/i/image3/M01/10/C6/Ciqah16YeWWAHUDmAAI62LbE3vI465.png" loading="lazy"></p><h5 id="模块化的标准规范"><a href="#模块化的标准规范" class="headerlink" title="模块化的标准规范"></a>模块化的标准规范</h5><p>尽管上面介绍的这些方式和标准都已经实现了模块化，但是都仍然存在一些让开发者难以接受的问题。</p><p>随着技术的发展，JavaScript 的标准逐渐走向完善，可以说，如今的前端模块化已经发展得非常成熟了，而且对前端模块化规范的最佳实践方式也基本实现了统一。</p><ul><li>在 Node.js 环境中，我们遵循 CommonJS 规范来组织模块。</li><li>在浏览器环境中，我们遵循 ES Modules 规范。</li></ul><p><img src="https://s0.lgstatic.com/i/image3/M01/89/DC/Cgq2xl6YeWWAQftyAAFnRTB-PpI302.png" loading="lazy"></p><p><font style="color:deepskyblue;">而且在最新的 Node.js 提案中表示，Node 环境也会逐渐趋向于 ES Modules 规范，也就是说作为现阶段的前端开发者，应该重点掌握 ES Modules 规范。</font></p><p>因为 CommonJS 属于内置模块系统，所以在 Node.js 环境中使用时不存在环境支持问题，只需要直接遵循标准使用 require 和 module 即可。</p><p>但是对于 ES Modules 规范来说，情况会相对复杂一些。我们知道 ES Modules 是 ECMAScript 2015（ES6）中才定义的模块系统，也就是说它是近几年才制定的标准，所以肯定会存在环境兼容的问题。在这个标准刚推出的时候，几乎所有主流的浏览器都不支持。但是随着 Webpack 等一系列打包工具的流行，这一规范才开始逐渐被普及。</p><p>经过 5 年的迭代， ES Modules 已发展成为现今最主流的前端模块化标准。相比于 AMD 这种社区提出的开发规范，ES Modules 是在语言层面实现的模块化，因此它的标准更为完善也更为合理。而且目前绝大多数浏览器都已经开始能够原生支持 ES Modules 这个特性了，所以说在未来几年，它还会有更好的发展，短期内应该不会有新的轮子出现了。</p><p>综上所述，如何在不同的环境中去更好的使用 ES Modules 将是你重点考虑的问题。</p><h5 id="ES-Modules-特性"><a href="#ES-Modules-特性" class="headerlink" title="ES Modules 特性"></a>ES Modules 特性</h5><p>针对 ES Modules 本身的一些特性不做赘述，可以参考：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules">MDN 官方的详细资料</a></li><li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-modules">ECMAScript 官方详细资料</a></li></ul><p><img src="https://s0.lgstatic.com/i/image3/M01/03/97/CgoCgV6YeWaAN1caAAFPHLEZF0A908.png" loading="lazy"></p><h3 id="模块打包工具的出现"><a href="#模块打包工具的出现" class="headerlink" title="模块打包工具的出现"></a>模块打包工具的出现</h3><p>模块化可以帮助我们更好地解决复杂应用开发过程中的代码组织问题，但是随着模块化思想的引入，我们的前端应用又会产生了一些新的问题，比如：</p><ul><li>首先，我们所使用的 ES Modules 模块系统本身就存在环境兼容问题。尽管现如今主流浏览器的最新版本都支持这一特性，但是目前还无法保证用户的浏览器使用情况。所以我们还需要解决兼容问题。</li><li>其次，模块化的方式划分出来的模块文件过多，而前端应用又运行在浏览器中，每一个文件都需要单独从服务器请求回来。零散的模块文件必然会导致浏览器的频繁发送网络请求，影响应用的工作效率。</li><li>最后，谈一下在实现 JS 模块化的基础上的发散。随着应用日益复杂，在前端应用开发过程中不仅仅只有 JavaScript 代码需要模块化，HTML 和 CSS 这些资源文件也会面临需要被模块化的问题。而且从宏观角度来看，这些文件也都应该看作前端应用中的一个模块，只不过这些模块的种类和用途跟 JavaScript 不同。</li></ul><p>对于开发过程而言，模块化肯定是必要的，所以我们需要在前面所说的模块化实现的基础之上引入更好的方案或者工具，去解决上面提出的 3 个问题，让我们的应用在开发阶段继续享受模块化带来的优势，又不必担心模块化对生产环境所产生的影响。</p><p>接下来我们先对这个更好的方案或者工具提出一些设想：</p><ul><li>第一，它需要具备编译代码的能力，也就是将我们开发阶段编写的那些包含新特性的代码转换为能够兼容大多数环境的代码，解决我们所面临的环境兼容问题。</li></ul><p><img src="https://s0.lgstatic.com/i/image3/M01/10/C6/Ciqah16YeWaAEqbZAAB2uMwv74E224.png" loading="lazy"></p><ul><li>第二，能够将散落的模块再打包到一起，这样就解决了浏览器频繁请求模块文件的问题。这里需要注意，只是在开发阶段才需要模块化的文件划分，因为它能够帮我们更好地组织代码，到了实际运行阶段，这种划分就没有必要了。</li></ul><p><img src="https://s0.lgstatic.com/i/image3/M01/03/97/CgoCgV6YeWaAHgm3AAB8JgXpadc131.png" loading="lazy"></p><ul><li>第三，它需要支持不同种类的前端模块类型，也就是说可以将开发过程中涉及的样式、图片、字体等所有资源文件都作为模块使用，这样我们就拥有了一个统一的模块化方案，所有资源文件的加载都可以通过代码控制，与业务代码统一维护，更为合理。</li></ul><p><img src="https://s0.lgstatic.com/i/image3/M01/89/DC/Cgq2xl6YeWaARx0OAACCLDANJto655.png" loading="lazy"></p><p>针对上面第一、第二个设想，我们可以借助 Gulp 之类的构建系统配合一些编译工具和插件去实现，但是对于第三个可以对不同种类资源进行模块化的设想，就很难通过这种方式去解决了，所以就有了接下来要介绍的主题：前端模块打包工具。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p><font style="color:skyblue;">Webpack 发展到今天，它的功能已经非常强大了，但依然改变不了它是一个模块化解决方案的初衷。你可以看到， Webpack 官方的 Slogan 仍然是：<em>A bundler for javascript and friends（一个 JavaScript 和周边的打包工具）</em>。</font></p><p>从另外一个角度来看，Webpack 从一个“打包工具”，发展成现在开发者眼中对整个前端项目的“构建系统”，表面上似乎只是称呼发生了变化，但是这背后却透露出来一个信号：模块化思想是非常伟大的，伟大到可以帮你“统治”前端整个项目。这也足以见得模块化思想背后还有很多值得我们思考的内容。</p><p><font style="color:yellowgreen;">总的来说，我们可以把 Webpack 看作现代化前端应用的“管家”，这个“管家”所践行的核心理论就是“模块化”，也就是说 <strong>Webpack 以模块化思想为核心，帮助开发者更好的管理整个前端工程。</strong></font></p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts模块系统</title>
      <link href="posts/3cf84be9/"/>
      <url>posts/3cf84be9/</url>
      
        <content type="html"><![CDATA[<h2 id="模块的专业术语变更"><a href="#模块的专业术语变更" class="headerlink" title="模块的专业术语变更"></a>模块的专业术语变更</h2><p><font style="color:red;font-size:18px">“内部模块”现在称做“命名空间”;“外部模块”现在则简称为“模块”</font></p><p><font style="color:red;font-size:18px">模块在其自身的作用域里执行，而不是在全局作用域里</font></p><p>这意味着定义在一个模块里的变量，函数，类等等在模块外部是不可见的，除非你明确地使用export形式之一导出它们。</p><p>相反，如果想使用其它模块导出的变量，函数，类，接口等的时候，你必须要导入它们，可以使用import形式之一。</p><p>模块是自声明的;两个模块之间的关系是通过在文件级别上使用imports和exports建立的。</p><p>如果一个文件不带有顶级的import或者export声明，那么它的内容被视为全局可见的**(因此对模块也是可见的)**</p><p><font style="color:lightskyblue;font-size:18px">调用一个模块都要用import来调用其他模块</font></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>add <span class="token keyword">as</span> MathAdd<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./MathModule.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">MathAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><font style="color:lightskyblue;font-size:18px">每个模块都要有输出export接口</font></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pre <span class="token operator">+</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span><span class="token punctuation">&#123;</span>add<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p><font style="color:lightskyblue;font-size:18px">单模块单文件存储</font></p><p><img src="https://img-blog.csdnimg.cn/20190304200859954.png" alt="单模块单文件存储" loading="lazy"></p><h2 id="模块导出"><a href="#模块导出" class="headerlink" title="模块导出"></a>模块导出</h2><p><font style="color:red;font-weight:900;">任何声明(比如变量，函数，类，类型别名或接口）都能够通过添加export关键字来导出。</font></p><p>举个🌰:</p><p><img src="https://i.loli.net/2020/12/11/Xvn8sWThk4CK9P5.png" alt="ts modules .png" loading="lazy"></p><h2 id="模块的重新导出"><a href="#模块的重新导出" class="headerlink" title="模块的重新导出"></a>模块的重新导出</h2><p>我们经常会去扩展其它模块，并且只导出那个模块的部分内容。重新导出功能并不会在当前模块导入那个模块或定义一个新的局部变量。</p><p>一个模块既可以引入也可以输出，甚至可以两者—起实现.</p><p><img src="https://i.loli.net/2020/12/11/nE2FSOQ6RzVKie5.png" alt="imex.png" loading="lazy"></p><p>基于前面图例的代码项目<code>tsMoudles</code>,我们尝试在<code>demo.ts</code>中修改一下:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> userMsg <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./tsMoudles/file'</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userMsg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无法分配到“userMsg”，因为它不是变量。</span>userMsg <span class="token operator">=</span> <span class="token string">"123456"</span></code></pre><p>无论导入导出,userMsg的类型始终被“锁死”在最初的<code>head.ts</code>类型属性里</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">userMsg<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token comment">//正确</span></code></pre><p>或者一个模块可以包裹多个模块，并把他们导出的内容联合在一起通过</p><p>语法:<code>export * from &quot;module&quot;</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./stringValidator"</span><span class="token punctuation">;</span> <span class="token comment">// exports interface stringValidator</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./LettersonlyValidator"</span> <span class="token punctuation">;</span> <span class="token comment">// exports class LettersOnlyValidator</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./ZipCodeValidator"</span><span class="token punctuation">;</span> <span class="token comment">// exports class ZipCodeValidator</span></code></pre><h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2><p>模块的导入操作与导出一样。可以使用以下import形式之一来导入其它模块中的导出内容。</p><h3 id="1-导入一个模块中的某个导出内容"><a href="#1-导入一个模块中的某个导出内容" class="headerlink" title="1.导入一个模块中的某个导出内容"></a>1.导入一个模块中的某个导出内容</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>userMsg<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./tsMoudles/file'</span></code></pre><h3 id="2-对导入内容重命名"><a href="#2-对导入内容重命名" class="headerlink" title="2.对导入内容重命名"></a>2.对导入内容重命名</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>a <span class="token keyword">as</span> userMsg<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./tsMoudles/file'</span></code></pre><h3 id="3-整个模块导入到一个变量，并通过它来访问模块的导出部分"><a href="#3-整个模块导入到一个变量，并通过它来访问模块的导出部分" class="headerlink" title="3.整个模块导入到一个变量，并通过它来访问模块的导出部分"></a>3.整个模块导入到一个变量，并通过它来访问模块的导出部分</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> value <span class="token keyword">from</span> <span class="token string">"./codevalue"</span><span class="token punctuation">;</span><span class="token keyword">let</span> myvalue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">value</span><span class="token punctuation">.</span><span class="token function">codevalue</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通配符<code> *</code>的小🌰</p><p><img src="https://cdn.longdoer.com/2020/12/11/tsfb0590c155ebaad3.png" alt="tsfb0590c155ebaad3.png" loading="lazy"></p><h2 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h2><p>从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p><p>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//export default.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>上面代码是一个模块文件export-defau1t.js，它的默认输出是一个函数.</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//import default.js</span><span class="token keyword">import</span> customName <span class="token keyword">from</span> <span class="token string">'./export_default'</span><span class="token punctuation">;</span><span class="token function">customName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其他模块加载该模块时， import命令可以为该匿名函数指定任意名字。</p><p>上面代码的import命令，可以用任意名称指向export-default.js输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时import命令后面，不使用大括号。</p><p>⚠️建议不要默认导出,因为你可能会不清楚导出的内容(命名),会加大后期维护成本</p><h4 id="默认导出优点"><a href="#默认导出优点" class="headerlink" title="默认导出优点:"></a>默认导出优点:</h4><p>方便!</p><p><code>math.ts</code></p><pre class="language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">zzy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//这里函数取名为zzy,其实写不写都一样</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,zzy!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p><code>file.ts</code></p><p>😉默认导出名字写在括号外,所以不能检查名称是否正确(前面也说到了不建议用哦)</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> 婷宝儿<span class="token punctuation">,</span><span class="token punctuation">&#123;</span> add<span class="token punctuation">,</span>userMsg <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./math"</span> <span class="token comment">//婷宝儿这个是随便起的,你写什么名字都行,不一定非要一样啊嘞~</span><span class="token function">婷宝儿</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用当然也没错了鸭,不过要和你上面import定义的一样</span></code></pre><p>图例:</p><p><a href="http://www.ipicbed.com/image/gut3P"><img src="https://cdn.longdoer.com/2020/12/11/ts89e867b8b7e64995.png" alt="ts89e867b8b7e64995.png" loading="lazy"></a></p><hr><h2 id="科普"><a href="#科普" class="headerlink" title="科普"></a>科普</h2><p>我就不叫拓展咋地😎</p><h4 id="export-和import-require"><a href="#export-和import-require" class="headerlink" title="export =和import = require()"></a>export =和import = require()</h4><p>commonJs和AMD的环境里都有一个exports变量，这个变量包含了一个模块的所有导出内容。</p><p>Common3s和AMD的exports都可以被赋值为一个对象，这种情况下其作用就类似于es6语法里的默认导出，即export default语法了。虽然作用相似，但是 export default语法并不能兼容CommonjSAMD的exports。</p><p><font style="color:tomato;">为了支持CommonJs和AMD的exports，Typescript提供了export =语法。</font></p><p>export=语法定义一个模块的导出对象。这里的对象—词指的是类，接口，命名空间，函数或枚举。</p><p>若使用export =导出一个模块，则必须使用Typescript的特定语法<code>import module =require( &quot;module&quot;)</code>来导入此模块。</p><h4 id="生成模块代码"><a href="#生成模块代码" class="headerlink" title="生成模块代码"></a>生成模块代码</h4><p>根据编译时指定的模块目标参数，编译器会生成相应的供Node.js (CommonJS)，Require.js(AMD)，UMD，SystemJS或ECMAScript 2015 native modules (ES6)模块加载系统使用的代码。</p><p>为了编译，我们必需要在命令行上指定一个模块目标。对于Node.js来说，使用–module commonjs;对于Require.js来说，使用–module amd</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">tsc <span class="token operator">--</span><span class="token keyword">module</span> commonjs Test<span class="token punctuation">.</span><span class="token function">ts</span><span class="token punctuation">(</span>文件名<span class="token punctuation">)</span></code></pre><p><img src="https://cdn.longdoer.com/2020/12/11/x0b84397d91c17550.png" alt="x0b84397d91c17550.png" loading="lazy"></p><hr><h2 id="NEXT-命名空间"><a href="#NEXT-命名空间" class="headerlink" title="NEXT:命名空间"></a>NEXT:命名空间</h2><blockquote><p>“内部模块”现在称做“命名空间”;“外部模块”现在则简称为“模块”;</p></blockquote><p>我们定义几个简单的字符串验证器，假设我们会使用它们来验证表单里的用户输入或验证外部数据。</p><p><font style="color:deepskyblue;">所有的验证器都放在一个文件里</font></p><p>随着更多验证器的加入，我们需要─种手段来组织代码，以便于在记录它们类型的同时还不用担心与其它对象产生命名冲突。因此，我们把验证器包裹到一个命名空间内，而不是把它们放在全局命名空间下。这种写法，比起把所有的变量或是函数放在—个对象的属性里更加简单.</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript高级类型03</title>
      <link href="posts/497ddbbe/"/>
      <url>posts/497ddbbe/</url>
      
        <content type="html"><![CDATA[<p>注意Readonly<T>和Partial<T>用处不小，因此它们与Pick和Record一同被包含进了TypeScript的标准库里:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>Readonly,Partial和Pick是同态的，但Record不是。因为 Record并不需要输入类型来拷贝属性，所以它不属于同态:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ThreestringProps</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token string">' prop1'</span> <span class="token operator">|</span> <span class="token string">'prop2'</span> <span class="token operator">|</span> <span class="token string">'prop3 '</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span></code></pre><p><font style="color:red;">非同态类型本质上会创建新的属性，因此它们不会从它处拷贝属性修饰符</font></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Keys</span> <span class="token operator">=</span> <span class="token string">'option1'</span> <span class="token operator">|</span> <span class="token string">'option2'</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">Flags</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> Keys<span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>最简单的映射类型和它的组成部分:</p><p>它的语法与索引签名的语法类型，内部使用了for .. in。具有三个部分:</p><p>1．类型变量K，它会依次绑定到每个属性。</p><p>2．字符串字面量联合的Keys，它包含了要迭代的属性名的集合。</p><p>3．属性的结果类型。</p><p>在这个简单的例子里, Keys是硬编码的的属性名列表并且属性类型永远是boolean，因此这个映射类型等同于:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Flags</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    option1<span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">;</span>    option2<span class="token operator">:</span><span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h3><p>在真正的应用里，可能不同于上面的 Readonly或 Part。它们会基于一些已存在的类型，且按照一定的方式转换字段。这就是keyof和索引访问类型要做的事情</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'婷宝儿'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">NullPerson</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Person<span class="token punctuation">]</span><span class="token operator">:</span> Person<span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//新的类型可以是包含了person里的每一个规则的同时还可以设置null</span><span class="token keyword">type</span> <span class="token class-name">PartPerson</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Person<span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> Person<span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//新的类型是包含了person里的每一个规则的同时,每个都是可选属性</span></code></pre><p>通用版本:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">NullPerson<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">PartPerson<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="由映射类型进行推断"><a href="#由映射类型进行推断" class="headerlink" title="由映射类型进行推断"></a>由映射类型进行推断</h3><p>现在咱们了解了如何包装一个类型的属性，那么接下来就是如何拆包。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Proxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">;</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">Proxify<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span>Proxy<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">proxify</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>o<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span>Proxify<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">Unproxify</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>t<span class="token operator">:</span> Proxify<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> k <span class="token keyword">in</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> originalProps <span class="token operator">=</span> <span class="token function">Unproxify</span><span class="token punctuation">(</span>ProxyProps<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意这个拆包推断只适用于同态的映射类型。如果映射类型不是同态的，那么需要给拆包函数一个明确的类型参数。</p><p><strong>TypeScript 2.8在lib.d.ts里增加了一些预定义的有条件类型:</strong></p><ol><li>Exclude&lt;T, U&gt; –从T中剔除可以赋值给u的类型</li><li>Extract&lt;T,U&gt; –提取T中可以赋值给u的类型</li><li>NonNullable<T> – 从T中剔除null和undefined</li><li>ReturnType<T> –获取函数返回值类型InstanceType<T> –获取构造函数类型的实例类型</li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T00</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span> <span class="token operator">|</span> <span class="token string">"c"</span> <span class="token operator">|</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"c"</span> <span class="token operator">|</span> <span class="token string">"f"</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//"b"|"d"</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T01</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span> <span class="token operator">|</span> <span class="token string">"c"</span> <span class="token operator">|</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"c"</span> <span class="token operator">|</span> <span class="token string">"f"</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//"a"|"c"</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T02</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//string | number</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T03</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//()=>void</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T04</span></span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//string | number</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T05</span></span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//(() => string) | string[]</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>s<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span>s<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript高级类型02</title>
      <link href="posts/3e7aeb28/"/>
      <url>posts/3e7aeb28/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h2><p>字符串字面量类型允许你指定字符串必须的固定值。<br>       在实际应用中，字符串字面量类型可以与联合类型，类型保护和类型别名很好的配合。通过结合使用这些特性，你可以实现类似枚举类型的字符串。</p><span id="more"></span><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Easing</span> <span class="token operator">=</span> <span class="token string">"ease-in"</span> <span class="token operator">|</span> <span class="token string">"ease-out"</span> <span class="token operator">|</span> <span class="token string">"ease-in-out"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">UIElement</span> <span class="token punctuation">&#123;</span>    <span class="token function">animate</span><span class="token punctuation">(</span>dx<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>dy<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>easing<span class="token operator">:</span>Easing<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>easing <span class="token operator">===</span> <span class="token string">"ease-in"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//...</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>easing <span class="token operator">===</span> <span class="token string">"ease-out"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>easing <span class="token operator">===</span> <span class="token string">"ease-in-out"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//err</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"ease-in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"ease-in-xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类型"ease-in-xxx"”的参数不能赋给类型“Easing”的参数。</span></code></pre><p><font style="color:tomato;"><strong>字符串字面量类型还可以用于区分函数重载</strong></font></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">creatElement</span><span class="token punctuation">(</span>tagName<span class="token operator">:</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token operator">:</span>HTMLImageElement<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">creatElement</span><span class="token punctuation">(</span>tagName<span class="token operator">:</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token operator">:</span>HTMLInputElement<span class="token punctuation">;</span><span class="token comment">//...more overloads...</span><span class="token keyword">function</span> <span class="token function">creatElement</span><span class="token punctuation">(</span>tagName<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span>Element<span class="token punctuation">&#123;</span>    <span class="token comment">//...code goes here...</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="数字字面量类型"><a href="#数字字面量类型" class="headerlink" title="数字字面量类型"></a>数字字面量类型</h2><p>TypeScript还具有数字字面量类型。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token number">2</span> <span class="token operator">|</span><span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span><span class="token number">5</span> <span class="token operator">|</span> <span class="token number">6</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="可辨识联合-Discriminated-Unions"><a href="#可辨识联合-Discriminated-Unions" class="headerlink" title="可辨识联合(Discriminated Unions)"></a>可辨识联合(Discriminated Unions)</h2><p>你可以合并单例类型，联合类型，类型保护和类型别名来创建一个叫做可辨识联合的高级模式，它也称做标签联合或代数数据类型。可辨识联合在函数式编程很有用处。一些语言会自动地为你辨识联合;而TypeScript则基于已有的JavaScript模式。</p><p>它具有3个要素:</p><ul><li>​    具有普通的单例类型属性 —— 可辨识的特征。</li><li>​    一个类型别名包含了那些类型的联合—— 联合。</li><li>​    此属性上的类型保护。</li></ul><p>首先我们声明了将要联合的接口。每个接口都有kind属性但有不同的字符串字面量类型。kind属性称做可辨识的特征或标签。其它的属性则特定于各个接口。注意，目前各个接口间是没有联系的。下面我们把它们联合到一起:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Rectangle</span><span class="token punctuation">&#123;</span>    kind<span class="token operator">:</span><span class="token string">"rectangle"</span><span class="token punctuation">;</span>    width<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>    height<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Circle</span><span class="token punctuation">&#123;</span>    kind<span class="token operator">:</span><span class="token string">"circle"</span><span class="token punctuation">;</span>    radius<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">area</span><span class="token punctuation">(</span>s<span class="token operator">:</span>Shape<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">case</span> <span class="token string">"Square"</span><span class="token operator">:</span>           <span class="token keyword">return</span> s<span class="token punctuation">.</span>size <span class="token operator">*</span> s<span class="token punctuation">.</span>size<span class="token punctuation">;</span>                 <span class="token keyword">case</span> <span class="token string">"rectangle"</span><span class="token operator">:</span>           <span class="token keyword">return</span> s<span class="token punctuation">.</span>height <span class="token operator">*</span> s<span class="token punctuation">.</span>height<span class="token punctuation">;</span>                  <span class="token keyword">case</span> <span class="token string">"circle"</span><span class="token operator">:</span>           <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> s<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> Square <span class="token operator">|</span> Rectangle <span class="token operator">|</span> Circle<span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">&#123;</span>    kind<span class="token operator">:</span><span class="token string">"Square"</span><span class="token punctuation">;</span>    size<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Rectangle</span><span class="token punctuation">&#123;</span>    kind<span class="token operator">:</span><span class="token string">"ectangle"</span><span class="token punctuation">;</span>    width<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>    height<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Circle</span><span class="token punctuation">&#123;</span>    kind<span class="token operator">:</span><span class="token string">"circle"</span><span class="token punctuation">;</span>    radius<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="完整性检查"><a href="#完整性检查" class="headerlink" title="完整性检查"></a>完整性检查</h2><p><font style="color:tomato;">当没有涵盖所有可辨识联合的变化时，我们想让编译器可以通知我们</font></p><p>比如，如果我们添加了 Triangle到 shape，我们同时还需要更新area:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> Square <span class="token operator">|</span> Rectangle <span class="token operator">|</span> Circle <span class="token operator">|</span> Triangle<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">area</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">"Square"</span><span class="token operator">:</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span>size <span class="token operator">*</span> s<span class="token punctuation">.</span>size<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"rectangle"</span><span class="token operator">:</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span>height <span class="token operator">*</span> s<span class="token punctuation">.</span>height<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"circle"</span><span class="token operator">:</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> s<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">//此处需要跟上新增的Triangle ,不然不起作用，但是TypeScript是不会报错的</span>        <span class="token comment">//因为此处要是传入的s是Triangle类型的，那么函数area会返回一个undefined，undefined是any类型的子类型，所以默认不报错</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>✍此时我们有2种方法可以实现需求:</p><p><font style="color:skyblue;">启用<code>--strictNullChecks</code>并且指定一个返回值类型:</font></p><p>当我们使用了严格空值检查之后，只有<strong>明确指定了</strong>undefined类型的值才允许被设置为空值，否则不允许</p><p>此处我们给函数定义了一个数字类型的返回值，—旦我们给函数传入了一个Triangle类型的参数,此时因为case里无法匹配,返回的必然就是<code>undefined</code>这个非法值，所以编译器就报错了</p><p><font style="color:skyblue;">第二种方法使用never类型，编译器用它来进行完整性检查:</font></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> Square <span class="token operator">|</span> Rectangle <span class="token operator">|</span> Circle <span class="token operator">|</span> Triangle<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">assertNerver</span><span class="token punctuation">(</span>x<span class="token operator">:</span> nerver<span class="token punctuation">)</span><span class="token operator">:</span> nerver <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Unexpected object:"</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">area</span><span class="token punctuation">(</span>s<span class="token operator">:</span> Shape<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">"Square"</span><span class="token operator">:</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span>size <span class="token operator">*</span> s<span class="token punctuation">.</span>size<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"rectangle"</span><span class="token operator">:</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span>height <span class="token operator">*</span> s<span class="token punctuation">.</span>height<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"circle"</span><span class="token operator">:</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> s<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token function">assertNerver</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>assentNever检s是否为never类型-即为除去所有可能情况后剩卜的类型。如果你际记了某个case，那么 s将具有一个真实的类型并且你会得到一个错误。这种方式需要你定义一个额外的函数，但是在你忘记某个case的时候也更加明显。</p><h2 id="多态的this类型检查"><a href="#多态的this类型检查" class="headerlink" title="多态的this类型检查"></a>多态的this类型检查</h2><p>多态的this类型表示的是某个包含类或接口的子类型。这被称做F-bounded多态性。它能很容易的表现连贯接口间的继承(即所谓的链式操作)</p><p>比如。在计算器的例子里，在每个操作之后都返回this类型:</p><p>​    或是jQuery函数的返回类型</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">BasicCalculator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">protected</span> value<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">currentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">add</span><span class="token punctuation">(</span>operand<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+=</span> operand<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">multiply</span><span class="token punctuation">(</span>operand<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">*=</span> operand<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//...other operations go here...</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicCalculator</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">currentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由于前页的BasicCalculator这个类使用了 this类型，你可以继承它，新的类可以直接使用之前的方法，不需要做任何的改变。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">mathCalculator</span> <span class="token keyword">extends</span> <span class="token class-name">BasicCalculator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//...other operations go here...</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> numCalc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mathCalculator</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">currentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果没有this类型, Scientificcalculator就不能够在继承 Basiccalculator的同时还保持接口的连贯性。</p><h2 id="索引类型-index-types"><a href="#索引类型-index-types" class="headerlink" title="索引类型(index types)"></a>索引类型(index types)</h2><p>使用索引类型，编译器就能够检查使用了动态属性名的代码。</p><p>例如，一个常见的JavaScript模式是从对象中选取属性的子集。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> names<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=></span> o<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>下面代码是如何在Typescript里使用此函数，通过索引类型查询和索引访问操作符:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> names<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=></span> obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//T代表obj</span><span class="token comment">//keyof:得到T里面所有的属性名,再把它作为一个父类</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> names<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=></span> obj<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//map--新数组的成员都是从obj里面挑选name中所存在的属性,然后组合起来返回</span>  <span class="token comment">//对于这样的函数,我们要求返回的一定是obj对象里面的一个子类,name得是obj里面属性名的一个子类</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"婷宝儿"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token builtin">string</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ok,string[]</span><span class="token keyword">let</span> num<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//err,不能将类型“number”分配给类型string”</span></code></pre><h3 id="索引类型-index-types-之索引类型查询操作符"><a href="#索引类型-index-types-之索引类型查询操作符" class="headerlink" title="索引类型(index types)之索引类型查询操作符"></a>索引类型(index types)之索引类型查询操作符</h3><p>编译器会检查name是否真的是 Person的一个属性。上面示例还引入了几个新的类型操作符。首先是<code>keyof T</code>，<strong>索引类型查询操作符</strong>。对于任何类型T, keyof T的结果为T上已知的公共属性名的联合</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"婷宝儿"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> personProps<span class="token operator">:</span><span class="token keyword">keyof</span> Person<span class="token punctuation">;</span><span class="token comment">//"name" | "age"</span></code></pre><p>keyof Person是完全可以与‘name’ | ‘age’互相替换的。不同的是如果你添加了其它的属性到Person，例如address: string，那么keyof Person会自动变为‘name’ | ‘age’ l ‘address’。</p><p>你可以在像 fn函数这类上下文里使用keyof，因为在使用之前你并不清楚可能出现的属性名。但编译器会检查你是否传入了正确的属性名给fn:</p><p><font style="color:red;">操作符是T[K]，</font>索引访问操作符。</p><p>在这里，类型语法反映了表达式语法。这意味着person[ ‘ name’]具有类型Person[ ‘ name’〕 ,在我们的例子里则为string类型。</p><p>然而，就像索引类型查询一样，你可以在普通的上下文里使用T[K]，这正是它的强大所在。你只要确保类型变量K extends keyof T就可以了。</p><p>例如下面fn函数的例子:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> names<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>names<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//obj[names] is type of T[K]</span><span class="token punctuation">&#125;</span></code></pre><p>fn里的obj: T和name: K，意味着obj[name]: T[K]。当你返回T[K]的结果，编译器会实例化键的真实类型，因此 fn的返回值类型会随着你需要的属性改变。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> names<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>names<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//obj[names] is type of T[K]</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"婷宝儿"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> name1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> unkonwn<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">'unKown'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类型“"unKown"”的参数不能赋给类型name"| "age"”的参数。</span></code></pre><h3 id="索引类型-Index-types-之字符串索引签名"><a href="#索引类型-Index-types-之字符串索引签名" class="headerlink" title="索引类型(Index types)之字符串索引签名"></a>索引类型(Index types)之字符串索引签名</h3><p><font style="color:red;">keyof和 T[K]与字符串索引签名进行交互</font></p><p>如果你有一个带有字符串索引签名的类型，那么keyof T会是string。并且T[string]为索引签名的类型:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>key<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> keys<span class="token operator">:</span><span class="token keyword">keyof</span> Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">//string</span><span class="token keyword">let</span> value<span class="token operator">:</span><span class="token keyword">keyof</span> Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//number</span></code></pre><h2 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h2><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">objPart</span><span class="token punctuation">&#123;</span>    name<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>    age<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">objReadonly</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    <span class="token keyword">readonly</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span></code></pre><p>—个常见的任务是将一个已知的类型每个属性 或者我们想要一个只读版本都变为可选的:</p><p>Typescript提供了从旧类型中创建新类型的一种方式–映射类型。在映射类型里，新类型以相同的形式去转换旧类型里每个属性。</p><p>例如，我们可以令每个属性成为readonly类型或可造的。</p><p>下面是一些🌰:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Readonly_<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">Part_<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span>  <span class="token class-name">objPart</span> <span class="token operator">=</span> Part<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">objReadonly</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p>饿了么,干饭(本文未完,下篇见)😘</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript高级类型01</title>
      <link href="posts/a773ba92/"/>
      <url>posts/a773ba92/</url>
      
        <content type="html"><![CDATA[<h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><p><font  style="color:red;">交叉类型是将多个类型合并为一个类型。</font></p><p><font  style="color:red;">这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。</font></p><span id="more"></span><p>例如，Person &amp; Serializable &amp; Loggable同时是Person和Serializable 和Loggable。就是说这个类型的对象同时拥有了这三种类型的成员</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">extend</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>first<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//类型断言,并集</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> id <span class="token keyword">in</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span>result<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span>first<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> id <span class="token keyword">in</span> second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//首先排除存在的id值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span>result<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span>second<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Loggable</span> <span class="token punctuation">&#123;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ConsoleLog</span> <span class="token keyword">implements</span> <span class="token class-name">Loggable</span> <span class="token punctuation">&#123;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> zzy <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zzy"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> tingbao <span class="token operator">=</span> zzy<span class="token punctuation">.</span>name<span class="token punctuation">;</span>zzy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>编译:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token parameter">first<span class="token punctuation">,</span> second</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> id <span class="token keyword">in</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> first<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> id <span class="token keyword">in</span> second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> second<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token comment">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> Person<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ConsoleLog <span class="token operator">=</span> <span class="token comment">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">ConsoleLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">ConsoleLog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ConsoleLog<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> zzy <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zzy"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> tingbao <span class="token operator">=</span> zzy<span class="token punctuation">.</span>name<span class="token punctuation">;</span>zzy<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>联合类型与交叉类型很有关联，但是使用上却完全不同。</p><p>偶尔我们会遇到这种情况，一个代码库希望传入number或string类型的参数</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> padding<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> padding <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">Array</span><span class="token punctuation">(</span>padding <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> padding <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> padding <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Not string or number,got '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>padding<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>fn存在一个问题, padding参数的类型指定成了 any。这就是说我们可以传入一个既不是number也不是string类型的参数，但是TypeScript却不报错。</p><hr><p>联合类型表示一个值可以是几种类型之一。我们用竖线（ | ）分隔每个类型，所以number / string | boolean表示一个值可以是number, string，或boolean</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> padding<span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> padding <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">Array</span><span class="token punctuation">(</span>padding <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> padding <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> padding <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Not string or number,got '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>padding<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//err,因为true不是字符串或者数字</span></code></pre><p>如果一个值是联合类型，我们只能访问此联合类型的所有类型里<font  style="color:hotpink;">共有的成员。</font></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Bird</span><span class="token punctuation">&#123;</span>    <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Fish</span><span class="token punctuation">&#123;</span>    <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>Fish <span class="token operator">|</span> Bird<span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">&#123;</span>        <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> pet <span class="token operator">=</span> <span class="token function">getAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pet<span class="token punctuation">.</span><span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确</span>pet<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//err,类型"Bird | Fish"上不存在属性"swim"</span></code></pre><p>如果—个值的类型是A | B，我们能够确定的是它包含了A和B中共有的成员。这个例子里,Bird具有一个fly成员。但是Fish里面没有f1y。如果变量在运行时是Fish类型，那么调用pet.fly()就出错了。</p><h2 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h2><h5 id="类型保护与区分类型"><a href="#类型保护与区分类型" class="headerlink" title="类型保护与区分类型"></a>类型保护与区分类型</h5><p>联合类型适合于那些值可以为不同类型的情况。</p><p>但是如果我们就想要来判断—下，最后的pet对象是否拥有swim和fly属性的时候我们又该咋办?</p><p>传统的方式就是在if检查成员是否存在，但是Typescript的类型检查会直接报错，根本不给检测的机会.</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">&#123;</span>    <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">&#123;</span>    <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Fish <span class="token operator">|</span> Bird <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> pet <span class="token operator">=</span> <span class="token function">getAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每一个成员访问都会报错</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pet<span class="token punctuation">.</span>swim<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pet<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pet<span class="token punctuation">.</span>fly<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pet<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>此时我们就可以使用类型断言的方式来强行指定类型来绕过TypeScript的排查机制</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> pet <span class="token operator">=</span> <span class="token function">getSmallPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>fish<span class="token operator">></span>pet<span class="token punctuation">)</span><span class="token punctuation">.</span>swim<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token operator">&lt;</span>fish<span class="token operator">></span>pet<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token operator">&lt;</span>Bird<span class="token operator">></span>pet<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>上方的代码中，为了确保能够正常判断，我们用了很多次类型断言。这种方法太过麻烦了</p><p>假若我们—旦检查过类型，就能在之后的每个分支里清楚地知道pet的类型的话就好了。</p><p>Typescript里的类型保护机制让它成为了现实。类型保护就是一些表达式，它们会在运行时检查以确保在某个作用域里的类型。要定义一个类型保护，我们只要简单地定义一个函数，它的返回值是一个类型谓词;</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">&#123;</span>    <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">&#123;</span>    <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Fish <span class="token operator">|</span> Bird <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> pet <span class="token operator">=</span> <span class="token function">getAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span>pet<span class="token operator">:</span>Fish <span class="token operator">|</span> Bird<span class="token punctuation">)</span><span class="token operator">:</span>pet <span class="token keyword">is</span> Fish<span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Fish<span class="token operator">></span>pet<span class="token punctuation">)</span><span class="token punctuation">.</span>swim <span class="token operator">!</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在上面例子里, pet is Fish就是类型谓词。谓词为parameterName is Type这种形式,parameterName必须是来自于当前函数签名里的一个参数名。</p><p>🐙每当使用—些变量调用isFish时，Typescript会将变量缩减为那个具体的类型，只要这个类型与变量的原始类型是兼容的。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">&#123;</span>    <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">&#123;</span>    <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Fish <span class="token operator">|</span> Bird <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token function">layEggs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> pet <span class="token operator">=</span> <span class="token function">getAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span>pet<span class="token operator">:</span> Fish <span class="token operator">|</span> Bird<span class="token punctuation">)</span><span class="token operator">:</span> pet <span class="token keyword">is</span> Fish <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Fish<span class="token operator">></span>pet<span class="token punctuation">)</span><span class="token punctuation">.</span>swim<span class="token operator">!</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//swim和fly调用都没有问题</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFish</span><span class="token punctuation">(</span>pet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pet<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    pet<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h5 id="typeof类型保护"><a href="#typeof类型保护" class="headerlink" title="typeof类型保护"></a>typeof类型保护</h5><p>如下，必须要定义—个函数来判断类型是否是原始类型，这太tk了。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> x is number <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> x is string <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">paddingLeft</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> string<span class="token punctuation">,</span> padding<span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">Array</span><span class="token punctuation">(</span>padding <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> padding <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">console<span class="token punctuation">.</span>error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Not string or number,got '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>padding<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>幸运的是，现在我们不必将typeof x=== “number”抽象成一个函数，因为TypeScript可以将它识别为一个类型保护</p><p>也就是说我们可以直接在代码里检查类型了</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">paddingLeft</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> padding<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> padding <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">Array</span><span class="token punctuation">(</span>padding <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> padding <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> padding <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">console</span></span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Not string or number,got '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>padding<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript">这些<span class="token keyword">typeof</span>类型保护只有两种形式能被识别<span class="token operator">:</span><span class="token keyword">typeof</span> v <span class="token operator">===</span> <span class="token string">"typename"</span>和 <span class="token keyword">typeof</span> v <span class="token operator">!==</span><span class="token string">"typename"</span>，<span class="token string">"typename"</span>必须是“number<span class="token string">"，"</span>string<span class="token string">","</span>boolean<span class="token string">"或"</span>symbol"。但是Typescript并不会阻止你与其它字符串比较，语言不会把那些表达式识别为类型保护。</code></pre><h5 id="instanceof类型保护"><a href="#instanceof类型保护" class="headerlink" title="instanceof类型保护"></a>instanceof类型保护</h5><p>instanceof类型保护是通过构造函数来细化类型的一种方式</p><p>instanceof的右侧要求是─个构造函数，Typescript将细化为:</p><p>A．此构造函数的prototype属性的类型，如果它的类型不为any的话</p><p>B．构造签名所返回的类型的联合</p><p>以此顺序.</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Padder</span>  <span class="token punctuation">&#123;</span>    <span class="token function">getPaddingString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SpaceRepeatingPadder</span> <span class="token keyword">implements</span> <span class="token class-name">Padder</span><span class="token punctuation">&#123;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> numSpaces <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">getPaddingString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">Array</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span> numSpaces <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">StringPadder</span> <span class="token keyword">implements</span> <span class="token class-name">Padder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">getPaddingString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getRandomPadder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span> <span class="token operator">?</span>    <span class="token keyword">new</span> <span class="token class-name">SpaceRepeatingPadder</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">new</span> <span class="token class-name">StringPadder</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//类型为SpaceRepeatingPadder | stringPadder</span><span class="token keyword">let</span> padder<span class="token operator">:</span> Padder <span class="token operator">=</span> <span class="token function">getRandomPadder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>padder <span class="token keyword">instanceof</span> <span class="token class-name">SpaceRepeatingPadder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    padder<span class="token punctuation">;</span><span class="token comment">//类型细化为'SpaceRepeatingPadder'</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>padder <span class="token keyword">instanceof</span> <span class="token class-name">StringPadder</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    padder<span class="token punctuation">;</span><span class="token comment">//类型细化为'StringPadder'</span><span class="token punctuation">&#125;</span></code></pre><h5 id="为null的类型"><a href="#为null的类型" class="headerlink" title="为null的类型"></a>为null的类型</h5><p><code>--strictNullChecks(严格空值检查)</code>标记可以解决此错误:当你声明一个变量时，它不会自动地包含nul1或undefined(即, undefined和null再也不是任意类型的子类型了)。</p><p>你可以使用联合类型明确的包含它们:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> zzy <span class="token operator">=</span> <span class="token string">"hansome"</span><span class="token punctuation">;</span>zzy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//错误,"null"不能赋值给'string'</span><span class="token keyword">let</span> obj<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token string">"tingbao"</span><span class="token punctuation">;</span>obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//可以</span>obj <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">//error, 'undefined ·不能赋值给'string / null'</span></code></pre><p><img src="https://b2.kuibu.net/file/imgdisk/2020/12/02/ts5f63dfe73aa05f61.png" alt="ts5f63dfe73aa05f61.png" loading="lazy"></p><p>注意，按照JavaScript的语义，TypeScript会把null和 undefined区别对待。string | null, string | undefined和string | undefined | null是不同的类型。</p><h5 id="为null的类型之可选参数"><a href="#为null的类型之可选参数" class="headerlink" title="为null的类型之可选参数"></a>为null的类型之可选参数</h5><p>使用了–strictNullChecks，可选参数会被自动地加上| undefined :</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//y ? : number 在strictNulLChecks模式下变成了y? :number | undefined</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Argument of type 'null' is not assignable to parameter of type 'string | undefined'.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可选属性也会有同样的处理:</p><p><img src="https://cdn.webchain.site/file/imgdisk-2/2020/12/02/-2020-12-02-213353-169dfb9a812976eea.png" alt="-2020-12-02-213353-169dfb9a812976eea.png" loading="lazy"></p><h5 id="为null的类型之类型保护和类型断言"><a href="#为null的类型之类型保护和类型断言" class="headerlink" title="为null的类型之类型保护和类型断言"></a>为null的类型之类型保护和类型断言</h5><p>由于可以为null的类型是通过联合类型实现，那么你需要使用类型保护来去除null</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//这里很明显地除去了null</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>sn<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"default"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sn<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> </code></pre><p>也可以使用短路运算符</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>sn<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>  sn <span class="token operator">||</span> <span class="token string">"default"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如果编译器不能够去除null或undefined，你可以使用类型断言手动去除。语法是添加<code>!后缀</code>: identifier!从 identifier的类型里去除了null和undefined:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">amazing</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">postAmaz</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'. the'</span> <span class="token operator">+</span> x<span class="token punctuation">;</span> <span class="token comment">//正确</span>    <span class="token punctuation">&#125;</span>    name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">"婷宝儿"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">postAmaz</span><span class="token punctuation">(</span><span class="token string">"lovely girl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>本例使用了嵌套函数，因为编译器无法去除嵌套函数的null(除非是立即调用的函数表达式)。因为它无法跟踪所有对嵌套函数的调用，尤其是你将内层函数做为外层函数的返回值。如果无法知道函数在哪里被调用，就无法知道调用时name的类型。</p><h5 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h5><blockquote><p>语法:type <font style="color:gold;"> 新类型名称</font> =  <font style="color:gold;">原始类型名称</font>;</p></blockquote><p>类型别名会给一个类型起个新名字。类型别名有时和接口很像，但是可以作用于原始值，联合类型，元组以及其它任何你需要手写的类型。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Container<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>value<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>同接口—样，类型别名也可以是泛型–我们可以添加类型参数并且在别名声明的右侧传入.</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Tree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    value<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">;</span>    left<span class="token operator">:</span>Tree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>    right<span class="token operator">:</span>Tree<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>然而，类型别名不能出现在声明右侧的任何地方:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">zzy</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>zzy<span class="token operator">></span><span class="token punctuation">;</span></code></pre><h5 id="类型别名-1"><a href="#类型别名-1" class="headerlink" title="类型别名"></a>类型别名</h5><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">LinkedList<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span>next <span class="token operator">:</span>LinkedList<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> people<span class="token operator">:</span>LinkedList<span class="token operator">&lt;</span>People<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">var</span> s <span class="token operator">=</span> people<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">var</span> s <span class="token operator">=</span> people<span class="token punctuation">.</span>next<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">var</span> s <span class="token operator">=</span> people<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>name<span class="token punctuation">;</span></code></pre><p>与交叉类型—起使用，我们可以创建出一些十分稀奇古怪的类型。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>等春来</title>
      <link href="posts/7ad7ab/"/>
      <url>posts/7ad7ab/</url>
      
        <content type="html"><![CDATA[<center>《等春来》</center><center>作者:<font style="color:lightpink">小赵同学</font></center><center><p>我从未如此急切的<br>盼望过春天归来</p><p>这个冬天实在寒冷而漫长<br>但幸好<br>三月依然带着温柔的暖意如期而至<br>不拖不延、不紧不慢<br>想来，那江城的樱花<br>应该要开了</p><p>许是瞧见这个冬天太过严寒<br>人们的笑容实在惨淡<br>空气里充斥的满是紧张和不安<br>于是樱花带着春天的气息款款走来<br>没有任何预兆<br>没有一丝提示<br>它们不知不觉在一夜之间<br>开满了枝头<br>带来了春的朝气<br>赶走了笼罩了整个冬日的悲哀<br>樱花开了<br>人们终于又露出了久违的笑容 </p><p>我看见了极夺目的一枝花<br>面对着狂风肆虐<br>它们害怕、无助，但绝不妥协<br>一朵朵小花相互依偎、相互鼓励<br>任凭风婆婆百般刁难<br>哪怕时不时拐走了它们的兄弟姐妹<br>那枝花却始终坚定<br>不曾动摇半分<br>一朵花倒下<br>就会有另一朵再盛开<br>它们一定要灿烂在这温柔的三月<br>只属于它们的季节<br>无可代替、无懈可击<br>我感动于它们的团结和勇敢<br>走近数了数<br>那枝花 恰好有56朵小花<br>我知道<br>春天终于来了</p><p>我看见无数花瓣被吹落在地<br>不日便化作树下的泥土<br>那是每一朵花最后的归宿<br>它们选择在盛开的时刻离去<br>在最光荣的时候谢幕<br>以最无私的奉献精神<br>坚定的守护了自己的兄弟姐妹<br>坦然的走向了凋零</p><p>可我知道<br>无论过去多久<br>那树上的每一朵花<br>都依然会记得<br>那些在地下睡着了的小花们<br>也曾光荣的来过这世界啊</p><p>我日夜盼望的繁花似锦的春天啊<br>终是 等来了</p></center><hr><h5 id="⭐特别说明"><a href="#⭐特别说明" class="headerlink" title="⭐特别说明:"></a>⭐特别说明:</h5><blockquote><p>©本文已授权转载</p><p>🌼更多美文请移步关注公众号 <font style="color:pink;">“小赵的故事屋”</font></p><p>公众号ID: <font style="color:deepskyblue;">T2930816679</font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript类型推论与兼容</title>
      <link href="posts/dd05831a/"/>
      <url>posts/dd05831a/</url>
      
        <content type="html"><![CDATA[<h2 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h2><h3 id="基础类型推论"><a href="#基础类型推论" class="headerlink" title="基础类型推论"></a>基础类型推论</h3><p><font  style="color:deepskyblue;">Typescript里，在有些没有明确指出类型的地方，类型推论会帮助提供类型.</font></p><span id="more"></span><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> tingBaoAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">/* 此处虽然没有直接声明x变量的值的类型，但是因为tingBaoAge被赋值为数字18那么x变量的数据类型就会被自动限制为数字 */</span>tingBaoAge <span class="token operator">=</span> <span class="token string">"18"</span><span class="token punctuation">;</span><span class="token comment">//err,不能将类型“string”分配给类型“number”。</span></code></pre><p>这种推断发生在<font  style="color:red;">初始化变量和成员</font>，<font  style="color:red;">设置默认参数值</font>和<font  style="color:red;">决定函数返回值</font>时。</p><h3 id="最佳通用类型"><a href="#最佳通用类型" class="headerlink" title="最佳通用类型"></a>最佳通用类型</h3><p>当需要从几个表达式中推断类型时候，会使用这些表达式的类型来推断出一个最合适的通用类型</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> tingBaoAge <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">520</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span>tingBaoAge<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//err,不允许往该数组内添加字符串</span></code></pre><p>为了推断x的类型，我们必须考虑所有元素的类型。这里有3种选择: <strong>number,undefined和null</strong>。计算通用类型算法会考虑所有的候选类型，并给出一个兼容所有候选类型的类型。</p><p>✍由于最终的通用类型取自候选类型，<font  style="color:red;">有些时候候选类型共享相同的通用类型，但是却没有一个类型能做为所有候选类型的类型</font>。例如:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> zoo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Elephant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>这里，我们想让zoo被推断为Animal[]类型，但是这个数组里没有对象是Animal类型的，因此不能推断出这个结果。为了更正，当候选类型不能使用的时候我们需要明确的指出类型:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> zoo<span class="token operator">:</span>Animal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Elephant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型，(Rhino |Elephant | Snake)[ ]。</p><h3 id="上下文类型推论-上下文归类"><a href="#上下文类型推论-上下文归类" class="headerlink" title="上下文类型推论(上下文归类)"></a>上下文类型推论(上下文归类)</h3><p>Typescript类型推论也可能按照相反的方向进行。这被叫做“按上下文归类”。按上下文归类会发生在表达式的类型与所处的位置相关时</p><pre class="language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">mouseEvent</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mouseEvent<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>Typescript类型检查器使用window. onmousedown函数的类型来推断右边函数表达式的类型。因此，就能推断出mouseEvent参数的类型了</p><p>如果上下文类型表达式包含了明确的类型信息，上下文的类型被忽略:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript">window<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>mouseEvent<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mouseEvent<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>✏️上下文归类会在很多情况下使用到:</p><ol><li><p>通常包含函数的参数</p></li><li><p>赋值表达式的右边</p></li><li><p>类型断言</p></li><li><p>对象成员和数组字面量和返回值语句</p></li><li><p>上下文类型也会作为最佳通用类型的候选类型</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">createzoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Animal<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Monkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Elephant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><p>这个例子里，最佳通用类型有4个候选者: Animal，Monkey，Elephant和Snake。当然，<font  style="color:skyblue;">Animal</font>会被做为最佳通用类型。</p><h2 id="类型兼容"><a href="#类型兼容" class="headerlink" title="类型兼容"></a>类型兼容</h2><h3 id="类型兼容模型"><a href="#类型兼容模型" class="headerlink" title="类型兼容模型"></a>类型兼容模型</h3><p>目前在所有的编程语言中，对于类型兼容的实现除了结构类型外，还有一个叫做名义类型，结构类型和名义类型之间的区别如下:</p><ol><li>在基于名义类型的类型系统中，数据类型的兼容性或等价性是通过明确的声明和/或类型的名称来决定的</li><li>在基于结构性的类型系统中，数据类型的兼容性或等价性是基于类型的组成结构，且不要求明确地声明。</li></ol><p><font  style="color:lightskyblue;">Typescript里的类型兼容性是基于结构子类型的，使用其成员来描述类型的方式</font></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Name</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> x<span class="token operator">:</span> Name<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确,这个符合格式,因为Preson的实例里面有一个名为name的属性,这完全符合接口的要求</span></code></pre><h3 id="结构化类型系统"><a href="#结构化类型系统" class="headerlink" title="结构化类型系统"></a>结构化类型系统</h3><p>TypeScript的结构性子类型是根据Javascript代码的典型写法来设计的。因为JavaScript里广泛地使用匿名对象，例如函数表达式和对象字面量，所以使用结构类型系统来描述这些类型比使用名义类型系统更好。</p><p><font  style="color:red;font-size:20px">Typescript结构化类型系统的基本规则是，如果m要兼容n，那么n至少具有与m相同的属性</font></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Name</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> x<span class="token operator">:</span> Name<span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"tingbao"</span><span class="token punctuation">,</span>boyfriend<span class="token operator">:</span><span class="token string">"zzy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Name</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> x<span class="token operator">:</span> Name<span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"tingbao"</span><span class="token punctuation">,</span>boyfriend<span class="token operator">:</span><span class="token string">"zzy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123; name: 'tingbao', boyfriend: 'zzy' &#125;</span><span class="token keyword">function</span> <span class="token function">love</span><span class="token punctuation">(</span>x<span class="token operator">:</span>Name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I love u!'</span><span class="token operator">+</span> x<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token function">love</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确</span></code></pre><p>这里要检查y是否能赋值给x，编译器检查x中的每个属性，看是否能在y中也找到对应属性。在这个例子中，y必须包含名字是name的string类型成员。y满足条件，因此赋值正确。</p><p>🔺 y有个额外的boyfriend属性，但这不会引发错误。只有目标类型(这里是Named)的成员会被一 一检查是否兼容。</p><p>​    这个比较过程是递归进行的，检查每个成员及子成员。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Name</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    sex<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>    age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> x<span class="token operator">:</span> Name<span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"tingbao"</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">"女"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token comment">//err,类型"&#123;name: string; sex: string; &#125;”中缺少属性“age"，但类型“Name”中需要该属性。</span><span class="token comment">//y属性可以多,但是不能少</span></code></pre><h4 id="函数的类型比较"><a href="#函数的类型比较" class="headerlink" title="函数的类型比较"></a>函数的类型比较</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token function-variable function">x</span> <span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">y</span> <span class="token operator">=</span><span class="token punctuation">(</span>b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">;</span>y <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// OK</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token comment">// Error不能将类型"(b: number， s: string) =>number”分配给类型"(a: number) => number”</span></code></pre><p>要查看x是否能赋值给y，首先看它们的<font  style="color:gold;">参数列表</font>。x的每个参数<font  style="color:skyblue;">必须能</font>在y里找到对应类型的参数。</p><p>🔺注意:参数的名字相同与否无所谓，只看它们的类型。这里，x的每个参数在y中都能找到对应的参数，所以允许赋值。</p><p>但是反过来就不行了,第二个赋值错误，因为y有个必需的第二个参数，但是x并没有，所以不允许赋值。</p><p>这里面有一个点需要注意，在第一个赋值例子代码中,之所以x可以赋值给y的原因就是JavaScript的函数允许实参少于形参</p><p><strong>比如:</strong></p><p>Array.forEach给回调函数传3个参数:数组元素，索引和整个数组。尽管如此，传入一个只使用第一个参数的回调函数也是很有用的:</p><p><font  style="color:tomato;">    <strong>简而言之，TypeScript的函数类型比较里面,参数可以少,但不能多</strong></font></p><hr><p>不过<font  style="color:yellowgreen;">函数的返回值</font>进行比较的时候，就有些不同了，<font  style="color:tomato;">可以多，但不可以少</font></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token function-variable function">x</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">(</span>iname<span class="token operator">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> location<span class="token operator">:</span> <span class="token string">'seattle '</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token comment">//right 变量x是源,变量y是目标</span>y <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//Error, because x() Lacks a Location property</span></code></pre><p>类型系统强制源函数的返回值类型必须是目标函数返回值类型的子类型。</p><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><p>比较函数兼容性的时候，可选参数与必须参数是可互换的。源类型上有额外的可选参数不是错误，目标类型的可选参数在源类型里没有对应的参数也不是错误。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">invokeLater</span><span class="token punctuation">(</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* ... Invoke callback with 'args' ...*/</span><span class="token punctuation">&#125;</span><span class="token function">invokeLater</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确</span><span class="token function">invokeLater</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">?</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">', '</span><span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确，因为对剩余这个概念来说，有的剩和没得剩都是一样的</span></code></pre><p>当一个函数有剩余参数时，它被当做无限个可选参数。这对于类型系统来说是不稳定的，但从运行时的角度来看，可选参数一般来说是不强制的，因为对于大多数函数来说相当于传递了一些undefined。</p><h4 id="枚举的类型比较"><a href="#枚举的类型比较" class="headerlink" title="枚举的类型比较"></a>枚举的类型比较</h4><p><font  style="color:red;font-size:18px">枚举类型与数字类型兼容，并且数字类型与枚举类型兼容。</font>不同枚举类型之间是不兼容的。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Status <span class="token punctuation">&#123;</span> Ready<span class="token punctuation">,</span> Waiting <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">enum</span> Color <span class="token punctuation">&#123;</span> Red<span class="token punctuation">,</span> Blue<span class="token punctuation">,</span> Green <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> s <span class="token operator">=</span> Status<span class="token punctuation">.</span>Ready<span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token comment">//正确</span>s<span class="token operator">=</span><span class="token string">"520"</span><span class="token comment">//不能将类型“520""分配给类型“Status”。</span>s<span class="token operator">=</span>Color<span class="token punctuation">.</span>Blue<span class="token punctuation">;</span><span class="token comment">//不能将类型“color.Blue”分配给类型“Status”</span></code></pre><h4 id="类的类型比较"><a href="#类的类型比较" class="headerlink" title="类的类型比较"></a>类的类型比较</h4><p>类与对象字面量和接口差不多，但有一点不同:<font  style="color:gold;font-size:18px">类有静态部分和实例部分的类型</font></p><p>比较两个类类型的对象时，只有实例的成员会被比较。静态成员和构造函数不在比较的范围内</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isConstructorDeclaration <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"typescript"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    foot<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token function">sayMyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"panda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> numFoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Size</span> <span class="token punctuation">&#123;</span>    foot<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>numFoot<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a<span class="token operator">:</span> Animal<span class="token punctuation">;</span><span class="token keyword">let</span> b<span class="token operator">:</span> Size<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">//正确</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//正确</span></code></pre><p>类的私有成员和受保护成员会影响兼容性。</p><p>当检查类实例的兼容时，<font  style="color:red;">如果目标类型包含一个私有成员，那么源类型必须包含来自同一个类的这个私有成员</font>。同样地，这条规则也适用于包含受保护成员实例的类型检查。这允许子类赋值给父类，但是不能赋值给其它有同样类型的类。</p><h4 id="泛型的类型兼容性"><a href="#泛型的类型兼容性" class="headerlink" title="泛型的类型兼容性"></a>泛型的类型兼容性</h4><p>因为Typescript是结构性的类型系统，类型参数只影响使用其做为类型一部分的结果类型。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Empty<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span><span class="token punctuation">&#123;</span><span class="token comment">//空泛型</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> x<span class="token operator">:</span>Empty<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">let</span> y<span class="token operator">:</span>Empty<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span></code></pre><p>上面代码里，x和y是兼容的，因为它们的结构使用类型参数时并没有什么不同。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">notEmpty<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>    data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> x<span class="token operator">:</span> notEmpty<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">let</span> y<span class="token operator">:</span> notEmpty<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">/* 不能将类型“notEmpty&lt;string>”分配给类型"notEmpty&lt;number>”。不能将类型“string”分配给类型“number”。 */</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token comment">//err</span></code></pre><p>在这里，泛型类型在使用时就好比不是一个泛型类型。</p><hr><p>对于没指定泛型类型的泛型参数时，会把所有泛型参数当成<font  style="color:skyblue;">any</font>比较。然后用结果类型进行比较。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token function-variable function">obj</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">someThing</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>y<span class="token operator">:</span><span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">U</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>obj <span class="token operator">=</span> someThing<span class="token punctuation">;</span></code></pre><h2 id="子类型与赋值的理论辨析"><a href="#子类型与赋值的理论辨析" class="headerlink" title="子类型与赋值的理论辨析"></a>子类型与赋值的理论辨析</h2><p>我们使用了“兼容性”，它在语言规范里没有定义。在Typescript里，有两种兼容性:<strong>子类型和赋值</strong>。</p><p>它们的不同点在于，赋值扩展了子类型兼容性，增加了一些规则，允许和any来回赋值，以及enum和对应数字值之间的来回赋值。</p><p>语言里的不同地方分别使用了它们之中的机制。</p><p><font  style="color:red;">实际上，类型兼容性是由赋值兼容性来控制的，即使在implements和extends语句也不例外。</font></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript枚举类型</title>
      <link href="posts/5efeb2f4/"/>
      <url>posts/5efeb2f4/</url>
      
        <content type="html"><![CDATA[<h3 id="🌟数字枚举"><a href="#🌟数字枚举" class="headerlink" title="🌟数字枚举"></a>🌟数字枚举</h3><p>使用枚举我们可以定义一些带名字的常量。使用枚举可以清晰地表达意图或创建一组有区别的用例。Typescript支持数字的和基于字符串的枚举。创造枚举类型的值的关键字是enum.</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Direction<span class="token punctuation">&#123;</span>    Up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    Down<span class="token punctuation">,</span>    Left<span class="token punctuation">,</span>  Right<span class="token punctuation">&#125;</span></code></pre><p>如上，我们定义了一个数字枚举，up使用初始化为1(这也被成为初始化器)。其余的成员会从1开始自动增长。换句话说，Direction.Up的值为1，Down为2，Left为3，Right为4。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Direction<span class="token punctuation">&#123;</span>    Up<span class="token punctuation">,</span>    Down<span class="token punctuation">,</span>    Left<span class="token punctuation">,</span>  Right<span class="token punctuation">&#125;</span></code></pre><p>我们还可以完全不使用初始化器:</p><p>现在，up的值为0,Down的值为1等等。当我们不在乎成员的值的时候，这种自增长的行为是很有用处的，但是要注意每个枚举成员的值都是不同的。</p><hr><p>枚举类型response的最终值本质来讲,枚举类型是一个名值对,和值名对的结合体，可以通过值来访问键名,也可以通过键名访问值</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> obj<span class="token punctuation">&#123;</span>    a<span class="token punctuation">,</span>    b<span class="token punctuation">,</span>    c<span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment">//js编译后</span><span class="token keyword">var</span> obj<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token punctuation">[</span>obj<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    obj<span class="token punctuation">[</span>obj<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>    obj<span class="token punctuation">[</span>obj<span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"c"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj <span class="token operator">||</span> <span class="token punctuation">(</span>obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123; '0': 'a', '1': 'b', '2': 'c', a: 0, b: 1, c: 2 &#125;</span></code></pre><hr><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> obj<span class="token punctuation">&#123;</span>    a<span class="token punctuation">,</span><span class="token comment">//0</span>    b <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    c<span class="token comment">//err 枚举成员必须具有初始化表达式</span>    <span class="token comment">//c = getValue() 正确</span>    <span class="token comment">// getValue函数放在前面,例如变量a也同样错误</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getValue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> obj1<span class="token punctuation">&#123;</span>    e<span class="token punctuation">,</span><span class="token comment">//0</span>    f <span class="token operator">=</span> <span class="token function">getValue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    g <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>    d<span class="token punctuation">&#125;</span></code></pre><p>不带初始化器的枚举要么放在倒数第一的位置，要么被放在使用了数字常量或其它常量初始化了的枚举后面。</p><hr><h3 id="🌟其他枚举"><a href="#🌟其他枚举" class="headerlink" title="🌟其他枚举"></a>🌟其他枚举</h3><h4 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h4><p>字符串枚举的概念很简单，但是有细微的运行时的差别。在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> obj1 <span class="token punctuation">&#123;</span>    e <span class="token operator">=</span> <span class="token string">"婷宝儿"</span><span class="token punctuation">,</span>    f <span class="token operator">=</span> <span class="token string">"zzy"</span><span class="token punctuation">,</span>    g <span class="token operator">=</span> <span class="token string">"1314"</span><span class="token punctuation">,</span>    d <span class="token operator">=</span> <span class="token string">"99"</span><span class="token punctuation">&#125;</span></code></pre><p>ts编译后:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj1<span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\u5A77\u5B9D\u513F"</span><span class="token punctuation">;</span>    obj1<span class="token punctuation">[</span><span class="token string">"f"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"zzy"</span><span class="token punctuation">;</span>    obj1<span class="token punctuation">[</span><span class="token string">"g"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1314"</span><span class="token punctuation">;</span>    obj1<span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"99"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj1 <span class="token operator">||</span> <span class="token punctuation">(</span>obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。换句话说，如果你正在调试并且必须要读一个数字枚举的运行时的值，这个值通常是很难读的–它并不能表达有用的信息（尽管反向映射会有所帮助)，字符串枚举允许你提供一个运行时有意义的并且可读的值，独立于枚举成员的名字。</p><p>🔹如果尝试将值换成<strong>对象</strong>写法:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> obj1 <span class="token punctuation">&#123;</span>    e <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"婷宝儿"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token string">"18"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//err 含字符串值成员的枚举中不允许使用计算值</span>    f <span class="token operator">=</span> <span class="token string">"zzy"</span><span class="token punctuation">,</span>    g <span class="token operator">=</span> <span class="token string">"1314"</span><span class="token punctuation">,</span>    d <span class="token operator">=</span> <span class="token string">"99"</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> obj2 <span class="token punctuation">&#123;</span>    e <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"婷宝儿"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//err 含字符串值成员的枚举中不允许使用计算值</span><span class="token punctuation">&#125;</span></code></pre><p>🔹如果尝试将其中一个值换成<strong>数值</strong>写法:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> obj1 <span class="token punctuation">&#123;</span>    e <span class="token operator">=</span> <span class="token string">"tingbao"</span><span class="token punctuation">,</span>    f <span class="token operator">=</span> <span class="token string">"zzy"</span><span class="token punctuation">,</span>    g <span class="token operator">=</span> <span class="token number">1314</span><span class="token punctuation">,</span>    d <span class="token operator">=</span> <span class="token string">"99"</span><span class="token punctuation">&#125;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ts编译后:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//编译通过</span><span class="token keyword">var</span> obj1<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj1<span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"tingbao"</span><span class="token punctuation">;</span>    obj1<span class="token punctuation">[</span><span class="token string">"f"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"zzy"</span><span class="token punctuation">;</span>    obj1<span class="token punctuation">[</span>obj1<span class="token punctuation">[</span><span class="token string">"g"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1314</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"g"</span><span class="token punctuation">;</span>    obj1<span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"99"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj1 <span class="token operator">||</span> <span class="token punctuation">(</span>obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123; '1314': 'g', e: 'tingbao', f: 'zzy', g: 1314, d: '99' &#125;</span></code></pre><p>🔹再尝试将第一个值不写</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> obj1 <span class="token punctuation">&#123;</span>    e<span class="token punctuation">,</span>    f <span class="token operator">=</span> <span class="token string">"zzy"</span><span class="token punctuation">,</span>    g <span class="token operator">=</span> <span class="token number">1314</span><span class="token punctuation">,</span>    d <span class="token operator">=</span> <span class="token string">"99"</span><span class="token punctuation">&#125;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ts编译后:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj1<span class="token punctuation">[</span>obj1<span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">;</span><span class="token comment">//注意这一句</span>    obj1<span class="token punctuation">[</span><span class="token string">"f"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"zzy"</span><span class="token punctuation">;</span>    obj1<span class="token punctuation">[</span>obj1<span class="token punctuation">[</span><span class="token string">"g"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1314</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"g"</span><span class="token punctuation">;</span>    obj1<span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"99"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj1 <span class="token operator">||</span> <span class="token punctuation">(</span>obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123; '0': 'e', '1314': 'g', e: 0, f: 'zzy', g: 1314, d: '99' &#125;</span></code></pre><hr><h4 id="异构-Heterogeneou-枚举"><a href="#异构-Heterogeneou-枚举" class="headerlink" title="异构(Heterogeneou)枚举"></a>异构(Heterogeneou)枚举</h4><p>枚举可以混合字符串和数字成员,但是一般不太建议</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> value <span class="token punctuation">&#123;</span>    f <span class="token operator">=</span> <span class="token string">"zzy"</span><span class="token punctuation">,</span>    g <span class="token operator">=</span> <span class="token number">1314</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><hr><h4 id="计算成员"><a href="#计算成员" class="headerlink" title="计算成员"></a>计算成员</h4><p>每个枚举成员都带有一个值，它可以是常量或计算出来的。</p><p>当满足如下条件时，枚举成员被当作是常量:</p><p>它是枚举的第一个成员且没有初始化器，这种情况下它被赋予值0:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> value <span class="token punctuation">&#123;</span>   x <span class="token punctuation">&#125;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123; '0': 'x', x: 0 &#125;</span></code></pre><p>它不带有初始化器且它之前的枚举成员是一个数字常量。这种情况下，当前枚举成员的值为它上一个枚举成员的值加1。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> tingbao <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">enum</span> zzy<span class="token punctuation">&#123;</span>    o <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">&#125;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tingbao<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zzy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123; '0': 'x', '1': 'y', '2': 'z', x: 0, y: 1, z: 2 &#125;</span><span class="token comment">// &#123; '1': 'o', '2': 'p', '3': 'q', o: 1, p: 2, q: 3 &#125;</span></code></pre><p><strong>枚举成员使用常量枚举表达式初始化。常数枚举表达式是Typescript表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常量枚举表达式:</strong></p><ol><li>一个枚举表达式字面量（主要是字符串字面量或数字字面量)</li><li>一个对之前定义的常量枚举成员的引用（可以是在不同的枚举类型中定义的)</li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> tingbao <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">enum</span> zzy<span class="token punctuation">&#123;</span>    o <span class="token operator">=</span>tingbao<span class="token punctuation">.</span>x<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">&#125;</span></code></pre><p> 3.带括号的常量枚举表达式(<font style="color:red">表达式返回值是常量,但是这个初始化没法用函数的返回值</font>)</p><p> 4.一元运算符+, -，~其中之一应用在了常量枚举表达式</p><p> 5.常量枚举表达式做为二元运算符+，-,*，/，%，&lt;&lt;，&gt;&gt;，&gt;&gt;&gt;，&amp;，|，^的操作对象。若常数枚举表达式求值后为NaN或Infinity，则会在编译阶段报错。</p><hr><h4 id="联合枚举"><a href="#联合枚举" class="headerlink" title="联合枚举"></a>联合枚举</h4><p>存在一种特殊的非计算的常量枚举成员的子集:字面量枚举成员。字面量枚举成员是指<font style="color:skyblue">不带有初始值</font>的常量枚举成员，或者是值被<font style="color:gold">初始化</font>为</p><ol><li>任何字符串字面量（例如:”foo”，”shapeLength”,”value”)</li><li>任何数字字面量（例如: 1, 10日)</li><li>应用了一元 -符号的数字字面量（例如:-1，-99)</li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Shape<span class="token punctuation">&#123;</span>    <span class="token comment">//不带初始值的常量枚举,默认从0开始</span>    Circle<span class="token punctuation">,</span><span class="token comment">//ts默认设置为0</span>    Square<span class="token punctuation">,</span><span class="token comment">//ts默认设置为1</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Circle</span><span class="token punctuation">&#123;</span>    kind<span class="token operator">:</span>Shape<span class="token punctuation">.</span>Circle<span class="token punctuation">;</span>    radius<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Square</span><span class="token punctuation">&#123;</span>    kind<span class="token operator">:</span>Shape<span class="token punctuation">.</span>Square<span class="token punctuation">;</span>    shapeLength<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> c<span class="token operator">:</span>Circle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//err,所需类型来自属性“kind",在此处的“circle”类型上声明该属性化为</span>    kind<span class="token operator">:</span>Shape<span class="token punctuation">.</span>Square<span class="token punctuation">,</span><span class="token comment">//err不能将类型“shape.Square”分配给类型“shape.Circle”。所需类型来自属性“kind",在此处的“circle”类型上声明该属性</span>    radius<span class="token operator">:</span><span class="token number">99</span><span class="token punctuation">&#125;</span></code></pre><p>当所有枚举成员都拥有字面量枚举值时，它就带有了一种特殊的语义。</p><p><em>首先，枚举成员成为了类型</em></p><p>例如，我们可以说某些成员只能是枚举成员的值</p><p>另一个变化是枚举类型本身变成了<strong>每个枚举成员的联合</strong>。通过联合枚举，类型系统能够利用这样一个事实,它可以知道枚举里的值的集合。因此，TypeScript能够捕获在比较值的时候犯的愚蠢的错误。例如:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> tingbao <span class="token punctuation">&#123;</span>    name<span class="token punctuation">,</span>    sex<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token operator">:</span> tingbao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//此条件将始终返回“true"，因为类型“tingbao.name”和“tingbao.sex”没有重叠。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> tingbao<span class="token punctuation">.</span>name <span class="token operator">||</span> x <span class="token operator">!==</span> tingbao<span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"条件通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"条件不通过"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这个例子里，我们先检查x是否不是tingbao.name。如果通过了这个检查，然后||会发生短路效果，if语句体里的内容会被执行。然而，这个检查没有通过，那么x则只能为tingbao.name，因此没理由再去检查它是否为tingbao.sex.</p><hr><h4 id="运行时的枚举"><a href="#运行时的枚举" class="headerlink" title="运行时的枚举"></a>运行时的枚举</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> <span class="token constant">E</span> <span class="token punctuation">&#123;</span>   <span class="token constant">X</span><span class="token punctuation">,</span><span class="token constant">Y</span><span class="token punctuation">,</span><span class="token constant">Z</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token constant">X</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token constant">X</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token constant">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个是完全没有问题的，E里面就是有一个值为数字的X属性</span></code></pre><hr><h4 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h4><p>除了创建一个以属性名做为对象成员的对象之外，数字枚举成员还具有了反向映射，从枚举值到枚举名字。</p><p>即可以通过名称得到值，也可以通过值得到名称.</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> <span class="token constant">E</span> <span class="token punctuation">&#123;</span>   z <span class="token punctuation">&#125;</span> <span class="token keyword">let</span> a<span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">.</span>z<span class="token punctuation">;</span> <span class="token keyword">let</span> nameOfa <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//"z"</span></code></pre><p>编译后:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token constant">E</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">E</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token constant">E</span><span class="token punctuation">[</span><span class="token constant">E</span><span class="token punctuation">[</span><span class="token string">"z"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"z"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">E</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token constant">E</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">.</span>z<span class="token punctuation">;</span><span class="token keyword">var</span> nameOfa <span class="token operator">=</span> <span class="token constant">E</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameOfa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//z</span></code></pre><p>生成的代码中，枚举类型被编译成一个对象，它包含了正向映射（ name -&gt; value)和反向映射( value -&gt; name)。引用枚举成员总会生成为对属性访问并且永远也不会内联代码。</p><p>⚠️要注意的是不会为字符串枚举成员生成反向映射。</p><hr><h4 id="const枚举-常量枚举"><a href="#const枚举-常量枚举" class="headerlink" title="const枚举/常量枚举"></a>const枚举/常量枚举</h4><p>大多数情况下，枚举是十分有效的方案。然而在某些情况下需求很严格。为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用const枚举。</p><p><font style="color:hotpink">常量枚举通过在枚举上使用const修饰符来定义</font></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token keyword">enum</span> Enum <span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">99</span><span class="token punctuation">&#125;</span></code></pre><p>ts编译后</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//js文件内容为空,无法编译</span></code></pre><p>常量枚举，编译后会被删的渣都不剩</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token keyword">enum</span> Position <span class="token punctuation">&#123;</span>   up<span class="token punctuation">,</span>   down<span class="token punctuation">,</span>   left<span class="token punctuation">,</span>   right<span class="token punctuation">&#125;</span><span class="token keyword">let</span> positon <span class="token operator">=</span> <span class="token punctuation">[</span>Position<span class="token punctuation">.</span>up<span class="token punctuation">,</span>Position<span class="token punctuation">.</span>down<span class="token punctuation">,</span>Position<span class="token punctuation">.</span>left<span class="token punctuation">,</span>Position<span class="token punctuation">.</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>ts编译后</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> positon <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token comment">/* up */</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* down */</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* left */</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token comment">/* right */</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>常量枚举只能使用常量枚举表达式(不能用取值函数)，并且不同于常规的枚举，它们在编译阶段会被删除。常量枚举成员在使用的地方会被内联进来。之所以可以这么做是因为，常量枚举不允许包含计算成员。</p><hr><h4 id="外部枚举"><a href="#外部枚举" class="headerlink" title="外部枚举"></a>外部枚举</h4><p>外部枚举用来描述已经存在的枚举类型的形状</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">enum</span> Enum<span class="token punctuation">&#123;</span>    a <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">,</span>    c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">&#125;</span></code></pre><p>外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。对于非常数的外部枚举而言,没有初始化方法时被当做需要经过计算的。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript-泛型</title>
      <link href="posts/9ee8c184/"/>
      <url>posts/9ee8c184/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型简介"><a href="#泛型简介" class="headerlink" title="泛型简介"></a>泛型简介</h2><p>泛型可以理解为是泛指的类型,软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能.</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">thing</span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><span id="more"></span><p>创建第一个使用泛型的例子: thing函数。这个函数会返回任何传入它的值</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">thing</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">thing</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">thing</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> object<span class="token punctuation">;</span><span class="token comment">//上面代码实现输入什么.返回什么的效果</span><span class="token keyword">function</span> <span class="token function">thing</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>使用any类型会导致这个函数可以接收任何类型的arg参数，这样就丢失了一些信息:传入的类型与返回的类型应该是相同的。</p><p>但是如果要加上这个判断，代码又会变的格外臃肿</p><hr><h3 id="🌟基本泛型"><a href="#🌟基本泛型" class="headerlink" title="🌟基本泛型"></a>🌟基本泛型</h3><p>基于上述，我们需要一种方法使返回值的类型与传入参数的类型是相同的。这里，我们使用了类型变量，它是一种特殊的变量，只用于表示类型而不是值。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">thing</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>我们给thing添加了类型变量T。T帮助我们捕获用户传入的类型（比如: number)，之后我们就可以使用这个类型。之后我们再次使用了T当做返回值类型。现在我们可以知道参数类型与返回值类型是相同的了。这允许我们跟踪函数里使用的类型的信息。</p><p>我们把这个版本的thing函数叫做泛型，因为它可以适用于多个类型。不同于any，它不会丢失信息</p><h3 id="🌟泛型的常见用法"><a href="#🌟泛型的常见用法" class="headerlink" title="🌟泛型的常见用法"></a>🌟泛型的常见用法</h3><p>我们定义了泛型函数后，可以用两种方法使用。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token generic-function"><span class="token function">thing</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"mystring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里明确指定了T是string类型,并做为一个参数传给函数,使用了&lt;>括起不是</span></code></pre><p>第一种是，传入所有的参数，包含类型参数:</p><p>第二种方法更普遍。利用了类型推论–即编译器会根据传入的参数自动地帮助我们确定T的类型:</p><p><font style="color:tomato;">注意我们没必要使用尖括号(&lt;&gt;）来明确地传入类型!</font></p><p>编译器可以查看myString的值，然后把T设置为它的类型。类型推论帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入T的类型，在一些复杂的情况下，这是可能出现的。</p><h2 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h2><h3 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h3><p>使用泛型创建像thing这样的泛型函数时，编译器要求你在函数体必须正确的使用这个通用的类型。换句话说，你必须把这些参数当做是任意或所有类型。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">&#123;</span>    <span class="token comment">//这里就会直接报错,原因是因为不是每一种数据类型都有length属性的</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>loggingIdentity的类型:泛型函数loggingIdentity，接收类型参数T和参数arg,arg是个数组项目类型是T的数组，并返回元素类型是T的数组</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span>array<span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//不能将类型“number”分配给类型“string"。</span><span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这可以让我们把泛型变量T当做类型的一部分使用，而不是整个类型，增加了灵活性。</p><h3 id="使用泛型函数和泛型接口"><a href="#使用泛型函数和泛型接口" class="headerlink" title="使用泛型函数和泛型接口"></a>使用泛型函数和泛型接口</h3><p>泛型函数的类型与非泛型函数的类型没什么不同，只是有一个类型参数在<strong>最前面</strong>，像函数声明一样:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> thing<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token function-variable function">U</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">thing</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="泛型接口的设计与其他的类似"><a href="#泛型接口的设计与其他的类似" class="headerlink" title="泛型接口的设计与其他的类似"></a>泛型接口的设计与其他的类似</h5><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn</span> <span class="token punctuation">&#123;</span>    <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myIdentity<span class="token operator">:</span> GenericIdentityFn <span class="token operator">=</span> identity<span class="token punctuation">;</span></code></pre><p>我们可能想把泛型参数当作整个接口的一个参数。这样我们就能清楚的知道使用的具体是哪个泛型类型（比如:Dictionary<string>而不只是Dictionary)。这样接口里的其它成员也能知道这个参数的类型了。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//把泛型定义放在接口的后面</span>  <span class="token comment">//这样我们在调用这个接口时就可以传入某个具体的类型来细致化接口</span>    <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myIdentity<span class="token operator">:</span> GenericIdentityFn<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> identity<span class="token punctuation">;</span></code></pre><h5 id="泛型类class"><a href="#泛型类class" class="headerlink" title="泛型类class"></a>泛型类class</h5><p>泛型类看上去与泛型接口差不多。泛型类使用（&lt;&gt;）括起泛型类型，跟在类名后面。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">GenericNumber<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span><span class="token punctuation">&#123;</span>    zeroValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token comment">//该变量的值只能是T类型的</span>    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token comment">//该函数传入的参数的类型和返回值的类型都是T类型的</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> myGenericNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span>y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没问题</span>myGenericNumber<span class="token punctuation">.</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错，因为该函数只能传入数字类型的参数</span></code></pre><p>类有两部分:静态部分和实例部分。泛型类指的是实例部分的类型，所以类的静态属性不能使用这个泛型类型。(静态类型的一旦定义，就已经成形了)</p><hr><p>在Typescript使用泛型创建工厂函数时，需要引用构造函数的类类型</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">create</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//该函数可传入一个︰新的参数，新的函数用过new关键字返回的数据类型得是符合T的类型</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>前面有个例子,要求实现一个传入什么数据就返回什么数据的函数，一个个的定义每种输入和输出太过麻烦，直接使用泛型，这个有没法细致化的定义输入的要求.</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">&#123;</span>    <span class="token comment">//这里就会直接报错,原因是因为不是每一种数据类型都有length属性的</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>为此，我们定义一个接口来描述约束条件．约束条件就是一个接口，我们使用这个接口和extends关键字来实现约束:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span><span class="token punctuation">&#123;</span>    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token comment">//定义了一个接口，改接口表示至少得有一个Length的属性,且值为数字</span><span class="token punctuation">&#125;</span><span class="token comment">//泛型T拓展自LengthWise接口,使得泛型T多了一个约束条件,那就是必须得是一个用户length属性的数据</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Lengthwise<span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>现在这个泛型函数被定义了约束，因此它不再是适用于任意类型.</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript函数类型</title>
      <link href="posts/4de0a6bf/"/>
      <url>posts/4de0a6bf/</url>
      
        <content type="html"><![CDATA[<h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>我们可以给每个参数添加类型之后再为函数本身添加返回值类型。<br>        Typescript能够根据返回语句自动推断出返回值类型，因此返回值的类型一般可以忽略,写上去的目的是为了增加可读性，可以很方便的知道函数的参数和结果的值的类型.</p><span id="more"></span><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//常规函数</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">addLove</span><span class="token punctuation">(</span><span class="token parameter">y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addLove</span><span class="token punctuation">(</span><span class="token string">"14"</span><span class="token punctuation">,</span><span class="token string">"520"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"婷宝儿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//typescript参数定义类型后的函数</span>    <span class="token comment">//x ,y参数的值限制为数字，函数的返回值限制为数字</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h5 id="函数的完整类型定义"><a href="#函数的完整类型定义" class="headerlink" title="函数的完整类型定义"></a>函数的完整类型定义</h5><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token function-variable function">myAdd</span><span class="token operator">:</span> <span class="token punctuation">(</span>value1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> vaLue2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><p><em><strong>上面的代码分两部分:</strong></em></p><p>1．第一部分是变量myAdd的类型定义部分，该部分规定了myAdd的值是一个函数，函数有两参数x , y ,值都得是数字，函数的执行返回的结果得是一个数字</p><p>2．第二部分是创造了一个实际的函数，并把这个函数赋值给了变量myAdd</p><p>✍函数类型包含两部分:参数类型和返回值类型。当写出完整函数类型的时候，这两部分都是需要的。</p><p>我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型,只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为void而不能留空。</p><hr><h3 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h3><p>TypesScript里的每个函数参数都是必须的。这不是指不能传递null或undefined作为参数，而是说编译器检查用户是否为每个参数都传入了值。编译器还会假设只有这些参数会被传递进函数。</p><p><font style="color:pink;font-size:18px;">简短地说，传递给一个函数的参数个数必须与函数期望的参数个数一致</font></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buidName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>lastName<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">"-"</span><span class="token operator">+</span>lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">buidName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//error,少了一个参数</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buidName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span><span class="token string">"Mike"</span><span class="token punctuation">,</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//error,多了一个参数</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buidName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span><span class="token string">"婷宝儿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确,刚刚好</span></code></pre><h5 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h5><p>javaScript里，每个参数都是可选的，可传可不传。没传参的时候，它的值就是<font style="color:tomato;">undefined</font>.在Typescript里我们可以在参数名旁使用?实现可选参数的功能。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buidName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>lastName<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">"-"</span><span class="token operator">+</span>lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">buidName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过,第二个参数可以不写</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buidName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span><span class="token string">"Mike"</span><span class="token punctuation">,</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//error,多了一个参数</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buidName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span><span class="token string">"婷宝儿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确,刚刚好</span></code></pre><p>可选参数必须跟在必须其他普通参数的后面</p><p>如果上例我们想让first name是可选的，那么就必须调整它们的位置，把first name放在后面。</p><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><p>在Typescript里，我们也可以为参数提供一个默认值．当用户没有传递这个参数或传递的值是undefined时。它们叫做有默认初始化值的参数．默认参数的写法与ES6一致</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> LastName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//可选参数函数</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">buildName1</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> LastName <span class="token operator">=</span> <span class="token string">"tingbao"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//默认参数函数</span><span class="token punctuation">&#125;</span></code></pre><p>与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。如果带默认值的参数出现在必须参数前面，用户必须明确的传入undefined值来获得默认值。</p><hr><h3 id="剩余参数和this"><a href="#剩余参数和this" class="headerlink" title="剩余参数和this"></a>剩余参数和this</h3><p>必要参数，默认参数和可选参数有个共同点:它们表示某一个参数。有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。在Javascript里，你可以使用arguments来访问所有传入的参数。</p><h5 id="…rest"><a href="#…rest" class="headerlink" title="…rest"></a>…rest</h5><p>在Typescript里，你可以把所有参数收集到一个变量里:和ES6的rest一个道理.</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>restOfName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//fristName是一个字符串类型的值，剩余的参数必须也得是字符串,然后统一放在一个名为restOfNamede数组里面</span>    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> restOfName<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> employeeName <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"tingbao"</span><span class="token punctuation">,</span> <span class="token string">"dazhao"</span><span class="token punctuation">,</span> <span class="token string">"MIKE"</span><span class="token punctuation">,</span> <span class="token string">"TRUMP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>剩余参数会被当做个数不限的可选参数。可以一个都没有，同样也可以有任意个。编译器创建参数数组，名字是你在省略号（…）后面给定的名字，你可以在函数体内使用这个数组。</p><h5 id="this"><a href="#this" class="headerlink" title="this"></a>this</h5><p>在javascript里,this的值有两大类确定逻辑:</p><ol><li><p>在普通函数内, this的值指的就是调用该函数的对象</p></li><li><p>在箭头函数内, this的值指的就是定义该函数时所在的环境对象</p><p><strong>Typescript沿袭了ES6的设计核心</strong></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> deck <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    suits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"hearts"</span><span class="token punctuation">,</span> <span class="token string">"spades"</span><span class="token punctuation">,</span> <span class="token string">"clubs"</span><span class="token punctuation">,</span> <span class="token string">"diamonds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    cards<span class="token operator">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function-variable function">createCardPicker</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> pickedSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">&#123;</span>suit<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span>card<span class="token operator">:</span>pickedCard <span class="token operator">%</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token comment">//此处的this指向的是deck</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> cardPicker  <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"card:"</span><span class="token operator">+</span>pickedCard<span class="token punctuation">.</span>card<span class="token operator">+</span><span class="token string">"of"</span><span class="token operator">+</span>pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span></code></pre></li></ol><hr><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><h5 id="普通重载"><a href="#普通重载" class="headerlink" title="普通重载"></a>普通重载</h5><p>JavaScript本身是个动态语言。Javascript里函数根据传入不同的参数而返回不同类型的数据是很常见的。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> suits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hearts"</span><span class="token punctuation">,</span> <span class="token string">"spades"</span><span class="token punctuation">,</span> <span class="token string">"clubs"</span><span class="token punctuation">,</span> <span class="token string">"diamonds"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pickcard</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">&#123;</span>    <span class="token comment">//函数的返回值可以是任意类型</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果值的类型是对象</span>        <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pickedCard<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果值的类型是数字</span>        <span class="token keyword">let</span> pickedSuit<span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>suit<span class="token operator">:</span>suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span>card<span class="token operator">:</span>x <span class="token operator">%</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> my <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>suit<span class="token operator">:</span><span class="token string">"diamonds"</span><span class="token punctuation">,</span>card<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>suit<span class="token operator">:</span><span class="token string">"panda"</span><span class="token punctuation">,</span>card<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>suit<span class="token operator">:</span><span class="token string">"hearts"</span><span class="token punctuation">,</span>card<span class="token operator">:</span><span class="token number">99999</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickCard1 <span class="token operator">=</span> my<span class="token punctuation">[</span><span class="token function">pickcard</span><span class="token punctuation">(</span>my<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"card: "</span><span class="token operator">+</span>pickCard1<span class="token punctuation">.</span>card<span class="token operator">+</span><span class="token string">" of:"</span><span class="token operator">+</span>pickCard1<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//card: 10 of:panda</span><span class="token keyword">let</span> pickCard2 <span class="token operator">=</span> <span class="token function">pickcard</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"card: "</span><span class="token operator">+</span>pickCard2<span class="token punctuation">.</span>card<span class="token operator">+</span><span class="token string">" of:"</span><span class="token operator">+</span>pickCard2<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//card: 9 of:undefined</span></code></pre><p>pickcard方法根据传入参数的不同会返回两种不同的类型。如果传入的是代表纸牌的对象，函数作用是从中抓一张牌。如果用户想抓牌，我们告诉他抓到了什么牌.</p><h5 id="TypeScript基于类型系统的函数重载实现"><a href="#TypeScript基于类型系统的函数重载实现" class="headerlink" title="TypeScript基于类型系统的函数重载实现"></a>TypeScript基于类型系统的函数重载实现</h5><p>方法是为同一个函数提供多个函数类型定义来进行函数重载。编译器会根据这个列表去处理函数的调用。下面我们来重载pickcard函数。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> suits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hearts"</span><span class="token punctuation">,</span> <span class="token string">"spades"</span><span class="token punctuation">,</span> <span class="token string">"clubs"</span><span class="token punctuation">,</span> <span class="token string">"diamonds"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//新加入2行</span><span class="token keyword">function</span> <span class="token function">pickcard</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token punctuation">&#123;</span>suit<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>card<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token comment">//如果传入函数的函数格式是一个数组,且每一个数组都是一个里面有suit和card属性对象时,返回值是数字</span><span class="token keyword">function</span> <span class="token function">pickcard</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>suit<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>card<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token comment">//如果传入函数的参数格式是一个数字,则返回一个对象，对象里面有suit和card属性</span><span class="token keyword">function</span> <span class="token function">pickcard</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//函数的返回值可以是任意类型</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果值的类型是对象</span>        <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pickedCard<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果值的类型是数字</span>        <span class="token keyword">let</span> pickedSuit<span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>suit<span class="token operator">:</span>suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span>card<span class="token operator">:</span>x <span class="token operator">%</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> my <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>suit<span class="token operator">:</span><span class="token string">"diamonds"</span><span class="token punctuation">,</span>card<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>suit<span class="token operator">:</span><span class="token string">"panda"</span><span class="token punctuation">,</span>card<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>suit<span class="token operator">:</span><span class="token string">"hearts"</span><span class="token punctuation">,</span>card<span class="token operator">:</span><span class="token number">99999</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickCard1 <span class="token operator">=</span> my<span class="token punctuation">[</span><span class="token function">pickcard</span><span class="token punctuation">(</span>my<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"card: "</span><span class="token operator">+</span>pickCard1<span class="token punctuation">.</span>card<span class="token operator">+</span><span class="token string">" of:"</span><span class="token operator">+</span>pickCard1<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//card: 10 of:panda</span><span class="token keyword">let</span> pickCard2 <span class="token operator">=</span> <span class="token function">pickcard</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"card: "</span><span class="token operator">+</span>pickCard2<span class="token punctuation">.</span>card<span class="token operator">+</span><span class="token string">" of:"</span><span class="token operator">+</span>pickCard2<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//card: 9 of:undefined</span></code></pre><p>简单来说就是通过多重类型定义来预设多种允许的参数和返回值，从而实现重载的类型判断</p><p><font style="color:hotpink;font-size:18px;">注意</font></p><p>⚠️function pickcard(x):any并不是重载列表的一部分，因此这里只有两个重载:一个是接收对象另一个接收数字。以其它参数调用pickcard会产生错误。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack 现代化前端应用的基石</title>
      <link href="posts/6f7a9716/"/>
      <url>posts/6f7a9716/</url>
      
        <content type="html"><![CDATA[<p><svg t="1608995853857" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3074" width="32" height="32"><path d="M882.23288889 749.45422222L526.90488889 950.38577778V793.94133333l221.41155556-121.856 133.91644444 77.36888889z m24.34844444-22.07288889V307.08622222l-129.93422222 75.09333333v270.22222223l129.93422222 74.97955555z m-766.17955555 22.07288889l355.328 201.04533333V793.94133333L274.20444445 672.08533333l-133.80266667 77.36888889zM116.05333333 727.38133333V307.08622222l129.93422222 75.09333333v270.22222223L116.05333333 727.38133333z m15.24622222-447.60177778l364.43022223-206.16533333v151.32444445L262.144 353.39377778l-1.82044445 1.024c0 0.11377778-129.024-74.63822222-129.024-74.63822223z m760.03555556 0L526.90488889 73.728v151.32444445l233.472 128.34133333 1.82044444 1.024 129.13777778-74.63822223z" fill="#8ED6FB" p-id="3075"></path><path d="M495.72977778 758.21511111l-218.45333333-120.14933333V400.15644445l218.45333333 126.17955555v231.87911111z m31.17511111 0l218.45333333-120.03555556V400.15644445l-218.45333333 126.17955555v231.87911111zM291.95377778 372.62222222l219.24977777-120.49066667L730.45333333 372.62222222 511.31733333 499.25688889 291.95377778 372.62222222z" fill="#1C78C0" p-id="3076"></path></svg></p><p>经过最近几年的爆炸式发展，前端已经绝不再是简简单单的页面开发了，从早期只是配合后端“切图”，到现在已经能够独立驱动整个业务，这背后就需要引入更多的思想、框架和工具。比如：</p><p>现阶段的大型应用就要求前端必须要有独立的项目，独立的项目想要有足够的效率就必须进行工程化。</p><p>具有复杂数据状态的应用开发过程就必须要有合适的框架，采用数据驱动开发的方式增强可维护性。</p><p>复杂项目结构必须进行模块化管理，一来提高部分公共内容的可复用性，二来增强团队并行协作能力。</p><p>重复规律性的工作必须采用自动化工具实现，一来提高效率，二来避免人为出错。</p><p>这里的大多数问题现如今都有很成熟的解法，那我今天要跟你分享的主题就是其中最具有代表性的 Webpack。因为想要在现代化前端开发工作中有足够的开发效率，你一定离不开 Webpack 相关技术栈，不管是对于项目代码的模块化，还是一些规律性的重复工作，甚至是整个前端项目的工程化，Webpack 都能够帮你轻松搞定。</p><h4 id="🌟Webpack：提升前端生产力的利器"><a href="#🌟Webpack：提升前端生产力的利器" class="headerlink" title="🌟Webpack：提升前端生产力的利器"></a>🌟Webpack：提升前端生产力的利器</h4><p>我个人觉得 Webpack 应该是现代化前端开发的基石，也是目前前端生产力的代名词。</p><p>当然在日常工作中，确实有奉行“够用就行”工作态度的开发者，但我认为这是他们还没有意识到这些新技术新方案可能带来的成效。</p><p>确实，这些框架的官方推出这种高度集成的 CLI 工具，目的就是降低开发者的使用成本，但是对于一个优秀的开发人员而言，只会使用这种“黑盒工具”是远远不够的，因为这种“黑盒工具”大多数采用的都是通用的配置，而优秀的开发人员应该学会“因地制宜”，根据实际情况更灵活地去使用每一个工具。</p><p>当然，仔细想想，这个问题也好理解，毕竟很多前端开发者都是在这些框架和工具的成熟期（2017 年以后）才进入的这个行业，所以对它们背后的事情自然是要陌生一些。而我有幸经历了整个前端工程化工具生态的发展过程，加上在这之前很长的开发经历，所以对这个过程中诞生的工具和思想自然会理解地更为深刻。</p><p>我深知这些内容对你日常开发工作中解决问题能力的影响，很多开发者在日常工作中遇到问题不能快速地定位和解决，就是因为缺乏对这种底层或者基础的足够了解。因此，很多时候我会把对 Webpack 这类工具的认知程度，当作辨别开发人员优秀与否的分水岭。</p><h4 id="🌟Webpack-与模块化开发"><a href="#🌟Webpack-与模块化开发" class="headerlink" title="🌟Webpack 与模块化开发"></a>🌟Webpack 与模块化开发</h4><p>那说到 Webpack，就不得不提模块化开发，因为 Webpack 最早的出发点就是去实践前端方向的模块化开发。想要搞明白 Webpack，就先得搞明白它所要解决的问题，所以我这里先唠叨两句模块化的事情。</p><p>模块化，可以说是当下最重要的前端开发范式之一。随着前端应用的日益复杂化，我们的项目已经逐渐膨胀到了不得不花大量时间去管理的程度。而模块化就是一种最主流的项目组织方式，它通过把复杂的代码按照功能划分为不同的模块单独维护，从而提高开发效率、降低维护成本。</p><p>Webpack 本质上仍然还是一个模块化打包工具，它通过“万物皆模块”这种设计思想，巧妙地实现了整个前端项目的模块化。在 Webpack 的理念中，前端项目中的任何资源都可以作为一个模块，任何模块都可以经过 Loader 机制的处理，最终再被打包到一起。</p><p>Webpack 本身的架构中有两个很核心的特性，分别是 Loader 机制和插件机制。正是因为它的插件机制形成了非常繁荣的生态，所以造就了它现在“无所不能”的现状，所以让 Webpack 慢慢发展成了现在很多前端开发者眼中的构建系统。</p><hr><h4 id="🌟写在最后"><a href="#🌟写在最后" class="headerlink" title="🌟写在最后"></a>🌟写在最后</h4><p>一个合格的前端开发者必须夯实基础，深入地理解所使用的技术，而不是浮于表面，保持“够用就行”的技术认知；在这之后，才是去丰富自己的技术栈。就好像我们经常说的，马步扎不稳，学会再多的招数也只是花拳绣腿。</p><p>正所谓“悟则通，通则达”，单纯地学习前人的做法而不去思考为什么，你就永远只能做最“累”的人。特别是在技术日新月异的时代，所有人都在持续学习，只有掌握核心精髓，更快更忧，你才能跑得最远。</p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react初识及基本语法</title>
      <link href="posts/911df57a/"/>
      <url>posts/911df57a/</url>
      
        <content type="html"><![CDATA[<h2 id="一-React入门"><a href="#一-React入门" class="headerlink" title="一. React入门"></a>一. React入门</h2><h3 id="1-什么是框架"><a href="#1-什么是框架" class="headerlink" title="1.什么是框架"></a>1.什么是框架</h3><ul><li>是一个基本概念上的结构，用于去解决或者处理复杂的问题</li><li>a.框架是一个框子<ul><li>​    指其约束性</li><li>例如门框,决定了门的主体大小</li></ul></li></ul><p>b.也是一个架子</p><ul><li>指其支撑性</li><li>例如楼房建筑，支撑技术工人高空作业</li></ul><h3 id="2-为什么要用框架"><a href="#2-为什么要用框架" class="headerlink" title="2.为什么要用框架"></a>2.为什么要用框架</h3><ol><li>一般成熟、稳健的框架，周边生态会很丰育，并且它的结构性、扩展性、安全性、稳定性等会很好，还会不断更新迭代。</li><li>框架会帮你处理很多细节问题，铺设一些基础性接口，你只需要集中精力完成系统的业务逻辑设计</li></ol><h3 id="3-react是什么"><a href="#3-react是什么" class="headerlink" title="3.react是什么"></a>3.react是什么</h3><ol><li>React是一个声明式，高效且灵活的用于构建用户界面的JavaScript库</li><li>使用React可以将一些简短、独立的代码片段组合成复杂的ur 界面，这些代码片段被称作组件</li></ol><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//只需要声明，无需架设底层实现</span><span class="token comment">//比如创建一个一个包含2个子节点的dom节点</span><span class="token comment">//jsx就是一个最明显的声明式，超简单、超粗暴，直接声明所有dom元素和属性</span><span class="token keyword">const</span> ele <span class="token operator">=</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"box"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token keyword">this</span>'s p<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token keyword">this</span>'s span<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// babeljs 编译 https://babeljs.io/repl/#?browsers=defaults</span><span class="token keyword">const</span> ele <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>    <span class="token string">"div"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>className<span class="token operator">:</span><span class="token string">"box"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"this's p"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"this's span"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//过程式</span><span class="token keyword">var</span> oDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span> <span class="token string">'div'</span><span class="token punctuation">)</span>oDiv<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'box'</span><span class="token keyword">var</span> oP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span> <span class="token string">"p"</span><span class="token punctuation">)</span>oP<span class="token punctuation">.</span>innertext <span class="token operator">=</span> "<span class="token keyword">this</span><span class="token string">'s p'</span><span class="token keyword">var</span> oSpan <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span> <span class="token string">"span"</span><span class="token punctuation">)</span>oP<span class="token punctuation">.</span>innerText <span class="token operator">=</span> "<span class="token keyword">this</span><span class="token string">'s span'</span>oDiv<span class="token punctuation">.</span><span class="token function">appendchild</span><span class="token punctuation">(</span>oP<span class="token punctuation">)</span>oDiv<span class="token punctuation">.</span><span class="token function">appendchild</span><span class="token punctuation">(</span>oSpan<span class="token punctuation">)</span></code></pre><h3 id="4-渲染流程"><a href="#4-渲染流程" class="headerlink" title="4.渲染流程"></a>4.渲染流程</h3><pre class="language-css" data-language="css"><code class="language-css">初始化的渲染流程分为3步第一步，开发者使用JSX语法写React<span class="token punctuation">,</span>babel会将JSx编译为浏览器能识别的React Js语法。这一步，一般配合 webpack在本地进行第二步，执行 ReactDoM.render函数，渲染出虚择DOM第三步，react将虚拟DOM，渲染成真实的DOM页面更新的流程同样也是3步第一步，当页面需要更新时，通过声明式的方法，调用setstate告诉 react第二步，react自动调用组件的 render方法，渲染出虚拟 DOM第三步，react 会通过 diffing算法，对比当前虚拟DON和需要更新的虚拟DOw有什么区别。然后重新渲染区别部分的真实DOM</code></pre><h3 id="5-react初体验"><a href="#5-react初体验" class="headerlink" title="5.react初体验"></a>5.react初体验</h3><p>利用react原生能力构建ui—–引入网络链接</p><pre class="language-react" data-language="react"><code class="language-react">&lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt; &#x2F;&#x2F;react框架实现ui用户界面关注ui层&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;react-dom@16&#x2F;umd&#x2F;react-dom.development.js&quot; crossorigin&gt;&lt;&#x2F;script&gt;&lt;script&gt;  &#x2F;&#x2F;react-dom 用户交互 处理dom&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;react-dom@16&#x2F;umd&#x2F;react-dom.development.js&quot; crossorigin&gt;&lt;&#x2F;script&gt;&lt;script&gt;   &lt;script&gt;const e &#x3D; React.createElement;const ele1 &#x3D; e( &#39;h1&#39; ,&#123;className: &#39;box&#39; ,onclick:()&#x3D;&gt;console.log( &#39;good&#39;)&#125; , &#39;hello react&#39;);console.log(ele1);ReactDOM.render(ele1,document.queryselector( &quot;#root&quot;)); &lt;&#x2F;script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript高级小技巧</title>
      <link href="posts/1808fdb6/"/>
      <url>posts/1808fdb6/</url>
      
        <content type="html"><![CDATA[<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>当我们在Typescript里声明了一个类的时候，实际上同时声明了很多东西</p><p>首先就是声明类的实例的类型。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Woman</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>message<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello,"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj<span class="token operator">:</span>Woman<span class="token punctuation">;</span><span class="token comment">//声明变量obj的类型为Woman</span>obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token string">"婷宝儿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创造一个Woman实例</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 hello,婷宝儿</span></code></pre><p>实例部分和静态部分是分离开的</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> standardGreeting <span class="token operator">=</span> <span class="token string">"Hello， there"</span><span class="token punctuation">;</span>    greeting<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"Hello,"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Greeter<span class="token punctuation">.</span>standardGreeting<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> greeter1<span class="token operator">:</span> Greeter<span class="token punctuation">;</span>greeter1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeter1<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello , there</span><span class="token keyword">let</span> greeterMaker<span class="token operator">:</span> <span class="token keyword">typeof</span> Greeter <span class="token operator">=</span> Greeter<span class="token punctuation">;</span><span class="token comment">//这里的typeof Greeter的语法意思是是取Greeter类的类型，而不是实例的类型</span>greeterMaker<span class="token punctuation">.</span>standardGreeting <span class="token operator">=</span><span class="token string">"Hey there!"</span><span class="token punctuation">;</span><span class="token keyword">let</span> greeter2<span class="token operator">:</span> Greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">greeterMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span> <span class="token function">log</span><span class="token punctuation">(</span>greeter2<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"Hey there!";</span></code></pre><h4 id="把类当做接口使用"><a href="#把类当做接口使用" class="headerlink" title="把类当做接口使用"></a>把类当做接口使用</h4><p>因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Something</span><span class="token punctuation">&#123;</span>    x<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>    y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Human</span> <span class="token keyword">extends</span> <span class="token class-name">Something</span><span class="token punctuation">&#123;</span>    z<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> human<span class="token operator">:</span>Human <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token string">"婷宝儿"</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>z<span class="token operator">:</span><span class="token number">99</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript静态属性</title>
      <link href="posts/46b15610/"/>
      <url>posts/46b15610/</url>
      
        <content type="html"><![CDATA[<p>在ES6部分我们曾学到什么是静态属性:这些属性存在于类本身上面而不是类的实例上，我们只能通过<strong>类.属性</strong>名称的方式来进行调用,而不能在实例上进行调用</p><span id="more"></span><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Grid</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>    <span class="token function">calculate</span><span class="token punctuation">(</span>point<span class="token operator">:</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> xDist <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">-</span> Grid<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里不能写this.origin</span>        <span class="token keyword">let</span> yDist <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> Grid<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>y<span class="token punctuation">)</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>xDist <span class="token operator">*</span> xDist <span class="token operator">+</span> yDist <span class="token operator">*</span> yDist<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> scale<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> grid1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Grid</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1x scale</span><span class="token keyword">let</span> grid2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Grid</span><span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8x scale</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grid1<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//14.142135623730951</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grid2<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.9525624189766635</span></code></pre><p>如果代码中标注处写了this.origin的话是会直接报错的,因为构造函数的this默认指的是构造函数生成的实例，而实例是不会继承类的静态方法的.</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类做为其它派生类的基类使用。它们一般不会直接被实例化。不同于接口，抽象类<strong>可以包含成员的实现细节</strong>。</p><p><code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法</p><hr><p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animals</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* public sayName():void&#123;        console.log(this.name);    &#125;; */</span>    <span class="token comment">/*     抽象类Animals里定义了抽象方法,这里的抽象方法是一种格式约束    那么这种约束就必须要求下方 Person拓展类里面实现    并且除去 Animals类本来传给下一代Person的public,以及必须实现的abstract之外     定义了其他方法不会报错,但是不允许进行使用    */</span>    <span class="token keyword">abstract</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"熊猫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*     不加sayName    类型“Animals”上不存在属性“sayHello”。     */</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello tingbao!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj1<span class="token operator">:</span> Animals<span class="token punctuation">;</span>obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//obj:Animals</span>obj1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Person &#123; name: '熊猫' &#125;</span><span class="token comment">//obj1.sayHello();//any 类型“Animals”上不存在属性“sayHello”。</span></code></pre><p>🌰2</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token comment">//相当于定义了一个公共接口name并进行赋值</span>    <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Department name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">abstract</span> <span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token comment">//必须在派生类中实现</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">AccountingDepartment</span> <span class="token keyword">extends</span> <span class="token class-name">Department</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span> <span class="token string">' Accounting and Auditing '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在派生类的构造函数中必须调用 super(</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'The Accounting Department meets each Monday at 10am. '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这个方法不会被继承下去抽象类与接口类似，因为抽象类中没有定义该名称方法,改成其他名字也是一样</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">'你好世界'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> department<span class="token operator">:</span> Department<span class="token punctuation">;</span><span class="token comment">//允许创建一个对抽象类型的引用</span>department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误:不能创建一个抽象类的实例</span>department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountingDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//允许对一个抽象子类进行实例化和赋值</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>department<span class="token punctuation">)</span><span class="token punctuation">;</span>department<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继承自父类输出 Department name: Accounting and Auditing</span>department<span class="token punctuation">.</span><span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子类自身自带方法输出The Accounting Department meets each Monday at 10am.</span>department<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误:方法在声明的抽象类中不存在,</span></code></pre><p><font style="color:red;font-size:20px;font-weight:900;">抽象方法的语法与接口方法相似。</font></p><p><font style="color:red;font-size:20px;font-weight:900;">两者都是定义方法签名但不包含方法体。</font>然而，抽象方法必须包含abstract关键字</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript公共/私有与受保护的修饰符</title>
      <link href="posts/cea80282/"/>
      <url>posts/cea80282/</url>
      
        <content type="html"><![CDATA[<p>在js的中默认情况下class内的属性和成员我们可以自由的访问，es6允许用户可以手动设置静态方法的方式避免继承</p><p>如果你对其它语言中的类比较了解，就会注意到我们在之前的代码里并没有使用public来做修饰;例如，C#， java要求必须明确地使用public指定成员是可见的。</p><span id="more"></span><h4 id="🌟在TypeScript和es6里，成员都默认public"><a href="#🌟在TypeScript和es6里，成员都默认public" class="headerlink" title="🌟在TypeScript和es6里，成员都默认public."></a>🌟<font style="color:tomato;">在TypeScript和es6里，成员都默认public.</font></h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">move</span><span class="token punctuation">(</span>distanceMeters<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>distanceMeters<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">m.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"熊猫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 熊猫</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出熊猫移动了520m</span></code></pre><h4 id="🌟当成员被标记成private时，它就不能在声明它的类的外部访问。"><a href="#🌟当成员被标记成private时，它就不能在声明它的类的外部访问。" class="headerlink" title="🌟当成员被标记成private时，它就不能在声明它的类的外部访问。"></a>🌟当成员被标记成private时，它就不能在声明它的类的外部访问。</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token function">move</span><span class="token punctuation">(</span>dis<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">移动了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>dis<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"熊猫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//属性“move”为私有属性，只能在类“Animal”中访间。</span>Animal<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类型“typeof Animal”上不存在属性“move”</span></code></pre><h4 id="🌟private私有修饰符"><a href="#🌟private私有修饰符" class="headerlink" title="🌟private私有修饰符"></a>🌟private私有修饰符</h4><p>Animal和 Rhino共享了来自Animal里的私有成员定义 private name: string，因此它们是兼容的。</p><p>然而Employee却不是这样。当把 Employee赋值给Animal的时候，得到一个错误，说它们的类型不兼容。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Rhino</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"Rhino"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span> <span class="token string">"Goat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> rhino <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rhino</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span> <span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animal <span class="token operator">=</span> rhino<span class="token punctuation">;</span><span class="token comment">//let animal = new Anima1( "Goat");</span>animal <span class="token operator">=</span> employee<span class="token punctuation">;</span><span class="token comment">//错误: Animal与 EmpLoyee不兼容|</span></code></pre><p>尽管Employee里也有一个私有成员name，但它明显不是Animal里面定义的那个。</p><p><font style="color:skyblue;font-weight:900;">不同类里面的同名私有属性，不是同一个属性</font></p><hr><h4 id="🌟protected保护修饰符"><a href="#🌟protected保护修饰符" class="headerlink" title="🌟protected保护修饰符"></a>🌟protected保护修饰符</h4><p>protected修饰符与private修饰符的行为很相似，但有一点不同, protected成员在派生类中仍然可以访问。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//EmpLoyee能够继承 Person</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> department<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> department<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello，my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> and I work in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>department<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">. </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> howard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Howard"</span><span class="token punctuation">,</span> <span class="token string">"sales"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> john <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误: ‘Person’的构造函数是被保护的.</span></code></pre><h4 id="readonly只读修饰符"><a href="#readonly只读修饰符" class="headerlink" title="readonly只读修饰符"></a>readonly只读修饰符</h4><p>你可以使用readonly关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">octopus</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token keyword">readonly</span> numberOfLegs<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">constructor</span> <span class="token punctuation">(</span>theName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> dad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Octopus</span><span class="token punctuation">(</span> <span class="token string">"Man with the 8 strong legs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只读值被初始化，之后不再允许修改</span>dad<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Man with the 3-piece suit"</span><span class="token punctuation">;</span><span class="token comment">//错误! name 是只读的.</span></code></pre><p>在创造构造函数时，我们有时不仅要限制某个变量后期设置值的时候需要遵守的规则，还要预设一个值的时候，就要用到参数属性，如上述代码中的numberofLegs属性，即设置了值的类型也设置了值的初始值</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript接口</title>
      <link href="posts/bd340774/"/>
      <url>posts/bd340774/</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是接口"><a href="#一-什么是接口" class="headerlink" title="一.什么是接口"></a>一.什么是接口</h3><p>TypeScript的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。</p><p>在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码<code>定义契约</code>。</p><span id="more"></span><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错,此处应有一个参数</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类型number”的参数不能赋给类型“&#123;name: string;&#125;”的参数。</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不能将类型“number”分配给类型“string”。</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'婷宝儿'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确</span></code></pre><p>{name:string}即所谓的接口,它对所传进来的参数作出强制约束.</p><h4 id="1-1-interface接口实现"><a href="#1-1-interface接口实现" class="headerlink" title="1.1 interface接口实现"></a>1.1 interface接口实现</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">nameCheck</span><span class="token punctuation">&#123;</span>    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>name<span class="token operator">:</span>nameCheck<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'婷宝儿'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误</span></code></pre><p>代码实例2和实例1效果一致.</p><blockquote><p>类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以。</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">nameCheck</span><span class="token punctuation">&#123;</span>    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    age <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>name<span class="token operator">:</span>nameCheck<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'婷宝儿'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确,参数位置调换也是可以的</span></code></pre><p>当然多一个参数也不行的啦~</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">nameCheck</span><span class="token punctuation">&#123;</span>    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    age <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>name<span class="token operator">:</span>nameCheck<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 类型"&#123; age: number;name: string; sex: string; &#125;”的参数不能赋给类型nameCheck”的参数。对象文字可以只指定已知属性，并且“sex”不在类型"nameCheck”中。 */</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'婷宝儿'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">"女"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span><span class="token comment">//这种也别想通过哈哈哈哈</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'婷宝儿'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'zzy'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错--应有1个参数,但获得2个</span></code></pre><p>然后…就这?  既然严格,那就贯彻到底咯💪</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">nameCheck</span><span class="token punctuation">&#123;</span>    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    age <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//未作检查</span><span class="token punctuation">&#125;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'婷宝儿'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'zzy'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错--应有1个参数,但获得2个</span></code></pre><p>想要通过? 可以! 加一个args参数,自己动</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">nameCheck</span><span class="token punctuation">&#123;</span>    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    age <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>name<span class="token operator">:</span>nameCheck<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'婷宝儿'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'zzy'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确</span></code></pre><h3 id="二-interface接口特性"><a href="#二-interface接口特性" class="headerlink" title="二.interface接口特性"></a>二.interface接口特性</h3><h4 id="2-1interface接口实现之可选属性"><a href="#2-1interface接口实现之可选属性" class="headerlink" title="2.1interface接口实现之可选属性"></a>2.1interface接口实现之可选属性</h4><p>很多框架的API接口里面都给我们提供了一些可选的属性,用户可以选择是否输入该属性信息,无论输入或是不输入都不会报错</p><p>可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">nameCheck</span><span class="token punctuation">&#123;</span>    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    age <span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token comment">//可选参数后面加上一个----?,需在冒号前</span><span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>name<span class="token operator">:</span>nameCheck<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'婷宝儿'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确</span><span class="token comment">//say(&#123;age:18,name:'婷宝儿'&#125;);//同样正确,因为参数可选</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">nameCheck</span><span class="token punctuation">&#123;</span>    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    age <span class="token operator">?</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>name<span class="token operator">:</span>nameCheck<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//值不同</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'婷宝儿'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错 不能将类型“18”分配给类型“21”.</span></code></pre><h5 id="😃interface接口实现之可选属性的优点"><a href="#😃interface接口实现之可选属性的优点" class="headerlink" title="😃interface接口实现之可选属性的优点"></a>😃interface接口实现之可选属性的优点</h5><p>可选属性的好处:</p><p>​        一是可以对可能存在的属性进行预定义</p><p>​        二是可以捕获引用了不存在的属性时的错误</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">nameCheck</span><span class="token punctuation">&#123;</span>    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    age <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>    sex <span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>famale<span class="token operator">:</span>nameCheck<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//类型“nameCheck”上不存在属性“address”。</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>famale<span class="token punctuation">.</span>address<span class="token punctuation">,</span>famale<span class="token punctuation">.</span>name<span class="token punctuation">,</span>famale<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">'婷宝儿'</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">"女"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当使用了可选属性之后，那么对于这传入的对象里面的属性的引用就会被限制，如果引用了接口里未定义的属性时,就会报错</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>famale<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//类型“nameCheck”上不存在属性“address”。</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>famale<span class="token punctuation">.</span>address<span class="token punctuation">,</span> famale<span class="token punctuation">.</span>name<span class="token punctuation">,</span> famale<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'婷宝儿'</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">"女"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">say</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined 婷宝儿 18</span></code></pre><p>如果没有使用接口的话,那么引用不存在的属性时,是不会报错的</p><hr><h4 id="2-2interface接口实现之只读属性"><a href="#2-2interface接口实现之只读属性" class="headerlink" title="2.2interface接口实现之只读属性"></a>2.2interface接口实现之只读属性</h4><p>接口不仅可以用在函数的传参上,也可以用作其他语句.比如,一些对象属性只能在对象刚刚创建的时候修改其值。</p><p>你可以在属性名前用readonly来指定只读属性:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">readonly</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>    <span class="token keyword">readonly</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> p1<span class="token operator">:</span> Point <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//无法分配到“x”，因为它是只读属性。</span></code></pre><p>最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。做为变量使用的话用const，若做为属性则使用readonly。</p><h4 id="2-3interface接口实现之属性检查"><a href="#2-3interface接口实现之属性检查" class="headerlink" title="2.3interface接口实现之属性检查"></a>2.3interface接口实现之属性检查</h4><p>在可选属性一页中咱们讲过，当我们给一个对象设置了可选属性是，那么函数内部对于其他的未在接口内定义的参数进行调用就会直接报错</p><p>不过,绕开这些检查也不是不可以</p><blockquote><p>最简便的方法是使用类型断言</p><p>最佳的方式是在接口里添加一个字符串索引签名</p></blockquote><p>以下是 <strong>字符串索引签名案例</strong></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">nameCheck</span> <span class="token punctuation">&#123;</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>property<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token comment">//规定传进来的属性都是string,值都是number</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>famale<span class="token operator">:</span> nameCheck<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确</span><span class="token comment">//name参数报错 不能将类型“string”分配给类型“number”</span><span class="token comment">//[property: string]: number//规定传进来的属性都是string,值都是number</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">"婷宝儿"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>⚠️在进行对其他值的筛选时,一定要注意是在不违反之前的规则前提下进行</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">nameCheck</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span><span class="token comment">//值要求是string类型</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>property<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token comment">//规定传进来的属性都是string,值要求是number类型</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>famale<span class="token operator">:</span> nameCheck<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//nameCheck接口参数第1个和第3个冲突</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"婷宝儿"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>想让上面成立,改一下数据类型即可</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">nameCheck</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>property<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token comment">//对传进来的属性值没有约束</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span>famale<span class="token operator">:</span> nameCheck<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//正确</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"婷宝儿"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-4interface接口实现之函数描述"><a href="#2-4interface接口实现之函数描述" class="headerlink" title="2.4interface接口实现之函数描述"></a>2.4interface接口实现之函数描述</h4><p>接口能够描述JavaScript中对象拥有的各种各样的特性。除了描述带有属性的普通对象外，接口也可以描述函数类型。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">checkfn</span><span class="token punctuation">&#123;</span>    <span class="token comment">//圆括号内是参数的要求，冒号后面是返回值的类型要求</span>    <span class="token punctuation">(</span>m<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配。</span><span class="token keyword">let</span> fn<span class="token operator">:</span><span class="token function-variable function">checkfn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//let len = b.length;//报错,number类型没有length属性方法</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span></code></pre><p><font  style="color:red;font-size:18px;">typescript在编译的时候，会对函数的参数会逐个进行检查，要求对应位置上的参数类型是兼容的。</font></p><p>如果你不想指定每个参数的特定类型也可以不写,TypeScript的类型系统会自动根据接口推断出参数类型，函数的返回值类型是通过其返回值推断出来的．如果让这个函数返回数字或字符串，类型检查器会警告我们函数的返回值类型与接口中的定义到底匹不匹配</p><h4 id="2-5interface接口实现之索引类型"><a href="#2-5interface接口实现之索引类型" class="headerlink" title="2.5interface接口实现之索引类型"></a>2.5interface接口实现之索引类型</h4><p>与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如x[10]或myName[ “Tom”]</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">proCheck</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">readonly</span> <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj<span class="token operator">:</span> proCheck <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"婷宝儿"</span><span class="token punctuation">,</span>    <span class="token number">996</span><span class="token operator">:</span> <span class="token string">"No996"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token number">996</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//No996</span><span class="token comment">//obj[996] = "995";//类型“proCheck”中的索引签名仅允许读取</span></code></pre><blockquote><p>TypeScript支持两种索引签名:<em><strong>字符串和数字</strong></em>。可以同时使用两种类型的索引，<strong>但是数字索引的返回值必须是字符串索引返回值类型的子类型。</strong></p><p>这是因为当使用number来索引时，JavaScript会将它转换成string然后再去索引对象。也就是说用100 (一个number)去索引等同于使用”100”(一个string)去索引，因此两者需要保持一致。</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">proCheck</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//错误，`name`索引本就是字符串，和上面的index设定是一样的</span><span class="token comment">//但是上面已经规定了索引值是字符串的,值必须是number</span></code></pre><blockquote><p>可以将索引签名设置为<strong>只读</strong>，这样就防止了给某些特定的索引进行赋值</p></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ReadonlyArray</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">readonly</span> <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> newArray<span class="token operator">:</span> ReadonlyArray <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">"婷宝"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'zzy'</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token string">"18"</span> <span class="token punctuation">&#125;</span>newArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"婷宝儿"</span><span class="token punctuation">;</span><span class="token comment">//错误,索引为数字的键值对定义了readonly,不允许修改值</span>newArray<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">"20"</span> <span class="token comment">//正确,索引为字符串的键值对可以修改值</span></code></pre><h4 id="2-6interface接口实现之“类class”类型"><a href="#2-6interface接口实现之“类class”类型" class="headerlink" title="2.6interface接口实现之“类class”类型"></a>2.6interface接口实现之“类class”类型</h4><p>实现类接口的关键字是implements(英文释义为:使生效,执行)</p><p>利用类接口的设计可以规范出一个标准类最起码所具备的属性和方法</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">classCheck</span> <span class="token punctuation">&#123;</span>    currentTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>    <span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token operator">:</span>Date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">implements</span> <span class="token class-name">classCheck</span> <span class="token punctuation">&#123;</span>   currentTime<span class="token operator">:</span>Date<span class="token punctuation">;</span>   <span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token operator">:</span>Date<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentTime <span class="token operator">=</span> d<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">constructor</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-7interface接口实现之继承接口"><a href="#2-7interface接口实现之继承接口" class="headerlink" title="2.7interface接口实现之继承接口"></a>2.7interface接口实现之继承接口</h4><p>和类一样，接口也可以相互继承。这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">&#123;</span>    SquareLength <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> Producton <span class="token operator">:</span> Square <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//错误,所需类型来自属性"color"，在此处的“Square”类</span>    color <span class="token operator">:</span> <span class="token number">99</span> <span class="token punctuation">,</span><span class="token comment">//color值必须是"string"类型</span>    SquareLength <span class="token operator">:</span> <span class="token number">520</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">&#123;</span>    SquareLength <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Producton</span> <span class="token keyword">extends</span> <span class="token class-name">Square</span><span class="token punctuation">,</span>Shape<span class="token punctuation">&#123;</span>    productonLength <span class="token operator">:</span> <span class="token number">520</span><span class="token punctuation">&#125;</span></code></pre><p>一个接口也可以继承多个接口，创建出多个接口的合成接口，上面的代码运行结果是，一个调用了Square接口的对象里必须有color , penwidth , sideLength属性</p><h4 id="2-8-interface接口实现之混合类型"><a href="#2-8-interface接口实现之混合类型" class="headerlink" title="2.8 interface接口实现之混合类型"></a>2.8 interface接口实现之混合类型</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>Counter<span class="token punctuation">&#123;</span>  <span class="token comment">//&lt;Counter>类型断言</span>    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token operator">&lt;</span>Counter<span class="token operator">></span><span class="token keyword">function</span><span class="token punctuation">(</span>start<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"婷宝儿"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    counter<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">52099</span><span class="token punctuation">;</span>    counter<span class="token punctuation">.</span><span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></code></pre><p>函数也是对象，所以我们可以给一个函数制定一个接口，定义函数的传参和自定义的额外属性</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>明志录</title>
      <link href="posts/1c7bbb8/"/>
      <url>posts/1c7bbb8/</url>
      
        <content type="html"><![CDATA[<h2 id="做你不想做的事更酷"><a href="#做你不想做的事更酷" class="headerlink" title="做你不想做的事更酷! "></a><font style="color:tomato;">做你不想做的事更酷! </font></h2><center><font style="color:deepskyblue;font-size:28px">只要不讨厌,就算的上喜欢</font></center><p>🍀<font style="color:lightpink;font-size:32px">专升本加油鸭~</font></p><center><font style="color:gold;font-size:30px;">六级,程序员…..等着你呢</font></center><p><img src="https://s1.imagehub.cc/images/2020/12/31/lucky.png" alt="lucky.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端-大屏数据可视化</title>
      <link href="posts/1a417e56/"/>
      <url>posts/1a417e56/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数无形时少直觉，形无数时难入微。——华罗庚</p></blockquote><h2 id="可视化目的"><a href="#可视化目的" class="headerlink" title="可视化目的"></a>可视化目的</h2><h3 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h3><ol><li>客户系统长期积累的数据；</li><li>客户系统设备实时产生数据；</li><li>从外界导入数据；</li><li>为项目演示准备的相关数据</li></ol><p>数据是可视化的第一步，这里和大家提一提数据处理。</p><p>用户使用软件，浏览网页、APP会不间断产生各种数据。如果我们任由数据增长而不使用，那就是暴殄天物，但就算我们有了使用数据的意识，却也不一定能发挥数据的价值，所以将数据进行分析是使数据发挥价值的第一步。 复杂的业务带来的后果是不同产品间用户数据相互隔离，我们称之为”数据孤岛“，让数据用起来的第一步便是将该孤岛连接，将凌乱数据归类为数据资产，这里面临的问题就是数据的来源太多，我们必须针对多种数据源做适配处理，离线将数据通过预设算法宝进行处理，建立标签系统，根据业务不同纬度生成处理数据，最终通过可视化手段、标签体系、已训练模型，支撑业务。同时业务又反过来提供源源不断的数据，形成闭环。</p><p>我们能够感知到，可视化是数据处理的应用上层。至于对于数据的处理，其实底层是很复杂的，从__数据采集__到__数据存储__到__数据加工__变为数据资产，进而使用数据资产拓展上层应用，可视化是其中一种。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ol><li>可视化使数据更直观，让用户更易感知</li><li>通过大屏内容，辅助用户进行商业决策</li></ol><h3 id="对于不同用户的价值"><a href="#对于不同用户的价值" class="headerlink" title="对于不同用户的价值"></a>对于不同用户的价值</h3><ol><li>使用人员：操作性更强、交互性更好</li><li>视察领导：更实用、更可靠</li><li>参观人员：更美观、更具趣味性</li></ol><h2 id="设计哲学"><a href="#设计哲学" class="headerlink" title="设计哲学"></a>设计哲学</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>一般优先选用系统内置字体，当然如果有定制字体则可选用定制字体，数据信息相关字号一般14px以上，这样大屏观看时，更清晰。</p><table><thead><tr><th>分辨率</th><th>html font-size</th></tr></thead><tbody><tr><td>1366*768</td><td>12px</td></tr><tr><td>1920*1080(1080p)</td><td>16px</td></tr><tr><td>2560*1440(2k)</td><td>22px</td></tr><tr><td>3840*2160(4k)</td><td></td></tr></tbody></table><h3 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h3><ol><li><strong>较深色调</strong>：浅色投屏对视觉刺激较强，不利于长时间观看，并且深色调更具科技感，更有审美价值；深色调更紧凑，聚焦视觉焦点，结合暗色调更柔和舒服不刺眼；</li><li><strong>设计一致性</strong>：模块间设计保持风格色彩一致，若遇需凸显的内容，可提高对比度或延展色系；</li><li><strong>背景</strong>：背景可适当使用渐变、星空、条纹、渐变线、点缀等效果</li></ol><h3 id="布局方法"><a href="#布局方法" class="headerlink" title="布局方法"></a>布局方法</h3><ol><li><strong>整体感</strong>：尽可能组件等高同列，不要让组件显得突兀或独立。相关数据合理组织，视觉上呈现一体化；</li><li><strong>组件间距与关系</strong>：分清组件信息主次，尽可能将表现形式、表达目的、数据性质接近的组件布局在一起，使用户更好获取数据信息；</li><li><strong>主次分明</strong>：通常中间区域、大片区域放置主要信息，次要信息可环绕放置</li></ol><p>基于以上考虑，我们可以设计一种基于网格形式大屏开发方案。</p><h3 id="动画与交互"><a href="#动画与交互" class="headerlink" title="动画与交互"></a>动画与交互</h3><p>适当动画可提升大屏趣味性，但一定要注意主次。更具实际需要确定交互方式。</p><h3 id="图表的选择"><a href="#图表的选择" class="headerlink" title="图表的选择"></a>图表的选择</h3><h4 id="比较类"><a href="#比较类" class="headerlink" title="比较类"></a>比较类</h4><p><svg t="1605408551438" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2893" width="32" height="32"><path d="M716.8 966.5536V307.2h219.8016v659.3536zM409.6 972.8V153.6h219.8016v819.2zM153.6 972.8v-409.6h219.8016v409.6z" fill="#698FE1" p-id="2894"></path><path d="M1016.5248 948.8896v72.6016H0V5.0176h72.6016v943.872z" fill="#698FE1" p-id="2895"></path></svg></p><p>柱状图</p><p><svg t="1605408654165" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3733" width="32" height="32"><path d="M564.181333 678.784a73.066667 73.066667 0 1 1 0-146.133333 73.066667 73.066667 0 0 1 0 146.133333zM308.458667 407.722667a46.997333 46.997333 0 1 1 46.997333-46.997334 46.997333 46.997333 0 0 1-46.997333 46.997334z" fill="#278DF6" p-id="3734"></path><path d="M308.458667 324.202667a36.522667 36.522667 0 1 1-36.522667 36.522666c0-20.16 16.341333-36.522667 36.522667-36.522666m255.722666 218.88a62.634667 62.634667 0 1 1 0.042667 125.269333 62.634667 62.634667 0 0 1-0.042667-125.269333M308.458667 303.338667a57.408 57.408 0 1 0 0 114.837333 57.408 57.408 0 0 0 0-114.837333z m255.722666 218.88a83.498667 83.498667 0 1 0 0 166.976 83.498667 83.498667 0 0 0 0-166.976zM699.882667 689.258667a62.549333 62.549333 0 0 0-62.549334 62.634666 62.570667 62.570667 0 1 0 62.549334-62.634666z m0 104.298666a41.706667 41.706667 0 1 1 0.085333-83.434666c23.018667 0 41.664 18.688 41.664 41.706666 0 23.04-18.688 41.706667-41.749333 41.728zM162.325333 835.349333a46.997333 46.997333 0 1 0 0-93.973333 46.997333 46.997333 0 0 0 0 93.973333z m0-73.066666a26.090667 26.090667 0 1 1-26.112 26.090666 26.112 26.112 0 0 1 26.112-26.090666z m652.373334-427.626667a104.32 104.32 0 1 0-104.384-104.32 104.469333 104.469333 0 0 0 104.384 104.32z m0-187.754667a83.434667 83.434667 0 1 1-0.128 166.869334 83.434667 83.434667 0 0 1 0.128-166.869334c0-0.021333 0-0.021333 0 0z m-62.613334 438.101334a83.498667 83.498667 0 0 0-0.106666-166.933334 83.434667 83.434667 0 1 0 0.106666 166.933334z m0-146.005334a62.613333 62.613333 0 1 1-62.634666 62.592 62.570667 62.570667 0 0 1 62.549333-62.656h0.085333v0.064z m-172.224-114.773333a78.250667 78.250667 0 1 0-0.106666-156.48 78.250667 78.250667 0 0 0 0.106666 156.48z m0-135.616a57.386667 57.386667 0 1 1-0.085333 114.730667 57.386667 57.386667 0 0 1 0.085333-114.730667c-0.021333 0-0.021333 0 0 0z m-182.677333 500.608a73.066667 73.066667 0 1 0 0 146.133333 73.066667 73.066667 0 0 0 0-146.133333z m0 125.269333a52.181333 52.181333 0 1 1 0-104.362666 52.181333 52.181333 0 0 1 0 104.362666z m-31.317333-219.093333a62.592 62.592 0 1 0-0.042667-125.184 62.592 62.592 0 0 0 0.042667 125.184z m0-104.298667a41.706667 41.706667 0 1 1-0.042667 83.413334 41.706667 41.706667 0 0 1 0.042667-83.413334z m-166.997334 182.464a57.386667 57.386667 0 1 0 57.408-57.408 57.472 57.472 0 0 0-57.408 57.408z m57.408-36.565333a36.522667 36.522667 0 1 1 0 73.045333 36.522667 36.522667 0 0 1 0-73.045333z m250.496-135.466667a78.229333 78.229333 0 1 0-0.085333-156.458666 78.229333 78.229333 0 0 0 0.085333 156.458666z m0-135.616a57.344 57.344 0 1 1-0.106666 114.709334 57.344 57.344 0 1 1 0.106666-114.709334zM193.642667 543.082667a46.826667 46.826667 0 1 0-0.362667-93.632 46.826667 46.826667 0 0 0 0.362667 93.632z m0-72.725334a25.92 25.92 0 1 1-0.32 51.84 25.92 25.92 0 0 1 0.32-51.84z" fill="#278DF6" p-id="3735"></path><path d="M1012.117333 994.730667H23.808V14.634667C23.808 6.549333 18.474667 0 11.904 0 5.333333 0 0 6.549333 0 14.634667V1024h1012.117333c6.549333 0 11.882667-6.549333 11.882667-14.613333 0.021333-8.064-5.269333-14.656-11.882667-14.656z" fill="#278DF6" p-id="3736"></path></svg></p><p>气泡图</p><p><svg t="1605408692194" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4584" width="32" height="32"><path d="M239.616 930.304L71.68 412.672l440.32-319.488 440.32 319.488-168.448 517.632z" fill="#FFFFFF" p-id="4585"></path><path d="M239.616 930.304L71.68 412.672l440.32-319.488 440.32 319.488-168.448 517.632z" fill="#FFFFFF" p-id="4586"></path><path d="M783.872 950.784H239.616c-8.704 0-16.896-5.632-19.456-14.336l-167.936-517.12c-2.56-8.192 0.512-17.92 7.68-23.04l440.32-320c7.168-5.12 16.896-5.12 24.064 0l440.32 320c7.168 5.12 10.24 14.336 7.68 23.04l-168.96 517.632c-2.56 8.192-10.24 13.824-19.456 13.824z m-528.896-40.96h514.56l158.72-488.96-416.256-302.08-416.256 302.08 159.232 488.96z" fill="#0087EB" p-id="4587"></path><path d="M299.008 839.68l-81.92-394.24L512 230.912 806.912 445.44l-112.64 346.624z" fill="#5AD651" p-id="4588"></path><path d="M299.008 860.16c-9.728 0-17.92-6.656-19.968-16.384l-81.92-394.24c-1.536-7.68 1.536-15.872 8.192-20.992l294.912-214.528c7.168-5.12 16.896-5.12 24.064 0l294.912 215.04c7.168 5.12 10.24 14.336 7.68 23.04l-112.64 346.624c-2.56 7.68-9.216 12.8-16.896 13.824L301.568 860.16h-2.56zM239.616 454.144l75.776 363.008 363.52-43.52 103.936-320L512 256.512 239.616 454.144z" fill="#0087EB" p-id="4589"></path><path d="M391.168 719.36l6.144-228.864L512 364.032l130.048 145.92-33.28 141.824z" fill="#E5E5E5" p-id="4590"></path><path d="M391.168 740.352c-4.608 0-8.704-1.536-12.288-4.096-5.12-4.096-8.192-10.24-8.192-16.896l6.144-228.864c0-5.12 2.048-9.728 5.12-13.312L496.64 350.208c4.096-4.096 9.728-6.656 15.36-6.656s11.264 2.56 15.36 6.656l130.048 145.92c4.608 5.12 6.144 11.776 4.608 18.432l-32.768 142.336c-1.536 7.168-7.168 12.8-13.824 14.848l-217.6 67.584c-2.56 0.512-4.608 1.024-6.656 1.024z m26.112-241.664l-5.12 192.512 179.2-55.808 27.648-120.32-107.52-120.832-94.208 104.448z" fill="#0087EB" p-id="4591"></path><path d="M259.584 916.992l-33.792-23.04L491.008 501.76c3.072-4.096 7.168-7.168 12.288-8.704l444.416-100.352 9.216 39.936-436.224 98.816-261.12 385.536z" fill="#0087EB" p-id="4592"></path><path d="M750.08 928.256l-254.976-396.8-412.672-98.816 9.728-39.936 420.864 100.352c5.12 1.024 9.728 4.608 12.288 8.704l259.584 403.456-34.816 23.04z" fill="#0087EB" p-id="4593"></path><path d="M491.52 513.536h40.96V93.184h-40.96z" fill="#0087EB" p-id="4594"></path></svg></p><p>雷达图</p><p><svg t="1605408732792" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="5418" width="32" height="32"><path d="M900.096 444.928c-14.848-204.8-210.432-210.432-210.432-210.432S616.96 90.624 461.824 116.224C294.4 143.36 278.016 313.856 278.016 313.856S133.12 350.208 138.24 501.76c5.12 160.768 162.304 184.32 162.304 184.32h420.352s194.048-39.936 179.2-241.152z" fill="#E2F2F9" p-id="5419"></path><path d="M399.872 754.688l-38.4 128.512H337.92l-25.6-90.112c-1.024-4.096-1.536-8.192-2.048-12.288h-0.512c0 3.072-1.024 7.168-2.56 12.288l-27.648 90.624h-23.04l-38.4-128.512h23.552l25.6 95.232c1.024 3.072 1.536 6.656 1.536 11.776h1.024c0.512-4.096 1.024-8.192 2.048-12.288l27.648-94.72h20.992l27.136 95.232c1.024 2.56 1.536 6.656 2.048 11.776h1.024c0-3.584 1.024-7.168 2.048-11.776l25.088-95.232h22.016z m13.824 65.536c0-20.992 6.144-37.888 17.92-50.176 11.776-12.288 28.16-18.432 48.128-18.432 19.456 0 34.304 6.144 45.568 17.92s16.384 28.16 16.384 49.152c0 20.48-5.632 36.864-17.408 49.152-11.776 12.288-27.136 18.944-47.104 18.944-19.456 0-34.304-6.144-46.08-17.92-11.776-13.312-17.408-29.184-17.408-48.64z m23.552-1.024c0 14.848 3.584 26.624 11.264 34.816 7.68 8.704 17.408 12.8 30.208 12.8 12.8 0 23.04-4.096 29.696-12.288 6.656-8.192 10.24-20.48 10.24-35.84 0-15.872-3.584-27.648-10.24-35.84-6.656-8.192-16.896-12.8-29.696-12.8s-23.04 4.608-30.208 13.312c-7.68 8.704-11.264 20.992-11.264 35.84z m205.312-41.984c-3.584-2.56-9.216-4.096-15.872-4.096-8.704 0-15.872 4.096-22.016 12.288-5.632 8.192-8.704 18.944-8.704 32.768V883.2H573.44V754.688h22.528V780.8h0.512c6.656-18.944 17.92-28.16 33.792-28.16 5.12 0 9.216 0.512 11.776 1.536v23.04zM772.608 883.2H750.08v-21.504h-0.512c-9.216 16.384-24.064 24.576-43.52 24.576-16.384 0-29.184-5.632-38.912-17.408-9.728-11.776-14.336-27.136-14.336-47.104 0-20.992 5.632-38.4 16.384-51.2s25.088-19.456 42.496-19.456 30.208 6.656 37.888 20.48h0.512v-79.36h22.528V883.2z m-22.528-76.8c0-10.24-3.584-18.944-10.24-25.6-6.656-7.168-15.36-10.24-25.088-10.24-12.288 0-21.504 4.608-28.672 13.312-7.168 9.216-10.24 21.504-10.24 36.864 0 14.336 3.584 25.6 10.24 33.792 6.656 8.192 15.872 12.288 26.624 12.288s19.968-4.096 27.136-12.288 10.24-18.432 10.24-30.72V806.4z" fill="#0DA8E0" p-id="5420"></path></svg></p><p>词云</p><h4 id="分布类"><a href="#分布类" class="headerlink" title="分布类"></a>分布类</h4><p><svg t="1605409048699" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="7892" width="32" height="32"><path d="M399.872 835.584c-27.648 0-49.664 22.528-49.664 49.664 0 27.648 22.528 49.664 49.664 49.664s49.664-22.528 49.664-49.664c0-27.136-22.016-49.664-49.664-49.664z m174.592-323.584c-41.472 0-74.752 33.28-74.752 74.752s33.28 74.752 74.752 74.752 74.752-33.28 74.752-74.752-33.792-74.752-74.752-74.752z m-324.096 124.416c-41.472 0-74.752 33.28-74.752 74.752s33.28 74.752 74.752 74.752 74.752-33.28 74.752-74.752c0-40.96-33.28-74.752-74.752-74.752z m0-49.664c54.784 0 99.84-44.544 99.84-99.84 0-54.784-44.544-99.84-99.84-99.84-54.784 0-99.84 44.544-99.84 99.84 0.512 55.296 45.056 99.84 99.84 99.84z m149.504-323.584c-41.472 0-74.752 33.28-74.752 74.752S358.4 412.672 399.872 412.672 474.624 379.392 474.624 337.92s-33.28-74.752-74.752-74.752z m124.416 0c13.824 0 25.088-11.264 25.088-25.088s-11.264-25.088-25.088-25.088-25.088 11.264-25.088 25.088c0.512 13.824 11.264 25.088 25.088 25.088z m50.176 99.328c13.824 0 25.088-11.264 25.088-25.088s-11.264-25.088-25.088-25.088-25.088 11.264-25.088 25.088 11.264 25.088 25.088 25.088zM823.296 138.24c13.824 0 25.088-11.264 25.088-25.088s-11.264-25.088-25.088-25.088-25.088 11.264-25.088 25.088 11.264 25.088 25.088 25.088z m25.088 0c-13.824 0-25.088 11.264-25.088 25.088s11.264 25.088 25.088 25.088 25.088-11.264 25.088-25.088c-0.512-13.824-11.264-25.088-25.088-25.088z m99.328 0c-13.824 0-25.088 11.264-25.088 25.088s11.264 25.088 25.088 25.088 25.088-11.264 25.088-25.088-11.264-25.088-25.088-25.088z m-199.168 124.928c-13.824 0-25.088 11.264-25.088 25.088s11.264 25.088 25.088 25.088 25.088-11.264 25.088-25.088c0-14.336-11.264-25.088-25.088-25.088z m74.752 74.24c-13.824 0-25.088 11.264-25.088 25.088s11.264 25.088 25.088 25.088 25.088-11.264 25.088-25.088-11.264-25.088-25.088-25.088z m-149.504 99.84c-13.824 0-25.088 11.264-25.088 25.088s11.264 25.088 25.088 25.088 25.088-11.264 25.088-25.088-11.264-25.088-25.088-25.088z m62.464 224.256c-6.656 0-12.288 5.632-12.288 12.288 0 6.656 5.632 12.288 12.288 12.288 6.656 0 12.288-5.632 12.288-12.288 0-6.656-5.632-12.288-12.288-12.288z m-124.416 149.504c-6.656 0-12.288 5.632-12.288 12.288 0 6.656 5.632 12.288 12.288 12.288 6.656 0 12.288-5.632 12.288-12.288 0-6.656-5.632-12.288-12.288-12.288z m-373.76 49.664c-6.656 0-12.288 5.632-12.288 12.288 0 6.656 5.632 12.288 12.288 12.288 6.656 0 12.288-5.632 12.288-12.288 0-6.656-5.632-12.288-12.288-12.288z m-174.592-248.832c-6.656 0-12.288 5.632-12.288 12.288 0 6.656 5.632 12.288 12.288 12.288 6.656 0 12.288-5.632 12.288-12.288 0.512-7.168-5.12-12.288-12.288-12.288zM424.96 499.712c0-6.656-5.632-12.288-12.288-12.288-6.656 0-12.288 5.632-12.288 12.288s5.632 12.288 12.288 12.288c6.656 0 12.288-5.632 12.288-12.288z m-112.128 311.296c-6.656 0-12.288 5.632-12.288 12.288 0 6.656 5.632 12.288 12.288 12.288 6.656 0 12.288-5.632 12.288-12.288 0-6.656-5.632-12.288-12.288-12.288z m-137.216-199.168c0 13.824 11.264 25.088 25.088 25.088s25.088-11.264 25.088-25.088-11.264-25.088-25.088-25.088-25.088 11.264-25.088 25.088z m510.976-99.84c-6.656 0-12.288 5.632-12.288 12.288s5.632 12.288 12.288 12.288c6.656 0 12.288-5.632 12.288-12.288s-5.632-12.288-12.288-12.288z m-50.176 199.168c-6.656 0-12.288 5.632-12.288 12.288 0 6.656 5.632 12.288 12.288 12.288 6.656 0 12.288-5.632 12.288-12.288 0.512-6.656-5.12-12.288-12.288-12.288z" fill="#50E3E0" p-id="7893"></path><path d="M403.968 541.184c-54.272 0-97.792 44.032-97.792 97.792S350.208 737.28 403.968 737.28c54.272 0 97.792-44.032 97.792-97.792s-43.52-98.304-97.792-98.304zM247.296 462.848c0-32.256-26.112-58.88-58.88-58.88-32.256 0-58.88 26.112-58.88 58.88 0 32.256 26.112 58.88 58.88 58.88s58.88-26.112 58.88-58.88z m196.096 39.424c21.504 0 39.424-17.408 39.424-39.424 0-21.504-17.408-39.424-39.424-39.424-21.504 0-39.424 17.408-39.424 39.424 0 22.016 17.92 39.424 39.424 39.424z m176.64-196.096c21.504 0 39.424-17.408 39.424-39.424 0-21.504-17.408-39.424-39.424-39.424-21.504 0-39.424 17.408-39.424 39.424 0 22.016 17.408 39.424 39.424 39.424z m-509.952 372.736c-32.256 0-58.88 26.112-58.88 58.88 0 32.256 26.112 58.88 58.88 58.88 32.256 0 58.88-26.112 58.88-58.88s-26.624-58.88-58.88-58.88z m823.296-431.616c-21.504 0-39.424 17.408-39.424 39.424 0 21.504 17.408 39.424 39.424 39.424 21.504 0 39.424-17.408 39.424-39.424 0-22.016-17.408-39.424-39.424-39.424z m-352.768 97.792c10.752 0 19.456-8.704 19.456-19.456 0-10.752-8.704-19.456-19.456-19.456-10.752 0-19.456 8.704-19.456 19.456 0 10.752 8.704 19.456 19.456 19.456z m39.424 39.424c0-10.752-8.704-19.456-19.456-19.456-10.752 0-19.456 8.704-19.456 19.456 0 10.752 8.704 19.456 19.456 19.456 10.24 0 19.456-8.704 19.456-19.456z m48.64-58.88c-16.384 0-29.184 13.312-29.184 29.184s13.312 29.184 29.184 29.184 29.184-13.312 29.184-29.184-12.8-29.184-29.184-29.184z m68.608-19.456c-10.752 0-19.456 8.704-19.456 19.456 0 10.752 8.704 19.456 19.456 19.456 10.752 0 19.456-8.704 19.456-19.456 0.512-10.752-8.192-19.456-19.456-19.456zM345.088 512c0-16.384-13.312-29.184-29.184-29.184S286.72 495.616 286.72 512s13.312 29.184 29.184 29.184 29.184-12.8 29.184-29.184z m-78.336 49.152c-10.752 0-19.456 8.704-19.456 19.456s8.704 19.456 19.456 19.456c10.752 0 19.456-8.704 19.456-19.456s-8.704-19.456-19.456-19.456z m-146.944 19.456c16.384 0 29.184-13.312 29.184-29.184s-13.312-29.184-29.184-29.184c-16.384 0-29.184 13.312-29.184 29.184s12.8 29.184 29.184 29.184z m58.88-254.976c16.384 0 29.184-13.312 29.184-29.184 0-16.384-13.312-29.184-29.184-29.184s-29.184 13.312-29.184 29.184c-0.512 15.872 12.8 29.184 29.184 29.184z m441.344 372.736c-10.752 0-19.456 8.704-19.456 19.456 0 10.752 8.704 19.456 19.456 19.456 10.752 0 19.456-8.704 19.456-19.456 0-10.752-8.704-19.456-19.456-19.456zM512 737.28c-16.384 0-29.184 13.312-29.184 29.184s13.312 29.184 29.184 29.184 29.184-13.312 29.184-29.184-12.8-29.184-29.184-29.184zM365.056 462.848c10.752 0 19.456-8.704 19.456-19.456 0-10.752-8.704-19.456-19.456-19.456s-19.456 8.704-19.456 19.456c-0.512 10.752 8.704 19.456 19.456 19.456z m49.152 58.88c5.632 0 9.728-4.608 9.728-9.728 0-5.632-4.608-9.728-9.728-9.728-5.632 0-9.728 4.608-9.728 9.728-0.512 5.632 4.096 9.728 9.728 9.728z m146.944 39.424c-10.752 0-19.456 8.704-19.456 19.456s8.704 19.456 19.456 19.456 19.456-8.704 19.456-19.456-8.704-19.456-19.456-19.456z m-412.16 58.88c-10.752 0-19.456 8.704-19.456 19.456 0 10.752 8.704 19.456 19.456 19.456 10.752 0 19.456-8.704 19.456-19.456 0.512-10.752-8.192-19.456-19.456-19.456z m108.032-294.4c5.632 0 9.728-4.608 9.728-9.728 0-5.632-4.608-9.728-9.728-9.728-5.632 0-9.728 4.608-9.728 9.728 0 5.632 4.608 9.728 9.728 9.728z m343.04 108.032c0 5.632 4.608 9.728 9.728 9.728 5.632 0 9.728-4.608 9.728-9.728 0-5.632-4.608-9.728-9.728-9.728-5.12 0-9.728 4.096-9.728 9.728z m-68.608 9.728c5.632 0 9.728-4.608 9.728-9.728 0-5.632-4.608-9.728-9.728-9.728-5.632 0-9.728 4.608-9.728 9.728 0 5.12 4.608 9.728 9.728 9.728z m-293.888 274.432c-16.384 0-29.184 13.312-29.184 29.184 0 16.384 13.312 29.184 29.184 29.184 16.384 0 29.184-13.312 29.184-29.184s-12.8-29.184-29.184-29.184z m127.488-196.096c0 10.752 8.704 19.456 19.456 19.456s19.456-8.704 19.456-19.456c0-10.752-8.704-19.456-19.456-19.456s-19.456 8.704-19.456 19.456z" fill="#3F7EF0" p-id="7894"></path></svg></p><p>散点图</p><p><svg t="1605408654165" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3733" width="32" height="32"><path d="M564.181333 678.784a73.066667 73.066667 0 1 1 0-146.133333 73.066667 73.066667 0 0 1 0 146.133333zM308.458667 407.722667a46.997333 46.997333 0 1 1 46.997333-46.997334 46.997333 46.997333 0 0 1-46.997333 46.997334z" fill="#278DF6" p-id="3734"></path><path d="M308.458667 324.202667a36.522667 36.522667 0 1 1-36.522667 36.522666c0-20.16 16.341333-36.522667 36.522667-36.522666m255.722666 218.88a62.634667 62.634667 0 1 1 0.042667 125.269333 62.634667 62.634667 0 0 1-0.042667-125.269333M308.458667 303.338667a57.408 57.408 0 1 0 0 114.837333 57.408 57.408 0 0 0 0-114.837333z m255.722666 218.88a83.498667 83.498667 0 1 0 0 166.976 83.498667 83.498667 0 0 0 0-166.976zM699.882667 689.258667a62.549333 62.549333 0 0 0-62.549334 62.634666 62.570667 62.570667 0 1 0 62.549334-62.634666z m0 104.298666a41.706667 41.706667 0 1 1 0.085333-83.434666c23.018667 0 41.664 18.688 41.664 41.706666 0 23.04-18.688 41.706667-41.749333 41.728zM162.325333 835.349333a46.997333 46.997333 0 1 0 0-93.973333 46.997333 46.997333 0 0 0 0 93.973333z m0-73.066666a26.090667 26.090667 0 1 1-26.112 26.090666 26.112 26.112 0 0 1 26.112-26.090666z m652.373334-427.626667a104.32 104.32 0 1 0-104.384-104.32 104.469333 104.469333 0 0 0 104.384 104.32z m0-187.754667a83.434667 83.434667 0 1 1-0.128 166.869334 83.434667 83.434667 0 0 1 0.128-166.869334c0-0.021333 0-0.021333 0 0z m-62.613334 438.101334a83.498667 83.498667 0 0 0-0.106666-166.933334 83.434667 83.434667 0 1 0 0.106666 166.933334z m0-146.005334a62.613333 62.613333 0 1 1-62.634666 62.592 62.570667 62.570667 0 0 1 62.549333-62.656h0.085333v0.064z m-172.224-114.773333a78.250667 78.250667 0 1 0-0.106666-156.48 78.250667 78.250667 0 0 0 0.106666 156.48z m0-135.616a57.386667 57.386667 0 1 1-0.085333 114.730667 57.386667 57.386667 0 0 1 0.085333-114.730667c-0.021333 0-0.021333 0 0 0z m-182.677333 500.608a73.066667 73.066667 0 1 0 0 146.133333 73.066667 73.066667 0 0 0 0-146.133333z m0 125.269333a52.181333 52.181333 0 1 1 0-104.362666 52.181333 52.181333 0 0 1 0 104.362666z m-31.317333-219.093333a62.592 62.592 0 1 0-0.042667-125.184 62.592 62.592 0 0 0 0.042667 125.184z m0-104.298667a41.706667 41.706667 0 1 1-0.042667 83.413334 41.706667 41.706667 0 0 1 0.042667-83.413334z m-166.997334 182.464a57.386667 57.386667 0 1 0 57.408-57.408 57.472 57.472 0 0 0-57.408 57.408z m57.408-36.565333a36.522667 36.522667 0 1 1 0 73.045333 36.522667 36.522667 0 0 1 0-73.045333z m250.496-135.466667a78.229333 78.229333 0 1 0-0.085333-156.458666 78.229333 78.229333 0 0 0 0.085333 156.458666z m0-135.616a57.344 57.344 0 1 1-0.106666 114.709334 57.344 57.344 0 1 1 0.106666-114.709334zM193.642667 543.082667a46.826667 46.826667 0 1 0-0.362667-93.632 46.826667 46.826667 0 0 0 0.362667 93.632z m0-72.725334a25.92 25.92 0 1 1-0.32 51.84 25.92 25.92 0 0 1 0.32-51.84z" fill="#278DF6" p-id="3735"></path><path d="M1012.117333 994.730667H23.808V14.634667C23.808 6.549333 18.474667 0 11.904 0 5.333333 0 0 6.549333 0 14.634667V1024h1012.117333c6.549333 0 11.882667-6.549333 11.882667-14.613333 0.021333-8.064-5.269333-14.656-11.882667-14.656z" fill="#278DF6" p-id="3736"></path></svg></p><p>气泡图</p><p><svg t="1605409169486" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="8183" width="32" height="32"><path d="M85.333333 972.8c0 21.333333-17.066667 42.666667-42.666666 42.666667-21.333333 0-42.666667-17.066667-42.666667-42.666667V42.666667c0-21.333333 17.066667-42.666667 42.666667-42.666667 21.333333 0 42.666667 17.066667 42.666666 42.666667v930.133333z m-42.666666 42.666667c-21.333333 0-42.666667-17.066667-42.666667-42.666667 0-21.333333 17.066667-42.666667 42.666667-42.666667h938.666666c21.333333 0 42.666667 17.066667 42.666667 42.666667 0 21.333333-17.066667 42.666667-42.666667 42.666667H42.666667z m891.733333-499.2c0-21.333333-17.066667-42.666667-42.666667-42.666667-8.533333 0-17.066667 4.266667-25.6 8.533333-25.6 8.533333-42.666667 12.8-72.533333 12.8-260.266667 4.266667-209.066667-153.6-341.333333-153.6-119.466667 0-226.133333 115.2-277.333334 174.933334-8.533333 8.533333-12.8 21.333333-12.8 34.133333 0 21.333333 17.066667 42.666667 42.666667 42.666667 12.8 0 25.6-4.266667 34.133333-17.066667 38.4-46.933333 136.533333-157.866667 217.6-153.6 51.2 4.266667 64 149.333333 337.066667 145.066667 34.133333 0 76.8-4.266667 102.4-12.8 21.333333 0 38.4-17.066667 38.4-38.4z" fill="#096DD9" p-id="8184"></path></svg></p><p>分布曲线图</p><h4 id="占比类"><a href="#占比类" class="headerlink" title="占比类"></a>占比类</h4><p><svg t="1605409224229" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="8953" width="32" height="32"><path d="M458.43467726 518.57605884l299.7165276 299.71652761c-38.69757698 39.456353-84.07238293 70.33853698-135.82090744 92.26716393a416.18864656 416.18864656 0 0 1-163.89562016 32.93087924 412.47064407 412.47064407 0 0 1-211.62263176-56.52881343 416.71978977 416.71978977 0 0 1-153.42451109-153.42451108 412.47064407 412.47064407 0 0 1-56.52881343-211.62263178c0-76.33286754 18.81764528-146.89903732 56.52881343-211.62263177a418.54085222 418.54085222 0 0 1 153.42451109-153.42451108 413.00178727 413.00178727 0 0 1 211.69850937-56.52881344V518.57605884z" fill="#1296db" p-id="8954"></path><path d="M950.42504813 451.57613635H528.54558145V29.92430246c76.40874513 0 146.89903732 18.81764528 211.69850936 56.52881343a420.28603706 420.28603706 0 0 1 153.34863349 153.42451109c37.55941295 64.72359445 56.68056865 135.28976423 56.68056864 211.69850937z" fill="#1296db" fill-opacity=".4" p-id="8955"></path><path d="M561.02119507 521.83879573h424.30754995a415.80925854 415.80925854 0 0 1-32.93087923 163.81974256 413.8364409 413.8364409 0 0 1-92.26716394 135.82090744l-299.10950678-299.7165276z" fill="#1296db" p-id="8956"></path></svg></p><p>饼图</p><p><svg t="1605409273301" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="9837" width="32" height="32"><path d="M131.584 131.584h364.032v509.44H131.584V131.584z" fill="#706EE7" p-id="9838"></path><path d="M532.48 131.584h109.056v364.032H532.48V131.584z" fill="#29C287" p-id="9839"></path><path d="M677.888 131.584h218.624v145.92h-218.624V131.584z" fill="#706EE7" p-id="9840"></path><path d="M131.584 677.888h364.032V896H131.584v-218.112z" fill="#29C287" p-id="9841"></path><path d="M532.48 532.48h109.056v364.032H532.48V532.48z m145.408-218.624h218.624v582.656h-218.624V313.856z" fill="#FFC107" p-id="9842"></path></svg></p><p>矩形竖图</p><p><svg t="1605409331333" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="10802" width="32" height="32"><path d="M64.853333 276.48h225.28V648.533333H64.853333V276.48z m334.506667-225.28h225.28v409.6h-225.28v-409.6z m0 484.693333h225.28v372.053334h-225.28V535.893333z m334.506667-146.773333h225.28V648.533333h-225.28v-259.413333z m0 334.506667h225.28v187.733333h-225.28v-187.733333z m-669.013334 0h225.28v187.733333H64.853333v-187.733333z" fill="#4B99CD" p-id="10803"></path><path d="M61.44 938.666667h901.12v34.133333H61.44z" fill="#979797" p-id="10804"></path></svg></p><p>堆叠柱状图</p><h4 id="区间类"><a href="#区间类" class="headerlink" title="区间类"></a>区间类</h4><p><svg t="1605409411591" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="11572" width="32" height="32"><path d="M938.3936 685.192533h-56.32a29.149867 29.149867 0 0 1-28.672-28.8768c0-15.906133 12.0832-28.8768 28.672-28.8768h56.32c15.837867 0 28.672 13.380267 28.672 28.8768a28.398933 28.398933 0 0 1-28.672 28.8768zM807.594667 482.986667a29.013333 29.013333 0 0 1 10.6496-39.594667l48.810666-28.672a28.808533 28.808533 0 0 1 28.4672 50.039467l-48.810666 28.672a28.672 28.672 0 0 1-39.1168-10.4448zM564.224 638.293333a86.971733 86.971733 0 0 1-41.028267 74.410667c-20.548267 12.970667-42.5984 16.725333-66.218666 11.0592a87.927467 87.927467 0 0 1-55.227734-39.799467 86.4256 86.4256 0 0 1-11.605333-67.7888c5.597867-24.439467 18.705067-43.076267 39.253333-56.046933 29.969067-18.2272 60.347733-18.773333 91.136-1.365333l241.4592-100.420267L564.224 638.293333zM341.4016 356.078933a27.784533 27.784533 0 0 1-38.980267-10.786133l-28.2624-49.5616a29.627733 29.627733 0 0 1 10.308267-39.7312 27.784533 27.784533 0 0 1 38.980267 10.786133l28.194133 49.629867a29.627733 29.627733 0 0 1-10.24 39.662933zM216.405333 482.986667a27.784533 27.784533 0 0 1-39.048533 10.376533l-48.878933-28.603733a29.627733 29.627733 0 0 1-10.6496-39.594667 27.784533 27.784533 0 0 1 39.048533-10.376533l48.878933 28.603733c13.653333 8.055467 18.2272 26.146133 10.6496 39.594667zM141.994667 685.192533h-56.32a29.149867 29.149867 0 0 1-28.672-28.8768c0-15.906133 12.151467-28.8768 28.672-28.8768h56.32c15.837867 0 28.672 13.380267 28.672 28.8768a28.398933 28.398933 0 0 1-28.672 28.8768zM483.601067 223.232c0-16.110933 13.175467-29.149867 28.398933-29.149867 15.701333 0 28.4672 12.288 28.4672 29.149867v57.207467a29.149867 29.149867 0 0 1-28.4672 29.218133 27.989333 27.989333 0 0 1-20.2752-8.533333 28.808533 28.808533 0 0 1-8.192-20.6848V223.232zM672.426667 316.416l28.194133-49.629867a28.672 28.672 0 0 1 38.912-10.786133c13.653333 7.9872 18.568533 25.122133 10.24 39.7312l-28.125867 49.5616a28.672 28.672 0 0 1-38.912 10.786133 29.013333 29.013333 0 0 1-10.24-39.7312z m160.290133-65.194667a505.787733 505.787733 0 0 0-641.4336 0C4.096 404.138667-53.4528 668.740267 53.248 887.466667h917.504c106.7008-218.7264 49.220267-483.328-138.0352-636.245334z" fill="#1390FF" p-id="11573"></path></svg></p><p>仪表盘</p><p><svg t="1605409498689" class="icon" viewBox="0 0 1233 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="12203" width="48" height="48"><path d="M164.726246 439.269991v365.095014h896.842898V257.204139c-47.202258 71.285042-127.157103 110.780809-230.231421 110.780809-150.276576 0-174.35936-198.442145-357.388523-198.442145-118.4873 0-221.561618 87.661336-309.222954 269.727188z" fill="#5182E4" p-id="12204"></path><path d="M164.726246 622.299153v182.065852h896.842898V495.142051c-55.87206 87.661336-127.157103 127.157103-206.148636 127.157102-127.157103 0-206.148636-213.855127-372.801505-213.855127-119.450611 0-222.524929 71.285042-317.892757 213.855127z" fill="#29C287" p-id="12205"></path></svg></p><p>堆叠面积图</p><h4 id="趋势类"><a href="#趋势类" class="headerlink" title="趋势类"></a>趋势类</h4><p><svg t="1605409764169" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="13093" width="32" height="32"><path d="M928.256 841.216h-803.328v-253.44l171.52-171.52c11.264 5.12 23.552 8.192 36.864 8.192 13.312 0 25.6-3.072 36.864-8.192l120.32 120.32c-5.12 11.264-8.192 23.552-8.192 36.864 0 49.152 39.936 89.088 89.088 89.088s89.088-39.936 89.088-89.088c0-13.312-3.072-25.6-8.192-36.864l295.424-295.424c12.8-12.8 12.8-33.792 0-46.592s-33.792-12.8-46.592 0l-295.936 295.936c-10.24-4.096-22.016-6.656-33.792-6.656s-23.552 2.56-33.792 6.656l-121.344-121.856c4.096-10.24 6.656-22.016 6.656-33.792 0-49.152-39.936-89.088-89.088-89.088s-89.088 39.936-89.088 89.088c0 11.776 2.56 23.552 6.656 33.792l-125.952 125.952v-338.432c0-16.384-13.312-29.696-29.696-29.696-16.384 0-29.696 13.312-29.696 29.696V563.712c-1.024 4.096-1.024 8.192 0 11.776V870.912c0 16.384 13.312 29.696 29.696 29.696h833.024c16.384 0 29.696-13.312 29.696-29.696-0.512-16.384-13.824-29.696-30.208-29.696z m-356.864-297.472c16.384 0 29.696 13.312 29.696 29.696s-13.312 29.696-29.696 29.696c-16.384 0-29.696-13.312-29.696-29.696s13.312-29.696 29.696-29.696z m-238.08-238.08c16.384 0 29.696 13.312 29.696 29.696s-13.312 29.696-29.696 29.696c-16.384 0-29.696-13.312-29.696-29.696s13.312-29.696 29.696-29.696z" fill="#1296db" p-id="13094"></path></svg></p><p>折线图</p><p><svg t="1605409808024" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="13276" width="48" height="48"><path d="M846.817 768.71c-0.56 0-1.041 0-1.605 0.082v-0.082h-32.15V387.15c0-12.109-8.416-22.291-19.645-24.933v-0.404h-2.243a30.011 30.011 0 0 0-7.536 0H685.82c-0.88-0.078-1.762-0.16-2.647-0.16-14.109 0-25.576 11.384-25.654 25.497V628.4h-57.085V229.926c0-14.192-11.466-25.658-25.659-25.658H457.317c-1.761 0.078-3.444 0.32-5.132 0.802l-2.403 0.721c-2.326 0.88-4.57 2.087-6.495 3.527l-0.964 0.724c-1.922 1.6-3.605 3.367-4.968 5.45a28.808 28.808 0 0 0-1.283 2.086 19.352 19.352 0 0 0-1.042 2.244 25.684 25.684 0 0 0-2.004 10.022v537.986H386.36V514.873c0-14.191-11.462-25.658-25.654-25.658H253.83v0.078c-13.31 0.963-23.815 12.026-23.815 25.58V768.71h-52.912c-14.193 0-25.659 11.466-25.659 25.658s11.466 25.655 25.659 25.655h77.048v-0.078c0.56 0 1.042 0.078 1.601 0.078 14.191 0 25.659-11.463 25.659-25.655v-253.84h53.637v253.038c0 14.191 11.467 25.658 25.658 25.658h97.895v-0.242c14.193 0 25.655-11.464 25.655-25.655V255.58h64.866v398.48h0.078c0 14.191 11.466 25.655 25.659 25.655h105.913v-0.078c0.803 0.078 1.606 0.078 2.403 0.078 14.192 0 25.659-11.464 25.659-25.655V413.125h52.996v381.243c0 14.192 11.466 25.655 25.658 25.655h57.808v-0.078c0.56 0 1.041 0.078 1.605 0.078 14.188 0 25.655-11.463 25.655-25.655-0.081-14.19-11.548-25.658-25.739-25.658z m0 0" fill="#1296db" p-id="13277"></path></svg></p><p>卡吉图</p><p><svg t="1605409880036" class="icon" viewBox="0 0 1981 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="14005" width="32" height="32"><path d="M219.9185 23.08316h3.879522v1000.91684h-3.879522v-1000.91684z" fill="#808080" p-id="14006"></path><path d="M192.761841 996.843342v-3.879523h1788.459936v3.879523h-1788.459936z" fill="#808080" p-id="14007"></path><path d="M192.761841 26.962682v-3.879522h31.036181v3.879522h-31.036181z" fill="#808080" p-id="14008"></path><path d="M192.761841 275.252131v-3.879523h31.036181v3.879523h-31.036181z" fill="#808080" p-id="14009"></path><path d="M192.761841 515.782535v-3.879523h31.036181v3.879523h-31.036181z" fill="#808080" p-id="14010"></path><path d="M192.761841 760.192461v-3.879523h31.036181v3.879523h-31.036181z" fill="#808080" p-id="14011"></path><path d="M510.882697 992.963819h-3.879522v31.036181h3.879522v-31.036181z" fill="#808080" p-id="14012"></path><path d="M751.413101 992.963819h-3.879523v31.036181h3.879523v-31.036181z" fill="#808080" p-id="14013"></path><path d="M988.063982 992.963819h3.879522v31.036181h-3.879522v-31.036181z" fill="#808080" p-id="14014"></path><path d="M1228.594385 992.963819h3.879523v31.036181h-3.879523v-31.036181z" fill="#808080" p-id="14015"></path><path d="M1469.124789 992.963819h3.879522v31.036181h-3.879522v-31.036181z" fill="#808080" p-id="14016"></path><path d="M1713.534715 992.963819h-3.879523v31.036181h3.879523v-31.036181z" fill="#808080" p-id="14017"></path><path d="M1950.185596 992.963819h3.879522v31.036181h-3.879522v-31.036181z" fill="#808080" p-id="14018"></path><path d="M270.356174 23.08316h1679.833301v969.880659h-1679.833301z" fill="#FEE63D" p-id="14019"></path><path d="M270.352294 341.204016l232.771358-15.518091 240.530404 46.554272 244.409926-65.951885 232.771358 27.156659 248.289449-50.433795 236.650881 11.638568 244.409926-31.036181v527.615079h-1679.833302v-450.024626z" fill="#FBBA72" p-id="14020"></path><path d="M270.352294 616.650123l236.650881-73.71093 240.530403-11.638568 240.530404 11.638568h240.530403l244.409926-54.313317 236.650881 15.518091 240.530404-69.831408v422.867968h-1679.833302v-240.530404z" fill="#5DD39E" p-id="14021"></path><path d="M270.352294 752.433415l236.650881-62.072362 240.530403 11.638568 232.771359 11.638568 248.289448-23.277136 240.530404-58.192839 240.530403 34.915703 240.530404-42.674749v271.566585h-1679.833302v-143.542338z" fill="#B6C1FF" p-id="14022"></path><path d="M270.352294 876.57814l236.650881-46.554272 240.530403 11.638568 236.650881 7.759045 244.409926-34.915703 240.530404-34.915704 240.530403 11.638568 240.530404-42.674749v244.409926h-1679.833302v-116.385679z" fill="#5F70E4" p-id="14023"></path><path d="M77.885296 1012.675673a12.51534 12.51534 0 0 0 11.079917 5.970586 13.368835 13.368835 0 0 0 11.774351-6.284827 32.719894 32.719894 0 0 0 4.197644-18.167804q0-24.05304-14.912885-24.053041a13.361076 13.361076 0 0 0-11.941171 6.381815 34.915704 34.915704 0 0 0-4.120053 18.807926 31.699579 31.699579 0 0 0 3.922197 17.345345z m11.805388-37.611972q9.151794 0 9.151794 19.66918 0 19.009661-9.334132 19.009661-9.485433 0-9.485433-18.703178 0-19.971783 9.667771-19.971783z m22.59434 16.216405a9.958735 9.958735 0 0 0 7.759045 3.212245 10.474711 10.474711 0 0 0 8.212949-3.456655 12.988642 12.988642 0 0 0 3.103618-9.000492 12.550256 12.550256 0 0 0-2.804894-8.69789 9.947096 9.947096 0 0 0-7.8056-3.103618 10.637651 10.637651 0 0 0-8.29054 3.394582 13.112787 13.112787 0 0 0-3.076461 9.151794 12.204978 12.204978 0 0 0 2.901883 8.500034z m3.49157-15.021512a5.706778 5.706778 0 0 1 4.744656-2.226846 5.396416 5.396416 0 0 1 4.562319 2.137617 9.83459 9.83459 0 0 1 1.62164 6.048176 10.133313 10.133313 0 0 1-1.652676 6.207236 5.512802 5.512802 0 0 1-4.682584 2.19969 5.625308 5.625308 0 0 1-4.655427-2.122099 9.446638 9.446638 0 0 1-1.695352-6.032658 9.838469 9.838469 0 0 1 1.769063-6.211116z m30.958591-5.345982l-30.143891 47.268104h5.043379l30.15553-47.248706h-5.04338z m-6.346899 44.416655a9.877265 9.877265 0 0 0 7.759045 3.258799 10.494109 10.494109 0 0 0 8.146997-3.441137 14.812017 14.812017 0 0 0 0.302603-17.79149 9.939337 9.939337 0 0 0-7.790081-3.138534 10.532904 10.532904 0 0 0-8.259504 3.441136 13.287365 13.287365 0 0 0-3.076461 9.198348 12.282569 12.282569 0 0 0 2.917401 8.472878z m3.441136-14.943921a5.667983 5.667983 0 0 1 4.787331-2.226846 5.462368 5.462368 0 0 1 4.531283 2.091062 9.555264 9.555264 0 0 1 1.652676 6.032658 10.148831 10.148831 0 0 1-1.652676 6.18008 5.493404 5.493404 0 0 1-4.682584 2.215207 5.60591 5.60591 0 0 1-4.655427-2.137617 9.341891 9.341891 0 0 1-1.695352-5.955067 10.024686 10.024686 0 0 1 1.722508-6.199477z" fill="#666666" p-id="14024"></path><path d="M56.245319 749.329797a30.780133 30.780133 0 0 1-7.530153 6.804683 53.568449 53.568449 0 0 0-7.941383 6.440008 17.163008 17.163008 0 0 0-3.650631 5.516681 19.009661 19.009661 0 0 0-1.105664 6.897791v2.327714h29.519288v-5.272272h-23.339208a8.810396 8.810396 0 0 1 0.775904-3.910558 11.467869 11.467869 0 0 1 2.773859-3.363547 97.577753 97.577753 0 0 1 7.863792-5.819284 28.708468 28.708468 0 0 0 8.146998-7.759045 16.522887 16.522887 0 0 0 2.378147-8.973336 11.665725 11.665725 0 0 0-3.879522-9.229384 14.95556 14.95556 0 0 0-10.24582-3.4101 17.0699 17.0699 0 0 0-6.866755 1.276363 16.068983 16.068983 0 0 0-5.229596 3.666148v5.757212a19.688577 19.688577 0 0 1 5.547717-4.244198 13.073991 13.073991 0 0 1 5.881356-1.481977 9.353529 9.353529 0 0 1 6.517598 2.164773 7.631021 7.631021 0 0 1 2.393666 5.955067 11.440712 11.440712 0 0 1-2.009593 6.657261z m39.384914 3.103618a17.225081 17.225081 0 0 0-11.716158-3.712703l-4.267475 0.182338 0.96988-13.306763h16.941876v-5.210199h-21.958098l-1.726388 23.820269a73.458761 73.458761 0 0 1 7.972419-0.387952 13.89645 13.89645 0 0 1 8.884107 2.494533 8.434082 8.434082 0 0 1 3.138534 6.983141 9.206107 9.206107 0 0 1-3.014389 7.196514 11.386399 11.386399 0 0 1-7.925865 2.715666 17.624671 17.624671 0 0 1-9.698807-3.103618v6.059814a19.397613 19.397613 0 0 0 9.850108 1.970798 17.360864 17.360864 0 0 0 12.259292-4.213162 14.38527 14.38527 0 0 0 4.562318-11.091555 13.08175 13.08175 0 0 0-4.271354-10.397121z m13.395992-1.679833a9.958735 9.958735 0 0 0 7.759045 3.212245 10.474711 10.474711 0 0 0 8.212949-3.456655 12.988642 12.988642 0 0 0 3.103618-9.000492 12.550256 12.550256 0 0 0-2.804894-8.69789 9.947096 9.947096 0 0 0-7.8056-3.103618 10.637651 10.637651 0 0 0-8.29054 3.394582 13.112787 13.112787 0 0 0-3.076461 9.151794 12.204978 12.204978 0 0 0 2.901883 8.496155z m3.49157-15.021512a5.706778 5.706778 0 0 1 4.744656-2.226846 5.396416 5.396416 0 0 1 4.562319 2.137617 9.83459 9.83459 0 0 1 1.62164 6.048176 10.133313 10.133313 0 0 1-1.652676 6.207236 5.508922 5.508922 0 0 1-4.682584 2.19969 5.625308 5.625308 0 0 1-4.655427-2.122099 9.446638 9.446638 0 0 1-1.695352-6.032658 9.838469 9.838469 0 0 1 1.769063-6.214995z m30.958591-5.345982l-30.143891 47.264225h5.043379l30.159409-47.268104h-5.043379z m-6.350779 44.416655a9.877265 9.877265 0 0 0 7.759045 3.258799 10.494109 10.494109 0 0 0 8.146998-3.441137 14.812017 14.812017 0 0 0 0.302603-17.79149 9.939337 9.939337 0 0 0-7.790082-3.138534 10.532904 10.532904 0 0 0-8.259503 3.441136 13.287365 13.287365 0 0 0-3.076462 9.198349 12.282569 12.282569 0 0 0 2.932919 8.468997z m3.441137-14.943921a5.667983 5.667983 0 0 1 4.787331-2.226846 5.462368 5.462368 0 0 1 4.531282 2.091062 9.555264 9.555264 0 0 1 1.652677 6.032658 10.148831 10.148831 0 0 1-1.652677 6.18008 5.493404 5.493404 0 0 1-4.682584 2.215207 5.60591 5.60591 0 0 1-4.655427-2.137617 9.341891 9.341891 0 0 1-1.695351-5.955067 10.024686 10.024686 0 0 1 1.726387-6.203357z" fill="#666666" p-id="14025"></path><path d="M60.082167 508.023489a17.225081 17.225081 0 0 0-11.716158-3.712703l-4.267475 0.182338 0.96988-13.306763h16.953514v-5.210199H40.075469l-1.726388 23.820269a73.458761 73.458761 0 0 1 7.972419-0.387952 13.89645 13.89645 0 0 1 8.86471 2.498412 8.434082 8.434082 0 0 1 3.138533 6.983141 9.206107 9.206107 0 0 1-3.014389 7.196515 11.386399 11.386399 0 0 1-7.925865 2.715666 17.624671 17.624671 0 0 1-9.698806-3.103619v6.059815a19.397613 19.397613 0 0 0 9.850108 1.970797 17.360864 17.360864 0 0 0 12.259291-4.213161 14.38527 14.38527 0 0 0 4.562319-11.091556 13.08175 13.08175 0 0 0-4.275234-10.401z m14.532692 19.715734a12.51534 12.51534 0 0 0 11.072157 5.966706 13.372715 13.372715 0 0 0 11.793749-6.284827 32.723773 32.723773 0 0 0 4.197644-18.167804q0-24.05304-14.912885-24.05304a13.361076 13.361076 0 0 0-11.941171 6.381814 34.915704 34.915704 0 0 0-4.120053 18.807926 31.699579 31.699579 0 0 0 3.922197 17.345346z m11.805387-37.631369q9.151794 0 9.151794 19.66918 0 19.009661-9.334131 19.00966-9.485433 0-9.485433-18.703178 0-19.971783 9.66777-19.971783z m22.59434 16.216404a9.958735 9.958735 0 0 0 7.759045 3.212245 10.474711 10.474711 0 0 0 8.21295-3.456655 12.988642 12.988642 0 0 0 3.103618-9.000492 12.550256 12.550256 0 0 0-2.804895-8.69789 9.947096 9.947096 0 0 0-7.8056-3.123016 10.637651 10.637651 0 0 0-8.290539 3.394583 13.112787 13.112787 0 0 0-3.076462 9.151794 12.204978 12.204978 0 0 0 2.913522 8.534949z m3.49157-15.021511a5.706778 5.706778 0 0 1 4.744657-2.226846 5.396416 5.396416 0 0 1 4.562318 2.137617 9.83459 9.83459 0 0 1 1.621641 6.048176 10.133313 10.133313 0 0 1-1.652677 6.207236 5.508922 5.508922 0 0 1-4.682584 2.199689 5.625308 5.625308 0 0 1-4.655427-2.122099 9.446638 9.446638 0 0 1-1.695351-6.032658 9.838469 9.838469 0 0 1 1.780701-6.195597z m30.958591-5.345982l-30.132252 47.283621h5.043379l30.159409-47.268103h-5.043379z m-6.350778 44.416654a9.877265 9.877265 0 0 0 7.759045 3.258799 10.494109 10.494109 0 0 0 8.146997-3.441136 14.812017 14.812017 0 0 0 0.302603-17.791491 9.939337 9.939337 0 0 0-7.790081-3.138534 10.532904 10.532904 0 0 0-8.259504 3.441137 13.287365 13.287365 0 0 0-3.076461 9.198348 12.282569 12.282569 0 0 0 2.944557 8.488395z m3.441136-14.943921a5.667983 5.667983 0 0 1 4.787331-2.226846 5.462368 5.462368 0 0 1 4.531283 2.091063 9.555264 9.555264 0 0 1 1.652676 6.032657 10.148831 10.148831 0 0 1-1.652676 6.18008 5.493404 5.493404 0 0 1-4.682584 2.215207 5.60591 5.60591 0 0 1-4.655427-2.137617 9.341891 9.341891 0 0 1-1.695352-5.955067 10.024686 10.024686 0 0 1 1.738026-6.183959z" fill="#666666" p-id="14026"></path><path d="M65.594969 245.441879H35.773078v5.241235h23.277136a176.766569 176.766569 0 0 0-11.184664 22.823232 82.808411 82.808411 0 0 0-5.303307 18.881637h6.183959a82.24588 82.24588 0 0 1 5.229596-19.397614 175.633749 175.633749 0 0 1 11.638568-23.897859v-3.666149z m30.035264 22.051207a17.225081 17.225081 0 0 0-11.716158-3.712703l-4.267475 0.182337 0.96988-13.306762h16.941876v-5.210199h-21.958098l-1.726388 23.820269a73.458761 73.458761 0 0 1 7.972419-0.387953 13.89645 13.89645 0 0 1 8.884107 2.494533 8.434082 8.434082 0 0 1 3.138534 6.983141 9.206107 9.206107 0 0 1-3.014389 7.196515 11.386399 11.386399 0 0 1-7.925865 2.715666 17.624671 17.624671 0 0 1-9.698807-3.103619v6.059815a19.397613 19.397613 0 0 0 9.850108 1.970797 17.360864 17.360864 0 0 0 12.259292-4.213161 14.38527 14.38527 0 0 0 4.562318-11.091556 13.08175 13.08175 0 0 0-4.271354-10.39712z m13.395992-1.679833a9.958735 9.958735 0 0 0 7.759045 3.212244 10.474711 10.474711 0 0 0 8.212949-3.456654 12.988642 12.988642 0 0 0 3.103618-9.000493 12.550256 12.550256 0 0 0-2.804894-8.69789 9.947096 9.947096 0 0 0-7.8056-3.123015 10.637651 10.637651 0 0 0-8.29054 3.394582 13.112787 13.112787 0 0 0-3.076461 9.151794 12.204978 12.204978 0 0 0 2.901883 8.515552z m3.49157-15.021512a5.706778 5.706778 0 0 1 4.744656-2.226846 5.396416 5.396416 0 0 1 4.562319 2.137617 9.83459 9.83459 0 0 1 1.62164 6.048176 10.133313 10.133313 0 0 1-1.652676 6.207236 5.508922 5.508922 0 0 1-4.682584 2.199689 5.625308 5.625308 0 0 1-4.655427-2.122099 9.446638 9.446638 0 0 1-1.695352-6.032657 9.838469 9.838469 0 0 1 1.769063-6.214996z m30.958591-5.345982l-30.143891 47.264224h5.043379l30.159409-47.268104h-5.043379z m-6.350779 44.416654a9.877265 9.877265 0 0 0 7.759045 3.258799 10.494109 10.494109 0 0 0 8.146998-3.441136 14.812017 14.812017 0 0 0 0.302603-17.791491 9.939337 9.939337 0 0 0-7.790082-3.138534 10.532904 10.532904 0 0 0-8.259503 3.441137 13.287365 13.287365 0 0 0-3.076462 9.198348 12.282569 12.282569 0 0 0 2.932919 8.468998z m3.441137-14.943921a5.667983 5.667983 0 0 1 4.787331-2.226846 5.462368 5.462368 0 0 1 4.531282 2.091063 9.555264 9.555264 0 0 1 1.652677 6.032658 10.148831 10.148831 0 0 1-1.652677 6.180079 5.493404 5.493404 0 0 1-4.682584 2.215208 5.60591 5.60591 0 0 1-4.655427-2.137617 9.341891 9.341891 0 0 1-1.695351-5.955068 10.024686 10.024686 0 0 1 1.726387-6.203356z" fill="#666666" p-id="14027"></path><path d="M16.767297 47.978056V0h-2.242364a34.741125 34.741125 0 0 1-6.517598 4.267475 39.598288 39.598288 0 0 1-7.96854 3.297594v5.819284a28.107142 28.107142 0 0 0 6.118007-2.444099 20.049373 20.049373 0 0 0 4.71362-3.103618v40.156939h5.896875z m19.063974-5.183042a12.51534 12.51534 0 0 0 11.060519 5.970586 13.372715 13.372715 0 0 0 11.793749-6.284827 32.723773 32.723773 0 0 0 4.197643-18.167805q0-24.05304-14.912885-24.05304a13.361076 13.361076 0 0 0-11.94117 6.381815 34.915704 34.915704 0 0 0-4.120053 18.807925 31.699579 31.699579 0 0 0 3.922197 17.345346z m11.805387-37.611972q9.151794 0 9.151794 19.66918 0 19.009661-9.334131 19.009661-9.485433 0-9.485433-18.703179 0-19.971783 9.66777-19.971782z m23.73104 37.611972a12.51534 12.51534 0 0 0 11.079917 5.970586 13.372715 13.372715 0 0 0 11.774351-6.284827 32.723773 32.723773 0 0 0 4.197644-18.167805q0-24.05304-14.912885-24.05304a13.361076 13.361076 0 0 0-11.941171 6.381815 34.915704 34.915704 0 0 0-4.112294 18.76913 31.699579 31.699579 0 0 0 3.914438 17.384141z m11.805388-37.611972q9.151794 0 9.151794 19.66918 0 19.009661-9.334132 19.009661-9.485433 0-9.485433-18.703179 0-19.971783 9.667771-19.971782z m22.59434 16.216405a9.958735 9.958735 0 0 0 7.759045 3.212245 10.474711 10.474711 0 0 0 8.212949-3.456655 12.988642 12.988642 0 0 0 3.103618-9.000493 12.554135 12.554135 0 0 0-2.804894-8.697889 9.947096 9.947096 0 0 0-7.8056-3.123016 10.637651 10.637651 0 0 0-8.29054 3.394582 13.112787 13.112787 0 0 0-3.076461 9.151794 12.204978 12.204978 0 0 0 2.901883 8.519432z m3.49157-15.021512a5.706778 5.706778 0 0 1 4.744656-2.226846 5.396416 5.396416 0 0 1 4.562319 2.137617 9.83459 9.83459 0 0 1 1.62164 6.048176 10.133313 10.133313 0 0 1-1.652676 6.207236 5.512802 5.512802 0 0 1-4.682584 2.19969 5.625308 5.625308 0 0 1-4.655427-2.122099 9.446638 9.446638 0 0 1-1.695352-6.032658 9.838469 9.838469 0 0 1 1.769063-6.211116z m30.958591-5.345982l-30.143891 47.268104h5.043379L145.272605 1.051351h-5.04338z m-6.350779 44.416655a9.877265 9.877265 0 0 0 7.759045 3.258799 10.497988 10.497988 0 0 0 8.146998-3.441137 14.812017 14.812017 0 0 0 0.302603-17.791491 9.939337 9.939337 0 0 0-7.747407-3.138533 10.532904 10.532904 0 0 0-8.259504 3.441136 13.287365 13.287365 0 0 0-3.076461 9.198348 12.282569 12.282569 0 0 0 2.886365 8.472878z m3.441137-14.943922a5.667983 5.667983 0 0 1 4.787331-2.226845 5.462368 5.462368 0 0 1 4.531282 2.091062 9.555264 9.555264 0 0 1 1.652677 6.032658 10.148831 10.148831 0 0 1-1.652677 6.180079 5.493404 5.493404 0 0 1-4.682584 2.215208 5.60591 5.60591 0 0 1-4.655427-2.137617 9.341891 9.341891 0 0 1-1.695351-5.955067 10.024686 10.024686 0 0 1 1.726387-6.199478z" fill="#666666" p-id="14028"></path></svg></p><p>堆叠面积图</p><hr><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><p>大屏需求大多数可借助封装的组件库、工具库较快完成，部分需求需要使用偏底层技术实现，一般用到的技术点如下：</p><ol><li>CSS3</li><li>SVG</li><li>Canvas</li><li>WebGL</li></ol><p>我们也可以使用半成品进行定制，SVG相关：<a href="https://svgjs.com/">SVG.js</a>、<a href="http://snapsvg.io/">snap</a>，Canvas 2D有：<a href="https://ecomfe.github.io/zrender-doc/public/">zrender</a>、<a href="http://ocanvas.org/">ocanvas</a>、<a href="https://www.createjs.com/docs/easeljs/modules/EaselJS.html">EaselJS</a> 等。</p><h2 id="GIS相关"><a href="#GIS相关" class="headerlink" title="GIS相关"></a>GIS相关</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9B%BE">地图</a></li><li><a href="https://www.jianshu.com/p/59d4ab010ee9">珊格瓦片/矢量瓦片</a></li><li><a href="https://blog.csdn.net/liuxu841911548/article/details/78569519#31%E7%8F%8A%E6%A0%BC%E7%93%A6%E7%89%87%E5%92%8C%E7%9F%A2%E9%87%8F%E7%93%A6%E7%89%87%E7%9A%84%E6%A6%82%E5%BF%B5">投影与坐标系</a></li><li><a href="https://www.oschina.net/translate/geojson-spec#geometrycollection">GeoJSON</a></li></ul><h3 id="地图库组件"><a href="#地图库组件" class="headerlink" title="地图库组件"></a>地图库组件</h3><ul><li><a href="https://openlayers.org/">OpenLayers</a></li><li><a href="https://leafletjs.com/">Leaflet</a></li><li><a href="http://sinomap.ewind.us/">Sinomap</a></li><li><a href="https://docs.mapbox.com/mapbox-gl-js/overview/">mapbox</a></li><li><a href="https://developers.arcgis.com/javascript/">ArcGIS For JavaScript</a></li><li><a href="https://www.qgis.org/en/site/">QGIS</a></li></ul><h3 id="地图开放平台"><a href="#地图开放平台" class="headerlink" title="地图开放平台"></a>地图开放平台</h3><ul><li><a href="https://lbs.amap.com/api/javascript-api/summary">高德地图</a></li><li><a href="https://lbsyun.baidu.com/index.php?title=jspopular3.0">百度地图</a></li><li><a href="https://lbs.qq.com/javascript_v2/index.html">腾讯地图</a></li><li><a href="http://lbs.tianditu.gov.cn/api/js4.0/guide.html">天地图</a></li><li><a href="https://developers.google.com/maps/documentation/javascript/tutorial?hl=zh-cn">谷歌地图</a></li></ul><h3 id="空间数据库"><a href="#空间数据库" class="headerlink" title="空间数据库"></a>空间数据库</h3><ul><li><a href="https://postgis.net/">PostGIS</a></li><li><a href="https://www.postgresql.org/">PostgreSQL</a></li><li><a href="https://www.oracle.com/database/technologies/spatialandgraph.html">Oracle Spatial</a></li></ul><h3 id="地理可视化"><a href="#地理可视化" class="headerlink" title="地理可视化"></a>地理可视化</h3><ul><li><a href="https://github.com/mapbox/supercluster">supercluster</a></li><li><a href="http://turfjs.org/">turf</a></li><li><a href="https://github.com/OpenGeoscience/geojs">geojs</a></li><li><a href="https://cesiumjs.org/">cesiumjs</a></li><li><a href="https://geohey.com/home/?go">geohey</a></li></ul><h2 id="工具库"><a href="#工具库" class="headerlink" title="工具库"></a>工具库</h2><table><thead><tr><th>图表库</th><th>绘图库</th><th>动画库</th></tr></thead><tbody><tr><td><a href="https://www.echartsjs.com/">ECharts</a></td><td><a href="https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene">three</a></td><td><a href="https://animejs.com/">anime</a></td></tr><tr><td><a href="https://www.highcharts.com/">HightCharts</a></td><td><a href="https://d3js.org/">D3</a></td><td><a href="https://github.com/mojs/mojs">mo</a></td></tr><tr><td><a href="https://www.chartjs.org/">Chart</a></td><td><a href="https://svgjs.com/">SVG</a></td><td><a href="https://popmotion.io/">Popmotion</a></td></tr><tr><td><a href="https://gionkunz.github.io/chartist-JS/">Chartist</a></td><td><a href="http://snapsvg.io/">Snap</a></td><td><a href="http://bouncejs.com/">Bounce</a></td></tr><tr><td><a href="https://antv.alipay.com/zh-cn/index.html#__products">AntV系列</a></td><td><a href="https://github.com/DmitryBaranovskiy/raphael">Raphaël</a></td><td><a href="https://createjs.com/docs/tweenjs/modules/TweenJS.html">Tween(补间动画)</a></td></tr></tbody></table><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><table><thead><tr><th>部署方式</th><th>特点</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td><strong>私有部署</strong></td><td>项目完全部署在客户服务器上</td><td>数据更安全、架构易调整</td><td>扩容不易、初建成本高</td></tr><tr><td><strong>云部署</strong></td><td>项目完全部署在云端</td><td>使用灵活、按需付费</td><td>数据有风险</td></tr><tr><td><strong>混合部署</strong></td><td>重要内容在客户服务器，部分在云端</td><td>使用更为灵活</td><td>提高程序复杂</td></tr></tbody></table><h2 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h2><ul><li>无网络连接：所有资源与数据存放在本地，数据更新依赖人工导入；</li><li>仅访问内网：资源与数据多数存储在本地，可从内网内其他服务器获取数据；</li><li>可访问互联网：不敏感资源可存放在 CDN 或云服务器，减少本地项目体积与维护成本。</li></ul><h2 id="设备参数"><a href="#设备参数" class="headerlink" title="设备参数"></a>设备参数</h2><ul><li>屏幕显示技术: <a href="https://www.quora.com/What-is-the-difference-between-AMOLED-OLED-LED-and-LCD-display">LED、LCD、OLED、AMOLED</a>（不同显示技术大屏显示效果有差异，但影响不大）</li><li>屏幕分辨率：见<a href="https://xiaoleng123.github.io/large-screen/develop.html#%E5%88%86%E8%BE%A8%E7%8E%87%E9%80%82%E9%85%8D">分辨率适配</a></li><li>屏幕宽高比例：4:3、16:9(常见)、15:9、16:10、21:9（注意对可能使用的异型屏的适配）</li><li>客户端硬件性能: 内存、CPU、GPU、显卡（复杂的大屏对客户端配置要求较高，地图的大数据体量比较吃 CPU和内存，webgl 会调用GPU渲染，一般不是 webgl 的，动画多的大屏，容易吃 CPU，显卡也很重要，但不易量化）</li><li>客户端浏览器: 建议选用较新版本的 Chrome 或 FireFox 等现代浏览器</li></ul><p>作者：合一大师<br>链接：<a href="https://juejin.im/post/6844904007878574094">https://juejin.im/post/6844904007878574094</a><br>来源：掘金</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大屏可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 忽略提交 .gitignore</title>
      <link href="posts/61e0434c/"/>
      <url>posts/61e0434c/</url>
      
        <content type="html"><![CDATA[<p>在使用Git的过程中，我们喜欢有的文件比如日志，临时文件，编译的中间文件等不要提交到代码仓库，这时就要设置相应的忽略规则，来忽略这些文件的提交。</p><span id="more"></span>  <p>规则  作用<br> /mtk    过滤整个文件夹<br> *.zip   过滤所有.zip文件<br> /mtk/do.c   过滤某个具体文件<br> !/mtk/one.txt   追踪（不过滤）某个具体文件<br> 注意：如果你创建.gitignore文件之前就push了某一文件，那么即使你在.gitignore文件中写入过滤该文件的规则，该规则也不会起作用，git仍然会对该文件进行版本管理。</p><p>配置语法<br> 以斜杠“/”开头表示目录；<br> 以星号“*”通配多个字符；<br> 以问号“?”通配单个字符<br> 以方括号“[]”包含单个字符的匹配列表；<br> 以叹号“!”表示不忽略(跟踪)匹配到的文件或目录。<br> 注意： git 对于 .gitignore配置文件是按行从上到下进行规则匹配的</p><h2 id="Git-忽略文件提交的方法"><a href="#Git-忽略文件提交的方法" class="headerlink" title="Git 忽略文件提交的方法"></a>Git 忽略文件提交的方法</h2><p>有三种方法可以实现忽略Git中不想提交的文件。</p><h3 id="在Git项目中定义-gitignore-文件"><a href="#在Git项目中定义-gitignore-文件" class="headerlink" title="在Git项目中定义 .gitignore 文件"></a>在Git项目中定义 .gitignore 文件</h3><p>这种方式通过在项目的某个文件夹下定义 .gitignore 文件，在该文件中定义相应的忽略规则，来管理当前文件夹下的文件的Git提交行为。</p><p>.gitignore 文件是可以提交到共有仓库中，这就为该项目下的所有开发者都共享一套定义好的忽略规则。</p><p>在 .gitingore 文件中，遵循相应的语法，在每一行指定一个忽略规则。如：</p><pre class="language-bash" data-language="bash"><code class="language-bash">*.log*.temp/vendor</code></pre><h3 id="在Git项目的设置中指定排除文件"><a href="#在Git项目的设置中指定排除文件" class="headerlink" title="在Git项目的设置中指定排除文件"></a>在Git项目的设置中指定排除文件</h3><p>这种方式只是临时指定该项目的行为，需要编辑当前项目下的 .git/info/exclude 文件，然后将需要忽略提交的文件写入其中。</p><p>需要注意的是，这种方式指定的忽略文件的根目录是项目根目录。</p><h3 id="定义Git全局的-gitignore-文件"><a href="#定义Git全局的-gitignore-文件" class="headerlink" title="定义Git全局的 .gitignore 文件"></a>定义Git全局的 .gitignore 文件</h3><p>除了可以在项目中定义 .gitignore 文件外，还可以设置全局的 git .gitignore 文件来管理所有Git项目的行为。这种方式在不同的项目开发者之间是不共享的，是属于项目之上Git应用级别的行为。</p><p>这种方式也需要创建相应的 .gitignore 文件，可以放在任意位置。然后在使用以下命令配置Git：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp">git config <span class="token operator">--</span><span class="token keyword">global</span> core<span class="token punctuation">.</span>excludesfile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>gitignore</code></pre><h2 id="Git-忽略规则"><a href="#Git-忽略规则" class="headerlink" title="Git 忽略规则"></a>Git 忽略规则</h2><p>详细的忽略规则可以参考<a href="https://git-scm.com/docs/gitignore">官方英文文档</a></p><h3 id="Git-忽略规则优先级"><a href="#Git-忽略规则优先级" class="headerlink" title="Git 忽略规则优先级"></a>Git 忽略规则优先级</h3><p>在 .gitingore 文件中，每一行指定一个忽略规则，Git 检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：</p><ul><li>从命令行中读取可用的忽略规则</li><li>当前目录定义的规则</li><li>父级目录定义的规则，依次地推</li><li>$GIT_DIR/info/exclude 文件中定义的规则</li><li>core.excludesfile中定义的全局规则</li></ul><h3 id="Git-忽略规则匹配语法"><a href="#Git-忽略规则匹配语法" class="headerlink" title="Git 忽略规则匹配语法"></a>Git 忽略规则匹配语法</h3><p>在 .gitignore 文件中，每一行的忽略规则的语法如下：</p><ul><li><code>空格</code>不匹配任意文件，可作为分隔符，可用反斜杠转义</li><li><code># 开头</code>的模式标识注释，可以使用反斜杠进行转义</li><li><code>! 开头</code>的模式标识否定，该文件将会再次被包含，<strong>如果排除了该文件的父级目录，则使用 ! 也不会再次被包含</strong>。可以使用反斜杠进行转义</li><li><code>/ 结束</code>的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件</li><li><code>/ 开始</code>的模式匹配项目跟目录</li><li>如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录</li><li><code>**</code>匹配多级目录，可在开始，中间，结束</li><li><code>?</code>通用匹配单个字符</li><li><code>[]</code>通用匹配单个字符列表</li></ul><h3 id="常用匹配示例："><a href="#常用匹配示例：" class="headerlink" title="常用匹配示例："></a>常用匹配示例：</h3><ul><li>bin/: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件</li><li>/bin: 忽略根目录下的bin文件</li><li>/*.c: 忽略 cat.c，不忽略 build/cat.c</li><li>debug/*.obj: 忽略 debug/io.obj，不忽略 debug/common/io.obj 和 tools/debug/io.obj</li><li>**/foo: 忽略/foo, a/foo, a/b/foo等</li><li>a/**/b: 忽略a/b, a/x/b, a/x/y/b等</li><li>!/bin/run.sh: 不忽略 bin 目录下的 run.sh 文件</li><li>*.log: 忽略所有 .log 文件</li><li>config.php: 忽略当前路径的 config.php 文件</li></ul><h2 id="gitignore规则不生效"><a href="#gitignore规则不生效" class="headerlink" title=".gitignore规则不生效"></a>.gitignore规则不生效</h2><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p><p>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp">git rm <span class="token operator">-</span>r <span class="token operator">--</span>cached <span class="token punctuation">.</span>git <span class="token keyword">add</span> <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m 'update <span class="token punctuation">.</span>gitignore'</code></pre><hr><p>链接：<a href="https://www.jianshu.com/p/74bd0ceb6182">https://www.jianshu.com/p/74bd0ceb6182</a><br>       来源：简书</p><h4 id="其他相关推荐"><a href="#其他相关推荐" class="headerlink" title="其他相关推荐:"></a><strong>其他相关推荐:</strong></h4><p><a href="https://www.jianshu.com/p/699ed86028c2">.gitignore</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github搜索奇淫技巧</title>
      <link href="posts/e061f4de/"/>
      <url>posts/e061f4de/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索语法"><a href="#搜索语法" class="headerlink" title="搜索语法"></a>搜索语法</h2><p>搜索 GitHub 时，你可以构建匹配特定数字和单词的查询。</p><span id="more"></span><h3 id="查询大于或小于另一个值的值"><a href="#查询大于或小于另一个值的值" class="headerlink" title="查询大于或小于另一个值的值"></a>查询大于或小于另一个值的值</h3><p>您可以使用 <code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code> 和 <code>&lt;=</code> 搜索大于、大于等于、小于以及小于等于另一个值的值。</p><table><thead><tr><th>查询</th><th>示例</th></tr></thead><tbody><tr><td><code>&gt;*n*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+stars:%3E1000&type=Repositories">cats vue:&gt;1000</a></strong> 匹配含有 “vue” 字样、星标超过 1000 个的仓库。</td></tr><tr><td><code>&gt;=*n*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+topics:%3E=5&type=Repositories">vue topics:&gt;=5</a></strong> 匹配含有 “vue” 字样、有 5 个或更多主题的仓库。</td></tr><tr><td><code>&lt;*n*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+size:%3C10000&type=Code">vue size:&lt;10000</a></strong> 匹配小于 10 KB 的文件中含有 “vue” 字样的代码。</td></tr><tr><td><code>&lt;=*n*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+stars:%3C=50&type=Repositories">vue stars:&lt;=50</a></strong> 匹配含有 “vue” 字样、星标不超过 50 个的仓库。</td></tr></tbody></table><p>您还可以使用 范围查询 搜索大于等于或小于等于另一个值的值。</p><table><thead><tr><th>查询</th><th>示例</th></tr></thead><tbody><tr><td><code>*n*..*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+stars:10..*&type=Repositories">vue stars:10..*</a></strong> 等同于 <code>stars:&gt;=10</code> 并匹配含有 “vue” 字样、有 10 个或更多星号的仓库。</td></tr><tr><td><code>*..*n*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+stars:%22*..10%22&type=Repositories">vue stars:*..10</a></strong> 等同于 <code>stars:&lt;=10</code> 并匹配含有 “vue” 字样、有不超过 10 个星号的仓库。</td></tr></tbody></table><h3 id="查询范围之间的值"><a href="#查询范围之间的值" class="headerlink" title="查询范围之间的值"></a>查询范围之间的值</h3><p>您可以使用范围语法 <code>*n*..*n*</code> 搜索范围内的值，其中第一个数字 <em>n</em> 是最低值，而第二个是最高值。</p><table><thead><tr><th>查询</th><th>示例</th></tr></thead><tbody><tr><td><code>*n*..*n*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+stars:10..50&type=Repositories">vue stars:10..50</a></strong> 匹配含有 “vue” 字样、有 10 到 50 个星号的仓库。</td></tr></tbody></table><h3 id="查询日期"><a href="#查询日期" class="headerlink" title="查询日期"></a>查询日期</h3><p>您可以通过使用 <code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code> 和 范围查询 搜索早于或晚于另一个日期，或者位于日期范围内的日期。</p><p>日期格式必须遵循 <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601</a> 标准，即 <code>YYYY-MM-DD</code>（年-月-日）。</p><table><thead><tr><th>查询</th><th>示例</th></tr></thead><tbody><tr><td><code>&gt;*YYYY*-*MM*-*DD*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+created:%3E2016-04-29&type=Issues">vue created:&gt;2016-04-29</a></strong> 匹配含有 “vue” 字样、在 2016 年 4 月 29 日之后创建的议题。</td></tr><tr><td><code>&gt;=*YYYY*-*MM*-*DD*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+created:%3E=2017-04-01&type=Issues">vue created:&gt;=2017-04-01</a></strong> 匹配含有 “vue” 字样、在 2017 年 4 月 1 日或之后创建的议题。</td></tr><tr><td><code>&lt;*YYYY*-*MM*-*DD*</code></td><td><strong><a href="https://github.com/search?q=vue+pushed:%3C2012-07-05&type=Code&utf8=%E2%9C%93">vue pushed:&lt;2012-07-05</a></strong> 匹配在 2012 年 7 月 5 日之前推送的仓库中含有 “vue” 字样的代码。</td></tr><tr><td><code>&lt;=*YYYY*-*MM*-*DD*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+created:%3C=2012-07-04&type=Issues">vue created:&lt;=2012-07-04</a></strong> 匹配含有 “vue” 字样、在 2012 年 7 月 4 日或之前创建的议题。</td></tr><tr><td><code>*YYYY*-*MM*-*DD*..*YYYY*-*MM*-*DD*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+pushed:2016-04-30..2016-07-04&type=Repositories">vue pushed:2016-04-30..2016-07-04</a></strong> 匹配含有 “vue” 字样、在 2016 年 4 月末到 7 月之间推送的仓库。</td></tr><tr><td><code>*YYYY*-*MM*-*DD*..*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+created:2012-04-30..*&type=Issues">vue created:2012-04-30..*</a></strong> 匹配在 2012 年 4 月 30 日之后创建、含有 “vue” 字样的议题。</td></tr><tr><td><code>*..*YYYY*-*MM*-*DD*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+created:*..2012-07-04&type=Issues">vue created:*..2012-04-30</a></strong> 匹配在 2012 年 7 月 4 日之前创建、含有 “vue” 字样的议题。</td></tr></tbody></table><p>您也可以在日期后添加可选的时间信息 <code>THH:MM:SS+00:00</code>，以便按小时、分钟和秒进行搜索。 这是 <code>T</code>，随后是 <code>HH:MM:SS</code>（时-分-秒）和 UTC 偏移 (<code>+00:00</code>)。</p><table><thead><tr><th>查询</th><th>示例</th></tr></thead><tbody><tr><td><code>*YYYY*-*MM*-*DD*T*HH*:*MM*:*SS*+*00*:*00*</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+created:2017-01-01T01:00:00+07:00..2017-03-01T15:30:15+07:00&type=Issues">vue created:2017-01-01T01:00:00+07:00..2017-03-01T15:30:15+07:00</a></strong> 匹配在 2017 年 1 月 1 日凌晨 1 点（UTC 偏移为 <code>07:00</code>）与 2017 年 3 月 1 日下午 3 点（UTC 偏移为 <code>07:00</code>）之间创建的议题。 UTC 偏移量 <code>07:00</code>，2017 年 3 月 1 日下午 3 点。 UTC 偏移量 <code>07:00</code>。</td></tr><tr><td><code>*YYYY*-*MM*-*DD*T*HH*:*MM*:*SS*Z</code></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=vue+created:2016-03-21T14:11:00Z..2016-04-07T20:45:00Z&type=Issues">vue created:2016-03-21T14:11:00Z..2016-04-07T20:45:00Z</a></strong> 匹配在 2016 年 3 月 21 日下午 2:11 与 2016 年 4 月 7 日晚上 8:45 之间创建的议题。</td></tr></tbody></table><h3 id="排除特定结果"><a href="#排除特定结果" class="headerlink" title="排除特定结果"></a>排除特定结果</h3><p>您可以使用 <code>NOT</code> 语法排除包含特定字词的结果。 <code>NOT</code> 运算符只能用于字符串关键词， 不适用于数字或日期。</p><table><thead><tr><th>查询</th><th>示例</th></tr></thead><tbody><tr><td><code>NOT</code></td><td><strong><a href="https://github.com/search?q=hello+NOT+world&type=Repositories">hello NOT world</a></strong> 匹配含有 “hello” 字样但不含有 “world” 字样的仓库。</td></tr></tbody></table><p>缩小搜索结果范围的另一种途径是排除特定的子集。 您可以为任何搜索限定符添加 <code>-</code> 前缀，以排除该限定符匹配的所有结果。</p><table><thead><tr><th>查询</th><th>示例</th></tr></thead><tbody><tr><td><code>-*QUALIFIER*</code></td><td><strong><a href="https://github.com/search?q=vue+stars:%3E10+-language:javascript&type=Repositories">vue stars:&gt;10 -language:javascript</a></strong> 匹配含有 “vue” 字样、有超过 10 个星号但并非以 JavaScript 编写的仓库。</td></tr><tr><td></td><td><strong><a href="https://github.com/search?utf8=%E2%9C%93&q=mentions:defunkt+-org:github&type=Issues">mentions:biaochenxuying -org:github</a></strong> 匹配提及 <a href="https://github.com/biaochenxuying">@biaochenxuying</a> 且不在 GitHub 组织仓库中的议题</td></tr></tbody></table><h3 id="对带有空格的查询使用引号"><a href="#对带有空格的查询使用引号" class="headerlink" title="对带有空格的查询使用引号"></a>对带有空格的查询使用引号</h3><p>如果搜索含有空格的查询，您需要用引号将其括起来。 例如：</p><ul><li><a href="https://github.com/search?utf8=%E2%9C%93&q=cats+NOT+%22hello+world%22&type=Repositories">cats NOT “hello world”</a> 匹配含有 “vue” 字样但不含有 “hello world” 字样的仓库。</li><li><a href="https://github.com/search?utf8=%E2%9C%93&q=build+label:%22bug+fix%22&type=Issues">build label:”bug fix”</a> 匹配具有标签 “bug fix”、含有 “build” 字样的议题。</li></ul><p>某些非字母数字符号（例如空格）会从引号内的代码搜索查询中删除，因此结果可能出乎意料。</p><h3 id="使用用户名的查询"><a href="#使用用户名的查询" class="headerlink" title="使用用户名的查询"></a>使用用户名的查询</h3><p>如果搜索查询包含需要用户名的限定符，例如 <code>user</code>、<code>actor</code> 或 <code>assignee</code>，您可以使用任何 GitHub 用户名指定特定人员，或使用 <code>@me</code> 指定当前用户。</p><table><thead><tr><th>查询</th><th>示例</th></tr></thead><tbody><tr><td><code>QUALIFIER:USERNAME</code></td><td><a href="https://github.com/search?q=author:nat&type=Commits"><code>author:biaochenxuying</code></a> 匹配 <a href="https://github.com/biaochenxuying">@biaochenxuying</a> 创作的提交。</td></tr><tr><td><code>QUALIFIER:@me</code></td><td><a href="https://github.com/search?q=is:issue+assignee:@me&type=Issues"><code>is:issue assignee:@me</code></a> 匹配已分配给结果查看者的议题</td></tr></tbody></table><p><code>@me</code> 只能与限定符一起使用，而不能用作搜索词，例如 <code>@me main.workflow</code>。</p><h2 id="高级的搜索"><a href="#高级的搜索" class="headerlink" title="高级的搜索"></a>高级的搜索</h2><h3 id="按仓库名称、说明或自述文件内容搜索"><a href="#按仓库名称、说明或自述文件内容搜索" class="headerlink" title="按仓库名称、说明或自述文件内容搜索"></a>按仓库名称、说明或自述文件内容搜索</h3><p>通过 <code>in</code> 限定符，您可以将搜索限制为仓库名称、仓库说明、自述文件内容或这些的任意组合。</p><p>如果省略此限定符，则只搜索仓库名称和说明。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>in:name</code></td><td><a href="https://github.com/search?q=vue+in:name&type=Repositories"><strong>vue in:name</strong></a> 匹配其名称中含有 “jquery” 的仓库。</td></tr><tr><td><code>in:description</code></td><td><a href="https://github.com/search?q=vue+in:name,description&type=Repositories"><strong>vue in:name,description</strong></a> 匹配其名称或说明中含有 “vue” 的仓库。</td></tr><tr><td><code>in:readme</code></td><td><a href="https://github.com/search?q=vue+in:readme&type=Repositories"><strong>vue in:readme</strong></a> 匹配其自述文件中提及 “vue” 的仓库。</td></tr><tr><td><code>repo:owner/name</code></td><td><a href="https://github.com/search?q=repo:biaochenxuying/blog"><strong>repo:biaochenxuying/blog</strong></a> 匹配特定仓库名称，比如：用户为 biaochenxuying 的 blog 项目。</td></tr></tbody></table><h3 id="在用户或组织的仓库内搜索"><a href="#在用户或组织的仓库内搜索" class="headerlink" title="在用户或组织的仓库内搜索"></a>在用户或组织的仓库内搜索</h3><p>要在 <code>特定用户或组织</code> 拥有的所有仓库中搜索，您可以使用 <code>user</code> 或 <code>org</code> 限定符。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>user:*USERNAME*</code></td><td><a href="https://github.com/search?q=user:biaochenxuying+forks:%3E=100&type=Repositories"><strong>user:biaochenxuying forks:&gt;=100</strong></a> 匹配来自 <a href="https://github.com/biaochenxuying">@biaochenxuying</a>、拥有超过 100 复刻的仓库。</td></tr><tr><td><code>org:*ORGNAME*</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=org:github&type=Repositories"><strong>org:github</strong></a> 匹配来自 GitHub 的仓库。</td></tr></tbody></table><h3 id="按仓库大小搜索"><a href="#按仓库大小搜索" class="headerlink" title="按仓库大小搜索"></a>按仓库大小搜索</h3><p><code>size</code> 限定符使用 <a href="https://docs.github.com/cn/free-pro-team@latest/articles/understanding-the-search-syntax">大于、小于和范围限定符</a> 查找匹配特定大小（以千字节为单位）的仓库。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>size:*n*</code></td><td><a href="https://github.com/search?q=size:1000&type=Repositories"><strong>size:1000</strong></a> 匹配恰好为 1 MB 的仓库。</td></tr><tr><td></td><td><a href="https://github.com/search?q=size:%3E=30000&type=Repositories"><strong>size:&gt;=30000</strong></a> 匹配至少为 30 MB 的仓库。</td></tr><tr><td></td><td><a href="https://github.com/search?q=size:%3C50&type=Repositories"><strong>size:&lt;50</strong></a> 匹配小于 50 KB 的仓库。</td></tr><tr><td></td><td><a href="https://github.com/search?q=size:50..120&type=Repositories"><strong>size:50..120</strong></a> 匹配介于 50 KB 与 120 KB 之间的仓库。</td></tr></tbody></table><h3 id="按关注者数量搜索"><a href="#按关注者数量搜索" class="headerlink" title="按关注者数量搜索"></a>按关注者数量搜索</h3><p>您可以使用 <code>followers</code> 限定符以及<a href="https://docs.github.com/cn/free-pro-team@latest/articles/understanding-the-search-syntax">大于、小于和范围限定符</a>基于仓库拥有的关注者数量过滤仓库。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>followers:*n*</code></td><td><a href="https://github.com/search?q=node+followers:%3E=10000"><strong>node followers:&gt;=10000</strong></a> 匹配有 10,000 或更多关注者提及文字 “node” 的仓库。</td></tr><tr><td></td><td><a href="https://github.com/search?q=styleguide+linter+followers:1..10&type=Repositories"><strong>styleguide linter followers:1..10</strong></a> 匹配拥有 1 到 10 个关注者并且提及 “styleguide linter” 一词的的仓库。</td></tr></tbody></table><h3 id="按复刻数量搜索"><a href="#按复刻数量搜索" class="headerlink" title="按复刻数量搜索"></a>按复刻数量搜索</h3><p><code>forks</code> 限定符使用<a href="https://docs.github.com/cn/free-pro-team@latest/articles/understanding-the-search-syntax">大于、小于和范围限定符</a>指定仓库应具有的复刻数量。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>forks:*n*</code></td><td><a href="https://github.com/search?q=forks:5&type=Repositories"><strong>forks:5</strong></a> 匹配只有 5 个复刻的仓库。</td></tr><tr><td></td><td><a href="https://github.com/search?q=forks:%3E=205&type=Repositories"><strong>forks:&gt;=205</strong></a> 匹配具有至少 205 个复刻的仓库。</td></tr><tr><td></td><td><a href="https://github.com/search?q=forks:%3C90&type=Repositories"><strong>forks:&lt;90</strong></a> 匹配具有少于 90 个复刻的仓库。</td></tr><tr><td></td><td><a href="https://github.com/search?q=forks:10..20&type=Repositories"><strong>forks:10..20</strong></a> 匹配具有 10 到 20 个复刻的仓库。</td></tr></tbody></table><h3 id="按星号数量搜索"><a href="#按星号数量搜索" class="headerlink" title="按星号数量搜索"></a>按星号数量搜索</h3><p>您可以使用 <a href="https://docs.github.com/cn/free-pro-team@latest/articles/understanding-the-search-syntax">大于、小于和范围限定符</a> 基于仓库具有的 <a href="https://docs.github.com/cn/free-pro-team@latest/articles/saving-repositories-with-stars">星标</a> 数量搜索仓库</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>stars:*n*</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=stars:500&type=Repositories"><strong>stars:500</strong></a> 匹配恰好具有 500 个星号的仓库。</td></tr><tr><td></td><td><a href="https://github.com/search?q=stars:10..20+size:%3C1000&type=Repositories"><strong>stars:10..20</strong></a> 匹配具有 10 到 20 个星号、小于 1000 KB 的仓库。</td></tr><tr><td></td><td><a href="https://github.com/search?q=stars:%3E=500+fork:true+language:vue&type=Repositories"><strong>stars:&gt;=500 fork:true language:vue</strong></a> 匹配具有至少 500 个星号，包括复刻的星号（以 vue 编写）的仓库。</td></tr></tbody></table><h3 id="按仓库创建或上次更新时间搜索"><a href="#按仓库创建或上次更新时间搜索" class="headerlink" title="按仓库创建或上次更新时间搜索"></a>按仓库创建或上次更新时间搜索</h3><p>你可以基于创建时间或上次更新时间过滤仓库。</p><ul><li>对于仓库创建，您可以使用 <code>created</code> 限定符；</li><li>要了解仓库上次更新的时间，您要使用 <code>pushed</code> 限定符。 <code>pushed</code> 限定符将返回仓库列表，按仓库中任意分支上最近进行的提交排序。</li></ul><p>两者均采用日期作为参数。 日期格式必须遵循 ISO8601 标准，即 <code>YYYY-MM-DD</code>（年-月-日）。</p><p>也可以在日期后添加可选的时间信息 <code>THH:MM:SS+00:00</code>，以便按小时、分钟和秒进行搜索。 这是 <code>T</code>，随后是 <code>HH:MM:SS</code>（时-分-秒）和 UTC 偏移 (<code>+00:00</code>)。</p><p>日期支持 <code>大于、小于和范围限定符</code>。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>created:*YYYY-MM-DD*</code></td><td><a href="https://github.com/search?q=vue+created:%3C2020-01-01&type=Repositories"><strong>vue created:&lt;2020-01-01</strong></a> 匹配具有 “vue” 字样、在 2020 年之前创建的仓库。</td></tr><tr><td><code>pushed:*YYYY-MM-DD*</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=css+pushed:%3E2020-02-01&type=Repositories"><strong>css pushed:&gt;2020-02-01</strong></a> 匹配具有 “css” 字样、在 2020 年 1 月之后收到推送的仓库。</td></tr><tr><td></td><td><a href="https://github.com/search?q=vue+pushed:%3E=2020-03-06+fork:only&type=Repositories"><strong>vue pushed:&gt;=2020-03-06 fork:only</strong></a> 匹配具有 “vue” 字样、在 2020 年 3 月 6 日或之后收到推送并且作为复刻的仓库。</td></tr></tbody></table><h3 id="按语言搜索"><a href="#按语言搜索" class="headerlink" title="按语言搜索"></a>按语言搜索</h3><p>您可以基于其编写采用的主要语言搜索仓库。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>language:*LANGUAGE*</code></td><td><a href="https://github.com/search?q=vue+language:javascript&type=Repositories"><strong>vue language:javascript</strong></a> 匹配具有 “vue” 字样、以 JavaScript 编写的仓库。</td></tr></tbody></table><h3 id="按主题搜索"><a href="#按主题搜索" class="headerlink" title="按主题搜索"></a>按主题搜索</h3><p>您可以查找归类为特定 <a href="https://docs.github.com/cn/free-pro-team@latest/articles/classifying-your-repository-with-topics">主题</a> 的所有仓库。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>topic:*TOPIC*</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=topic:algorithm&type=Repositories&ref=searchresults"><strong>topic:algorithm</strong></a> 匹配已归类为 “algorithm” 主题的仓库。</td></tr></tbody></table><p>估计又有很多人不知道 GitHub 上有话题一说的吧。</p><h3 id="按主题数量搜索"><a href="#按主题数量搜索" class="headerlink" title="按主题数量搜索"></a>按主题数量搜索</h3><p>您可以使用 <code>topics</code> 限定符以及 <a href="https://docs.github.com/cn/free-pro-team@latest/articles/understanding-the-search-syntax">大于、小于和范围限定符</a> 按应用于仓库的 <a href="https://docs.github.com/cn/free-pro-team@latest/articles/classifying-your-repository-with-topics">主题</a> 数量搜索仓库。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>topics:*n*</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=topics:5&type=Repositories&ref=searchresults"><strong>topics:5</strong></a> 匹配具有五个主题的仓库。</td></tr><tr><td></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=topics:%3E3&type=Repositories&ref=searchresults"><strong>topics:&gt;3</strong></a> 匹配超过三个主题的仓库。</td></tr></tbody></table><h3 id="使用可视界面搜索"><a href="#使用可视界面搜索" class="headerlink" title="使用可视界面搜索"></a>使用可视界面搜索</h3><p>还可以使用 <a href="https://github.com/search">search</a> page 或 <a href="https://github.com/search/advanced">advanced search</a> page 搜索 GitHub 哦。</p><p>这种搜索方式，估计就更少人知道了吧。</p><p><a href="https://github.com/search/advanced">advanced search</a> page 提供用于构建搜索查询的可视界面。</p><p>您可以按各种因素过滤搜索，例如仓库具有的星标数或复刻数。 在填写高级搜索字段时，您的查询将在顶部搜索栏中自动构建。</p><h3 id="按许可搜索"><a href="#按许可搜索" class="headerlink" title="按许可搜索"></a>按许可搜索</h3><p>您可以按其<a href="https://docs.github.com/cn/free-pro-team@latest/articles/licensing-a-repository">许可</a>搜索仓库。 您必须使用<a href="https://docs.github.com/cn/free-pro-team@latest/articles/licensing-a-repository/#searching-github-by-license-type">许可关键词</a>按特定许可或许可系列过滤仓库。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>license:*LICENSE_KEYWORD*</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=license:apache-2.0&type=Repositories&ref=searchresults"><strong>license:apache-2.0</strong></a> 匹配根据 Apache License 2.0 授权的仓库。</td></tr></tbody></table><h3 id="按公共或私有仓库搜索"><a href="#按公共或私有仓库搜索" class="headerlink" title="按公共或私有仓库搜索"></a>按公共或私有仓库搜索</h3><p>您可以基于仓库是公共还是私有来过滤搜索。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>is:public</code></td><td><a href="https://github.com/search?q=is:public+org:github&type=Repositories&utf8=%E2%9C%93"><strong>is:public org:github</strong></a> 匹配 GitHub 拥有的公共仓库。</td></tr><tr><td><code>is:private</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=pages+is:private&type=Repositories"><strong>is:private pages</strong></a> 匹配您有访问权限且包含 “pages” 字样的私有仓库。</td></tr></tbody></table><h3 id="按公共或私有仓库搜索-1"><a href="#按公共或私有仓库搜索-1" class="headerlink" title="按公共或私有仓库搜索"></a>按公共或私有仓库搜索</h3><p>您可以根据仓库是否为镜像以及托管于其他位置托管来搜索它们。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>mirror:true</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=mirror:true+GNOME&type="><strong>mirror:true GNOME</strong></a> 匹配是镜像且包含 “GNOME” 字样的仓库。</td></tr><tr><td><code>mirror:false</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=mirror:false+GNOME&type="><strong>mirror:false GNOME</strong></a> 匹配并非镜像且包含 “GNOME” 字样的仓库。</td></tr></tbody></table><h3 id="基于仓库是否已存档搜索"><a href="#基于仓库是否已存档搜索" class="headerlink" title="基于仓库是否已存档搜索"></a>基于仓库是否已存档搜索</h3><p>你可以基于仓库是否<a href="https://docs.github.com/cn/free-pro-team@latest/articles/about-archiving-repositories">已存档</a>来搜索仓库。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>archived:true</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=archived:true+GNOME&type="><strong>archived:true GNOME</strong></a> 匹配已存档且包含 “GNOME” 字样的仓库。</td></tr><tr><td><code>archived:false</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=archived:false+GNOME&type="><strong>archived:false GNOME</strong></a> 匹配未存档且包含 “GNOME” 字样的仓库。</td></tr></tbody></table><h3 id="基于具有-good-first-issue-或-help-wanted-标签的议题数量搜索"><a href="#基于具有-good-first-issue-或-help-wanted-标签的议题数量搜索" class="headerlink" title="基于具有 good first issue 或 help wanted 标签的议题数量搜索"></a>基于具有 <code>good first issue</code> 或 <code>help wanted</code> 标签的议题数量搜索</h3><p>您可以使用限定符 <code>help-wanted-issues:&gt;n</code> 和 <code>good-first-issues:&gt;n</code> 搜索具有最少数量标签为 <code>help-wanted</code> 或 <code>good-first-issue</code> 议题的仓库。</p><table><thead><tr><th>限定符</th><th>示例</th></tr></thead><tbody><tr><td><code>good-first-issues:&gt;n</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=javascript+good-first-issues:%3E2&type="><strong>good-first-issues:&gt;2 javascript</strong></a> 匹配具有超过两个标签为 <code>good-first-issue</code> 的议题且包含 “javascript” 字样的仓库。</td></tr><tr><td><code>help-wanted-issues:&gt;n</code></td><td><a href="https://github.com/search?utf8=%E2%9C%93&q=react+help-wanted-issues:%3E4&type="><strong>help-wanted-issues:&gt;4 react</strong></a> 匹配具有超过四个标签为 <code>help-wanted</code> 的议题且包含 “React” 字样的仓库。</td></tr></tbody></table><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>其实，以上很多内容的都是来自于 GitHub 的官方文档\</p><blockquote><p><a href="https://docs.github.com/cn">GitHub 官方文档</a> : <a href="https://docs.github.com/cn">https://docs.github.com/cn</a></p></blockquote><p>如果你还不了解或者不会使用 GitHub ，可以看看这一章节：</p><blockquote><p><a href="https://docs.github.com/cn/free-pro-team@latest/github/getting-started-with-github/git-and-github-learning-resources">Git 和 GitHub 学习资源</a> ：<a href="https://docs.github.com/cn/free-pro-team@latest/github/getting-started-with-github/git-and-github-learning-resources">https://docs.github.com/cn/free-pro-team@latest/github/getting-started-with-github/git-and-github-learning-resources</a></p></blockquote><p>平时如何发现好的开源项目，可以看看这篇文章：<a href="https://mp.weixin.qq.com/s/98P-ARrYlkmog8i79zX6Og">GitHub 上能挖矿的神仙技巧 - 如何发现优秀开源项目</a>。</p><h5 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接:"></a><font style="color:skyblue">原文链接:</font></h5><p><a href="https://github.com/FrontEndGitHub/FrontEndGitHub/issues/4">https://github.com/FrontEndGitHub/FrontEndGitHub/issues/4</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘录</title>
      <link href="posts/27d394ca/"/>
      <url>posts/27d394ca/</url>
      
        <content type="html"><![CDATA[<h3 id="文章头信息"><a href="#文章头信息" class="headerlink" title="文章头信息"></a>文章头信息</h3><h4 id="1-hexo-blog-encrypt-opens-new-window"><a href="#1-hexo-blog-encrypt-opens-new-window" class="headerlink" title="1.     hexo-blog-encrypt(opens new window)"></a>1.    <a href="https://github.com/MikeCoder/hexo-blog-encrypt"> hexo-blog-encrypt(opens new window)</a></h4><p>你可以使用它来<code>加密</code>一些私密的文章页面。</p><p>配置项:</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">password</span><span class="token punctuation">:</span> xxxxx<span class="token key atrule">abstract</span><span class="token punctuation">:</span> 有东西被加密了<span class="token punctuation">,</span> 请输入密码查看.<span class="token key atrule">message</span><span class="token punctuation">:</span> 您好<span class="token punctuation">,</span> 这里需要密码.<span class="token key atrule">wrong_pass_message</span><span class="token punctuation">:</span> 抱歉<span class="token punctuation">,</span> 这个密码看着不太对<span class="token punctuation">,</span> 请再试试.<span class="token key atrule">wrong_hash_message</span><span class="token punctuation">:</span> 抱歉<span class="token punctuation">,</span> 这个文章不能被校验<span class="token punctuation">,</span> 不过您还是能看看解密后的内容.</code></pre><h4 id="2-文章预览"><a href="#2-文章预览" class="headerlink" title="2.  文章预览"></a>2.  文章预览</h4><ul><li><code>author</code>: 设置作者则会显示</li><li><code>email</code>: 自动根据邮箱获取 <a href="https://en.gravatar.com/site/implement/images/">Gravatar (opens new window)</a>头像</li></ul><pre class="language-yml" data-language="yml"><code class="language-yml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">author</span><span class="token punctuation">:</span> 大赵君<span class="token key atrule">email</span><span class="token punctuation">:</span> xx@xxx.xx<span class="token punctuation">---</span></code></pre><ul><li><code>description</code>: 描述（只出现在预览卡片上，<strong>不出现在正文中</strong>）（默认使用 <code>400</code> 字重以表强调，略细于加粗字体）</li><li><code>excerpt</code>: 摘要（不需要在 <code>Front-matter</code> 中设置，通过 <code>&lt;!-- more --&gt;</code> 截断实现，<strong>预览卡片与正文中均出现</strong>）</li></ul><pre class="language-md" data-language="md"><code class="language-md"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">description</span><span class="token punctuation">:</span> xxxxxxx</span><span class="token punctuation">---</span></span>这里是摘要<span class="token comment">&lt;!-- more --></span>这里是更多内容</code></pre><h4 id="3-文章置顶"><a href="#3-文章置顶" class="headerlink" title="3.文章置顶"></a>3.文章置顶</h4><p>通过设置文章 Front Matter 中的 <code>top</code> 属性。 设置置顶后，文章卡片右上角将出现置顶图标。</p><pre class="language-md" data-language="md"><code class="language-md"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span><span class="token punctuation">---</span></span></code></pre><p>你也可以通过设置权重来实现多篇置顶文章的顺序。</p><pre class="language-md" data-language="md"><code class="language-md"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> xxx<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token number">1</span></span><span class="token punctuation">---</span></span><span class="token hr punctuation">---</span>title: xxx<span class="token title important">top: 2<span class="token punctuation">---</span></span></code></pre><p>此时 <code>top: 2</code> 的文章将排列在 <code>top: 1</code> 的文章上面。</p><blockquote><p>TIP</p><p>实际上，你也可以设置根据 <code>updated</code> 排序，然后把 <code>updated</code> 的日期设置很大来实现置顶效果。</p></blockquote><h4 id="阅读更多"><a href="#阅读更多" class="headerlink" title="阅读更多"></a>阅读更多</h4><p><code>readmore</code>: 将会首页卡片摘要末尾强制显示一个 <code>阅读更多</code> 按钮</p><hr><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>（不需要在 <code>Front-matter</code> 中设置，通过 <code>&lt;!-- more --&gt;</code> 截断实现，预览卡片与正文中均出现）</p><h4 id="多彩引用"><a href="#多彩引用" class="headerlink" title="多彩引用"></a>多彩引用</h4><div class="success"><blockquote><p>Success</p></blockquote></div><div class="warning"><blockquote><p>Warning</p></blockquote></div><div class="danger"><blockquote><p>Danger</p></blockquote></div><div class="info"><blockquote><p>Info</p></blockquote></div><h4 id="Details-折叠"><a href="#Details-折叠" class="headerlink" title="Details 折叠"></a>Details 折叠</h4><details><summary>Summary</summary><p>Content</p></details><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>Summary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">></span></span>Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span></code></pre><h3 id="部署命令"><a href="#部署命令" class="headerlink" title="部署命令"></a>部署命令</h3><ol><li><p>hexo clean 清除缓存</p></li><li><p>hexo g 生成静态文件</p></li><li><p>hexo s[本地启动,默认4000端口]</p></li></ol><h5 id="部署github-hexo-d"><a href="#部署github-hexo-d" class="headerlink" title="部署github :hexo d"></a>部署github :hexo d</h5><ol><li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>.</p></li><li><p>在 <strong>_config.yml</strong>（如果有已存在的请删除）添加如下配置：</p><pre class="language-md" data-language="md"><code class="language-md">deploy:  type: git  repo: https://github.com/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span><span class="token punctuation">></span></span>  <span class="token title important"><span class="token punctuation">#</span> example, https://github.com/hexojs/hexojs.github.io</span>  branch: #分支</code></pre></li></ol><h5 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h5><h6 id="new"><a href="#new" class="headerlink" title="new"></a>new</h6><pre class="language-md" data-language="md"><code class="language-md">$ hexo new [layout] <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>//hexo n "第一篇博客"</code></pre><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><pre class="language-md" data-language="md"><code class="language-md">$ hexo new "post title with whitespace"</code></pre><h3 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h3><p>头部<code>gallery_password</code> 字段是指对相册进行加密的密码</p><p>caption:是图片描述</p><p>desc:是点击图片下方详细描述</p><p><font style="color:red">⚠️相册才是用来存放照片的地方!!!</font></p><h6 id="相册集"><a href="#相册集" class="headerlink" title="相册集"></a>相册集</h6><p><code>index.md</code> 头部 <code>type: albums</code>表明是  <strong>相册集</strong></p><hr><h3 id="宝塔部署hexo博客"><a href="#宝塔部署hexo博客" class="headerlink" title="宝塔部署hexo博客"></a>宝塔部署hexo博客</h3><hr><h3 id="代码在线"><a href="#代码在线" class="headerlink" title="代码在线"></a>代码在线</h3><p><a href="https://pasteme.cn/">代码粘贴分享网站</a></p><p><a href="https://www.onlinegdb.com/">代码在线运行</a></p><h3 id="NPM-amp-amp-Yarn"><a href="#NPM-amp-amp-Yarn" class="headerlink" title="NPM&amp;&amp;Yarn"></a>NPM&amp;&amp;Yarn</h3><p>npm查看全局安装过的模块以及安装路径</p><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> list -g<span class="token function">npm</span> list -g --depth <span class="token number">0</span></code></pre><p>查看yarn全局安装的模块位置</p><pre class="language-sh" data-language="sh"><code class="language-sh">yarn global dir</code></pre>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百草园-则一</title>
      <link href="posts/8338ac59/"/>
      <url>posts/8338ac59/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="799fa39f2cb8d4a44da5ecceacf59e870ece53b201c1c5145964b150ab2ce59d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> LIFE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活二三事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript数据类型03</title>
      <link href="posts/1b49d30b/"/>
      <url>posts/1b49d30b/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Typescript-断言"><a href="#1-Typescript-断言" class="headerlink" title="1.Typescript 断言"></a>1.Typescript 断言</h3><p>有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。通常这会发生在你清楚地知道一个变量具有比它现有类型更确切的类型(比如说满是数字的数组,或是全都是自然数下标的对象,这只是一个举例)。</p><span id="more"></span><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//1.as语法</span><span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">any</span><span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token keyword">let</span> len<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token comment">//尖括号语法</span><span class="token keyword">let</span> a<span class="token operator">=</span> <span class="token string">"婷宝儿大阔爱"</span><span class="token punctuation">;</span><span class="token keyword">let</span> len<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> a<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//我们清楚知道变量a是string类型</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span></code></pre><p>通过类型断言这种方式可以告诉编译器——“我知道自己在干什么”。</p><p>类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。</p><p>TypeScript会假设程序员已经进行了必须的检查。</p><h3 id="2-Typescript其他类型"><a href="#2-Typescript其他类型" class="headerlink" title="2.Typescript其他类型 "></a><font style="color:skyblue;">2.Typescript其他类型 </font></h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> x<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组</span><span class="token keyword">let</span> s<span class="token operator">:</span>object <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//对象</span></code></pre><p>✍首字母小写是类型,大写是构造函数.</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript数据类型02</title>
      <link href="posts/6c4ee39d/"/>
      <url>posts/6c4ee39d/</url>
      
        <content type="html"><![CDATA[<h3 id="Typescript数据类型"><a href="#Typescript数据类型" class="headerlink" title="Typescript数据类型"></a><center>Typescript数据类型</center></h3><h4 id="1-1-任意类型any"><a href="#1-1-任意类型any" class="headerlink" title="1.1  任意类型any"></a>1.1  任意类型any</h4><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。这些值可能来自于动态的内容，比如来自用户输入或是从后端请求来的数据.</p><p>这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。那么我们可以使用any类型来标记这些变量.</p><span id="more"></span><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//变量“a”隐式具有“any”类型，但可以从用法中推断出更好的类型</span><span class="token keyword">let</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//a 的类型是any</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//any</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//any</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//其声明类型不为“void”或“any”的函数必须返回值</span><span class="token keyword">function</span> <span class="token function">Name</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#123;</span><span class="token comment">//此处括号后定义了返回值为---number</span> <span class="token comment">//此时返回值为undefined</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Name</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//正确</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">function</span> <span class="token function">Name</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//正确</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Name</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"18"</span><span class="token punctuation">;</span><span class="token comment">//正确</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Name</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token punctuation">.</span></code></pre><h4 id="1-2-无类型-void"><a href="#1-2-无类型-void" class="headerlink" title="1.2 无类型 void"></a>1.2 无类型 void</h4><p><em>Void表示没有任何类型</em></p><p>你只能为它赋予<code>undefined</code>和<code>null</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> tingbao<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//不能将类型“number”分配给类型“void”。</span><span class="token keyword">let</span> obj<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token string">"婷宝儿"</span><span class="token punctuation">;</span><span class="token comment">//不能将类型“string”分配给类型“void”。</span><span class="token keyword">let</span> obj<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//正确</span></code></pre><h4 id="1-3-undefined-null"><a href="#1-3-undefined-null" class="headerlink" title="1.3 undefined/null"></a>1.3 undefined/null</h4><p>默认情况下null和undefined是<strong>所有类型</strong>的<font style="color:skyblue;">子类型</font></p><p>例如:可以把null和undefined赋值给number类型的变量</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//以下都是正确的</span><span class="token keyword">let</span> tingbao<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> tingbao1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">let</span> tingbao2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> tingbao3<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token keyword">let</span> tingbao4<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> tingbao5<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">let</span> tingbao6<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> tingbao7<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></code></pre><h4 id="1-4-Nerver类型"><a href="#1-4-Nerver类型" class="headerlink" title="1.4 Nerver类型"></a>1.4 Nerver类型</h4><p>never类型表示的是那些永不存在的值的类型</p><p>✍这个严格来说算不上啥新的数据类型，只是开发者对于一类值所起的作用的判断而已</p><p><em>例:</em></p><p>​    总是会抛出异常，throw错误或是返回一个error类型的数据根本就不会有返回值的函数表达式(死循环函数)</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">noMeaning</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">never</span><span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">noMeaning</span><span class="token punctuation">(</span><span class="token string">"something Wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">infinity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"报错啦!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无限死循环</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>never类型是<code>任何类型</code>的子类型，也可以赋值给任何类型;</p><p>然而，没有类型是never的子类型或可以赋值给never类型（除了never本身之外)。<font style="color:red;">即使any也不可以赋值给never</font></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> zzy<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span><span class="token keyword">let</span> tingbao<span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>zzy <span class="token operator">=</span> <span class="token string">"大赵"</span><span class="token punctuation">;</span>tingbao <span class="token operator">=</span> <span class="token string">"婷宝儿"</span><span class="token punctuation">;</span><span class="token comment">//报错,never类型数据不能接受其他类型数据</span><span class="token comment">//正确,一个异常抛出函数就是never类型的</span>tingbao <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'wrong'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不报错,never类型变量可以赋值其他类型的变量</span>zzy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'wrong'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript数据类型01</title>
      <link href="posts/f547b227/"/>
      <url>posts/f547b227/</url>
      
        <content type="html"><![CDATA[<p><strong>typescript是一门编译型语言,微软创造.</strong></p><h3 id="1-typescript环境配置"><a href="#1-typescript环境配置" class="headerlink" title="1.typescript环境配置"></a>1.typescript环境配置</h3><h4 id="1-1-Node安装"><a href="#1-1-Node安装" class="headerlink" title="1.1 Node安装"></a>1.1 Node安装</h4><h4 id="1-2-在安装好node之后，在命令行工具中输入npm-install-g-typescript"><a href="#1-2-在安装好node之后，在命令行工具中输入npm-install-g-typescript" class="headerlink" title="1.2   在安装好node之后，在命令行工具中输入npm install -g typescript"></a>1.2   在安装好node之后，在命令行工具中输入npm install -g typescript</h4><p>⚠️ 记得在打开命令行工具时，右键管理员打开</p><p><img src="https://i.loli.net/2020/11/18/BVtbM9FydAojpJm.png" alt="ts.png" loading="lazy"></p><span id="more"></span><h4 id="1-3-检查安装成功与否"><a href="#1-3-检查安装成功与否" class="headerlink" title="1.3  检查安装成功与否:"></a>1.3  检查安装成功与否:</h4><p>cmd输入<code>tsc</code>,会出现version版本号和一大片命令提示,即表示安装成功.</p><p>😊TypeScript 是 JavaScript 的超集，<code>.js</code> 文件可以直接重命名为 <code>.ts</code> 即可</p><h3 id="2-typescript编译"><a href="#2-typescript编译" class="headerlink" title="2.typescript编译"></a>2.typescript编译</h3><blockquote><p>语法: tsc 文件名</p></blockquote><p>eg:新建一个ts文件  <code>demo.ts</code></p><p>终端输入 <code>tsc demo.ts</code>即可编译成js文件</p><p>✍因为Node环境安装完毕,就不需要去客户端运行js了,直接编译器本地运行js,命令<code>node 文件名</code></p><p><font  style="color:red;">如果编译完成后,ts文件变量等出现报错,删掉编译好的js文件所有代码即可,因为typescript会检测全局代码</font></p><h3 id="3-基础变量声明"><a href="#3-基础变量声明" class="headerlink" title="3.基础变量声明"></a>3.基础变量声明</h3><h4 id="3-1-let-变量-类型-值"><a href="#3-1-let-变量-类型-值" class="headerlink" title="3.1 let[变量]:[类型]=值;"></a>3.1 let[变量]:[类型]=值;</h4><p>这种方式实现的变量命名有一个好处，那就是赋值语句中等号右侧值的类型和等号左侧自行定义的值的类型必须得是完全一致的,否则会报错.</p><p>如果赋值的时候传入的是正确的数值,后期又重新赋值了错误类型的值,同样也会报错</p><p>简单理解:<code>数据类型,从一而终</code></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//不能将string类型分配给number类型</span><span class="token comment">//例1</span><span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token string">'婷宝儿'</span><span class="token comment">//例2</span><span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token string">"18"</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token string">"20"</span></code></pre><p>⚠️未设置变量类型,变量类型将被强行依据变量初始值类型定义</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//不能将string类型分配给number类型</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token string">"18"</span></code></pre><h4 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h4><p>let[变量]:[类型];</p><p>如果只是创造了变量并规定了类型，那么这个变量默认的值就是<code>undefined</code></p><p>如果只是写了一条没有确定的值的变量声明语句，那么这个值用起来的时候就是undefined,但是一旦后面有其他的新的赋值操作，还是会按照变量的<code>预设格式</code>来的</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//代码会执行,控制台输出语句</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"婷宝儿真漂亮!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span>a <span class="token operator">=</span> <span class="token string">"18"</span><span class="token punctuation">;</span><span class="token comment">//错误,a的变量类型是number类型</span>a <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//正确</span></code></pre><h3 id="4-Typescript的数据类型之enum和元祖类型"><a href="#4-Typescript的数据类型之enum和元祖类型" class="headerlink" title="4.Typescript的数据类型之enum和元祖类型"></a>4.Typescript的数据类型之enum和元祖类型</h3><h4 id="4-1元祖类型Tunple"><a href="#4-1元祖类型Tunple" class="headerlink" title="4.1元祖类型Tunple"></a>4.1元祖类型Tunple</h4><p>元组类型表示一个已知元素数量和类型的数组，各元素的类型不必相同</p><p>👍TypeScript有一个优点在于它在编译的时候会把代码中所有的代码错误都找出来,而不是像avaScript—处报错就会停止解析代码</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//数组a被定义死了数组长度和对应元素数据类型</span><span class="token keyword">let</span> a<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token punctuation">,</span>object<span class="token punctuation">,</span><span class="token builtin">boolean</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//初始值类型</span><span class="token comment">//不能将类型“number”分配给类型“[string，number，number，object,boolean]”</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//报错</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//源具有1 个元素，但目标需要5个。</span><span class="token comment">//源具有6个元素,但目标仅允许5个。</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"婷宝儿"</span><span class="token punctuation">,</span><span class="token number">1314</span><span class="token punctuation">,</span><span class="token number">520</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>boyfriend<span class="token operator">:</span><span class="token string">"zzy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token comment">//数据类型,长度一一匹配,正确</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"婷宝儿"</span><span class="token punctuation">,</span><span class="token number">1314</span><span class="token punctuation">,</span><span class="token number">520</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>boyfriend<span class="token operator">:</span><span class="token string">"zzy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span></code></pre><h4 id="4-2枚举类型enum"><a href="#4-2枚举类型enum" class="headerlink" title="4.2枚举类型enum"></a>4.2枚举类型enum</h4><h5 id="enum类型是对JavaScript标准数据类型的一个补充。像C-等其它语言一样，使用枚举类型可以为一组数值赋予变量名称。"><a href="#enum类型是对JavaScript标准数据类型的一个补充。像C-等其它语言一样，使用枚举类型可以为一组数值赋予变量名称。" class="headerlink" title="enum类型是对JavaScript标准数据类型的一个补充。像C#等其它语言一样，使用枚举类型可以为一组数值赋予变量名称。"></a>enum类型是对JavaScript标准数据类型的一个补充。像C#等其它语言一样，使用枚举类型可以为一组数值赋予变量名称。</h5><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color<span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123; '0': 'x', '1': 'y', '2': 'z', x: 0, y: 1, z: 2 &#125;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span></code></pre><p>编译后:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Color<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"z"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"z"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Color <span class="token operator">||</span> <span class="token punctuation">(</span>Color <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123; '0': 'x', '1': 'y', '2': 'z', x: 0, y: 1, z: 2 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span></code></pre><p>默认情况下，从0开始为元素编号。你也可以手动的指定成员的数值</p><p>如果只给第一个设置编号,那么这个将成为起始编号,如果每个都设置,<font style="color:tomato;">相当于手动设置每个元素的下标</font></p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color<span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>x<span class="token punctuation">,</span>Color<span class="token punctuation">.</span>y<span class="token punctuation">,</span>Color<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>编译后:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Color<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"z"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"z"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Color <span class="token operator">||</span> <span class="token punctuation">(</span>Color <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>x<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>y<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1,2,3</span></code></pre><p>如果改变中间值呐?</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color<span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span>z<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>x<span class="token punctuation">,</span>Color<span class="token punctuation">.</span>y<span class="token punctuation">,</span>Color<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>编译后:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Color<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"y"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"z"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"z"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Color <span class="token operator">||</span> <span class="token punctuation">(</span>Color <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>x<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>y<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0,9,10</span></code></pre><blockquote><h5 id="enum的值里面不能设置为对象-或是利用变量间接引用对象的值"><a href="#enum的值里面不能设置为对象-或是利用变量间接引用对象的值" class="headerlink" title="enum的值里面不能设置为对象,或是利用变量间接引用对象的值"></a>enum的值里面不能设置为对象,或是利用变量间接引用对象的值</h5></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//错误</span><span class="token keyword">enum</span> Color<span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>y<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>z<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//错误</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>q<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">enum</span> Color<span class="token punctuation">&#123;</span>red <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>o<span class="token punctuation">,</span>pink<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><blockquote><h5 id="枚举类型提供的一个便利是你可以由枚举的值得到它的名字。例如，我们知道数值为1，但是不确定它映射到color里的哪个名字，我们可以查找相应的名字"><a href="#枚举类型提供的一个便利是你可以由枚举的值得到它的名字。例如，我们知道数值为1，但是不确定它映射到color里的哪个名字，我们可以查找相应的名字" class="headerlink" title="枚举类型提供的一个便利是你可以由枚举的值得到它的名字。例如，我们知道数值为1，但是不确定它映射到color里的哪个名字，我们可以查找相应的名字:"></a>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。例如，我们知道数值为1，但是不确定它映射到color里的哪个名字，我们可以查找相应的名字:</h5></blockquote><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color<span class="token punctuation">&#123;</span>red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>green<span class="token punctuation">,</span>blue<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> colorName<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> Color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//green,因为上面代码它的值为2</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Color<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"green"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">;</span>    Color<span class="token punctuation">[</span>Color<span class="token punctuation">[</span><span class="token string">"blue"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Color <span class="token operator">||</span> <span class="token punctuation">(</span>Color <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> colorName <span class="token operator">=</span> Color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜鸡手写防抖/节流函数</title>
      <link href="posts/9f83443/"/>
      <url>posts/9f83443/</url>
      
        <content type="html"><![CDATA[<h3 id="1-防抖简窥"><a href="#1-防抖简窥" class="headerlink" title="1.防抖简窥"></a><font style="color:skyblue">1.防抖简窥</font></h3><h4 id="1-1-什么是防抖"><a href="#1-1-什么是防抖" class="headerlink" title="1.1 什么是防抖?"></a>1.1 什么是防抖?</h4><p>   防抖是触发高频事件后,n秒内函数只会执行一次, 如果n秒内高频事件再次触发,则会重新计算时间.</p><span id="more"></span><h4 id="1-2-为什么需要防抖节流"><a href="#1-2-为什么需要防抖节流" class="headerlink" title="1.2 为什么需要防抖节流?"></a>1.2 为什么需要防抖节流?</h4><p>我们在平时开发的时候,会有许多场景会<code>频繁触发事件</code>,比如搜索框实时发送请求,onmousemove,resize,onscroll, 由于此类事件会频繁触发,非常消耗浏览器性能和服务器性能,有时候,我们并不能或不想频繁触发事件,此时就需要用到函数的防抖和节流.</p><h4 id="1-3-防抖的原理"><a href="#1-3-防抖的原理" class="headerlink" title="1.3 防抖的原理"></a>1.3 防抖的原理</h4><p>事件响应函数在一段事件后才执行, 如果这段时间内在次调用内再次调用, 则重新计算执行时间,当预定时间内没有再次调用该函数,则执行事件处理逻辑函数.</p><p>下面是简单的防抖实现</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>wait</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 保存延时器的id, 用于清除延时器</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">// 保存返回函数内部this</span>        <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token comment">// 获取事件函数传递evnet对象参数</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除事件反复执行时的前一个延时器</span>        timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token comment">// 执行事件处理逻辑函数, 改变函数内部this并传参</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>wait<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>🍀进阶版我们可以给防抖函数添加第三个参数用来立即执行事件处理逻辑函数.而且可以取消操作.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>wait<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timeout<span class="token punctuation">,</span>result<span class="token punctuation">;</span><span class="token comment">// result 用于接受立即执行函数的返回值</span>    <span class="token keyword">let</span> <span class="token function-variable function">decounced</span> <span class="token operator">=</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span><span class="token comment">// 获取事件函数传递evnet对象参数</span>        <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">// 获取保存返回函数内部this</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除上一个延时器, 防止内存泄漏</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>immediate<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 将timeout与callNow建立联系, 当timeout有值时,此时callNow为false</span>            <span class="token comment">// 当timeout为null时,此时callNow为true</span>            <span class="token keyword">let</span> callNow <span class="token operator">=</span> <span class="token operator">!</span>timeout<span class="token punctuation">;</span><span class="token comment">// 用来判断是否立即执行</span>            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>                timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 当callNow为true时,立即执行</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 不会立即执行</span>             timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 返回立即执行函数的结果</span>        <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span>    <span class="token comment">//给返回的防抖处理函数添加一个取消防抖操作的方法</span>    decounced<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清空延时器, 取消防抖操作</span>        timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 由于上面的代码形成了闭包, 所有得手动清空timeout变量, 防止内存泄漏</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> decounced<span class="token punctuation">;</span> <span class="token comment">// 返回防抖处理函数</span></code></pre><h4 id="1-4-防抖的应用场景"><a href="#1-4-防抖的应用场景" class="headerlink" title="1.4 防抖的应用场景"></a>1.4 防抖的应用场景</h4><ol><li>搜索框输入查询</li><li>表单验证</li><li>按钮提交事件</li><li>浏览器滚动事件onscroll触发</li><li>浏览器窗口缩放, resize事件</li></ol><hr><h3 id="2-节流"><a href="#2-节流" class="headerlink" title="2. 节流"></a><font style="color:pink">2. 节流</font></h3><h4 id="2-1-什么是节流"><a href="#2-1-什么是节流" class="headerlink" title="2.1 什么是节流?"></a>2.1 什么是节流?</h4><p>节流指当高频事件触发时,稀释函数的执行频率,让其只会在n秒内执行一次.</p><p>映射到在我们日常生活中,我们咀嚼食物的频率是非常快的,但我们不可能咀嚼一口就把食物咽下去,我们通常只会在咀嚼的几秒后,才把食物咽下去.此时就相当于节流.</p><p>思路: 利用时间戳 第一版</p><p>我们通过每次事件响应函数触发时计算,当前的时间戳与老的时间戳的差,判断是否大于需要等待的时间,此时就触发函数,同时将新的时间戳的值赋值给老的时间戳, 用于计算下一次事件触发的响应时间</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>wait</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> content<span class="token punctuation">,</span>args<span class="token punctuation">;</span>    <span class="token comment">// 之前的时间戳</span>    <span class="token keyword">let</span> oldTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        content <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        args <span class="token operator">=</span> arguments        <span class="token comment">// 获取当前时间戳</span>        <span class="token keyword">let</span> nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果现在的时间和以前的时间间隔大于等待的时间</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nowTime <span class="token operator">-</span> oldTime <span class="token operator">></span> wait<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">// 立即执行</span>            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            oldTime <span class="token operator">=</span> nowTime        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们不难发现,上面的代码是不顾头,只顾尾的,也就是说事件触发函数的第一次会立即执行, 最后一次不会执行.</p><p>📖思路: 利用延时器setTimeout, 第二版</p><p>我们通过一个变量timeout来记录延时器的id,由于第一次默认值为fasle, 此时我们开启延时器并将其返回值赋值给timeout, 当延时器执行完毕时,将timeout赋值为null, 使下一次判断timeout时条件为true, 开启下一轮定时器.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span>wait</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> content<span class="token punctuation">,</span>args<span class="token punctuation">,</span> timeout<span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        content <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>          <span class="token comment">// 如果timeout没有值, 就开启延时器</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 延时器执行完之后清空timeout的值</span>                timeout <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="🐦2-2节流的应用场景"><a href="#🐦2-2节流的应用场景" class="headerlink" title="🐦2.2节流的应用场景"></a>🐦2.2节流的应用场景</h4><ol><li>DOM元素的拖拽功能实现</li><li>射击游戏</li><li>计算鼠标移动的距离</li><li>监听scroll事件</li></ol>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax代码笔记</title>
      <link href="posts/d00bb8c7/"/>
      <url>posts/d00bb8c7/</url>
      
        <content type="html"><![CDATA[<p>📖本博客内容依据<em>b站尚硅谷</em>ajax课程</p><h4 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a><code>服务器环境</code></h4><blockquote><p>Node</p><p>nodemon</p></blockquote><p><em>server.js</em></p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入express</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> response <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> access <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> request <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建应用对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建路由规则</span><span class="token comment">//request是对请求报文的封装</span><span class="token comment">//response是对响应报文的封装</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置响应头 设置允许跨域</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置响应体</span>    <span class="token comment">// response.send('hello express!');</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello ajax get-2!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置响应头 设置允许跨域</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//响应头--特殊</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置响应体</span>    <span class="token comment">// response.send('hello express!');</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello ajax post!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//all表示可以接收任意类型请求</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置响应头 设置允许跨域</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//响应头--特殊</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置响应体</span>    <span class="token comment">// response.send('hello express!');</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello ajax post!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/json-server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置响应头 设置允许跨域</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//响应头--特殊</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//响应一个数据</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'zy'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//将对象进行字符串转换</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置响应体</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//延时响应</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/delay'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置响应头 设置允许跨域</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">//设置响应体</span>        response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'延时响应'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token comment">//jquery服务 JQ发送ajax请求数据</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/jquery-server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置响应头 设置允许跨域</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// response.send('hello jquery ajax');</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'婷宝儿'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token string">'19'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token comment">//jquery服务 JQ通用请求</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/jquery-server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置响应头 设置允许跨域</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'婷宝儿-json'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//axios服务</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/axios-server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置响应头 设置允许跨域</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'婷宝儿-axios后端'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//fetch服务</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/fetch-server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置响应头 设置允许跨域</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'婷宝儿-fetch后端'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//jsonp服务</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/jsonp-server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取数据必须是js代码</span>    <span class="token comment">//    response.send(console.log('hello jsonp!'));</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'中国nb！--后端'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//将数据转化为字符串</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回结果</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">datashow(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/checkUsername'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        exist<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        msg<span class="token operator">:</span> <span class="token string">"用户名已将存在!"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//将数据转化为字符串</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回结果</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">datashow(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//jq jsonp</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/jquery-jsonp-server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">"zzy"</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>        city<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"湖北"</span><span class="token punctuation">,</span> <span class="token string">"广州"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//将数据转化为字符串</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//接收callback参数</span>    <span class="token keyword">let</span> cb <span class="token operator">=</span> request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback<span class="token punctuation">;</span>    <span class="token comment">//返回结果</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cb<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//jq cors</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/cors-server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置响应头</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Header'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Method'</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 特定网站/端口访问</span>    <span class="token comment">// response.setHeader('Access-Control-Allow-Origin',"http://127.0.0.1:8000/");</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"hello jquery cors!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//监听端口启动服务</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8000服务已经成功启动！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'8000服务启动失败！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="1-get-原生ajax"><a href="#1-get-原生ajax" class="headerlink" title="1.get  原生ajax"></a>1.get  原生ajax</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击发送请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//获取button元素</span>    <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//绑定事件</span>    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// console.log('success');</span>        <span class="token comment">//1.创建对象</span>        <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.初始化 设置请求方法和url</span>        <span class="token comment">// 接参数在url后以？开始，多个值用&amp;隔开</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:8000/server?name="婷宝儿"&amp;age=18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.发送</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.事件绑定 处理服务端返回的结果</span>        <span class="token operator">/</span>         on <span class="token operator">-</span><span class="token operator">></span> when 当<span class="token operator">...</span><span class="token punctuation">.</span>时        readystate 是xhr对象中的属性，表示状态  <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span>        change 改变        <span class="token operator">/</span>        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//判断（服务器返回结果）</span>            <span class="token operator">/</span>  存有 XMLHttpRequest 的状态。从 <span class="token number">0</span> 到 <span class="token number">4</span> 发生变化。             <span class="token number">0</span><span class="token operator">:</span> 请求未初始化             <span class="token number">1</span><span class="token operator">:</span> 服务器连接已建立             <span class="token number">2</span><span class="token operator">:</span> 请求已接收             <span class="token number">3</span><span class="token operator">:</span> 请求处理中             <span class="token number">4</span><span class="token operator">:</span> 请求已完成，且响应已就绪 <span class="token operator">/</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//判断响应状态码 2xx 3xxx 4xx 5xx</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//2xx 成功</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       <span class="token operator">/</span>  <span class="token comment">//处理结果 行 头 空行 体</span>                        <span class="token comment">//1.响应行 </span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"状态码结果："</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//响应状态字符串</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//所有响应头</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//响应体</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span>                        <span class="token comment">//设置result的文本</span>                        result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="2-post-原生ajax"><a href="#2-post-原生ajax" class="headerlink" title="2.post 原生ajax"></a>2.post 原生ajax</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//获取元素对象</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//绑定事件</span>        result<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseover"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// console.log("婷宝儿");</span>            <span class="token comment">//创建对象</span>            <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//初始化    设置类型与url</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:8000/server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置请求头</span>            <span class="token operator">/</span>             Content <span class="token operator">-</span> Type 设置请求体类型            application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded 请求体字符串数据类型 <span class="token operator">--</span>固定写法            <span class="token operator">/</span>            xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//自定义请求头</span>            xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'tingbao'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//发送</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'a=100&amp;b=200&amp;c=300'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// xhr.send('a=100&amp;b=200&amp;c=300');</span>            <span class="token comment">// xhr.send('a:100&amp;b:200&amp;c:300');</span>            <span class="token comment">//事件绑定</span>            xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//判断</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//处理服务器返回结果</span>                        result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="3-ajax网络超时与网络异常"><a href="#3-ajax网络超时与网络异常" class="headerlink" title="3.ajax网络超时与网络异常"></a>3.ajax网络超时与网络异常</h4><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击发送请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">       <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//超时请求</span>           xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">1500</span><span class="token punctuation">;</span>           <span class="token comment">//超时回调</span>           xhr<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"网络异常，请请稍候重试！"</span><span class="token punctuation">)</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//网络异常回调</span>           xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你的网络似乎出了什么问题...'</span><span class="token punctuation">)</span>           <span class="token punctuation">&#125;</span>           xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:8000/delay'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">//判断</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="4-ajax取消请求"><a href="#4-ajax取消请求" class="headerlink" title="4.ajax取消请求"></a>4.ajax取消请求</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">></span>点击发送<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button<span class="token operator">></span>点击取消<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">//获取元素对象</span>        <span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"http://127.0.0.1:8000/delay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//abort</span>            btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                x<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="5-ajax重复发送请求"><a href="#5-ajax重复发送请求" class="headerlink" title="5.ajax重复发送请求"></a>5.ajax重复发送请求</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">></span>点击发送<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>   <span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token comment">//获取元素对象</span>       <span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token comment">//标识变量</span>       <span class="token keyword">let</span> isSending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//是否正在发送ajax请求</span>       btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//判断标识变量</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>isSending<span class="token punctuation">)</span> x<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果正在发送请求，则取消请求，创建一个新的请求 </span>           x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//修改 标识变量值</span>           isSending <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"http://127.0.0.1:8000/delay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           x<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">//判断</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   isSending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">//abort</span>           btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               x<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="6-AJAX-服务端响应json"><a href="#6-AJAX-服务端响应json" class="headerlink" title="6.AJAX 服务端响应json"></a>6.AJAX 服务端响应json</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"result"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//绑定键盘按下事件</span>        window<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// console.log('test');</span>            <span class="token comment">//发送请求</span>            <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置响应体数据的类型</span>            xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'json'</span>            <span class="token comment">//初始化</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:8000/json-server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//发送</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//事件绑定</span>            xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//判断</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//处理服务器返回结果</span>                        <span class="token comment">//     console.log(xhr.response);</span>                        <span class="token comment">//    result.innerHTML = xhr.response;</span>                        <span class="token comment">//1.手动对数据进行转化</span>                        <span class="token comment">// let data = JSON.parse(xhr.response);</span>                        <span class="token comment">// console.log(data);</span>                        <span class="token comment">// result.innerHTML = data.name;</span>                        <span class="token comment">//2.自动转换</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                        result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="7-ajax-jquery发送ajax请求"><a href="#7-ajax-jquery发送ajax请求" class="headerlink" title="7.ajax-jquery发送ajax请求"></a><font style="color:skyblue">7.ajax-jquery发送ajax请求</font></h4><p>⚠️ 注意jquery引入</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jquery发送ajax请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>GET<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>POST<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>通用型方法AJAX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//get</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/jquery-server'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">'json'</span><span class="token punctuation">)</span><span class="token comment">//加json数据类型--data是对象</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//post</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/jquery-server'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//不加json数据类型--data是字符串</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><font style="color:skyblue">8.AJAX-jQuery通用方法发送AJAX请求</font></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>h2 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"page-header"</span><span class="token operator">></span>jquery发送ajax请求<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>       <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-primary"</span><span class="token operator">></span><span class="token constant">GET</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>       <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-success"</span><span class="token operator">></span><span class="token constant">POST</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>       <span class="token operator">&lt;</span>button <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn btn-warning"</span><span class="token operator">></span>通用型方法<span class="token constant">AJAX</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token comment">//get</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/jquery-server'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'json'</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//post</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/jquery-server'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//通用方法</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>               <span class="token comment">//url</span>               url<span class="token operator">:</span> <span class="token string">'http://127.0.0.1:8000/jquery-server'</span><span class="token punctuation">,</span>               <span class="token comment">//参数</span>               data<span class="token operator">:</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               <span class="token comment">//请求类型</span>               type<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>               <span class="token comment">//响应体结果</span>               dataType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>               <span class="token comment">//成功的回调</span>               <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               <span class="token comment">//超时时间</span>               timeout<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>               <span class="token comment">//失败的回调</span>               <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'出错啦！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               <span class="token comment">//设置头信息</span>               headers<span class="token operator">:</span><span class="token punctuation">&#123;</span>                   c<span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">,</span>                   d<span class="token operator">:</span><span class="token number">200</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="8-axios-发送-AJAX请求"><a href="#8-axios-发送-AJAX请求" class="headerlink" title="8.axios 发送 AJAX请求"></a><font style="color:gold">8.axios 发送 AJAX请求</font></h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//axios引入</span><span class="token operator">&lt;</span>script crossorigin<span class="token operator">=</span><span class="token string">"anonymous"</span> src<span class="token operator">=</span><span class="token string">"https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class="language-json" data-language="json"><code class="language-json">&lt;button>GET&lt;/button>    &lt;button>POST&lt;/button>    &lt;button>AJAX&lt;/button>    &lt;script>        <span class="token comment">// https://github.com/axios/axios</span>        const btns = document.querySelectorAll('button');        <span class="token comment">//配置 baseURL</span>        axios.defaults.baseURL = 'http<span class="token operator">:</span><span class="token comment">//127.0.0.1:8000';</span>        btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.onclick = function () <span class="token punctuation">&#123;</span>            <span class="token comment">//GET 请求</span>            axios.get('/axios-server'<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//url 参数</span>                params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    id<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                    vip<span class="token operator">:</span> '婷宝get'                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token comment">//请求头信息</span>                headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    name<span class="token operator">:</span> 'axios-get'<span class="token punctuation">,</span>                    age<span class="token operator">:</span> <span class="token number">20</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>).then(value => <span class="token punctuation">&#123;</span>                console.log(value);            <span class="token punctuation">&#125;</span>);        <span class="token punctuation">&#125;</span>                <span class="token comment">//通用方法</span>        btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>.onclick = function () <span class="token punctuation">&#123;</span>            axios.post('/axios-server'<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                username<span class="token operator">:</span> 'admin-婷宝儿'<span class="token punctuation">,</span>                password<span class="token operator">:</span> 'admin'            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//url </span>                params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    id<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>                    vip<span class="token operator">:</span> <span class="token number">9</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token comment">//请求头参数</span>                headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    height<span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span>                    weight<span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>);        <span class="token punctuation">&#125;</span>            btns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>.onclick = function()<span class="token punctuation">&#123;</span>            axios(<span class="token punctuation">&#123;</span>                <span class="token comment">//请求方法</span>                method <span class="token operator">:</span> 'POST'<span class="token punctuation">,</span>                <span class="token comment">//url</span>                url<span class="token operator">:</span> '/axios-server'<span class="token punctuation">,</span>                <span class="token comment">//url参数</span>                params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    vip<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>                    level<span class="token operator">:</span><span class="token number">30</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token comment">//头信息</span>                headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    a<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>                    b<span class="token operator">:</span><span class="token number">200</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token comment">//请求体参数</span>                data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    username<span class="token operator">:</span> 'admin-post'<span class="token punctuation">,</span>                    password<span class="token operator">:</span> 'admin'                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>).then(response=><span class="token punctuation">&#123;</span>                <span class="token comment">//响应状态码</span>                console.log(response.status);                <span class="token comment">//响应状态字符串</span>                console.log(response.statusText);                <span class="token comment">//响应头信息</span>                console.log(response.headers);                <span class="token comment">//响应体</span>                console.log(response.data);            <span class="token punctuation">&#125;</span>)        <span class="token punctuation">&#125;</span>    &lt;/script></code></pre><h4 id="9-fetch-发送-AJAX请求"><a href="#9-fetch-发送-AJAX请求" class="headerlink" title="9.fetch 发送 AJAX请求"></a><font style="color:gold">9.fetch 发送 AJAX请求</font></h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">></span><span class="token constant">AJAX</span>请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">//文档地址</span>        <span class="token comment">//https://developer.mozilla.org/zh-CN/docs/Web/API/WindowOrWorkerGlobalScope/fetch</span>                <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/fetch-server?vip=10'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//请求方法</span>                method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>                <span class="token comment">//请求头</span>                headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    name<span class="token operator">:</span><span class="token string">'tingbao'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token comment">//请求体</span>                body<span class="token operator">:</span> <span class="token string">'username=admin&amp;password=admin'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// return response.text();</span>                <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a><font style="color:lightpink;font-weight:blod;">同源策略</font></h4><p>总后端环境代码:<code>server.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> response <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> request <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//响应一个页面</span>    response<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/cors.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'cors后端数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//监听端口启动服务</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8008</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'cors服务已经成功启动！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'cors服务启动失败！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h5 id="1-cors-html实例1"><a href="#1-cors-html实例1" class="headerlink" title="1.cors.html实例1"></a>1.cors.html实例1</h5><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lightpink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>隔壁老王<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击获取数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//这里满足同源，所以url可以简写</span>            x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">'/data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//发送</span>            x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//</span>            x<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//判断</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>status <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//处理服务器返回结果</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h5 id="2-Jsonp"><a href="#2-Jsonp" class="headerlink" title="2.Jsonp"></a>2.Jsonp</h5><p>当前jsonp项目目录环境 <code>app.js</code></p><pre class="language-none"><code class="language-none">window.onload &#x3D; function () &#123;    const data &#x3D; &#123;        name: &#39;中国nb！&#39;    &#125;;    datashow(data);    console.log(data);&#125;</code></pre><h6 id="1-jsonp原理应用"><a href="#1-jsonp原理应用" class="headerlink" title="1.jsonp原理应用"></a>1.jsonp原理应用</h6><pre class="language-js" data-language="js"><code class="language-js">    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"result"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/app.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">//处理数据</span>        <span class="token keyword">function</span> <span class="token function">datashow</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http:127.0.0.1:8000/jsonp-server"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h6 id="2-jsonp案例"><a href="#2-jsonp案例" class="headerlink" title="2.jsonp案例"></a>2.jsonp案例</h6><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>body<span class="token operator">></span>            用户名<span class="token operator">:</span> <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"shuru"</span> type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入文本"</span><span class="token operator">></span>       <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">//获取页面元素</span>        <span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//声明datashow函数</span>        <span class="token keyword">function</span> <span class="token function">datashow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            input<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'1px soild red'</span><span class="token punctuation">;</span>            <span class="token comment">//修改p标签的提示文本信息</span>            p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span>msg<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                 <span class="token comment">//绑定事件</span>        input<span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取用户输入值</span>            <span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"前端数据:"</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//向后端服务发送请求,监测用户名是否存在</span>            <span class="token comment">// 1.创建script标签</span>            <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.设置src属性值</span>            script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http:127.0.0.1:8000/checkUsername'</span><span class="token punctuation">;</span>            <span class="token comment">//3.将script 插入页面中</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre><h6 id="3-jquery实现jsonp"><a href="#3-jquery实现jsonp" class="headerlink" title="3.jquery实现jsonp"></a>3.jquery实现jsonp</h6><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">#result</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid skyblue<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 20px auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#result:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px solid pink<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">button</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px auto <span class="token important">!important</span><span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid yellowgreen<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">button:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击发送jq-jsonp请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// callback必填</span>            $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">'http:127.0.0.1:8000/jquery-jsonp-server?callback=?'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                名称:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;br>                年龄:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;br>                城市:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">.</span>city<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">                </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h5 id="3-设置cors响应头实现跨域"><a href="#3-设置cors响应头实现跨域" class="headerlink" title="3.设置cors响应头实现跨域"></a>3.设置cors响应头实现跨域</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button<span class="token operator">></span>发送请求<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>   <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"result"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>script<span class="token operator">></span>       <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//创建对象</span>           <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//初始化设置</span>           x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>           <span class="token comment">//发送</span>           x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//绑定事件</span>           x<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>status <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                                          <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class="language-json" data-language="json"><code class="language-json">$.ajax() 基于原生JS的AJAX四步操作进行封装     $.ajax(<span class="token punctuation">[</span>URL<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span>)     $.ajax(<span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span>)  URL在配置项中（推荐）     $.get/post/getJSON/getScript()     ......  配置项信息     url<span class="token operator">:</span>请求的API接口地址     method<span class="token operator">:</span>HTTP请求方式，默认GET     data<span class="token operator">:</span>传递给服务器的信息，默认<span class="token null keyword">null</span>（可以是字符串，可以是对象，而且如果GET系列请求，JQ会自动把信息拼接到URL的末尾，基于问号传参传递给服务器；如果是POST请求，JQ会基于请求主体，把信息传递给服务器）     dataType<span class="token operator">:</span>预设服务器返回的结果格式（服务器返回的一般都是JSON格式的字符串，如果我们设置了DATA-TYPE，JQ会根据设置的类型，把服务器返回的结果处理为对应的格式），支持的内容text / json / xml / html / script / jsonp(跨域) =>不影响服务器返回的结果，只是把服务器返回的结果进行二次处理     async<span class="token operator">:</span>是否为异步操作，默认是TRUE，代表异步操作     cache<span class="token operator">:</span>缓存处理，只对GET系列请求有作用，默认是TRUE不处理缓存，当我们设置FALSE后，JQ帮我们在URL的末尾设置一个随机数     contentType<span class="token operator">:</span>设置传递给服务器内容的格式类型 默认是<span class="token string">"application/x-www-form-urlencoded"</span>         客户端传递给服务器信息的格式（类型一般都是字符串），常用的：         form-data表单数据：JSON格式 '<span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token property">"lx"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span>'         x-www-form-urlencoded：name=xxx&amp;lx=<span class="token number">1</span>         raw：纯文本格式     headers<span class="token operator">:</span>设置请求头信息，他是一个对象     timeout<span class="token operator">:</span>设置超时的时间     success<span class="token operator">:</span>回调函数，当数据请求成功执行，方法中的参数就是从服务器获取的结果     error<span class="token operator">:</span>回调函数，数据请求失败执行，方法中的参数是错误信息</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript基础之数据类型与转换</title>
      <link href="posts/77efdb5/"/>
      <url>posts/77efdb5/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li><a href="https://juejin.cn/post/6844903890794594318#%E4%B8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%A7%8D%E7%B1%BB">数据类型种类</a></li><li><a href="https://juejin.cn/post/6844903890794594318#%E4%BA%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">数据类型转换</a></li><li><a href="https://juejin.cn/post/6844903890794594318#%E4%B8%89%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD">数据类型判断</a></li></ul><span id="more"></span><h3 id="一、数据类型种类"><a href="#一、数据类型种类" class="headerlink" title="一、数据类型种类"></a>一、数据类型种类</h3><p>js 数据类型主要有 <code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Object</code>、<code>Null</code>、<code>Undefined</code>、<code>Symbol</code></p><p>值类型：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Symbol</code></p><p>引用类型：<code>Object</code></p><p>特殊类型：<code>Null</code>、<code>Undefined</code></p><h3 id="二、数据类型转换"><a href="#二、数据类型转换" class="headerlink" title="二、数据类型转换"></a>二、数据类型转换</h3><h4 id="2-1-数据类型转换表"><a href="#2-1-数据类型转换表" class="headerlink" title="2.1 数据类型转换表"></a>2.1 数据类型转换表</h4><table><thead><tr><th>值</th><th>字符串</th><th>数字</th><th>布尔值</th><th>对象</th></tr></thead><tbody><tr><td>undefined</td><td>“undefined”</td><td>NaN</td><td>false</td><td>throws TypeError</td></tr><tr><td>null</td><td>“null”</td><td>0</td><td>false</td><td>throws TypeError</td></tr><tr><td>true</td><td>“true”</td><td>1</td><td></td><td>new Boolean(true)</td></tr><tr><td>false</td><td>“false”</td><td>0</td><td></td><td>Boolean(false)</td></tr><tr><td>“”(空字符串)</td><td></td><td>0</td><td>false</td><td>new String(“”)</td></tr><tr><td>“1.2”(非空，数字)</td><td></td><td>1.2</td><td>true</td><td>new String(“”)</td></tr><tr><td>“none”(非空，非数字)</td><td></td><td>NaN</td><td>true</td><td>new String(“one”)</td></tr><tr><td>0</td><td>“0”</td><td></td><td>false</td><td>new Number(0)</td></tr><tr><td>-0</td><td>“0”</td><td></td><td>false</td><td>new Number(-0)</td></tr><tr><td>NaN</td><td>“NaN”</td><td></td><td>false</td><td>new Number(NaN)</td></tr><tr><td>Infinity</td><td>“Infinity”</td><td></td><td>true</td><td>new Number(Infinity)</td></tr><tr><td>-Infinity</td><td>“-Infinity”</td><td></td><td>true</td><td>new Number(-Infinity)</td></tr><tr><td>1(无穷大，非零)</td><td>“1”</td><td></td><td>true</td><td>new Number(1)</td></tr><tr><td>{}(任意对象)</td><td>调用对象的 toStirng()方法，如果值是原值则返回，否则，调用对象的 valueOf()方法，如果值是原值则返回，否则抛出 TypeError 错误</td><td>调用对象的 toValue()方法，如果值是原值则返回，否则，调用对象的 valueString()方法，如果值是原值则返回，否则抛出 TypeError 错误</td><td>true</td><td></td></tr><tr><td><a href="%E4%BB%BB%E6%84%8F%E6%95%B0%E7%BB%84"></a></td><td>“”</td><td>0</td><td>true</td><td></td></tr><tr><td><a href="1%E4%B8%AA%E6%95%B0%E5%AD%97%E5%85%83%E7%B4%A0">9</a></td><td>“9”</td><td>9</td><td>true</td><td></td></tr><tr><td><a href="%E5%85%B6%E4%BB%96%E6%95%B0%E7%BB%84">‘a’</a></td><td>使用 join()方法</td><td>NaN</td><td>true</td><td></td></tr><tr><td>function(){}(任意函数)</td><td>将用户定义的函数转换为 JavaScript 源 eadc 字符串</td><td>NaN</td><td>true</td><td></td></tr></tbody></table><h4 id="2-2-ToPrimitive"><a href="#2-2-ToPrimitive" class="headerlink" title="2.2 ToPrimitive"></a>2.2 ToPrimitive</h4><p>抽象操作ToPrimitive用于将引用类型转为原始类型。实现细节比较复杂，可以<a href="https://segmentfault.com/a/1190000016325587">参考这里</a>。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//模拟一个对象的转基本类型操作 ToPrimitive</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>o<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">hint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span> <span class="token comment">//hint字符串至为 string number default 中的一个</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hint <span class="token operator">==</span> <span class="token string">"default"</span> <span class="token operator">||</span> hint <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span>valueOf <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">valueof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span>toString <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">String</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment">// string</span><span class="token function">Number</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment">// number</span><span class="token number">1</span><span class="token operator">+</span>o <span class="token comment">// default</span><span class="token number">1</span><span class="token operator">-</span>o <span class="token comment">// number</span>o<span class="token operator">++</span> <span class="token comment">// number</span><span class="token operator">++</span>o <span class="token comment">// number</span>复制代码</code></pre><p>规则如下：</p><ul><li>如果传入参数是string（目前只有调用String()函数是执行这个顺序）：首先检查该值是否有toString()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就检查该值是否有valueOf()方法。如果有并且返回基本类型值就使用该回值来进行强制类型转换，如果没有或者返回的不是基本类型值，就抛出错误。</li><li>如果传入参数是number/default（常见强制类型转换都是这个顺序）：首先检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就检查该值是否有toString()方法。如果有并且返回基本类型值就使用该回值来进行强制类型转换，如果没有或者返回的不是基本类型值，就抛出错误。</li></ul><h4 id="2-3-ToString"><a href="#2-3-ToString" class="headerlink" title="2.3 ToString"></a>2.3 ToString</h4><p>抽象操作 ToString，负责处理非字符串到字符串的强制类型转换。当需要一个值的字符串形式，就会进行 ToString 类型转换。</p><p>String()函数就会执行抽象操作 ToString，遵循下列转换规则：</p><ul><li>如果值是基本类型，则直接转为字符串。如果是引用类型，则执行ToPrimitive抽象操作；</li><li>如果值是 null，则返回”null”；</li><li>如果值是 undefined，则返回”undefined”。</li></ul><h4 id="2-4-ToNumber"><a href="#2-4-ToNumber" class="headerlink" title="2.4 ToNumber"></a>2.4 ToNumber</h4><p>抽象操作 ToNumber，负责处理非数字到数字的强制类型转换。</p><p>Number()执行抽象操作 ToNumber，函数的转换规则如下。</p><ul><li>如果是 Boolean 值，true 和 false 将分别被转换为 1 和 0。</li><li>如果是数字值，只是简单的传入和返回。</li><li>如果是 null 值，返回 0。</li><li>如果是 undefined，返回 NaN。</li><li>如果是字符串：如果字符串是空的（不包含任何字符），则将其转换为0；如果含非数字，则将其转换为 NaN。</li><li>如果是对象，则执行ToPrimitive抽象操作，返回基本类型再按照以上规则处理。</li></ul><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'asdf'</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">// NaN    与null不同，需要注意</span><span class="token comment">// 对象会先通过抽象操作ToPrimitive转为基本类型，然后再转数字</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>复制代码</code></pre><h4 id="2-5-ToBoolean"><a href="#2-5-ToBoolean" class="headerlink" title="2.5 ToBoolean"></a>2.5 ToBoolean</h4><p>抽象操作 ToBoolean，负责处理非布尔值到布尔值的强制类型转换。</p><p>转换为 boolean 类型是最为简单的一个。转换规则如下：</p><p>(1) 可以被强制类型转换为 false 的值</p><ul><li>undefined</li><li>null</li><li>false</li><li>+0、-0 和 NaN</li><li>“”</li></ul><p>(2) 其他值会被被强制类型转换为 true</p><p>这里有一个概念需要先理解：js的操作符和操作数组成了表达式，表达式必定会返回一个值。无论是一元操作++a，还是布尔操作[] || false，都会返回一个值。</p><h4 id="2-6-相等运算符类型转换，一共有-12-步骤"><a href="#2-6-相等运算符类型转换，一共有-12-步骤" class="headerlink" title="2.6 相等运算符类型转换，一共有 12 步骤"></a>2.6 相等运算符类型转换，一共有 12 步骤</h4><ol><li>如果 y 不是正常值，中断执行。</li><li>如果 Type(x)与 Type(y)相同，执行严格相等运算 x === y。</li><li>如果 x 是 null，y 是 undefined，返回 true。</li><li>如果 x 是 undefined，y 是 null，返回 true。</li><li>如果 Type(x)是数值，Type(y)是字符串，返回 x == ToNumber(y)的结果。</li><li>如果 Type(x)是字符串，Type(y)是数值，返回 ToNumber(x) == y 的结果。</li><li>如果 Type(x)是布尔值，返回 ToNumber(x) == y 的结果。</li><li>如果 Type(y)是布尔值，返回 x == ToNumber(y)的结果。</li><li>如果 Type(x)是字符串或数值或 Symbol 值，Type(y)是对象，返回 x == ToPrimitive(y)的结果。</li><li>如果 Type(x)是对象，Type(y)是字符串或数值或 Symbol 值，返回 ToPrimitive(x) == y 的结果。</li><li>返回 false。</li></ol><p>理解如图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/7/16/16bfa22b510fb639?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img" loading="lazy"></p><h3 id="三、数据类型判断"><a href="#三、数据类型判断" class="headerlink" title="三、数据类型判断"></a>三、数据类型判断</h3><ul><li>typeof</li><li>Object.prototype.toString</li><li>Instanceof</li><li>Constructor</li><li>实现 type API</li></ul><h4 id="3-1-typeof"><a href="#3-1-typeof" class="headerlink" title="3.1 typeof"></a>3.1 typeof</h4><blockquote><p>typeof 是一元操作符，放在其单个操作数的前面，操作数可以是任意类型。返回值为表示操作数类型的一个字符串。</p></blockquote><p>typeof 不能细分 object,object 可以细分 Array、Function、Date、RegExp、Error 等。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token string">"undefined"</span> — 未定义<span class="token string">"boolean"</span>   — 布尔值<span class="token string">"string"</span>    — 字符串<span class="token string">"number"</span>    — 数值<span class="token string">"object"</span>    — 对象或<span class="token keyword">null</span><span class="token string">"function"</span>  — 函数复制代码</code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li>typeof可以判断基本类型和函数：<code>Number</code>,<code>String</code>,<code>Boolean</code>,<code>Undefined</code>,<code>symbol</code>,<code>BigInt</code>,<code>Function</code></li><li>无法判断<code>Null</code>，会返回Object</li><li>无法判断某个对象的具体类型，对于对象除了函数都会返回Object，比如数组类型会直接返回Object</li></ul><h4 id="3-2-Object-prototype-toString"><a href="#3-2-Object-prototype-toString" class="headerlink" title="3.2 Object.prototype.toString"></a>3.2 Object.prototype.toString</h4><p>当 toString 方法被调用的时候，下面的步骤会被执行：</p><ol><li>如果 this 值是 undefined，就返回 [object Undefined]</li><li>如果 this 的值是 null，就返回 [object Null]</li><li>让 O 成为 ToObject(this) 的结果</li><li>让 class 成为 O 的内部属性 [[Class]] 的值</li><li>最后返回由 “[object “ 和 class 和 “]” 三个部分组成的字符串</li></ol><h4 id="3-3-Instanceof"><a href="#3-3-Instanceof" class="headerlink" title="3.3 Instanceof"></a>3.3 Instanceof</h4><p>instanceof用于检测引用类型，可以检测到它是什么类型的实例。 instanceof 检测一个对象A是不是另一个对象B的实例的原理是：查看对象B的prototype指向的对象是否在对象A的[[prototype]]链上。如果在，则返回true,如果不在则返回false。不过有一个特殊的情况，当对象B的prototype为null将会报错(类似于空指针异常)。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> sXzaver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Xzavier"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sXzaver <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//  "true"</span><span class="token keyword">var</span> aXzaver <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aXzaver <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//  "true"</span>检测数组在<span class="token constant">ECMA</span> Script5中定义了一个新方法Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>复制代码</code></pre><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><ul><li>instanceof运算符用于判断对象的具体类型，不能判断7种基本类型的值。</li><li>上例可得：<code>a.__proto__</code> === <code>Array.prototype</code></li><li>Array 构造函数是继承自 Object 对象的，因此在 arr 变量上是可以访问到 Object 的 prototype 属性的，Object 构造函数的 prototype 属性存在与 arr 这个数组实例的原型链上，所以a也能判断为Object。</li></ul><h4 id="3-4-constructor"><a href="#3-4-constructor" class="headerlink" title="3.4 constructor"></a>3.4 constructor</h4><p>constructor属性返回对创建此对象的数组函数的引用。可以用于检测自定义类型。</p><pre class="language-js" data-language="js"><code class="language-js">    <span class="token string">'xz'</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> String <span class="token comment">// true</span>    <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Number <span class="token comment">// true</span>    <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Boolean <span class="token comment">// true</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Array <span class="token comment">// true</span>    <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xz'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Object <span class="token comment">// true</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Function <span class="token comment">// true</span>    <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Date <span class="token comment">// true</span>    <span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> Symbol <span class="token comment">// true</span>    <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xz</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">==</span> RegExp <span class="token comment">// true</span>复制代码</code></pre><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><ul><li><p>使用constructor判断变量类型的方法，非常高效</p></li><li><p>但是无法检测 null 或者 undefined 类型，null 和 undefined 根本就没有 constructor 属性</p></li><li><p>并且constructor 属性易变，不可信赖，这个主要体现在自定义对象上，当开发者重写prototype后，原有的constructor会丢失。</p><p><strong>ps：</strong>所以，重写对象原型时一般都需要重新给constructor赋值，以保证实例对象的类型不被改写。</p></li></ul><h4 id="3-5-Object-prototype-toString-call"><a href="#3-5-Object-prototype-toString-call" class="headerlink" title="3.5 Object.prototype.toString.call()"></a>3.5 Object.prototype.toString.call()</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">原理：调用从Object继承来的原始的toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'xz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"[object String]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"[object Number]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"[object Boolean]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"[object Array]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'xz'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"[object Object]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"[object Function]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"[object Null]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"[object Undefined]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"[object Undefined]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"[object Date]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">xz</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//"[object RegExp]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"[object Symbol]"</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"Xzavier"</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isType</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">isType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "Object" </span><span class="token function">isType</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">// "Array"  </span>复制代码</code></pre><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><p>最可靠的方法，赛高✿✿ヽ(°▽°)ノ✿</p><h4 id="实现-type-API"><a href="#实现-type-API" class="headerlink" title="实现 type API"></a>实现 type API</h4><p>既然有了 Object.prototype.toString 这个神器！那就让我们写个 type 函数帮助我们以后识别各种类型的值了。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> class2type <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 生成class2type映射</span><span class="token string">"Boolean Number String Function Array Date RegExp Object Error"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    class2type<span class="token punctuation">[</span><span class="token string">"[object "</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 一箭双雕</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> obj <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span>        class2type<span class="token punctuation">[</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">"object"</span> <span class="token operator">:</span>        <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><p><a href="https://juejin.cn/post/6844904136673230862#heading-21">https://juejin.cn/post/6844904136673230862#heading-21</a></p><p><a href="https://juejin.cn/post/6898692204433244174#heading-35">https://juejin.cn/post/6898692204433244174#heading-35</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery_Note1</title>
      <link href="posts/f2632dcb/"/>
      <url>posts/f2632dcb/</url>
      
        <content type="html"><![CDATA[<h3 id="一、JQuery了解"><a href="#一、JQuery了解" class="headerlink" title="一、JQuery了解"></a>一、JQuery了解</h3><h4 id="1-原生JS的问题"><a href="#1-原生JS的问题" class="headerlink" title="1 .原生JS的问题"></a>1 .原生JS的问题</h4><p>我们会发现原生的JS编程很麻烦,尤其在兼容性的问题</p><blockquote><ol><li>选择元素,权限兼容的只有getElementById和getElementsByTagName;其他方法都有兼容问题</li><li>样式操作也有兼容问题,还得我们自己封装，封装getStyle（）</li><li>动画也麻烦,也得自己封装，封装animation（）</li><li>HTML节点操作也挺麻烦的</li></ol></blockquote><p>JS里面麻烦的都是和DOM编程有关的,有兼容问题,还的我们自己封装.</p><p>jQuery是原生JS封装的,简化了JS的DOM编程，完美的解决了原生js在DOM操作上的难题</p><h4 id="2-JQuery"><a href="#2-JQuery" class="headerlink" title="2. JQuery"></a>2. JQuery</h4><p>口号:</p><p>​    写更少的代码，做更多的事情</p><p>官方自我介绍:</p><p>​    jQuery是一个快速、小型的、特性很多的JS库，它把很多事儿都变得简单。jQuery是免费的、开源的。</p><p>官方网址：<a href="https://jquery.com/">jquery.com/</a></p><p>版本：</p><ul><li>1x:兼容IE6~8低版本浏览器，官网不再更新</li><li>2x:不兼容IE6~8低版本浏览器，官网不再在更新</li><li>3x:不兼容IE6~8低版本浏览器，是官方主要更新维护的版本</li></ul><p>各个版本的下载：<a href="https://code.jquery.com/">code.jquery.com/</a></p><p>jQuery分压缩版和未压缩版</p><h3 id="二、-选择器"><a href="#二、-选择器" class="headerlink" title="二、 $()   选择器"></a>二、 $()   选择器</h3><p>$ 就是jQuery的核心，query就是选择的意思</p><blockquote><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>$(‘选择器’)，jQuery(‘选择器’)</p><p>$可以用jQuery代替，$和jQuery是同一个函数</p><p>选中某个或某类元素</p></blockquote><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">p</span> <span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jQuery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="1-选择出来的是一个类数组"><a href="#1-选择出来的是一个类数组" class="headerlink" title="1. $() 选择出来的是一个类数组"></a>1. $() 选择出来的是一个类数组</h4><p>哪怕选择的是一个单独的元素,返回的也是一个类数组</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [div#box]</span></code></pre><p>既然是类数组，就不能直接跟原生js的语法</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span></code></pre><p>上面写法是错的，$()选出的是jQuery对象，</p><p>如果想使用元素方法，可以加[0]，将jQuery对象转成元素对象</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span></code></pre><h4 id="2-使用方法（引号问题）"><a href="#2-使用方法（引号问题）" class="headerlink" title="2.  使用方法（引号问题）"></a>2.  使用方法（引号问题）</h4><p>$(‘选择器’)里面的引号不能丢，在jQuery中只有是以下几个不用加引号，其他全部需要</p><p>不需要加引号的选择</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></code></pre><h4 id="3-选择器问题"><a href="#3-选择器问题" class="headerlink" title="3. 选择器问题"></a>3. 选择器问题</h4><p>jQuery支持的CSS2.1所有选择器,也支持部分CSS3的选择器</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box li'</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span></code></pre><h4 id="4-文档加载"><a href="#4-文档加载" class="headerlink" title="4. 文档加载"></a>4. 文档加载</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 文档加载完毕后执行</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 简写方案</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="三-筛选器"><a href="#三-筛选器" class="headerlink" title="三. 筛选器"></a>三. 筛选器</h3><p>这个是jQuery 的发明 和js没有关系</p><p>写在引号里面,:当成筛选的功能符</p><p>以下都是序号，筛选器,</p><h4 id="1-选择所有的p标签"><a href="#1-选择所有的p标签" class="headerlink" title="1.  选择所有的p标签"></a>1.  选择所有的p标签</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-选择第一个p标签"><a href="#2-选择第一个p标签" class="headerlink" title="2. 选择第一个p标签"></a>2. 选择第一个p标签</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:first'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:first'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-最后一个p标签"><a href="#3-最后一个p标签" class="headerlink" title="3. 最后一个p标签"></a>3. 最后一个p标签</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:last'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:last'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-任意一个p标签"><a href="#4-任意一个p标签" class="headerlink" title="4. 任意一个p标签"></a>4. 任意一个p标签</h4><p>: eq(num)； num是要筛选出来第几个p的下标，从0开始</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:eq(2)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:eq(2)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-选中某一个范围的p标签"><a href="#5-选中某一个范围的p标签" class="headerlink" title="5. 选中某一个范围的p标签"></a>5. 选中某一个范围的p标签</h4><p>:lt(num)；  选中下标小于num的所有标签</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:lt(2)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:lt(2)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>:gt(num);  选中下标大于num的所有标签</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:gt(2)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:gt(2)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>等于就是:eq()</p><h4 id="6-获取奇偶数"><a href="#6-获取奇偶数" class="headerlink" title="6. 获取奇偶数"></a>6. 获取奇偶数</h4><p>:odd  获取下标为奇数的标签</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:odd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:odd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>:even  获取下标为偶数的标签</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:even'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:even'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意哦</p><p>下标是从0开始的，也就是说下标为偶数的标签其实是我们看起来的奇数标签</p></blockquote><h4 id="7-特别的过滤器的方法"><a href="#7-特别的过滤器的方法" class="headerlink" title="7. 特别的过滤器的方法"></a>7. 特别的过滤器的方法</h4><h5 id="7-1-eq可以单独的提炼为方法，可以连续打点调用"><a href="#7-1-eq可以单独的提炼为方法，可以连续打点调用" class="headerlink" title="7.1  eq可以单独的提炼为方法，可以连续打点调用"></a>7.1  eq可以单独的提炼为方法，可以连续打点调用</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>提炼出来的好处是，可以使用变量</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不提炼出来的方法，只用用字符串拼接了</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:gt('</span><span class="token operator">+</span> num <span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还可以组合使用</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:even'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="7-2-first-last-筛选第一个最后一个元素的方法"><a href="#7-2-first-last-筛选第一个最后一个元素的方法" class="headerlink" title="7.2 first()  last()  筛选第一个最后一个元素的方法"></a>7.2 first()  last()  筛选第一个最后一个元素的方法</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span></code></pre><h5 id="7-3-not-排除那些元素"><a href="#7-3-not-排除那些元素" class="headerlink" title="7.3 not() 排除那些元素"></a>7.3 not() 排除那些元素</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token string">'.ta'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span></code></pre><h5 id="7-4-hasClass-判断是否具有某个类名"><a href="#7-4-hasClass-判断是否具有某个类名" class="headerlink" title="7.4 hasClass() 判断是否具有某个类名"></a>7.4 hasClass() 判断是否具有某个类名</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'ta'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="8-is"><a href="#8-is" class="headerlink" title="8. is()"></a>8. is()</h4><p>判断是不是返回true,或false</p><p>判断点击的这个p标签是不是有这个类叫做t</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">'.t'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="四-序与迭代"><a href="#四-序与迭代" class="headerlink" title="四. 序与迭代"></a>四. 序与迭代</h3><h4 id="1-序号-eq"><a href="#1-序号-eq" class="headerlink" title="1. 序号 eq()"></a>1. 序号 eq()</h4><p>按照选择器选中的元素,然后在通过序号挑选</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box2 p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//按照需要的规则,上面两种写法选中并不是同一个p标签</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>也就是说 $()函数将返回一个对象队列,用eq来精确选择这个序号的某个元素.</p><h4 id="2-index-方法"><a href="#2-index-方法" class="headerlink" title="2. index() 方法"></a>2. index() 方法</h4><p>返回这个元素在亲兄弟中的排名,无视选择器怎么选.</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>$(this).index()是一个很常见的写法,表示触发这个事件的元素,在亲兄弟中的排名.</p><p>利用index()方法写对应</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 事件绑定在box1里面的p</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box1 p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 改变的是box2里面的对应的p</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box2 p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="3-each-方法-迭代"><a href="#3-each-方法-迭代" class="headerlink" title="3. each() 方法   迭代"></a>3. each() 方法   迭代</h4><p>表示遍历节点,也叫作迭代符合条件的节点</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// i 为遍历的下标 0,1,2...</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="4-size-方法-和-length-属性"><a href="#4-size-方法-和-length-属性" class="headerlink" title="4. size() 方法 和 length 属性"></a>4. size() 方法 和 length 属性</h4><p>size() 方法和 length 属性是一样的的, 获取jQuery对象中元素的个数.</p><p>这两个数字永远相同</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="5-get-方法"><a href="#5-get-方法" class="headerlink" title="5. get() 方法"></a>5. get() 方法</h4><p>get()方法和eq()方法基本一致,都仰赖$()的序列,eq()返回的是jQuery对象.</p><p>而get()方法返回原生的JS元素,类似于直接jQuery元素加[0]</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></code></pre><h3 id="五-CSS-方法"><a href="#五-CSS-方法" class="headerlink" title="五. CSS 方法"></a>五. CSS 方法</h3><p>CSS方法可以读取样式，可以设置样式</p><h4 id="1-读取样式值"><a href="#1-读取样式值" class="headerlink" title="1.  读取样式值"></a>1.  读取样式值</h4><p>读取样式，可以读取计算后的样式，写一个参数，为获取值的属性</p><p>参数为属性字符串，必须加引号</p><p>读取的值有单位</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:first'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-设置一个属性值"><a href="#2-设置一个属性值" class="headerlink" title="2. 设置一个属性值"></a>2. 设置一个属性值</h4><p>如果只设置一个属性值，需要穿两个参数，</p><p>第一个参数为需要设置值的属性</p><p>第二个参数为需要设置的值，如果为数值，不需要加单位，</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:first'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span>，<span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:first'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-同时设置多个属性值"><a href="#3-同时设置多个属性值" class="headerlink" title="3. 同时设置多个属性值"></a>3. 同时设置多个属性值</h4><p>如果想要同时设置多个属性值，可以写成JSON</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:lt(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'width'</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">'height'</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">'background-color'</span><span class="token operator">:</span> <span class="token string">'blue'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然你也可以写多条单独设置样式</p><h4 id="4-设置的属性可以多样"><a href="#4-设置的属性可以多样" class="headerlink" title="4. 设置的属性可以多样"></a>4. 设置的属性可以多样</h4><p>设置的属性不仅可以为改变后的值，还可以设置+= 的值，就是在原有的基础上加多少像素</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:eq(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span><span class="token string">'+=20px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:eq(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span><span class="token string">'+=20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 以上两种写法一样</p><h4 id="5-设置获取自定义属性attr"><a href="#5-设置获取自定义属性attr" class="headerlink" title="5. 设置获取自定义属性attr()"></a>5. 设置获取自定义属性attr()</h4><h5 id="5-1-获取自定义属性"><a href="#5-1-获取自定义属性" class="headerlink" title="5.1  获取自定义属性"></a>5.1  获取自定义属性</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'data-title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="5-2-设置自定义属性"><a href="#5-2-设置自定义属性" class="headerlink" title="5.2 设置自定义属性"></a>5.2 设置自定义属性</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'data-title'</span><span class="token punctuation">,</span><span class="token string">'wuwei'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="6-关于class类名"><a href="#6-关于class类名" class="headerlink" title="6. 关于class类名"></a>6. 关于class类名</h4><h5 id="6-1-添加类名-addClass"><a href="#6-1-添加类名-addClass" class="headerlink" title="6.1 添加类名 addClass()"></a>6.1 添加类名 addClass()</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span></code></pre><h5 id="6-2-删除类名-removeClass"><a href="#6-2-删除类名-removeClass" class="headerlink" title="6.2 删除类名 removeClass()"></a>6.2 删除类名 removeClass()</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span></code></pre><h5 id="6-3-切换类名-toggleClass"><a href="#6-3-切换类名-toggleClass" class="headerlink" title="6.3 切换类名 toggleClass()"></a>6.3 切换类名 toggleClass()</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="7-关于节点值"><a href="#7-关于节点值" class="headerlink" title="7. 关于节点值"></a>7. 关于节点值</h4><h5 id="7-1-html"><a href="#7-1-html" class="headerlink" title="7.1 html()"></a>7.1 html()</h5><p>就是innerHTML,只设置筛选出来的第一个符合条件的元素.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;h2>this is h2&lt;/h2>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置值</span></code></pre><h5 id="7-2-text"><a href="#7-2-text" class="headerlink" title="7.2 text()"></a>7.2 text()</h5><p>就是innerText</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'&lt;h2>this is h2&lt;/h2>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置值</span></code></pre><h3 id="六-节点关系"><a href="#六-节点关系" class="headerlink" title="六. 节点关系"></a>六. 节点关系</h3><h4 id="1-children"><a href="#1-children" class="headerlink" title="1.  children()"></a>1.  children()</h4><p>选中所有的子元素</p><p>表示选取亲儿子,不选择后代,选择所有的子元素</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>选择所有子元素中的div元素</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span></code></pre><p>还可以添加筛选器</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'div:odd'</span><span class="token punctuation">)</span></code></pre><p>odd:奇数   even:偶数</p><h4 id="2-find"><a href="#2-find" class="headerlink" title="2. find()"></a>2. find()</h4><p>查询所有的后代选择器</p><p>返回后代所有元素的列表</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span></code></pre><p>注意,和children()方法不一样,find()方法里面,必须写参数,表示后代的谁,</p><p>find就是寻找的意思,就是你找后代里的谁</p><h4 id="3-parent"><a href="#3-parent" class="headerlink" title="3. parent()"></a>3. parent()</h4><p>找父元素,任何一个元素只有一个父元素,</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="4-parents"><a href="#4-parents" class="headerlink" title="4. parents()"></a>4. parents()</h4><p>找所有的祖先元素,可以传参数,找哪一个祖先</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span></code></pre><h4 id="5-siblings"><a href="#5-siblings" class="headerlink" title="5. siblings()"></a>5. siblings()</h4><p>找所有的亲兄弟元素节点</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>可以加选择器</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span></code></pre><h4 id="6-prev-next-prevAll-nextAll"><a href="#6-prev-next-prevAll-nextAll" class="headerlink" title="6. prev()  next() prevAll() nextAll()"></a>6. prev()  next() prevAll() nextAll()</h4><p>前一个兄弟,后一个兄弟,前所有的兄弟,后所有的兄弟元素节点</p><h4 id="7-offsetParent"><a href="#7-offsetParent" class="headerlink" title="7.  offsetParent()"></a>7.  offsetParent()</h4><p>查找定位父级</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offsetParent</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span></code></pre><h3 id="七-节点操作"><a href="#七-节点操作" class="headerlink" title="七.  节点操作"></a>七.  节点操作</h3><h4 id="1-append-相当于原生JS中的appendChild"><a href="#1-append-相当于原生JS中的appendChild" class="headerlink" title="1. append()  //相当于原生JS中的appendChild()"></a>1. append()  //相当于原生JS中的appendChild()</h4><p>在父元素后面添加子节点</p><p>父节点.append(子节点)</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;p>好的&lt;/p>'</span><span class="token punctuation">)</span></code></pre><p>如果插入的是原来就有的节点,则是移动节点.</p><h5 id="1-2-可以将一个普通的节点字符串转成jQuery对象"><a href="#1-2-可以将一个普通的节点字符串转成jQuery对象" class="headerlink" title="1.2 $()可以将一个普通的节点字符串转成jQuery对象"></a>1.2 $()可以将一个普通的节点字符串转成jQuery对象</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> $p <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;p>this is p&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不能这么写 ,下面的写法是选择文档中的p标签了</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span></code></pre><h5 id="1-3-创建节点"><a href="#1-3-创建节点" class="headerlink" title="1.3  创建节点"></a>1.3  创建节点</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;p>&lt;/p>'</span><span class="token punctuation">)</span></code></pre><p>$()不仅仅能选择节点也能创建节点</p><h4 id="2-appendTo"><a href="#2-appendTo" class="headerlink" title="2. appendTo()"></a>2. appendTo()</h4><p>将一个jQuery元素添加到另外一个元素中</p><p>和append()方法是相反的,被动形式,追加于</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;p>好的&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>将子元素插入到一个父节点中去.</p><h4 id="3-prepend"><a href="#3-prepend" class="headerlink" title="3. prepend()"></a>3. prepend()</h4><p>在父元素最前面添加节点元素</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">'&lt;p>好的&lt;/p>'</span><span class="token punctuation">)</span><span class="token comment">//在#box所有 子节点的最前面添加&lt;p>好的&lt;/p></span></code></pre><h4 id="4-prependTo"><a href="#4-prependTo" class="headerlink" title="4. prependTo()"></a>4. prependTo()</h4><p>prependTo()被动形式插入到父元素节点最前面</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;p>好的&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prependTo</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>将$(‘<p>好的</p>‘) 插入到$(‘#box’)的所有子节点的最前面</p><h4 id="5-after"><a href="#5-after" class="headerlink" title="5. after()"></a>5. after()</h4><p>在选中的元素后面插入一个兄弟元素节点</p><p>所有p标签后面插入一个h3兄弟元素</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">'&lt;h3>我是h3标签&lt;/h3>'</span><span class="token punctuation">)</span><span class="token comment">//在$('p')的后面插入一个兄弟元素'&lt;h3>我是h3标签&lt;/h3>'</span></code></pre><h4 id="6-before"><a href="#6-before" class="headerlink" title="6. before()"></a>6. before()</h4><p>在前面插入一个兄弟元素节点</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">'&lt;h3>我是h3标签&lt;/h3>'</span><span class="token punctuation">)</span><span class="token comment">//在$('p')的前面插入一个兄弟元素'&lt;h3>我是h3标签&lt;/h3>'</span></code></pre><h4 id="7-insertBefore"><a href="#7-insertBefore" class="headerlink" title="7.insertBefore()"></a>7.insertBefore()</h4><p>不同于原生的方法,在兄弟节点前插入新的节点</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;p>好的&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//$('&lt;p>好的&lt;/p>')插入到$('p')[2]之前</span><span class="token comment">//相当于与原生js中 父节点.insetbefore(new,old)</span></code></pre><h4 id="8-wrap"><a href="#8-wrap" class="headerlink" title="8. wrap()"></a>8. wrap()</h4><p>给选中的元素外边添加一个包裹元素</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">'&lt;p>&lt;/p>'</span><span class="token punctuation">)</span><span class="token comment">//在$('div')外面包装一个p标签</span></code></pre><h4 id="9-wrapAll"><a href="#9-wrapAll" class="headerlink" title="9. wrapAll()"></a>9. wrapAll()</h4><p>将所有的选中的元素外套一个元素</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrapAll</span><span class="token punctuation">(</span><span class="token string">'&lt;p>&lt;/p>'</span><span class="token punctuation">)</span><span class="token comment">//将所有的div用一个p标签包裹起来,千万不要跨层级使用,否则会剪切不同层级的元素到一起</span></code></pre><h4 id="10-replaceWith"><a href="#10-replaceWith" class="headerlink" title="10. replaceWith()"></a>10. replaceWith()</h4><p>将选中的元素替换掉,元素节点替换</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span><span class="token string">'&lt;p>&lt;/p>'</span><span class="token punctuation">)</span> <span class="token comment">//p标签替换div标签</span></code></pre><h4 id="11-empty"><a href="#11-empty" class="headerlink" title="11. empty()"></a>11. empty()</h4><p>清空元素里面的内容</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//清空子节点</span></code></pre><h4 id="12-remove"><a href="#12-remove" class="headerlink" title="12. remove()"></a>12. remove()</h4><p>删除节点,删除页面上所有的p标签</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回值为删除的节点</span></code></pre><h4 id="13-clone"><a href="#13-clone" class="headerlink" title="13. clone"></a>13. clone</h4><p>节点克隆</p><p>参数为布尔值,不传参数默认为false</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true表示要克隆div元素身上的事件 </span><span class="token comment">//不论是true还是flase都复制后代节点</span><span class="token comment">//复制的是jquery的事件</span></code></pre><p> 原生js中parent.cloneNode(true)传入true复制子代节点,false不复制子代节点.事件都不会克隆.</p><h3 id="八-事件监听"><a href="#八-事件监听" class="headerlink" title="八.  事件监听"></a>八.  事件监听</h3><h4 id="1-通过事件名绑定事件"><a href="#1-通过事件名绑定事件" class="headerlink" title="1. 通过事件名绑定事件"></a>1. 通过事件名绑定事件</h4><p>在jQuery里面,就连点击事件都变成回调函数了,</p><p>事件名一律不加on</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 这里就是点击box1要做的事情</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>例子:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 鼠标进入</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseenter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 鼠标离开</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseleave</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="2-通过on绑定事件"><a href="#2-通过on绑定事件" class="headerlink" title="2. 通过on绑定事件"></a>2. 通过on绑定事件</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 这里就是点击box1要做的事情</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="3-解除事件绑定off"><a href="#3-解除事件绑定off" class="headerlink" title="3. 解除事件绑定off"></a>3. 解除事件绑定off</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span></code></pre><h4 id="4-只绑定一次事件one"><a href="#4-只绑定一次事件one" class="headerlink" title="4. 只绑定一次事件one()"></a>4. 只绑定一次事件one()</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 这里就是点击box1要做的事情</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="5-移入移出事件"><a href="#5-移入移出事件" class="headerlink" title="5. 移入移出事件"></a>5. 移入移出事件</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.box1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 鼠标移入触发</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 鼠标移出触发</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="6-事件对象事件源"><a href="#6-事件对象事件源" class="headerlink" title="6. 事件对象事件源"></a>6. 事件对象事件源</h4><p>e.target 获取的是元素的DOM元素</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 原生DOM元素</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="九-animate-方法"><a href="#九-animate-方法" class="headerlink" title="九. animate 方法"></a>九. animate 方法</h3><p>动画方法 animate</p><h4 id="1-animate-方法的使用"><a href="#1-animate-方法的使用" class="headerlink" title="1.  animate 方法的使用"></a>1.  animate 方法的使用</h4><p>第一个参数：终点JSON</p><p>第二个参数： 动画运行的时间，毫秒</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:eq(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'margin-top'</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-动画运行完的回调函数"><a href="#2-动画运行完的回调函数" class="headerlink" title="2.  动画运行完的回调函数"></a>2.  动画运行完的回调函数</h4><p>第三个参数为动画运行完后的参数</p><p>背景颜色是不能在动画里渐变的,只有在回调里完成,如果想让颜色慢慢渐变需要使用css3技术.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:eq(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'margin-top'</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span>，<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// alert('运行完成')；</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span>；<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>jQuery动画默认不是匀速的 ，是easeInOut</p><h4 id="3-动画排队"><a href="#3-动画排队" class="headerlink" title="3.  动画排队"></a>3.  动画排队</h4><h5 id="3-1-同一个元素的不同动画会排队"><a href="#3-1-同一个元素的不同动画会排队" class="headerlink" title="3.1. 同一个元素的不同动画会排队"></a>3.1. 同一个元素的不同动画会排队</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:eq(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'top'</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:eq(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'left'</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>jQuery的动画和我们封装的不一样，不是斜着走的，而是先向下运动，结束后在向右移动</p><p>因为jQuery默认有一个处理机制，叫做 动画排队</p><p>动画排队：</p><p>当一个元素接收到了两个animate命令后，后面的animate会排队</p><p>所以上面的动画，先竖着跑在横着跑，总动画时长为4000毫秒</p><p>如果想斜着跑就写在一个animate里面</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p:eq(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'top'</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token string">'left'</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 我们自己封装的动画方法不如它的原因就在这里，没有动画排队</p><h5 id="3-2-不同的元素动画不会排队-是同时的"><a href="#3-2-不同的元素动画不会排队-是同时的" class="headerlink" title="3.2. 不同的元素动画不会排队 是同时的"></a>3.2. 不同的元素动画不会排队 是同时的</h5><p>这里的p选择的是多个元素，不排队同时运行动画</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'top'</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="十-动画相关的方法"><a href="#十-动画相关的方法" class="headerlink" title="十. 动画相关的方法"></a>十. 动画相关的方法</h3><h4 id="1-内置的show-hide-toggle-方法"><a href="#1-内置的show-hide-toggle-方法" class="headerlink" title="1. 内置的show(),hide(),toggle()方法"></a>1. 内置的show(),hide(),toggle()方法</h4><p>show()显示,hide()隐藏,toggle()切换</p><p>使用方法:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">[</span>time<span class="token punctuation">[</span><span class="token punctuation">,</span>callback<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>参数都是可选的</p><h5 id="1-1-没有参数的时候"><a href="#1-1-没有参数的时候" class="headerlink" title="1.1 没有参数的时候"></a>1.1 没有参数的时候</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 让div元素显示</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 让div元素隐藏,添加display:none</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 切换显示状态,自行带有判断,如果显示,则隐藏,如果隐藏则显示</span></code></pre><h5 id="1-2-如果有数值参数-将变为动画-第一个参数为运动速度或时间"><a href="#1-2-如果有数值参数-将变为动画-第一个参数为运动速度或时间" class="headerlink" title="1.2 如果有数值参数,将变为动画,第一个参数为运动速度或时间"></a>1.2 如果有数值参数,将变为动画,第一个参数为运动速度或时间</h5><p>速度单词,fast normal, slow ,参数为字符串</p><p>如果传入的为时间,则单位为毫秒数</p><p>让元素在显示与影藏之间动画运动1s,还有透明度变换,</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从左上角徐徐展开</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 徐徐缩小到左上角,运动完成添加display:none</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 切换显示状态,自行带有判断,如果显示,则隐藏,如果隐藏则显示</span></code></pre><h5 id="1-3-第二个参数为运动完成后的回调"><a href="#1-3-第二个参数为运动完成后的回调" class="headerlink" title="1.3  第二个参数为运动完成后的回调"></a>1.3  第二个参数为运动完成后的回调</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(0)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 动画运行完执行的回调函数</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="2-slideDown-slideUp-slideToggle"><a href="#2-slideDown-slideUp-slideToggle" class="headerlink" title="2. slideDown(),slideUp(),slideToggle()"></a>2. slideDown(),slideUp(),slideToggle()</h4><p>滑动,卷帘运动,这个动画改变的就只有元素的高度</p><p>使用方法:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">[</span>time<span class="token punctuation">[</span><span class="token punctuation">,</span>fn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>参数都是可选的</p><h5 id="2-1-不加参数的情况"><a href="#2-1-不加参数的情况" class="headerlink" title="2.1 不加参数的情况"></a>2.1 不加参数的情况</h5><p>slideDown()方法的动画机理</p><blockquote><p>一个display:none;的元素,瞬间显示,瞬间高度变为0,然后jQuery自己捕捉原有的height作为动画的重点.</p><p>最好不要用行内元素做动画</p><p>等价于:</p><p>$(‘div’).show();                                                  //  瞬间显示</p><p>var oldHeight = $(‘div’).css(‘height’);             //  记住原有高度</p><p>$(‘div’).css(‘height’:0);                        //   将高度设置为0</p><p>$(‘div’).animate({‘height’:oldHeight},1000);  // 执行高度从0到原有高度的动画</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 下滑展开</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 上滑收回</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 滑动切换</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(0)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(1)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(2)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h5 id="2-2-第一个参数为运动速度或时间"><a href="#2-2-第一个参数为运动速度或时间" class="headerlink" title="2.2 第一个参数为运动速度或时间"></a>2.2 第一个参数为运动速度或时间</h5><p>速度单词,fast normal, slow ,参数为字符串</p><p>如果传入的为时间,则单位为毫秒数</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-3-第二个参数为回调函数"><a href="#2-3-第二个参数为回调函数" class="headerlink" title="2.3 第二个参数为回调函数"></a>2.3 第二个参数为回调函数</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-4-结合上面两种方法自动执行"><a href="#2-4-结合上面两种方法自动执行" class="headerlink" title="2.4 结合上面两种方法自动执行"></a>2.4 结合上面两种方法自动执行</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="3-fadeIn-fadeOut-fadeTo-fadeToggle"><a href="#3-fadeIn-fadeOut-fadeTo-fadeToggle" class="headerlink" title="3. fadeIn(),fadeOut(),fadeTo(),fadeToggle();"></a>3. fadeIn(),fadeOut(),fadeTo(),fadeToggle();</h4><p>淡入淡出的一系列方法</p><p>如果元素有opacity属性,一定要理解,你所设置的opacity值为,淡入的终点值,如果你设置为0,那么元素将永远淡入不了;</p><p>fadeIn()  动画机理:</p><blockquote><p>一个display:none的元素,瞬间可见,然后透明度瞬间变为opacity:0,然后自己的opacity开始变换,如果自己没有设置opacity,就变为1</p></blockquote><h5 id="3-1-不加参数执行淡入淡出"><a href="#3-1-不加参数执行淡入淡出" class="headerlink" title="3.1  不加参数执行淡入淡出"></a>3.1  不加参数执行淡入淡出</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 淡入</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 淡出 </span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 淡入到哪个数字,不传参数没效果,最好是时间和最终的opacity值一样设置.</span><span class="token comment">// 这个比较特殊,如果起点至比较大,就是淡出,起点值小,就是淡入</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 淡入淡出切换</span></code></pre><h5 id="3-2-第一个参数为速度或时间"><a href="#3-2-第一个参数为速度或时间" class="headerlink" title="3.2  第一个参数为速度或时间"></a>3.2  第一个参数为速度或时间</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 淡入过程1000完成</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 淡出 </span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 第一参数为过渡时间,第二个但是才是淡入到哪个数字</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 淡入淡出切换</span></code></pre><h5 id="3-3-第二个参数是回调函数"><a href="#3-3-第二个参数是回调函数" class="headerlink" title="3.3  第二个参数是回调函数"></a>3.3  第二个参数是回调函数</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </code></pre><p>比较特殊的是fadeTo()</p><p>fadeTo() 方法第二个参数是,透明度变换的终点值,第三个参数才是回调函数</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><h4 id="4-stop-停止动画"><a href="#4-stop-停止动画" class="headerlink" title="4. stop() 停止动画"></a>4. stop() 停止动画</h4><p>关于动画停止一共有四种,不同的参数情况不同</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只停止当前动画,不停止动画对列</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//停止当前动画,并停止动画对列</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//事件触发之时瞬间停止当前动画并到达原预定位置,同时停                   止动画队列.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>##### 总结会发现<span class="token punctuation">,</span>第一个参数为是否清除动画队列<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>清除动画队列<span class="token punctuation">,</span><span class="token boolean">false</span>不清除动画队列第二个参数为<span class="token punctuation">,</span>停止当前animate动画<span class="token punctuation">,</span>停止后动画的位置<span class="token punctuation">,</span><span class="token boolean">true</span>为<span class="token punctuation">,</span>瞬间结束动画<span class="token punctuation">,</span>动画停止后位置为当前动画的终点<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>停止动画值<span class="token punctuation">,</span>元素停留在停止动画的位置</code></pre><h5 id="4-1-stop-没有参数的情况"><a href="#4-1-stop-没有参数的情况" class="headerlink" title="4.1 stop()没有参数的情况"></a>4.1 stop()没有参数的情况</h5><p>stop ()停止动画如果没有参数,则表示停止当前的animate动画,但是不清除动画队列,立即执行后面的animate动画</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-2-stop-true"><a href="#4-2-stop-true" class="headerlink" title="4.2 stop(true)"></a>4.2 stop(true)</h5><p>停止当前animate动画,并且清除动画队列,盒子此时留在停止动画时的位置</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-3-stop-true-true"><a href="#4-3-stop-true-true" class="headerlink" title="4.3 stop(true,true)"></a>4.3 stop(true,true)</h5><p>停止当前animate动画,盒子瞬间停当前animate动画的终点位置,并且清除动画队列,</p><p>可以理解为瞬间执行完当前动画,并且清除动画队列</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-4-stop-false-true"><a href="#4-4-stop-false-true" class="headerlink" title="4.4 stop(false,true)"></a>4.4 stop(false,true)</h5><p>瞬间完成当前的animate动画,但是不会清除动画队列,并且执行后面的动画,</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>有人可能会有疑问,为什么没有stop(true,false);</p><p> 其实stop(true),就是stop(true,false);后面的false可以省略,</p><p>现在就明白了,stop()就是stop(false,false);</p><h5 id="总结会发现"><a href="#总结会发现" class="headerlink" title="总结会发现,"></a>总结会发现,</h5><p>第一个参数为是否清除动画队列,true,清除动画队列,false不清除动画队列</p><p>第二个参数为,停止当前animate动画,停止后动画的位置,true为,瞬间结束动画,动画停止后位置为当前动画的终点,false,停止动画值,元素停留在停止动画的位置</p><p>动画案例:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">div</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop(true)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop(true,true)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop(false,true)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jQuery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 添加四个动画</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'left'</span><span class="token operator">:</span><span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'top'</span><span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'left'</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'top'</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(0)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(1)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(2)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="4-5-stop-可以用来防止动画积累"><a href="#4-5-stop-可以用来防止动画积累" class="headerlink" title="4.5 stop()可以用来防止动画积累"></a>4.5 stop()可以用来防止动画积累</h5><p>每次点击都会在动画队列里添加一个动画,动画会排队</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(0)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'left'</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(1)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'left'</span><span class="token operator">:</span><span class="token number">900</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>就像定时器,设表先关</p><p>用动画先关闭前面的动画</p><p>可以连续打点的调用,先清除动画队列,再行新的动画</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(0)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'left'</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(1)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'left'</span><span class="token operator">:</span><span class="token number">900</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="5-finish"><a href="#5-finish" class="headerlink" title="5. finish()"></a>5. finish()</h4><p>瞬间完成所有动画队列</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input:eq(4)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="6-deley"><a href="#6-deley" class="headerlink" title="6. deley()"></a>6. deley()</h4><p>延迟,可以使用连续打点,必须放在运动语句之前</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'left'</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意hide()不加参数,就不是动画,是瞬间完成的,加参数哪怕数字1也是动画</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="7-is-“-animted”"><a href="#7-is-“-animted”" class="headerlink" title="7. is(“:animted”)"></a>7. is(“:animted”)</h4><p>判断一个元素是否在运动中,可以防止动画积累</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div:eq(3)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'width'</span><span class="token operator">:</span><span class="token number">900</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">':animated'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> jq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery_Note</title>
      <link href="posts/e47f544/"/>
      <url>posts/e47f544/</url>
      
        <content type="html"><![CDATA[<h2 id="jquery的入口函数"><a href="#jquery的入口函数" class="headerlink" title="jquery的入口函数"></a>jquery的入口函数</h2><p>使用jQuery的三个步骤：</p><ol><li>引入jQuery文件</li><li>入口函数</li><li>功能实现</li></ol><p>关于jQuery的入口函数：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//第一种写法</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种写法</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>jQuery入口函数与js入口函数的对比：</p><ol><li>JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。</li><li>jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment">//1.$是什么?</span>  <span class="token comment">//如果报了这个错误:$ is not defined,就说明没有引入jQuery文件.</span>  <span class="token comment">// $(function () &#123;</span>  <span class="token comment">//</span>  <span class="token comment">// &#125;);</span>  <span class="token comment">//2.jQuery文件结构.</span>  <span class="token comment">//其实是一个自执行函数.</span>  <span class="token comment">// (function()&#123;</span>  <span class="token comment">//   window.jQuery = window.$ = jQuery;</span>  <span class="token comment">// &#125;());</span>  <span class="token comment">//3.</span>  <span class="token comment">//a.引入一个js文件,是会执行这js文件中的代码的.</span>  <span class="token comment">//console.log(num);//10</span>  <span class="token comment">//b.jQuery文件是一个自执行函数,执行这个jQUERY文件中的代码,其实就是执行这个自执行函数.</span>  <span class="token comment">//c.这个自执行文件就是给window对象添加一个jQuery属性和$属性.</span>  <span class="token comment">//console.log(window);</span>  <span class="token comment">//d.$其实和jQuery是等价的,是一个函数.</span>  <span class="token comment">// console.log(window.jQuery === window.$);//true</span>  <span class="token comment">// console.log(Object.prototype.toString.call($));//'[object Function]'</span>  <span class="token comment">//4.$是一个函数</span>  <span class="token comment">//参数传递不同,效果也不一样.</span>  <span class="token comment">//4.1 如果参数传递的是一个匿名函数-入口函数</span>  <span class="token comment">// $(function()&#123;</span>  <span class="token comment">// &#125;);</span>  <span class="token comment">//4.2 如果参数传递的是一个字符串-选择器/创建一个标签</span>  <span class="token comment">//$('#one');</span>  <span class="token comment">//$('&lt;div>啦啦,我是一个div&lt;/div>');</span>  <span class="token comment">//4.3 如果参数是一个dom对象,那他就会把dom对象转换成jQuery对象.</span>  <span class="token comment">//$(dom对象);</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h2 id="jq对象和dom对象-重要"><a href="#jq对象和dom对象-重要" class="headerlink" title="jq对象和dom对象(重要)"></a>jq对象和dom对象(重要)</h2><ol><li>DOM对象：使用JavaScript中的方法获取页面中的元素返回的对象就是dom对象。</li><li>jQuery对象：jquery对象就是使用jquery的方法获取页面中的元素返回的对象就是jQuery对象。</li><li>jQuery对象其实就是DOM对象的包装集<strong>包装了DOM对象的集合（伪数组）</strong></li><li>DOM对象与jQuery对象的方法不能混用。</li></ol><p>DOM对象转换成jQuery对象：【联想记忆：花钱】</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> $obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>domObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// $(document).ready(function()&#123;&#125;);就是典型的DOM对象转jQuery对象</span></code></pre><p>jQuery对象转换成DOM对象：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> $li <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一种方法（推荐使用）</span>$li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">//第二种方法</span>$li<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h2 id="jquery选择器"><a href="#jquery选择器" class="headerlink" title="jquery选择器"></a>jquery选择器</h2><h3 id="什么是jQuery选择器"><a href="#什么是jQuery选择器" class="headerlink" title="什么是jQuery选择器"></a>什么是jQuery选择器</h3><ul><li>jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。<br>注意：jQuery选择器返回的是jQuery对象。</li><li>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多扩展性的选择器。<br>【查看jQuery文档】</li><li>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。<br>所以我们平时真正能用到的只是少数的最常用的选择器。</li></ul><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(“#id”);</td><td>获取指定ID的元素</td></tr><tr><td>类选择器</td><td>$(“.class”);</td><td>获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(“div”);</td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(“div,p,li”);</td><td>使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>$(“div.redClass”);</td><td>获取class为redClass的div元素</td></tr></tbody></table><blockquote><p>总结：跟css的选择器用法一模一样。</p></blockquote><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(“ul&gt;li”);</td><td>使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”);</td><td>使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr></tbody></table><blockquote><p>总结：跟css的选择器用法一模一样。</p></blockquote><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:eq（index）</td><td>$(“li:eq(2)”).css(“color”, ”red”);</td><td>获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td></tr><tr><td>:odd</td><td>$(“li:odd”).css(“color”, ”red”);</td><td>获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”).css(“color”, ”red”);</td><td>获取到的li元素中，选择索引号为偶数的元素</td></tr></tbody></table><blockquote><p>总结：这类选择器都带冒号</p></blockquote><h3 id="筛选选择器-方法"><a href="#筛选选择器-方法" class="headerlink" title="筛选选择器(方法)"></a>筛选选择器(方法)</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(“ul”).children(“li”)</td><td>相当于$(“ul&gt;li”)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(“li”);</td><td>相当于$(“ul li”),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“#first”).siblings(“li”);</td><td>查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(“#first”).parent();</td><td>查找父亲</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2);</td><td>相当于$(“li:eq(2)”),index从0开始</td></tr><tr><td>next()</td><td>$(“li”).next()</td><td>找下一个兄弟</td></tr><tr><td>prev()</td><td>$(“li”).prev()</td><td>找上一次兄弟</td></tr></tbody></table><blockquote><p>总结：筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。</p></blockquote><h2 id="元素设置"><a href="#元素设置" class="headerlink" title="元素设置"></a>元素设置</h2><h3 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1.设置一个样式*/</span><span class="token comment">//两个参数  设置的样式属性,具体样式</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传入对象（设置的样式属性:具体样式）</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'color'</span><span class="token operator">:</span><span class="token string">'red'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*2.设置多个样式*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'color'</span><span class="token operator">:</span><span class="token string">'green'</span><span class="token punctuation">,</span>    <span class="token string">'font-size'</span><span class="token operator">:</span><span class="token string">'20px'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="类名设置"><a href="#类名设置" class="headerlink" title="类名设置"></a>类名设置</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1.添加一个类*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*2.删除一个类*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*3.切换一个类  有就删除没有就添加*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*4.匹配一个类  判断是否包含某个类  如果包含返回true否知返回false*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1.获取属性*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*2.设置属性*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*3.设置多个属性*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'name'</span><span class="token operator">:</span><span class="token string">'tom'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token operator">:</span><span class="token string">'18'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*4.删除属性*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="prop方法"><a href="#prop方法" class="headerlink" title="prop方法"></a>prop方法</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*对于布尔类型的属性，不要attr方法，应该用prop方法 prop用法跟attr方法一样。*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeProp</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="基本动画"><a href="#基本动画" class="headerlink" title="基本动画"></a>基本动画</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*注意：动画的本质是改变容器的大小和透明度*/</span><span class="token comment">/*注意：如果不传参数是看不到动画*/</span><span class="token comment">/*注意：可传入特殊的字符  fast normal slow*/</span><span class="token comment">/*注意：可传入数字 单位毫秒*/</span><span class="token comment">/*1.展示动画*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*2.隐藏动画*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*3.切换展示和隐藏*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="滑入滑出"><a href="#滑入滑出" class="headerlink" title="滑入滑出"></a>滑入滑出</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*注意：动画的本质是改变容器的高度*/</span><span class="token comment">/*1.滑入动画*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*2.滑出动画*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*3.切换滑入滑出*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*注意：动画的本质是改变容器的透明度*/</span><span class="token comment">/*1.淡入动画*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*2.淡出动画*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*3.切换淡入淡出*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token string">'speed'</span><span class="token punctuation">,</span><span class="token string">'opacity'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** 自定义动画* 参数1：需要做动画的属性* 参数2：需要执行动画的总时长* 参数3：执行动画的时候的速度* 参数4：执行动画完成之后的回调函数* */</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>left<span class="token operator">:</span><span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>left<span class="token operator">:</span><span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token string">'linear'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>left<span class="token operator">:</span><span class="token number">800</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token string">'swing'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动画执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="动画队列"><a href="#动画队列" class="headerlink" title="动画队列"></a>动画队列</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*jQuery中有个动画队列的机制。当我们对一个对象添加多次动画效果时后添加的动作就会被放入这个动画队列中，  等前面的动画完成后再开始执行。可是用户的操作往往都比动画快，  如果用户对一个对象频繁操作时不处理动画队列就会造成队列堆积，影响到效果。*/</span></code></pre><h3 id="stop使用"><a href="#stop使用" class="headerlink" title="stop使用"></a>stop使用</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1.停止当前动画  如果动画队列当中还有动画立即执行*/</span><span class="token comment">//$('div').stop();</span><span class="token comment">/*2.和stop()效果一致  说明这是默认设置*/</span><span class="token comment">//$('div').stop(false,false);</span><span class="token comment">/*3.停止当前动画  清除动画队列*/</span><span class="token comment">//$('div').stop(true,false);</span><span class="token comment">/*4.停止当前动画并且到结束位置  清除了动画队列*/</span><span class="token comment">//$('div').stop(true,true);</span><span class="token comment">/*5.停止当前动画并且到结束位置  如果动画队列当中还有动画立即执行*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*创建节点*/</span><span class="token keyword">var</span> $a <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="http://www.baidu.com" target="_blank">百度1&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*如果想克隆事件  false  true克隆事件*/</span><span class="token keyword">var</span> $cloneP <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="添加-amp-移动节点"><a href="#添加-amp-移动节点" class="headerlink" title="添加&amp;移动节点"></a>添加&amp;移动节点</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*追加自身的最后面  传对象和html格式代码*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="http://www.baidu.com" target="_blank">&lt;b>百度3&lt;/b>&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*追加到目标元素最后面  传目标元素的选择器或者对象*/</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="http://www.baidu.com" target="_blank">&lt;b>百度3&lt;/b>&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">prependTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="删除节点-amp-清空节点"><a href="#删除节点-amp-清空节点" class="headerlink" title="删除节点&amp;清空节点"></a>删除节点&amp;清空节点</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*1.清空box里面的元素*/</span><span class="token comment">/* 清理门户 */</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*2.删除某个元素*/</span><span class="token comment">/* 自杀 */</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="jQuery特殊属性操作"><a href="#jQuery特殊属性操作" class="headerlink" title="jQuery特殊属性操作"></a>jQuery特殊属性操作</h2><h3 id="val方法"><a href="#val方法" class="headerlink" title="val方法"></a>val方法</h3><blockquote><p>val方法用于设置和获取表单元素的值，例如input、textarea的值</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//设置值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="html方法与text方法"><a href="#html方法与text方法" class="headerlink" title="html方法与text方法"></a>html方法与text方法</h3><blockquote><p>html方法相当于innerHTML text方法相当于innerText</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//设置内容</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;span>这是一段内容&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取内容</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//设置内容</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'&lt;span>这是一段内容&lt;/span>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取内容</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>区别：html方法会识别html标签，text方法会那内容直接当成字符串，并不会识别html标签。</p><h3 id="width方法与height方法"><a href="#width方法与height方法" class="headerlink" title="width方法与height方法"></a>width方法与height方法</h3><blockquote><p>设置或者获取高度</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//带参数表示设置高度</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不带参数获取高度</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取网页的可视区宽高</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//获取可视区宽度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取可视区高度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="scrollTop与scrollLeft"><a href="#scrollTop与scrollLeft" class="headerlink" title="scrollTop与scrollLeft"></a>scrollTop与scrollLeft</h3><blockquote><p>设置或者获取垂直滚动条的位置</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//获取页面被卷曲的高度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取页面被卷曲的宽度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="offset方法与position方法"><a href="#offset方法与position方法" class="headerlink" title="offset方法与position方法"></a>offset方法与position方法</h3><blockquote><p>offset方法获取元素距离document的位置，position方法获取的是元素距离有定位的父元素的位置。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取相对于其最近的有定位的父元素的位置。</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="jQuery事件机制"><a href="#jQuery事件机制" class="headerlink" title="jQuery事件机制"></a>jQuery事件机制</h2><blockquote><p>JavaScript中已经学习过了事件，但是jQuery对JavaScript事件进行了封装，增加并扩展了事件处理机制。jQuery不仅提供了更加优雅的事件处理语法，而且极大的增强了事件的处理能力。</p></blockquote><h3 id="jQuery事件发展历程-了解"><a href="#jQuery事件发展历程-了解" class="headerlink" title="jQuery事件发展历程(了解)"></a>jQuery事件发展历程(了解)</h3><p>简单事件绑定&gt;&gt;bind事件绑定&gt;&gt;delegate事件绑定&gt;&gt;on事件绑定(推荐)</p><blockquote><p>简单事件注册</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">click</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token comment">//单击事件</span><span class="token function">mouseenter</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token comment">//鼠标进入事件</span><span class="token function">mouseleave</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token comment">//鼠标离开事件</span></code></pre><p>缺点：不能同时注册多个事件</p><blockquote><p>bind方式注册事件</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//第一个参数：事件类型</span><span class="token comment">//第二个参数：事件处理程序</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"click mouseenter"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//事件响应方法</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>缺点：不支持动态事件绑定</p><blockquote><p>delegate注册委托事件</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一个参数：selector，要绑定事件的元素</span><span class="token comment">// 第二个参数：事件类型</span><span class="token comment">// 第三个参数：事件处理函数</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".parentBox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//为 .parentBox下面的所有的p标签绑定事件</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>缺点：只能注册委托事件，因此注册时间需要记得方法太多了</p><blockquote><p>on注册事件</p></blockquote><h3 id="on注册事件-重点"><a href="#on注册事件-重点" class="headerlink" title="on注册事件(重点)"></a>on注册事件(重点)</h3><blockquote><p>jQuery1.7之后，jQuery用on统一了所有事件的处理方法。</p><p>最现代的方式，兼容zepto(移动端类似jQuery的一个库)，强烈建议使用。</p></blockquote><p>on注册简单事件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>on注册委托事件</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">"click"</span><span class="token punctuation">,</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>on注册事件的语法：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）</span><span class="token comment">// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。</span><span class="token comment">// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）</span><span class="token comment">// 第四个参数：handler，事件处理函数</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span><span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h3><blockquote><p>unbind方式（不用）</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//解绑所有的事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//解绑指定的事件</span></code></pre><blockquote><p>undelegate方式（不用）</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//解绑所有的delegate事件</span><span class="token function">$</span><span class="token punctuation">(</span> selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span> <span class="token string">'click'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//解绑所有的click事件</span></code></pre><blockquote><p>off方式（推荐）</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 解绑匹配元素的所有事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解绑匹配元素的所有click事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//触发 click事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="jQuery事件对象"><a href="#jQuery事件对象" class="headerlink" title="jQuery事件对象"></a>jQuery事件对象</h3><p>jQuery事件对象其实就是js事件对象的一个封装，处理了兼容性。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//screenX和screenY对应屏幕最左上角的值</span><span class="token comment">//clientX和clientY距离页面左上角的位置（忽视滚动条）</span><span class="token comment">//pageX和pageY距离页面最顶部的左上角的位置（会计算滚动条的距离）</span><span class="token comment">//event.keyCode按下的键盘代码</span><span class="token comment">//event.data存储绑定事件时传递的附加数据</span><span class="token comment">//event.stopPropagation()阻止事件冒泡行为</span><span class="token comment">//event.preventDefault()阻止浏览器默认行为</span><span class="token comment">//return false:既能阻止事件冒泡，又能阻止浏览器默认行为。</span></code></pre><h2 id="jQuery补充知识点"><a href="#jQuery补充知识点" class="headerlink" title="jQuery补充知识点"></a>jQuery补充知识点</h2><h3 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h3><blockquote><p>通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 jQuery对象。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 筛选选择器会改变jQuery对象的DOM对象，想要回复到上一次的状态，并且返回匹配元素之前的状态。</span></code></pre><h3 id="each方法"><a href="#each方法" class="headerlink" title="each方法"></a>each方法</h3><blockquote><p>jQuery的隐式迭代会对所有的DOM对象设置相同的值，但是如果我们需要给每一个对象设置不同的值的时候，就需要自己进行迭代了。</p></blockquote><p>作用：遍历jQuery对象集合，为每个匹配的元素执行一个函数</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 参数一表示当前元素在所有匹配元素中的索引号</span><span class="token comment">// 参数二表示当前元素（DOM对象）</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span>element</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h3><blockquote><p>jQuery使用作 为 标 示 符 ， 但 是 如 果 与 其 他 框 架 中 的 作为标示符，但是如果与其他框架中的作为标示符，但是如果与其他框架中的冲突时，jQuery可以释放$符的控制权.</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> c <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">noConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放$的控制权,并且把$的能力给了c</span></code></pre><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><blockquote><p>插件：jquery不可能包含所有的功能，我们可以通过插件扩展jquery的功能。</p><p>jQuery有着丰富的插件，使用这些插件能给jQuery提供一些额外的功能。</p></blockquote><ol><li>jquery.color.js</li></ol><blockquote><p>animate不支持颜色的渐变，但是使用了jquery.color.js后，就可以支持颜色的渐变了。</p></blockquote><p>使用插件的步骤</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1. 引入jQuery文件</span><span class="token comment">//2. 引入插件（如果有用到css的话，需要引入css）</span><span class="token comment">//3. 使用插件</span></code></pre><p> 2.jquery.lazyload.js</p><blockquote><p>懒加载插件</p></blockquote><h3 id="jquery-ui-js插件"><a href="#jquery-ui-js插件" class="headerlink" title="jquery.ui.js插件"></a>jquery.ui.js插件</h3><p>jQueryUI专指由jQuery官方维护的UI方向的插件。</p><p>官方API：<a href="http://api.jqueryui.com/category/all/">http://api.jqueryui.com/category/all/</a></p><p>其他教程：<a href="http://www.runoob.com/jqueryui/jqueryui-tutorial.html">jQueryUI教程</a></p><p>基本使用:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.引入jQueryUI的样式文件</span><span class="token comment">//2.引入jQuery</span><span class="token comment">//3.引入jQueryUI的js文件</span><span class="token comment">//4.使用jQueryUI功能</span></code></pre><p>使用jquery.ui.js手风琴菜单</p><h2 id="制作jquery插件"><a href="#制作jquery插件" class="headerlink" title="制作jquery插件"></a>制作jquery插件</h2><blockquote><p>原理：jquery插件其实说白了就是给jquery对象增加一个新的方法，让jquery对象拥有某一个功能。</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//通过给$.fn添加方法就能够扩展jquery对象</span>$<span class="token punctuation">.</span>fn<span class="token punctuation">.</span> <span class="token function-variable function">pluginName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><hr><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接:"></a>原文链接:</h2><p><a href="https://blog.csdn.net/wuyxinu/article/details/103669718">https://blog.csdn.net/wuyxinu/article/details/103669718</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> jq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>div水平垂直居中的方法</title>
      <link href="posts/cdff216d/"/>
      <url>posts/cdff216d/</url>
      
        <content type="html"><![CDATA[<p>在平时，我们经常会碰到让一个div框针对某个模块上下左右都居中（水平垂直居中），其实针对这种情况，我们有多种方法实现。</p><p><strong>方法一:</strong></p><p>　　绝对定位方法：不确定当前div的宽度和高度，采用 transform: translate(-50%,-50%); 当前div的父级添加相对定位（position: relative;）</p><span id="more"></span><p>　　代码如下：</p><pre class="language-none"><code class="language-none">div&#123;    background:red;    position: absolute;    left:50%;    top:50%;    transform: translate(-50%, -50%);&#125;</code></pre><p>　</p><p><strong>方法二:</strong></p><p>　　绝对定位方法：确定了当前div的宽度，margin值为当前div宽度一半的负值</p><p>　　代码如下：</p><pre class="language-none"><code class="language-none">div&#123;    width:600px;    height: 600px;    background:red;    position: absolute;    left:50%;    top:50%;    margin-left:-300px;    margin-top:-300px;&#125;</code></pre><p>　　</p><p><strong>方法三：</strong></p><p>　　绝对定位方法：绝对定位下top left right bottom 都设置0</p><p>　　代码如下：</p><pre class="language-none"><code class="language-none">div.child&#123;    width: 600px;    height: 600px;    background: red;    position:absolute;    left:0;    top: 0;    bottom: 0;    right: 0;    margin: auto;&#125;</code></pre><p>　　</p><p><strong>方法四:</strong></p><p>　　flex布局方法：当前div的父级添加flex css样式</p><p>　　代码如下：</p><pre class="language-none"><code class="language-none">.box&#123;    height:800px;    -webkit-display:flex;    display:flex;    -webkit-align-items:center;    align-items:center;    -webkit-justify-content:center;    justify-content:center;    border:1px solid #ccc;&#125;div.child&#123;    width:600px;    height:600px;    background-color:red;&#125;</code></pre><p>　　</p><p><strong>方法五:</strong></p><p>　　table-cell实现水平垂直居中: table-cell middle center组合使用</p><p>   展示图如下：</p><p>   代码如下：</p><pre class="language-none"><code class="language-none">.table-cell &#123;    display: table-cell;    vertical-align: middle;    text-align: center;    width: 240px;    height: 180px;    border:1px solid #666;&#125;</code></pre><p>　　</p><p><strong>方法六:</strong></p><p>　　绝对定位：calc() 函数动态计算实现水平垂直居中</p><p>　　代码如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.calc</span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 160px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.calc .child</span><span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span><span class="token function">-webkit-calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>400px - 200px<span class="token punctuation">)</span>/2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span><span class="token function">-webkit-calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>160px - 50px<span class="token punctuation">)</span>/2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span><span class="token function">-moz-calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>400px - 200px<span class="token punctuation">)</span>/2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span><span class="token function">-moz-calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>160px - 50px<span class="token punctuation">)</span>/2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>400px - 200px<span class="token punctuation">)</span>/2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>160px - 50px<span class="token punctuation">)</span>/2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>　　</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大前端面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础面试题 </tag>
            
            <tag> 试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFC_IFC_GFC_FF</title>
      <link href="posts/3d2201bd/"/>
      <url>posts/3d2201bd/</url>
      
        <content type="html"><![CDATA[<p>CSS2.1中只有BFC和IFC, CSS3中才有GFC和FFC。</p><p>到底什么是BFC、IFC、GFC和FFC</p><h3 id="What’s-FC？"><a href="#What’s-FC？" class="headerlink" title="What’s FC？"></a>What’s FC？</h3><pre class="language-none"><code class="language-none">一定不是KFC，FC的全称是：Formatting Contexts，是W3C CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</code></pre><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><pre class="language-none"><code class="language-none">BFC(Block Formatting Contexts)直译为&quot;块级格式化上下文&quot;。Block Formatting Contexts就是页面上的一个隔离的渲染区域，容器里面的子元素不会在布局上影响到外面的元素，反之也是如此。如何产生BFC？float的值不为none。 overflow的值不为visible。 position的值不为relative和static。display的值为table-cell, table-caption, inline-block中的任何一个。 那BFC一般有什么用呢？比如常见的多栏布局，结合块级别元素浮动，里面的元素则是在一个相对隔离的环境里运行。</code></pre><h3 id="IFC"><a href="#IFC" class="headerlink" title="IFC"></a>IFC</h3><pre class="language-none"><code class="language-none">IFC(Inline Formatting Contexts)直译为&quot;内联格式化上下文&quot;，IFC的line box（线框）高度由其包含行内元素中最高的实际高度计算而来（不受到竖直方向的padding&#x2F;margin影响)IFC中的line box一般左右都贴紧整个IFC，但是会因为float元素而扰乱。float元素会位于IFC与与line box之间，使得line box宽度缩短。 同个ifc下的多个line box高度会不同。 IFC中时不可能有块级元素的，当插入块级元素时（如p中插入div）会产生两个匿名块与div分隔开，即产生两个IFC，每个IFC对外表现为块级元素，与div垂直排列。那么IFC一般有什么用呢？水平居中：当一个块要在环境中水平居中时，设置其为inline-block则会在外层产生IFC，通过text-align则可以使其水平居中。垂直居中：创建一个IFC，用其中一个元素撑开父元素的高度，然后设置其vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。</code></pre><h3 id="GFC"><a href="#GFC" class="headerlink" title="GFC"></a>GFC</h3><pre class="language-none"><code class="language-none">GFC(GridLayout Formatting Contexts)直译为&quot;网格布局格式化上下文&quot;，当为一个元素设置display值为grid的时候，此元素将会获得一个独立的渲染区域，我们可以通过在网格容器（grid container）上定义网格定义行（grid definition rows）和网格定义列（grid definition columns）属性各在网格项目（grid item）上定义网格行（grid row）和网格列（grid columns）为每一个网格项目（grid item）定义位置和空间。 那么GFC有什么用呢，和table又有什么区别呢？首先同样是一个二维的表格，但GridLayout会有更加丰富的属性来控制行列，控制对齐以及更为精细的渲染语义和控制。</code></pre><h3 id="FFC"><a href="#FFC" class="headerlink" title="FFC"></a>FFC</h3><pre class="language-none"><code class="language-none">FFC(Flex Formatting Contexts)直译为&quot;自适应格式化上下文&quot;，display值为flex或者inline-flex的元素将会生成自适应容器（flex container），可惜这个牛逼的属性只有谷歌和火狐支持，不过在移动端也足够了，至少safari和chrome还是OK的，毕竟这俩在移动端才是王道。Flex Box 由伸缩容器和伸缩项目组成。通过设置元素的 display 属性为 flex 或 inline-flex 可以得到一个伸缩容器。设置为 flex 的容器被渲染为一个块级元素，而设置为 inline-flex 的容器则渲染为一个行内元素。伸缩容器中的每一个子元素都是一个伸缩项目。伸缩项目可以是任意数量的。伸缩容器外和伸缩项目内的一切元素都不受影响。简单地说，Flexbox 定义了伸缩容器内伸缩项目该如何布局。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大前端面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础面试题 </tag>
            
            <tag> 试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端资源整理</title>
      <link href="posts/1a9a6427/"/>
      <url>posts/1a9a6427/</url>
      
        <content type="html"><![CDATA[<h3 id="一、概要"><a href="#一、概要" class="headerlink" title="一、概要"></a>一、概要</h3><p>这份汇总整理，很程度上参考了GitHub最全前端资源汇总；云集前端教程、开发资源、免费书籍、手册规范、求职面试等等，旨在为前端学习 &amp; 技能提升提供方便。</p><h3 id="二、优秀的网站"><a href="#二、优秀的网站" class="headerlink" title="二、优秀的网站"></a>二、优秀的网站</h3><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.kancloud.cn/jsfront/month">JS前端开发群月报</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.awesomes.cn/">前端开源资源库</a></li><li>国内老牌技术社区：<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.oschina.net/">OSChina</a>、<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com">博客园</a>、<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.csdn.com">CSDN</a>、<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.51cto.com/">51CTO</a></li><li>免费的it电子书：<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://it-ebooks.info/">http://it-ebooks.info/</a></li><li>在线学习：<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.udemy.com/">http://www.udemy.com/</a></li><li>代码练习：<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://exercism.io/">http://exercism.io/</a></li><li>代码练习：<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.codingame.com">https://www.codingame.com</a></li><li>云风（游戏界大牛）:<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.codingnow.com"> http://blog.codingnow.com/</a><br>王垠（不少文章喷到蛮有道理）：<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.yinwang.org/">http://www.yinwang.org/</a><br>冰河-伞哥(Lisp大牛)：<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://tianchunbinghe.blog.163.com/">http://tianchunbinghe.blog.163.com/</a><br>陈皓-左耳朵耗子：<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://coolshell.cn/">http://coolshell.cn/ </a><br>Jeff Atwood（国外知名博主）: <a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://blog.codinghorror.com">https://blog.codinghorror.com/</a><br>阮一峰（黑客与画家译者，Web）：<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com">http://www.ruanyifeng.com/</a><br>廖雪峰（他的Python、Git教程不少人都看过）：<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.liaoxuefeng.com/">http://www.liaoxuefeng.com/</a><br>道哥的黑板报（安全）：<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://zhuanlan.zhihu.com/taosay">https://zhuanlan.zhihu.com/taosay</a> 国内GitHub上关注度较高的开发者 GitHub篇</li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.gitbook.io/">gitbook：https://www.gitbook.io/写书的好东西，当然用来写文档也很不错的</a><br><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://travis-ci.org/">Travis-ci：开源项目持续集成必备，和GitHub相结合，https://travis-ci.org/</a></li></ul><h3 id="三、前端技术分类综合"><a href="#三、前端技术分类综合" class="headerlink" title="三、前端技术分类综合"></a>三、前端技术分类综合</h3><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/front-end-tutorial.md">大前端综合</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/tools-tutorial.md">Tools</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/vue-tutorial.md">Vue</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/react-tutorial.md">React</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/angular-tutorial.md">Angular</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/chrome-tutorial.md">Chrome</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/nodejs-tutorial.md">Nodejs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/css3-tutorial.md">Css3</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/pwa-tutorial.md">Pwa</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/webpack-tutorial.md">Webpack</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/gulp-tutorial.md">Gulp</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/git-tutorial.md">Git</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/mongodb-tutorial.md">Mongodb</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/nice-front-end-tutorial/blob/master/tutorial/markdown-tutorial.md">Markdown</a></li></ul><h3 id="四、各类前端资源"><a href="#四、各类前端资源" class="headerlink" title="四、各类前端资源"></a>四、各类前端资源</h3><h2 id="综合类"><a href="#综合类" class="headerlink" title="综合类"></a>综合类</h2><table><thead><tr><th align="left">综合类</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">前端知识体系</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/sb19871023/p/3894452.html">http://www.cnblogs.com/sb19871023/p/3894452.html</a></td></tr><tr><td align="left">前端知识结构</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/JacksonTian/fks">https://github.com/JacksonTian/fks</a></td></tr><tr><td align="left">Web前端开发大系概览</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/unruledboy/WebFrontEndStack">https://github.com/unruledboy/WebFrontEndStack</a></td></tr><tr><td align="left">Web前端开发大系概览-中文版</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/unruledboy/p/WebFrontEndStack.html">http://www.cnblogs.com/unruledboy/p/WebFrontEndStack.html</a></td></tr><tr><td align="left">Web Front-end Stack v2.2</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://raw.githubusercontent.com/unruledboy/WebFrontEndStack/master/Web%20Front%20End%20Stack.png">Web Front-end Stack v2.2</a></td></tr><tr><td align="left">免费的编程中文书籍索引</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/justjavac/free-programming-books-zh_CN">https://github.com/justjavac/free-programming-books-zh_CN</a></td></tr><tr><td align="left">前端书籍</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/dypsilon/frontend-dev-bookmarks">https://github.com/dypsilon/frontend-dev-bookmarks</a></td></tr><tr><td align="left">前端免费书籍大全</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/vhf/free-programming-books">https://github.com/vhf/free-programming-books</a></td></tr><tr><td align="left">前端知识体系</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/sb19871023/p/3894452.html">http://www.cnblogs.com/sb19871023/p/3894452.html</a></td></tr><tr><td align="left">免费的编程中文书籍索引</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/justjavac/free-programming-books-zh_CN">https://github.com/justjavac/free-programming-books-zh_CN</a></td></tr><tr><td align="left">智能社 - 精通JavaScript开发</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://study.163.com/course/introduction/224014.htm">http://study.163.com/course/introduction/224014.htm</a></td></tr><tr><td align="left">重新介绍 JavaScript（JS 教程）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript</a></td></tr><tr><td align="left">麻省理工学院公开课：计算机科学及编程导论</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://v.163.com/special/opencourse/bianchengdaolun.html">http://v.163.com/special/opencourse/bianchengdaolun.html</a></td></tr><tr><td align="left">JavaScript中的this陷阱的最全收集–没有之一</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000002640298">http://segmentfault.com/a/1190000002640298</a></td></tr><tr><td align="left">JS函数式编程指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html">https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html</a></td></tr><tr><td align="left">JavaScript Promise迷你书（中文版）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://liubin.github.io/promises-book">http://liubin.github.io/promises-book</a></td></tr><tr><td align="left">腾讯移动Web前端知识库</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/AlloyTeam/Mars">https://github.com/AlloyTeam/Mars</a></td></tr><tr><td align="left">Front-End-Develop-Guide 前端开发指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide">https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide</a></td></tr><tr><td align="left">前端开发笔记本</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://li-xinyang.gitbooks.io/frontend-notebook/content">https://li-xinyang.gitbooks.io/frontend-notebook/content</a></td></tr><tr><td align="left">大前端工具集 - 聂微东</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nieweidong/fetool">https://github.com/nieweidong/fetool</a></td></tr><tr><td align="left">前端开发者手册</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://dwqs.gitbooks.io/frontenddevhandbook/content">https://dwqs.gitbooks.io/frontenddevhandbook/content</a></td></tr></tbody></table><h2 id="入门类"><a href="#入门类" class="headerlink" title="入门类"></a>入门类</h2><table><thead><tr><th align="left">入门类</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">前端入门教程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/jikey/p/3613082.html">http://www.cnblogs.com/jikey/p/3613082.html</a></td></tr><tr><td align="left">瘳雪峰的Javascript教程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000">http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000</a></td></tr><tr><td align="left">前端工程师必备的PS技能——切图篇</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/view/506">http://www.imooc.com/view/506</a></td></tr><tr><td align="left">结合个人经历总结的前端入门方法</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/qiu-deqing/FE-learning">https://github.com/qiu-deqing/FE-learning</a></td></tr></tbody></table><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><table><thead><tr><th align="left">工具类</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">前端人的俱乐部</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://f2er.club/">http://f2er.club/</a> 真可以解放你的收藏夹</td></tr><tr><td align="left">如何优雅地使用Sublime Text</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jeffjade.com/2015/12/15/2015-04-17-toss-sublime-text/%23">http://www.jeffjade.com/2015/12/15/2015-04-17-toss-sublime-text/#</a></td></tr><tr><td align="left">新编码神器Atom使用纪要</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jeffjade.com/2016/03/03/2016-03-02-how-to-use-atom/">http://www.jeffjade.com/2016/03/03/2016-03-02-how-to-use-atom/</a></td></tr><tr><td align="left">css sprite 雪碧图制作</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/93">http://www.imooc.com/learn/93</a></td></tr><tr><td align="left">版本控制入门 – 搬进 Github</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/390">http://www.imooc.com/learn/390</a></td></tr><tr><td align="left">Grunt-beginner前端自动化工具</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/30">http://www.imooc.com/learn/30</a></td></tr><tr><td align="left">IntelliJ IDEA 简体中文专题教程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/judasn/IntelliJ-IDEA-Tutorial">https://github.com/judasn/IntelliJ-IDEA-Tutorial</a></td></tr><tr><td align="left">SublimeText</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jikeytang/sublime-text">https://github.com/jikeytang/sublime-text</a></td></tr><tr><td align="left">Atom</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://atom.io/">https://atom.io</a></td></tr><tr><td align="left">visual studio code</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://code.visualstudio.com/">https://code.visualstudio.com</a></td></tr></tbody></table><h2 id="综合效果搜索平台"><a href="#综合效果搜索平台" class="headerlink" title="综合效果搜索平台"></a>综合效果搜索平台</h2><table><thead><tr><th align="left">综合效果搜索平台</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">JavaScript 资源大全中文版</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jobbole/awesome-javascript-cn">https://github.com/jobbole/awesome-javascript-cn</a></td></tr><tr><td align="left">100+ 超全的web开发工具和资源</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://xituqu.com/170.html">https://xituqu.com/170.html</a></td></tr><tr><td align="left">设计师网址导航</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://hao.uisdc.com/">http://hao.uisdc.com/</a></td></tr><tr><td align="left">Web前端导航(Alloyteam)</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/nav/">http://www.alloyteam.com/nav/</a></td></tr><tr><td align="left">快搜</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://so.chongbuluo.com/">http://so.chongbuluo.com/</a></td></tr><tr><td align="left">阿里iconfont</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.iconfont.cn/">http://www.iconfont.cn/</a></td></tr><tr><td align="left">zoommyapp.com</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zoommyapp.com/">http://zoommyapp.com/</a> 高质量图库</td></tr><tr><td align="left">unsplash.com</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://unsplash.com/">https://unsplash.com/</a> 高质量图库</td></tr><tr><td align="left"><a href="http://www.pinterest.com/">www.pinterest.com</a></td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.pinterest.com/">https://www.pinterest.com/</a> 图库</td></tr><tr><td align="left">New Old Stock</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://nos.twnsnd.co/">http://nos.twnsnd.co</a> 复古风图库</td></tr><tr><td align="left">500px.com</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://500px.com/">https://500px.com/</a> 唯美照片</td></tr><tr><td align="left">效果网</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jq22.com/">http://www.jq22.com</a></td></tr><tr><td align="left">花瓣网</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://huaban.com/">http://huaban.com/</a></td></tr><tr><td align="left">优美图</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.topit.me/">http://www.topit.me/</a></td></tr><tr><td align="left">codepen</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://codepen.io/">http://codepen.io/</a></td></tr><tr><td align="left">摄图网</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://699pic.com/">http://699pic.com/</a></td></tr><tr><td align="left">常用的JavaScript代码片段</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://microjs.com/">http://microjs.com</a></td></tr></tbody></table><h2 id="团队Blog"><a href="#团队Blog" class="headerlink" title="团队Blog"></a>团队Blog</h2><table><thead><tr><th align="left">团队Blog-Name</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">腾讯ISUX</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://isux.tencent.com/">http://isux.tencent.com</a></td></tr><tr><td align="left">奇舞周刊</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://old.75team.com/weekly/">http://old.75team.com/weekly/</a></td></tr><tr><td align="left">淘宝前端团队（FED）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://taobaofed.org/">http://taobaofed.org</a></td></tr><tr><td align="left">码农周刊</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://weekly.manong.io/">http://weekly.manong.io</a></td></tr><tr><td align="left">凹凸实验室</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://aotu.io/">https://aotu.io/</a></td></tr><tr><td align="left">WEB前端开发</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.css88.com/">http://www.css88.com</a></td></tr><tr><td align="left">A JS tip per day!</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jstips.co/">http://www.jstips.co</a></td></tr><tr><td align="left">腾讯全端 AlloyTeam</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/webdevelop/">http://www.alloyteam.com/webdevelop/</a></td></tr><tr><td align="left">阿里巴巴-U一点</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.aliued.cn/">http://www.aliued.cn</a></td></tr><tr><td align="left">百度WEB前端研发部</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fex.baidu.com/">http://fex.baidu.com</a></td></tr><tr><td align="left">携程设计委员会</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ued.ctrip.com/blog/">http://ued.ctrip.com/blog/</a></td></tr><tr><td align="left">平安科技移动开发二队技术周报</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/PaicHyperionDev/MobileDevWeekly">https://github.com/PaicHyperionDev/MobileDevWeekly</a></td></tr></tbody></table><h2 id="开发中心"><a href="#开发中心" class="headerlink" title="开发中心"></a>开发中心</h2><table><thead><tr><th align="left">开发中心</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">mozilla js参考</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></td></tr><tr><td align="left">chrome开发中心（chrome的内核已转向blink）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.chrome.com/extensions/api_index.html">https://developer.chrome.com/extensions/api_index.html</a></td></tr><tr><td align="left">safari开发中心</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.apple.com/library/safari/navigation">https://developer.apple.com/library/safari/navigation</a></td></tr><tr><td align="left">microsoft js参考</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://msdn.microsoft.com/zh-cn/library/d1et7k7c(v=vs.94.aspx">https://msdn.microsoft.com/zh-cn/library/d1et7k7c(v=vs.94.aspx</a></td></tr><tr><td align="left">js秘密花园</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html">http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html</a></td></tr><tr><td align="left">js秘密花园</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bonsaiden.github.io/JavaScript-Garden/zh">http://bonsaiden.github.io/JavaScript-Garden/zh</a></td></tr><tr><td align="left">w3help</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3help.org/">http://www.w3help.org</a> 综合Bug集合网站</td></tr></tbody></table><h2 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h2><table><thead><tr><th align="left">Nodejs</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Node.js 包教不包会</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/alsotang/node-lessons">https://github.com/alsotang/node-lessons</a></td></tr><tr><td align="left">一个nodejs博客</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://60sky.com/">http://60sky.com</a></td></tr><tr><td align="left">【NodeJS 学习笔记04】新闻发布系统</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/yexiaochai/p/3536547.html">http://www.cnblogs.com/yexiaochai/p/3536547.html</a></td></tr><tr><td align="left">过年7天乐，学nodejs 也快乐</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/qqloving/p/3541099.html">http://www.cnblogs.com/qqloving/p/3541099.html</a></td></tr><tr><td align="left">七天学会NodeJS</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nqdeng/7-days-nodejs">https://github.com/nqdeng/7-days-nodejs</a></td></tr><tr><td align="left">Nodejs学习笔记（二）— 事件模块</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/zhongweiv/p/nodejs_events.html">http://www.cnblogs.com/zhongweiv/p/nodejs_events.html</a></td></tr><tr><td align="left">nodejs入门</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/liusuqi/p/3735491.html">http://www.cnblogs.com/liusuqi/p/3735491.html</a></td></tr><tr><td align="left">angularjs nodejs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/zensh/jsgen">https://github.com/zensh/jsgen</a></td></tr><tr><td align="left">从零开始nodejs系列文章</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.fens.me/series-nodejs">http://blog.fens.me/series-nodejs</a></td></tr><tr><td align="left">理解nodejs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb">http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb</a></td></tr><tr><td align="left">nodejs事件轮询</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop">http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop</a></td></tr><tr><td align="left">node入门</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.nodebeginner.org/index-zh-cn.html">http://www.nodebeginner.org/index-zh-cn.html</a></td></tr><tr><td align="left">nodejs cms</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ourjs.com/detail/53e1f281c5910a9806000001">http://ourjs.com/detail/53e1f281c5910a9806000001</a></td></tr><tr><td align="left">Node初学者入门，一本全面的NodeJS教程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ourjs.com/detail/529ca5950cb6498814000005">http://ourjs.com/detail/529ca5950cb6498814000005</a></td></tr><tr><td align="left">NodeJS的代码调试和性能调优</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line">http://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line</a></td></tr></tbody></table><h2 id="综合API"><a href="#综合API" class="headerlink" title="综合API"></a>综合API</h2><table><thead><tr><th align="left">综合API</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">OverAPI.com</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://overapi.com/">http://overapi.com/</a></td></tr><tr><td align="left">javascripting</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.javascripting.com/">http://www.javascripting.com</a></td></tr><tr><td align="left">各种流行库搜索</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://microjs.com/">http://microjs.com</a></td></tr><tr><td align="left">runoob.com-包含各种API集合</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.runoob.com/">http://www.runoob.com</a></td></tr><tr><td align="left">开源中国在线API文档合集</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://tool.oschina.net/apidocs">http://tool.oschina.net/apidocs</a></td></tr><tr><td align="left">devdocs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://devdocs.io/">http://devdocs.io</a> 英文综合API网站</td></tr></tbody></table><h2 id="Ecmascript"><a href="#Ecmascript" class="headerlink" title="Ecmascript"></a>Ecmascript</h2><table><thead><tr><th align="left">Ecmascript</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Understanding ECMAScript 6 - Nicholas C. Zakas</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://leanpub.com/understandinges6/read">https://leanpub.com/understandinges6/read</a></td></tr><tr><td align="left">exploring-es6</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://leanpub.com/exploring-es6/read">https://leanpub.com/exploring-es6/read</a></td></tr><tr><td align="left">exploring-es6翻译</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/es6-org/exploring-es6">https://github.com/es6-org/exploring-es6</a></td></tr><tr><td align="left">exploring-es6翻译后预览</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://es6-org.github.io/exploring-es6">http://es6-org.github.io/exploring-es6</a></td></tr><tr><td align="left">阮一峰 es6</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://es6.ruanyifeng.com/">http://es6.ruanyifeng.com</a></td></tr><tr><td align="left">阮一峰 Javascript</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://javascript.ruanyifeng.com/">http://javascript.ruanyifeng.com</a></td></tr><tr><td align="left">ECMA-262，第 5 版</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yanhaijing.com/es5">http://yanhaijing.com/es5</a></td></tr><tr><td align="left">es5</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://es5.github.io/">http://es5.github.io</a></td></tr></tbody></table><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><table><thead><tr><th align="left">Vue.js</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Vue2.0</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://vuefe.cn/">https://vuefe.cn/</a></td></tr><tr><td align="left">Vue</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cn.vuejs.org/">http://cn.vuejs.org</a></td></tr><tr><td align="left">Vue Router</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://router.vuejs.org/">https://router.vuejs.org/</a></td></tr><tr><td align="left">Vuex</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://vuex.vuejs.org/">https://vuex.vuejs.org/</a></td></tr><tr><td align="left">Vue-Cli</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/vuejs/vue-cli">https://github.com/vuejs/vue-cli</a></td></tr><tr><td align="left">Vue 论坛</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://forum.vuejs.org/">http://forum.vuejs.org</a></td></tr><tr><td align="left">Vue 聊天室</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://gitter.im/vuejs/vue">https://gitter.im/vuejs/vue</a></td></tr><tr><td align="left">Vue 入门指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/aaronjs/p/3660102.html">http://www.cnblogs.com/aaronjs/p/3660102.html</a></td></tr><tr><td align="left">Vue 的一些资源索引</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000000411057">http://segmentfault.com/a/1190000000411057</a></td></tr><tr><td align="left">awesome-vue</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/vuejs/awesome-vue">https://github.com/vuejs/awesome-vue</a></td></tr><tr><td align="left">vue-syntax-highlight</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/vuejs/vue-syntax-highlight">https://github.com/vuejs/vue-syntax-highlight</a></td></tr><tr><td align="left">如何写一手漂亮的 Vue</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://jeffjade.com/2017/03/11/120-how-to-write-vue-better/?me">https://jeffjade.com/2017/03/11/120-how-to-write-vue-better/?me</a></td></tr></tbody></table><h2 id="Angularjs"><a href="#Angularjs" class="headerlink" title="Angularjs"></a>Angularjs</h2><table><thead><tr><th align="left">Angularjs</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Angular.js 的一些学习资源</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/dolymood/AngularLearning">https://github.com/dolymood/AngularLearning</a></td></tr><tr><td align="left">angularjs中文社区</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://angularjs.cn/">http://angularjs.cn</a></td></tr><tr><td align="left">Angularjs源码学习</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/xuwenmin888/p/3739096.html">http://www.cnblogs.com/xuwenmin888/p/3739096.html</a></td></tr><tr><td align="left">Angularjs源码学习</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ifeenan.com/?c=AngularJS">http://www.ifeenan.com/?c=AngularJS</a></td></tr><tr><td align="left">angular对bootstrap的封装</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://angular-ui.github.io/bootstrap">http://angular-ui.github.io/bootstrap</a></td></tr><tr><td align="left">angularjs + nodejs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://cnodejs.org/topic/51404e0f069911196d2e3923">https://cnodejs.org/topic/51404e0f069911196d2e3923</a></td></tr><tr><td align="left">吕大豹 Angularjs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/lvdabao/tag/AngularJs">http://www.cnblogs.com/lvdabao/tag/AngularJs</a></td></tr><tr><td align="left">AngularJS 最佳实践</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.infoq.com/cn/news/2013/02/angular-web-app">http://www.infoq.com/cn/news/2013/02/angular-web-app</a></td></tr><tr><td align="left">Angular的一些扩展指令</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.lovelucy.info/angularjs-best-practices.html">http://www.lovelucy.info/angularjs-best-practices.html</a></td></tr><tr><td align="left">Angular数据绑定原理</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Pasvaz/bindonce">https://github.com/Pasvaz/bindonce</a></td></tr><tr><td align="left">一些扩展Angular UI组件</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/angular-ui">https://github.com/angular-ui</a></td></tr><tr><td align="left">Ember和AngularJS的性能测试</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://voidcanvas.com/emberjs-vs-angularjs-performance-testing">http://voidcanvas.com/emberjs-vs-angularjs-performance-testing</a></td></tr><tr><td align="left">带你走近AngularJS - 基本功能介绍</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/powertoolsteam/p/angularjs-introdection.html">http://www.cnblogs.com/powertoolsteam/p/angularjs-introdection.html</a></td></tr><tr><td align="left">Angularjs开发指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://angular.duapp.com/docs/guide">http://angular.duapp.com/docs/guide</a></td></tr><tr><td align="left">Angularjs学习</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/amosli/p/3710648.html">http://www.cnblogs.com/amosli/p/3710648.html</a></td></tr><tr><td align="left">不要带着jQuery的思维去学习AngularJS</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.rainweb.cn/article/angularjs-jquery.html">http://www.rainweb.cn/article/angularjs-jquery.html</a></td></tr><tr><td align="left">angularjs 学习笔记</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://wangjiatao.diandian.com/?tag=angularjs">http://wangjiatao.diandian.com/?tag=angularjs</a></td></tr><tr><td align="left">angularjs 开发指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.angularjs.cn/T008">http://www.angularjs.cn/T008</a></td></tr><tr><td align="left">angularjs 英文资料</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jmcunningham/AngularJS-Learning">https://github.com/jmcunningham/AngularJS-Learning</a></td></tr><tr><td align="left">angular bootstrap</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://angular-ui.github.io/bootstrap">http://angular-ui.github.io/bootstrap</a></td></tr><tr><td align="left">angular jq mobile</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/opitzconsulting/jquery-mobile-angular-adapter">https://github.com/opitzconsulting/jquery-mobile-angular-adapter</a></td></tr><tr><td align="left">angular ui</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://mgcrea.github.io/angular-strap">http://mgcrea.github.io/angular-strap</a></td></tr><tr><td align="left">整合jQuery Mobile+AngularJS经验谈</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.tuicool.com/articles/7ZZVr2">http://www.tuicool.com/articles/7ZZVr2</a></td></tr><tr><td align="left">有jQuery背景，该如何用AngularJS编程思想</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.jobbole.com/46589/">http://blog.jobbole.com/46589/</a></td></tr><tr><td align="left">AngularJS在线教程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://each.sinaapp.com/angular">http://each.sinaapp.com/angular</a></td></tr><tr><td align="left">angular学习笔记</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zouyesheng.com/angular.html">http://www.zouyesheng.com/angular.html</a></td></tr></tbody></table><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><table><thead><tr><th align="left">React</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">react.js 中文论坛</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.react-china.org/">http://www.react-china.org</a></td></tr><tr><td align="left">react.js 官方网址</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://facebook.github.io/react/index.html">https://facebook.github.io/react/index.html</a></td></tr><tr><td align="left">react.js 官方文档</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://facebook.github.io/react/docs/getting-started.html">https://facebook.github.io/react/docs/getting-started.html</a></td></tr><tr><td align="left">react.js material UI</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://material-ui.com/%23">http://material-ui.com/#</a></td></tr><tr><td align="left">react.js TouchstoneJS UI</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://touchstonejs.io/">http://touchstonejs.io</a></td></tr><tr><td align="left">react.js amazeui UI</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://amazeui.org/react">http://amazeui.org/react</a></td></tr><tr><td align="left">React 入门实例教程 - 阮一峰</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com/blog/2015/03/react.html">http://www.ruanyifeng.com/blog/2015/03/react.html</a></td></tr><tr><td align="left">React Native 中文版</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://wiki.jikexueyuan.com/project/react-native">http://wiki.jikexueyuan.com/project/react-native</a></td></tr><tr><td align="left">Webpack 和 React 小书 - 前端乱炖</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/Fakefish%203053">http://www.html-js.com/article/Fakefish%203053</a></td></tr><tr><td align="left">Webpack 和 React 小书 - gitbook</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://fakefish.github.io/react-webpack-cookbook">https://fakefish.github.io/react-webpack-cookbook</a></td></tr><tr><td align="left">webpack</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/webpack/webpack">https://github.com/webpack/webpack</a></td></tr><tr><td align="left">Webpack，101入门体验</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://html-js.com/article/3009">http://html-js.com/article/3009</a></td></tr><tr><td align="left">webpack入门教程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://html-js.com/article/3113">http://html-js.com/article/3113</a></td></tr><tr><td align="left">基于webpack搭建前端工程解决方案探索</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000003499526">http://segmentfault.com/a/1190000003499526</a></td></tr></tbody></table><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><table><thead><tr><th align="left">Webpack</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Webpack 官网</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://webpack.js.org/">https://webpack.js.org/</a></td></tr><tr><td align="left">Webpack 中文网</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://doc.webpack-china.org/">https://doc.webpack-china.org/</a></td></tr><tr><td align="left">webpack-demos（阮一峰）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ruanyf/webpack-demos">https://github.com/ruanyf/webpack-demos</a></td></tr><tr><td align="left">Webpack Tutorial</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.ag-grid.com/ag-grid-understanding-webpack/">https://www.ag-grid.com/ag-grid-understanding-webpack/</a></td></tr><tr><td align="left">webpack 入门指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/vajoy/p/4650467.html">http://www.cnblogs.com/vajoy/p/4650467.html</a></td></tr><tr><td align="left">Webpack 打包优化之体积篇</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/">https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/</a></td></tr><tr><td align="left">Webpack 打包优化之速度篇</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/">https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/</a></td></tr></tbody></table><h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><table><thead><tr><th align="left">Gulp</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Gulp官网</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://gulpjs.com/">http://gulpjs.com</a></td></tr><tr><td align="left">Gulp中文网</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.gulpjs.com.cn/">http://www.gulpjs.com.cn</a></td></tr><tr><td align="left">gulp资料收集</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Platform-CUF/use-gulp">https://github.com/Platform-CUF/use-gulp</a></td></tr><tr><td align="left">Gulp：任务自动管理工具 - ruanyifeng</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://javascript.ruanyifeng.com/tool/gulp.html">http://javascript.ruanyifeng.com/tool/gulp.html</a></td></tr><tr><td align="left">Gulp插件</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://gulpjs.com/plugins">http://gulpjs.com/plugins</a></td></tr><tr><td align="left">Gulp探究折腾之路(I)</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jeffjade.com/2015/11/25/2015-11-25-toss-gulp/">http://www.jeffjade.com/2015/11/25/2015-11-25-toss-gulp/</a></td></tr><tr><td align="left">Gulp折腾之路(II)</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jeffjade.com/2016/01/19/2016-01-19-toss-gulp/">http://www.jeffjade.com/2016/01/19/2016-01-19-toss-gulp/</a></td></tr><tr><td align="left">Gulp不完全入门教程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ido321.com/1622.html">http://www.ido321.com/1622.html</a></td></tr><tr><td align="left">为什么使用gulp?</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hjzheng/CUF_meeting_knowledge_share/issues/33">https://github.com/hjzheng/CUF_meeting_knowledge_share/issues/33</a></td></tr><tr><td align="left">Gulp安装及配合组件构建前端开发一体化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.dbpoo.com/getting-started-with-gulp">http://www.dbpoo.com/getting-started-with-gulp</a></td></tr><tr><td align="left">Gulp 入门指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nimojs/gulp-book">https://github.com/nimojs/gulp-book</a></td></tr><tr><td align="left">Gulp 入门指南 - nimojs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nimojs/blog/issues/19">https://github.com/nimojs/blog/issues/19</a></td></tr><tr><td align="left">Gulp in Action</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/video/5692">http://www.imooc.com/video/5692</a></td></tr><tr><td align="left">Gulp开发教程（翻译）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3ctech.com/topic/134">http://www.w3ctech.com/topic/134</a></td></tr><tr><td align="left">前端构建工具gulpjs的使用介绍及技巧</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/2050/p/4198792.html">http://www.cnblogs.com/2050/p/4198792.html</a></td></tr></tbody></table><h2 id="Js-template"><a href="#Js-template" class="headerlink" title="Js template"></a>Js template</h2><table><thead><tr><th align="left">Js template</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">template-chooser</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://garann.github.io/template-chooser">http://garann.github.io/template-chooser</a></td></tr><tr><td align="left">artTemplate</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/aui/artTemplate">https://github.com/aui/artTemplate</a></td></tr><tr><td align="left">tomdjs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/aui/tmodjs/blob/master/README.md">https://github.com/aui/tmodjs/blob/master/README.md</a></td></tr><tr><td align="left">Fxtpl v1.0 繁星前端模板引擎</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://koen301.github.io/fxtpl">http://koen301.github.io/fxtpl</a></td></tr><tr><td align="left">laytpl</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://laytpl.layui.com/">http://laytpl.layui.com</a></td></tr><tr><td align="left">mozilla - nunjucks</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mozilla/nunjucks">https://github.com/mozilla/nunjucks</a></td></tr><tr><td align="left">Juicer</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/PaulGuo/Juicer">https://github.com/PaulGuo/Juicer</a></td></tr><tr><td align="left">dustjs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://akdubya.github.io/dustjs">http://akdubya.github.io/dustjs</a></td></tr><tr><td align="left">etpl</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ecomfe.github.io/etpl">http://ecomfe.github.io/etpl</a></td></tr></tbody></table><h2 id="HTML5-HTML"><a href="#HTML5-HTML" class="headerlink" title="HTML5(HTML)"></a>HTML5(HTML)</h2><table><thead><tr><th align="left">HTML(HTML5)</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">深入理解HTML5标签</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://segmentfault.com/a/1190000002695791">https://segmentfault.com/a/1190000002695791</a></td></tr><tr><td align="left">如何写出高效率的HTML</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://segmentfault.com/a/1190000002680822">https://segmentfault.com/a/1190000002680822</a></td></tr><tr><td align="left">HTML meta标签总结与属性使用介绍</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://segmentfault.com/a/1190000004279791">https://segmentfault.com/a/1190000004279791</a></td></tr><tr><td align="left">戏说HTML5</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/dojo-lzz/p/5059316.html">http://www.cnblogs.com/dojo-lzz/p/5059316.html</a></td></tr></tbody></table><h2 id="CSS3-CSS"><a href="#CSS3-CSS" class="headerlink" title="CSS3(CSS)"></a>CSS3(CSS)</h2><table><thead><tr><th align="left">CSS</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">CSS 语法参考</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://tympanus.net/codrops/css_reference">http://tympanus.net/codrops/css_reference</a></td></tr><tr><td align="left">如何编写可维护的CSS</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/chadluo/CSS-Guidelines/blob/master/README.md">https://github.com/chadluo/CSS-Guidelines/blob/master/README.md</a></td></tr><tr><td align="left">CSS3动画手册</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://isux.tencent.com/css3/index.html">http://isux.tencent.com/css3/index.html</a></td></tr><tr><td align="left">腾讯css3动画制作工具</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://isux.tencent.com/css3/tools.html">http://isux.tencent.com/css3/tools.html</a></td></tr><tr><td align="left">志爷css小工具集合</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://linxz.github.io/tianyizone">http://linxz.github.io/tianyizone</a></td></tr><tr><td align="left">css3 js 移动大杂烩</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.note12.com/category/blog/2014-6-5/538fe0a9f786f1b7019a4dfb">http://www.note12.com/category/blog/2014-6-5/538fe0a9f786f1b7019a4dfb</a></td></tr><tr><td align="left">bouncejs 触摸库</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bouncejs.com/">http://bouncejs.com</a></td></tr><tr><td align="left">animate.css</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://daneden.github.io/animate.css">http://daneden.github.io/animate.css</a></td></tr><tr><td align="left">全局CSS的终结(狗带 [译]</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/2015/10/8536">http://www.alloyteam.com/2015/10/8536</a></td></tr><tr><td align="left">browserhacks</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://browserhacks.com/">http://browserhacks.com</a></td></tr></tbody></table><h2 id="移动端API"><a href="#移动端API" class="headerlink" title="移动端API"></a>移动端API</h2><table><thead><tr><th align="left">移动端API</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">99移动端知识集合</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jtyjty99999/mobileTech">https://github.com/jtyjty99999/mobileTech</a></td></tr><tr><td align="left">移动端前端开发知识库</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/AlloyTeam/Mars">https://github.com/AlloyTeam/Mars</a></td></tr><tr><td align="left">移动前端的一些坑和解决方法（外观表现）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://caibaojian.com/mobile-web-bug.html">http://caibaojian.com/mobile-web-bug.html</a></td></tr><tr><td align="left">【原】移动web资源整理</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/PeunZhang/p/3407453.html">http://www.cnblogs.com/PeunZhang/p/3407453.html</a></td></tr><tr><td align="left">zepto 1.0 中文手册</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-5.cn/Manual/Zepto">http://www.html-5.cn/Manual/Zepto</a></td></tr><tr><td align="left">zepto 1.1.2</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.css88.com/doc/zeptojs_api">http://www.css88.com/doc/zeptojs_api</a></td></tr><tr><td align="left">zepto 中文注释</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html">http://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html</a></td></tr><tr><td align="left">jqmobile 手册</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://app-framework-software.intel.com/api.php">http://app-framework-software.intel.com/api.php</a></td></tr><tr><td align="left">移动浏览器开发集合</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/maxzhang/maxzhang.github.com/issues">https://github.com/maxzhang/maxzhang.github.com/issues</a></td></tr><tr><td align="left">移动开发大杂烩</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hoosin/mobile-web-favorites">https://github.com/hoosin/mobile-web-favorites</a></td></tr></tbody></table><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><table><thead><tr><th align="left">jQuery</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">YOU MIGHT NOT NEED JQUERY</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://youmightnotneedjquery.com/">http://youmightnotneedjquery.com/</a></td></tr><tr><td align="left">jQuery API 中文文档</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jquery123.com/">http://www.jquery123.com</a></td></tr><tr><td align="left">hemin 在线版</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://hemin.cn/jq">http://hemin.cn/jq</a></td></tr><tr><td align="left">css88 jq api</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.css88.com/jqapi-1.9/on">http://www.css88.com/jqapi-1.9/on</a></td></tr><tr><td align="left">css88 jqui api</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.css88.com/jquery-ui-api">http://www.css88.com/jquery-ui-api</a></td></tr><tr><td align="left">学习jquery</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://learn.jquery.com/">http://learn.jquery.com</a></td></tr><tr><td align="left">jquery 源码查找</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://james.padolsey.com/jquery">http://james.padolsey.com/jquery</a></td></tr><tr><td align="left">Web前端资源汇总(jQuery,Js,Css3等)</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/jihua/p/webfront.html">http://www.cnblogs.com/jihua/p/webfront.html</a></td></tr></tbody></table><h2 id="D3"><a href="#D3" class="headerlink" title="D3"></a>D3</h2><table><thead><tr><th align="left">D3</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">d3 Tutorials</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mbostock/d3/wiki/Tutorials">https://github.com/mbostock/d3/wiki/Tutorials</a></td></tr><tr><td align="left">Gallery</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mbostock/d3/wiki/Gallery">https://github.com/mbostock/d3/wiki/Gallery</a></td></tr><tr><td align="left">lofter</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://datavisual.lofter.com/post/40cf3a_188e535">http://datavisual.lofter.com/post/40cf3a_188e535</a></td></tr><tr><td align="left">iteye</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://alanland.iteye.com/blog/1878595">http://alanland.iteye.com/blog/1878595</a></td></tr><tr><td align="left">ruanyifeng</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://javascript.ruanyifeng.com/library/d3.html">http://javascript.ruanyifeng.com/library/d3.html</a></td></tr></tbody></table><h2 id="Requriejs"><a href="#Requriejs" class="headerlink" title="Requriejs"></a>Requriejs</h2><table><thead><tr><th align="left">Requriejs</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Javascript模块化编程（一）：模块的写法</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com/blog/2012/10/javascript_module.html">http://www.ruanyifeng.com/blog/2012/10/javascript_module.html</a></td></tr><tr><td align="left">Javascript模块化编程（二）：AMD规范</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html">http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html</a></td></tr><tr><td align="left">Javascript模块化编程（三）：require.js的用法</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com/blog/2012/11/require_js.html">http://www.ruanyifeng.com/blog/2012/11/require_js.html</a></td></tr><tr><td align="left">RequireJS入门（一）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/snandy/archive/2012/05/22/2513652.html">http://www.cnblogs.com/snandy/archive/2012/05/22/2513652.html</a></td></tr><tr><td align="left">RequireJS入门（二）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/snandy/archive/2012/05/23/2513712.html">http://www.cnblogs.com/snandy/archive/2012/05/23/2513712.html</a></td></tr><tr><td align="left">RequireJS进阶（三）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/snandy/archive/2012/06/08/2538001.html">http://www.cnblogs.com/snandy/archive/2012/06/08/2538001.html</a></td></tr><tr><td align="left">requrie源码学习</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/yexiaochai/p/3632580.html">http://www.cnblogs.com/yexiaochai/p/3632580.html</a></td></tr><tr><td align="left">requrie 入门指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.oschina.net/translate/getting-started-with-the-requirejs-library">http://www.oschina.net/translate/getting-started-with-the-requirejs-library</a></td></tr><tr><td align="left">requrieJS 学习笔记</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/yexiaochai/p/3214926.html">http://www.cnblogs.com/yexiaochai/p/3214926.html</a></td></tr><tr><td align="left">requriejs 其一</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cyj.me/why-seajs/requirejs/">http://cyj.me/why-seajs/requirejs/</a></td></tr><tr><td align="left">require backbone结合</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/yexiaochai/p/3221081.html">http://www.cnblogs.com/yexiaochai/p/3221081.html</a></td></tr></tbody></table><h2 id="Seajs"><a href="#Seajs" class="headerlink" title="Seajs"></a>Seajs</h2><table><thead><tr><th align="left">Seajs</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">seajs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://seajs.org/">http://seajs.org</a></td></tr><tr><td align="left">seajs 中文手册</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cyj.me/why-seajs/zh">http://cyj.me/why-seajs/zh</a></td></tr></tbody></table><h2 id="Less-sass"><a href="#Less-sass" class="headerlink" title="Less,sass"></a>Less,sass</h2><table><thead><tr><th align="left">Less,sass</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">sass</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3cplus.com/sassguide">http://www.w3cplus.com/sassguide</a></td></tr><tr><td align="left">sass教程-sass中国</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.sass.hk/">http://www.sass.hk</a></td></tr><tr><td align="left">Sass 中文文档</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sass.bootcss.com/">http://sass.bootcss.com</a></td></tr><tr><td align="left">less</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://less.bootcss.com/">http://less.bootcss.com</a></td></tr></tbody></table><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><table><thead><tr><th align="left">Markdown</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Markdown 语法说明 (简体中文版</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://wowubuntu.com/markdown">http://wowubuntu.com/markdown</a></td></tr><tr><td align="left">markdown入门参考</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/LearnShare/Learning-Markdown/blob/master/README.md">https://github.com/LearnShare/Learning-Markdown/blob/master/README.md</a></td></tr><tr><td align="left">gitbook</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.gitbook.com/">https://www.gitbook.com</a> 国外的在线markdown可编辑成书</td></tr><tr><td align="left">mdeditor</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.zybuluo.com/mdeditor">https://www.zybuluo.com/mdeditor</a> 一款国内的在线markdown编辑器</td></tr><tr><td align="left">stackedit</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://stackedit.io/">https://stackedit.io</a> 国外的在线markdown编辑器，功能强大，同步云盘</td></tr><tr><td align="left">mditor</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bh-lay.github.io/mditor">http://bh-lay.github.io/mditor</a> 一款轻量级的markdown编辑器</td></tr><tr><td align="left">lepture-editor</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/lepture/editor">https://github.com/lepture/editor</a></td></tr><tr><td align="left">markdown-editor</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jbt/markdown-editor">https://github.com/jbt/markdown-editor</a></td></tr><tr><td align="left">作业部落</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.zybuluo.com/">https://www.zybuluo.com</a> 功能强大，速度流畅，全平台同步</td></tr></tbody></table><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><table><thead><tr><th align="left">兼容性</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">esma 兼容列表</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://kangax.github.io/compat-table/es6">http://kangax.github.io/compat-table/es6</a></td></tr><tr><td align="left">W3C CSS验证服务</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jigsaw.w3.org/css-validator/validator.html.zh-cn">http://jigsaw.w3.org/css-validator/validator.html.zh-cn</a></td></tr><tr><td align="left">caniuse</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://caniuse.com/%23index">http://caniuse.com/#index</a></td></tr><tr><td align="left">csscreator</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://csscreator.com/properties">http://csscreator.com/properties</a></td></tr><tr><td align="left">microsoft</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://msdn.microsoft.com/zh-cn/library/cc351024(v=vs.85.aspx">https://msdn.microsoft.com/zh-cn/library/cc351024(v=vs.85.aspx</a></td></tr><tr><td align="left">在线测兼容-移动端</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.responsinator.com/">http://www.responsinator.com</a></td></tr><tr><td align="left">emulators</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.manymo.com/emulators">https://www.manymo.com/emulators</a></td></tr></tbody></table><h2 id="UI相关"><a href="#UI相关" class="headerlink" title="UI相关"></a>UI相关</h2><table><thead><tr><th align="left">UI相关</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Foundation</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://foundation.zurb.com/?form=jeffjade.com">http://foundation.zurb.com/?form=jeffjade.com</a></td></tr><tr><td align="left">Bootcss</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://v3.bootcss.com/?form=jeffjade.com">http://v3.bootcss.com/?form=jeffjade.com</a></td></tr><tr><td align="left">Element UI</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://element.eleme.io/%23/zh-CN">http://element.eleme.io/#/zh-CN</a> 基于Vue</td></tr><tr><td align="left">ANT DESIGN</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ant.design/">http://ant.design</a> 一个 UI 设计语言</td></tr><tr><td align="left">Smart UI</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://smartui.chinamzz.com/">http://smartui.chinamzz.com</a></td></tr><tr><td align="left">MetroUICSS</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3cplus.com/MetroUICSS">http://www.w3cplus.com/MetroUICSS</a></td></tr><tr><td align="left">Semantic</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://semantic-ui.com/">http://semantic-ui.com</a></td></tr><tr><td align="left">Layui</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.layui.com/?form=jeffjade.com">http://www.layui.com/?form=jeffjade.com</a></td></tr><tr><td align="left">Buttons</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://alexwolfe.github.io/Buttons">http://alexwolfe.github.io/Buttons</a></td></tr><tr><td align="left">kitecss</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://hiloki.github.io/kitecss">http://hiloki.github.io/kitecss</a></td></tr><tr><td align="left">pintuer</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.pintuer.com/">http://www.pintuer.com</a></td></tr><tr><td align="left">amazeui</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://amazeui.org/">http://amazeui.org</a></td></tr><tr><td align="left">worldhello</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.worldhello.net/gotgithub/index.html">http://www.worldhello.net/gotgithub/index.html</a></td></tr><tr><td align="left">linuxtoy</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://igit.linuxtoy.org/contents.html">http://igit.linuxtoy.org/contents.html</a></td></tr><tr><td align="left">gitmagic</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn">http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn</a></td></tr><tr><td align="left">rogerdudler</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://rogerdudler.github.io/git-guide/index.zh.html">http://rogerdudler.github.io/git-guide/index.zh.html</a></td></tr><tr><td align="left">gitref</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://gitref.justjavac.com/">http://gitref.justjavac.com</a></td></tr><tr><td align="left">book</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://git-scm.com/book/zh">http://git-scm.com/book/zh</a></td></tr><tr><td align="left">gogojimmy</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic">http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic</a></td></tr></tbody></table><h2 id="其它API"><a href="#其它API" class="headerlink" title="其它API"></a>其它API</h2><table><thead><tr><th align="left">其它API</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">HTTP API 设计指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/bookmark/1230000002521721">http://segmentfault.com/bookmark/1230000002521721</a></td></tr><tr><td align="left">javascript流行库汇总</td><td align="left">javascriptoo</td></tr><tr><td align="left">验证api</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://niceue.com/validator/demo/index.php">http://niceue.com/validator/demo/index.php</a></td></tr><tr><td align="left">underscore 中文手册</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.css88.com/doc/underscore">http://www.css88.com/doc/underscore</a></td></tr><tr><td align="left">underscore源码分析</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/Underscorejs-source-code-analysis-of-underscorejs-source-code-analysis%203031">http://www.html-js.com/article/Underscorejs-source-code-analysis-of-underscorejs-source-code-analysis%203031</a></td></tr><tr><td align="left">underscore源码分析-亚里士朱德的博客</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yalishizhude.github.io/tags/underscore">http://yalishizhude.github.io/tags/underscore</a></td></tr><tr><td align="left">underscrejs en api</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://underscorejs.org/">http://underscorejs.org</a></td></tr><tr><td align="left">lodash - underscore的代替品</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://lodash.com/">https://lodash.com</a></td></tr><tr><td align="left">ext4api</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://extjs-doc-cn.github.io/ext4api">http://extjs-doc-cn.github.io/ext4api</a></td></tr><tr><td align="left">qwrap手册</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://dev.qwrap.com/resource/js/_docs/_youa/%23/qw/base/loadJs_.htm">http://dev.qwrap.com/resource/js/_docs/<em>youa/#/qw/base/loadJs</em>.htm</a></td></tr><tr><td align="left">缓动函数</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://easings.net/zh-cn">http://easings.net/zh-cn</a></td></tr><tr><td align="left">svg 中文参考</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3school.com.cn/svg/svg_reference.asp">http://www.w3school.com.cn/svg/svg_reference.asp</a></td></tr><tr><td align="left">svg mdn参考</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.mozilla.org/en-US/docs/Web/SVG">https://developer.mozilla.org/en-US/docs/Web/SVG</a></td></tr><tr><td align="left">svg 导出 canvas</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/gabelerner/canvg">https://github.com/gabelerner/canvg</a></td></tr><tr><td align="left">svg 导出 png</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/exupero/saveSvgAsPng">https://github.com/exupero/saveSvgAsPng</a></td></tr><tr><td align="left">ai-to-svg</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zamzar.com/convert/ai-to-svg">http://www.zamzar.com/convert/ai-to-svg</a></td></tr><tr><td align="left">localStorage 库</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/machao/localStorage">https://github.com/machao/localStorage</a></td></tr></tbody></table><h2 id="图表类"><a href="#图表类" class="headerlink" title="图表类"></a>图表类</h2><table><thead><tr><th align="left">图表类</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Highcharts 中文API</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.hcharts.cn/api/index.php">http://www.hcharts.cn/api/index.php</a></td></tr><tr><td align="left">Highcharts 英文API</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://api.highcharts.com/highcharts">http://api.highcharts.com/highcharts</a></td></tr><tr><td align="left">ECharts 百度的图表软件</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://echarts.baidu.com/">http://echarts.baidu.com/</a></td></tr><tr><td align="left">高德地图</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://lbs.amap.com/api">http://lbs.amap.com/api</a></td></tr><tr><td align="left">开源的矢量图脚本框架</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://paperjs.org/">http://paperjs.org</a></td></tr><tr><td align="left">svg 地图</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jvectormap.com/">http://jvectormap.com</a></td></tr></tbody></table><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><table><thead><tr><th align="left">正则</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">JS正则表达式元字符</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000002471140">http://segmentfault.com/a/1190000002471140</a></td></tr><tr><td align="left">正则表达式30分钟入门教程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://deerchao.net/tutorials/regex/regex.htm">http://deerchao.net/tutorials/regex/regex.htm</a></td></tr><tr><td align="left">MDN-正则表达式</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></td></tr><tr><td align="left">ruanyifeng - RegExp对象</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://javascript.ruanyifeng.com/stdlib/regexp.html">http://javascript.ruanyifeng.com/stdlib/regexp.html</a></td></tr><tr><td align="left">小胡子哥 - 进阶正则表达式</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://div.io/topic/764?page=1">http://div.io/topic/764?page=1</a></td></tr><tr><td align="left">is.js</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Cedriking/is.js/blob/master/is.js">https://github.com/Cedriking/is.js/blob/master/is.js</a></td></tr><tr><td align="left">正则在线测试</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://regexper.com/">http://regexper.com</a></td></tr></tbody></table><h2 id="前端规范"><a href="#前端规范" class="headerlink" title="前端规范"></a>前端规范</h2><table><thead><tr><th align="left">前端规范</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">通过分析github代码库总结出来的工程师代码书写习惯</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://alloyteam.github.io/CodeGuide">http://alloyteam.github.io/CodeGuide</a></td></tr><tr><td align="left">HTML&amp;CSS编码规范 by @mdo</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://codeguide.bootcss.com/">http://codeguide.bootcss.com</a></td></tr><tr><td align="left">团队合作的css命名规范-腾讯AlloyTeam前端团队</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/2011/10/css-on-team-naming/">http://www.alloyteam.com/2011/10/css-on-team-naming/</a></td></tr><tr><td align="left">前端编码规范之js - by yuwenhui</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yuwenhui.github.io/">http://yuwenhui.github.io</a></td></tr><tr><td align="left">前端编码规范之js - by 李靖</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/hustskyking/p/javascript-spec.html">http://www.cnblogs.com/hustskyking/p/javascript-spec.html</a></td></tr><tr><td align="left">前端开发规范手册</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zhibimo.com/read/Ashu/front-end-style-guide">http://zhibimo.com/read/Ashu/front-end-style-guide</a></td></tr><tr><td align="left">Airbnb JavaScript 编码规范（简体中文版）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/yuche/javascript%23table-of-contents">https://github.com/yuche/javascript#table-of-contents</a></td></tr><tr><td align="left">AMD与CMD规范的区别</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/20351507">http://www.zhihu.com/question/20351507</a></td></tr><tr><td align="left">AMD与CMD规范的区别</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/tugenhua0707/p/3507957.html">http://www.cnblogs.com/tugenhua0707/p/3507957.html</a></td></tr><tr><td align="left">KISSY 源码规范</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html">http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html</a></td></tr><tr><td align="left">bt编码规范</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://codeguide.bootcss.com/">http://codeguide.bootcss.com</a></td></tr><tr><td align="left">规范加强版</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Suxiaogang/Code_Guide">https://github.com/Suxiaogang/Code_Guide</a></td></tr><tr><td align="left">前端代码规范 及 最佳实践</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.jobbole.com/79075">http://blog.jobbole.com/79075</a></td></tr><tr><td align="left">百度前端规范</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://coderlmn.github.io/code-standards">http://coderlmn.github.io/code-standards</a></td></tr><tr><td align="left">百度前端规范</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://isobar-idev.github.io/code-standards">http://isobar-idev.github.io/code-standards</a></td></tr><tr><td align="left">百度前端规范</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zhuanlan.zhihu.com/fuyun/19884834">http://zhuanlan.zhihu.com/fuyun/19884834</a></td></tr><tr><td align="left">ECMAScript6 编码规范–广发证券前端团队</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/gf-rd/es6-coding-style">https://github.com/gf-rd/es6-coding-style</a></td></tr><tr><td align="left">JavaScript 风格指南/编码规范（Airbnb公司版）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.jobbole.com/79484">http://blog.jobbole.com/79484</a></td></tr><tr><td align="left">网易前端开发规范</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://nec.netease.com/standard">http://nec.netease.com/standard</a></td></tr><tr><td align="left">css模块</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.75team.com/archives/1049">http://www.75team.com/archives/1049</a></td></tr><tr><td align="left">前端规范资源列表</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ecomfe/spec">https://github.com/ecomfe/spec</a></td></tr></tbody></table><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><table><thead><tr><th align="left">PHP</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">最流行的PHP 代码规范</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000000443795">http://segmentfault.com/a/1190000000443795</a></td></tr><tr><td align="left">最流行的PHP 代码规范</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md">https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md</a></td></tr></tbody></table><h2 id="各大公司开源项目"><a href="#各大公司开源项目" class="headerlink" title="各大公司开源项目"></a>各大公司开源项目</h2><table><thead><tr><th align="left">各大公司开源项目</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Facebook Projects</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://code.facebook.com/projects/web">https://code.facebook.com/projects/web</a></td></tr><tr><td align="left">百度web前端研发部</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fex.baidu.com/">http://fex.baidu.com</a></td></tr><tr><td align="left">百度EFE</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://efe.baidu.com/">http://efe.baidu.com</a></td></tr><tr><td align="left">百度github</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/fex-team">https://github.com/fex-team</a></td></tr><tr><td align="left">alloyteam</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/">http://www.alloyteam.com</a></td></tr><tr><td align="left">alloyteam-github</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://alloyteam.github.io/">http://alloyteam.github.io</a></td></tr><tr><td align="left">alloyteam-AlloyGameEngine</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/AlloyTeam/AlloyGameEngine">https://github.com/AlloyTeam/AlloyGameEngine</a></td></tr><tr><td align="left">AlloyDesigner</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://alloyteam.github.io/AlloyDesigner">http://alloyteam.github.io/AlloyDesigner</a> 即时修改，即时保存，设计稿较正，其它开发辅助工具</td></tr><tr><td align="left">H5交互页编辑器AEditor介绍</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/2015/06/h5-jiao-hu-ye-bian-ji-qi-aeditor-jie-shao">http://www.alloyteam.com/2015/06/h5-jiao-hu-ye-bian-ji-qi-aeditor-jie-shao</a> H5动画交互页开发的工具介绍</td></tr><tr><td align="left">AEditor</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://aeditor.alloyteam.com/">http://aeditor.alloyteam.com</a> H5动画交互页开发的工具</td></tr><tr><td align="left">值得订阅的weekly</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/fenbility/weekly-feed">https://github.com/fenbility/weekly-feed</a></td></tr><tr><td align="left">奇舞团开源项目</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://75team.github.io/">http://75team.github.io</a></td></tr><tr><td align="left">Qunar UED</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ued.qunar.com/">http://ued.qunar.com</a></td></tr></tbody></table><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><table><thead><tr><th align="left">常用</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">ieBetter.js-让IE6-IE8拥有IE9+,Chrome等浏览器特性</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhangxinxu.com/wordpress/2013/12/iebetter-js-make-ie6-ie8-like-modern-browser-ie9-chrome">http://www.zhangxinxu.com/wordpress/2013/12/iebetter-js-make-ie6-ie8-like-modern-browser-ie9-chrome</a></td></tr><tr><td align="left">模拟键盘</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://mottie.github.io/Keyboard">http://mottie.github.io/Keyboard</a></td></tr><tr><td align="left">拼音</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hotoo/pinyin">https://github.com/hotoo/pinyin</a></td></tr><tr><td align="left">中国个人身份证号验证</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mc-zone/IDValidator">https://github.com/mc-zone/IDValidator</a></td></tr></tbody></table><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><table><thead><tr><th align="left">算法</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">数据结构与算法 JavaScript 描述. 章节练习</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Ralph-Wang/algorithm.in.js">https://github.com/Ralph-Wang/algorithm.in.js</a></td></tr><tr><td align="left">常见排序算法（JS版）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/twobin/twobinSort">https://github.com/twobin/twobinSort</a></td></tr><tr><td align="left">经典排序</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/luofei2011/jsAgm/blob/master/js/sort.js">https://github.com/luofei2011/jsAgm/blob/master/js/sort.js</a></td></tr><tr><td align="left">常见排序算法-js版本</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hechangmin/jssort">https://github.com/hechangmin/jssort</a></td></tr><tr><td align="left">JavaScript 算法与数据结构 精华集</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/lightningtgc/JavaScript-Algorithms">https://github.com/lightningtgc/JavaScript-Algorithms</a></td></tr><tr><td align="left">面试常考算法题精讲</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.nowcoder.com/live/courses">http://www.nowcoder.com/live/courses</a></td></tr></tbody></table><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><table><thead><tr><th align="left">移动端</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">fastclick</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></td></tr><tr><td align="left">no-click-delay</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mmastrac/jquery-noclickdelay">https://github.com/mmastrac/jquery-noclickdelay</a></td></tr><tr><td align="left">【敏捷开发】Android团队开发规范</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/lcw/p/3619181.html">http://www.cnblogs.com/lcw/p/3619181.html</a></td></tr><tr><td align="left">Android 开发规范与应用</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jianshu.com/p/4390f4fe19b3">http://www.jianshu.com/p/4390f4fe19b3</a></td></tr><tr><td align="left">ionic</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ychow/ionic-guide">https://github.com/ychow/ionic-guide</a></td></tr></tbody></table><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><table><thead><tr><th align="left">JSON</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">模拟生成JSON数据</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://beta.json-generator.com/">http://beta.json-generator.com</a></td></tr></tbody></table><h2 id="焦点图"><a href="#焦点图" class="headerlink" title="焦点图"></a>焦点图</h2><table><thead><tr><th align="left">焦点图</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">myfocus</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/koen301/myfocus">https://github.com/koen301/myfocus</a></td></tr><tr><td align="left">myfocus-官方演示站</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.chhua.com/myfocus">http://www.chhua.com/myfocus</a></td></tr><tr><td align="left">SuperSlidev2.1 – 大话主席</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.superslide2.com/">http://www.superslide2.com</a></td></tr><tr><td align="left">soChange</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.bujichong.com/sojs/soChange/index.html">http://www.bujichong.com/sojs/soChange/index.html</a></td></tr></tbody></table><h2 id="Ext-EasyUI-J-UI-及其它各种UI方案"><a href="#Ext-EasyUI-J-UI-及其它各种UI方案" class="headerlink" title="Ext, EasyUI, J-UI 及其它各种UI方案"></a>Ext, EasyUI, J-UI 及其它各种UI方案</h2><table><thead><tr><th align="left">Ext, EasyUI, J-UI 及其它各种UI方案</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">雅虎UI - CSS UI</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://developer.yahoo.com/yui/grids">http://developer.yahoo.com/yui/grids</a></td></tr><tr><td align="left">extjs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.sencha.com/products/extjs">https://www.sencha.com/products/extjs</a></td></tr><tr><td align="left">ext4英文api</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://docs.sencha.com/extjs/4.0.7">http://docs.sencha.com/extjs/4.0.7</a></td></tr><tr><td align="left">ext4中文api</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://extjs-doc-cn.github.io/ext4api">http://extjs-doc-cn.github.io/ext4api</a></td></tr><tr><td align="left">jquery easyui 未压缩源代码</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jquery-easyui.googlecode.com/svn/trunk/src">http://jquery-easyui.googlecode.com/svn/trunk/src</a></td></tr><tr><td align="left">J-UI</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jui.org/">http://jui.org</a></td></tr><tr><td align="left">MUI-最接近原生APP体验的高性能前端框架</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://dcloudio.github.io/mui">http://dcloudio.github.io/mui</a></td></tr><tr><td align="left">Amaze UI(中国首个开源 HTML5 跨屏前端框架)</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://amazeui.org/">http://amazeui.org</a></td></tr><tr><td align="left">淘宝 HTML5 前端框架</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://m.sui.taobao.org/">http://m.sui.taobao.org</a></td></tr><tr><td align="left">KISSY - 阿里前端JavaScript库</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://docs.kissyui.com/">http://docs.kissyui.com</a></td></tr><tr><td align="left">网易Nej - Nice Easy Javascript</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://nej.netease.com/">http://nej.netease.com</a></td></tr><tr><td align="left">Kendo UI MVVM Demo</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://demos.telerik.com/kendo-ui/mvvm/index">http://demos.telerik.com/kendo-ui/mvvm/index</a></td></tr></tbody></table><h2 id="页面-社会化-分享功能"><a href="#页面-社会化-分享功能" class="headerlink" title="页面 社会化 分享功能"></a>页面 社会化 分享功能</h2><table><thead><tr><th align="left">页面 社会化 分享功能</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">百度分享</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://share.baidu.com/">http://share.baidu.com</a> pc端</td></tr><tr><td align="left">JiaThis</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jiathis.com/">http://jiathis.com</a> pc端</td></tr><tr><td align="left">社会化分享组件</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://developer.baidu.com/soc/share">http://developer.baidu.com/soc/share</a> 移动端</td></tr><tr><td align="left">ShareSDK 轻松实现社会化功能</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.mob.com/%23/index">http://www.mob.com/#/index</a> 移动端</td></tr><tr><td align="left">友盟分享</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://dev.umeng.com/social/android/quick-integration">http://dev.umeng.com/social/android/quick-integration</a> 移动端</td></tr></tbody></table><h2 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h2><table><thead><tr><th align="left">富文本编辑器</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">功能齐全 tinymce</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.tinymce.com/">https://www.tinymce.com</a></td></tr><tr><td align="left">百度 ueditor</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ueditor.baidu.com/website">http://ueditor.baidu.com/website</a></td></tr><tr><td align="left">经典的ckeditor</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ckeditor.com/">http://ckeditor.com</a></td></tr><tr><td align="left">经典的kindeditor</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://kindeditor.net/">http://kindeditor.net</a></td></tr><tr><td align="left">wysiwyg</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.bootcss.com/p/bootstrap-wysiwyg">http://www.bootcss.com/p/bootstrap-wysiwyg</a></td></tr><tr><td align="left">一个有情怀的编辑器。Bach’s Editor</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://integ.github.io/BachEditor">http://integ.github.io/BachEditor</a></td></tr><tr><td align="left">tower用的编辑器</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mycolorway/simditor">https://github.com/mycolorway/simditor</a></td></tr><tr><td align="left">summernote 编辑器</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/summernote/summernote">https://github.com/summernote/summernote</a></td></tr><tr><td align="left">html5编辑器</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://neilj.github.io/Squire">http://neilj.github.io/Squire</a></td></tr><tr><td align="left">Quilljs编辑器</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://quilljs.com/">http://quilljs.com</a></td></tr><tr><td align="left">wangEditor</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/wangfupeng1988/wangEditor">https://github.com/wangfupeng1988/wangEditor</a></td></tr></tbody></table><h2 id="前端概述"><a href="#前端概述" class="headerlink" title="前端概述"></a>前端概述</h2><table><thead><tr><th align="left">前端概述</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">前端工具大全</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.awesomes.cn/">http://www.awesomes.cn</a></td></tr><tr><td align="left">什么是前端工程化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/fouber/blog/issues/10?from=timeline&amp;isappinstalled=0%23">https://github.com/fouber/blog/issues/10?from=timeline&amp;isappinstalled=0#</a></td></tr><tr><td align="left">[译] 前端攻略-从路人甲到英雄无敌</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://segmentfault.com/a/1190000005174755">https://segmentfault.com/a/1190000005174755</a></td></tr></tbody></table><h2 id="pc图轮"><a href="#pc图轮" class="headerlink" title="pc图轮"></a>pc图轮</h2><table><thead><tr><th align="left">pc图轮</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Vue 的图片轮播组件:vue-slider</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/qusiba/vue-slider">https://github.com/qusiba/vue-slider</a></td></tr><tr><td align="left">左右按钮多图切换</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bxslider.com/examples/carousel-demystified">http://bxslider.com/examples/carousel-demystified</a></td></tr><tr><td align="left">fullpage全屏轮播</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/alvarotrigo/fullPage.js">https://github.com/alvarotrigo/fullPage.js</a></td></tr></tbody></table><h2 id="移动端图轮"><a href="#移动端图轮" class="headerlink" title="移动端图轮"></a>移动端图轮</h2><table><thead><tr><th align="left">移动端图轮</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">滑屏效果</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.idangero.us/swiper">http://www.idangero.us/swiper</a></td></tr><tr><td align="left">全屏fullpage</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/peunzhang/fullpage">https://github.com/peunzhang/fullpage</a></td></tr><tr><td align="left">单个图片切换</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/qiqiboy/touchslider">https://github.com/qiqiboy/touchslider</a></td></tr><tr><td align="left">单个全屏切换</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/peunzhang/slip.js">https://github.com/peunzhang/slip.js</a></td></tr><tr><td align="left">单个全屏切换</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/peunzhang/iSlider">https://github.com/peunzhang/iSlider</a></td></tr><tr><td align="left">滑屏效果</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/saw/touch-interfaces">https://github.com/saw/touch-interfaces</a></td></tr><tr><td align="left">旋转拖动设置</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://baijs.com/tinycircleslider">http://baijs.com/tinycircleslider</a></td></tr><tr><td align="left">类似于swipe切换</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://touchslider.com/">http://touchslider.com</a></td></tr><tr><td align="left">支持多种形式的触摸滑动</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.swiper.com.cn/demo/index.html">http://www.swiper.com.cn/demo/index.html</a></td></tr><tr><td align="left">滑屏效果</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/joker-ye/main/blob/master/wap/index.html">https://github.com/joker-ye/main/blob/master/wap/index.html</a></td></tr><tr><td align="left">大话主席pc移动图片轮换</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.superslide2.com/">http://www.superslide2.com</a></td></tr><tr><td align="left">滑屏效果</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hahnzhu/parallax.js">https://github.com/hahnzhu/parallax.js</a></td></tr><tr><td align="left">基于zepto的fullpage</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/yanhaijing/zepto.fullpage">https://github.com/yanhaijing/zepto.fullpage</a></td></tr><tr><td align="left">[WebApp]定宽网页设计下，固定宽度布局开发WebApp并实现多终端下WebApp布局自适应</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/plums/archive/2013/01/10/WebApp-fixed-width-layout-of-multi-terminal-adapter-since.html">http://www.cnblogs.com/plums/archive/2013/01/10/WebApp-fixed-width-layout-of-multi-terminal-adapter-since.html</a></td></tr><tr><td align="left">判断微信客户端的那些坑</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://loo2k.com/blog/detecting-wechat-client">http://loo2k.com/blog/detecting-wechat-client</a></td></tr><tr><td align="left">可以通过javascript直接调用原生分享的工具</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/JefferyWang/nativeShare.js">https://github.com/JefferyWang/nativeShare.js</a></td></tr><tr><td align="left">JiaThis 分享到微信代码</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jiathis.com/help/html/weixin-share-code">http://www.jiathis.com/help/html/weixin-share-code</a></td></tr><tr><td align="left">聊聊移动端跨平台开发的各种技术</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fex.baidu.com/blog/2015/05/cross-mobile">http://fex.baidu.com/blog/2015/05/cross-mobile</a></td></tr><tr><td align="left">前端自动化测试</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/29922082">http://www.zhihu.com/question/29922082</a></td></tr><tr><td align="left">多种轮换图片</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ajccom.github.io/niceslider">http://ajccom.github.io/niceslider</a></td></tr><tr><td align="left">滑动侧边栏</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://mango.github.io/slideout">https://mango.github.io/slideout</a></td></tr></tbody></table><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><table><thead><tr><th align="left">文件上传</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">百度上传组件</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fex.baidu.com/webuploader">http://fex.baidu.com/webuploader</a></td></tr><tr><td align="left">上传</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://blueimp.github.io/jQuery-File-Upload">https://blueimp.github.io/jQuery-File-Upload</a></td></tr><tr><td align="left">flash 头像上传</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.hdfu.net/">http://www.hdfu.net</a></td></tr><tr><td align="left">图片上传预览</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.dropzonejs.com/">http://www.dropzonejs.com</a></td></tr><tr><td align="left">图片裁剪</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://elemefe.github.io/image-cropper">http://elemefe.github.io/image-cropper</a></td></tr><tr><td align="left">图片裁剪-shearphoto</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.shearphoto.com/">http://www.shearphoto.com</a></td></tr><tr><td align="left">jQuery图片处理</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.oschina.net/project/tag/284/jquery-image-tools?lang=0&amp;os=0&amp;sort=view&amp;p=2">http://www.oschina.net/project/tag/284/jquery-image-tools?lang=0&amp;os=0&amp;sort=view&amp;p=2</a></td></tr></tbody></table><h2 id="模拟select"><a href="#模拟select" class="headerlink" title="模拟select"></a>模拟select</h2><table><thead><tr><th align="left">模拟select</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">糖饼 select</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://aui.github.io/popupjs/doc/selectbox.html">http://aui.github.io/popupjs/doc/selectbox.html</a></td></tr><tr><td align="left">flexselect</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/rmm5t/jquery-flexselect">https://github.com/rmm5t/jquery-flexselect</a></td></tr><tr><td align="left">双select</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://loudev.com/">http://loudev.com</a></td></tr><tr><td align="left">select2</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://select2.github.io/">http://select2.github.io</a></td></tr></tbody></table><h2 id="取色插件"><a href="#取色插件" class="headerlink" title="取色插件"></a>取色插件</h2><table><thead><tr><th align="left">取色插件</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">类似 Photoshop 的界面取色插件</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jq22.com/plugin/367">http://www.jq22.com/plugin/367</a></td></tr><tr><td align="left">jquery color</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jquery/jquery-color">https://github.com/jquery/jquery-color</a></td></tr><tr><td align="left">取色插件集合</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.oschina.net/project/tag/287/color-picker">http://www.oschina.net/project/tag/287/color-picker</a></td></tr><tr><td align="left">farbtastic 圆环＋正方形</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mattfarina/farbtastic">https://github.com/mattfarina/farbtastic</a></td></tr></tbody></table><h2 id="城市联动"><a href="#城市联动" class="headerlink" title="城市联动"></a>城市联动</h2><table><thead><tr><th align="left">城市联动</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">jquery.cityselect.js基于jQuery+JSON的省市或自定义联动效果</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ijquery.cn/?p=360">http://www.ijquery.cn/?p=360</a></td></tr></tbody></table><h2 id="剪贴板"><a href="#剪贴板" class="headerlink" title="剪贴板"></a>剪贴板</h2><table><thead><tr><th align="left">剪贴板</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">剪贴板</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/zeroclipboard/zeroclipboard">https://github.com/zeroclipboard/zeroclipboard</a></td></tr><tr><td align="left">clipboard 最新的剪切方案</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zenorocha.github.io/clipboard.js">http://zenorocha.github.io/clipboard.js</a></td></tr><tr><td align="left">不是Flash的剪贴板</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/zenorocha/clipboard.js">https://github.com/zenorocha/clipboard.js</a></td></tr></tbody></table><h2 id="简繁转换"><a href="#简繁转换" class="headerlink" title="简繁转换"></a>简繁转换</h2><table><thead><tr><th align="left">简繁转换</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">简繁转换</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/BYVoid/OpenCC">https://github.com/BYVoid/OpenCC</a></td></tr></tbody></table><h2 id="表格-Grid"><a href="#表格-Grid" class="headerlink" title="表格 Grid"></a>表格 Grid</h2><table><thead><tr><th align="left">表格 Grid</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">facebook表格</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://facebook.github.io/fixed-data-table">http://facebook.github.io/fixed-data-table</a></td></tr><tr><td align="left">类似于Excel编辑表格-handsontable</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://handsontable.com/">http://handsontable.com</a></td></tr><tr><td align="left">bootstrap-table插件</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bootstrap-table.wenzhixin.net.cn/">http://bootstrap-table.wenzhixin.net.cn</a></td></tr><tr><td align="left">datatables</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.datatables.net/">https://www.datatables.net</a></td></tr></tbody></table><h2 id="在线演示"><a href="#在线演示" class="headerlink" title="在线演示"></a>在线演示</h2><table><thead><tr><th align="left">在线演示</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">js 在线编辑 - runjs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://runjs.cn/">http://runjs.cn</a></td></tr><tr><td align="left">js 在线编辑 - jsbin</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jsbin.com/">http://jsbin.com</a></td></tr><tr><td align="left">js 在线编辑 - codepen</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://codepen.io/">http://codepen.io</a></td></tr><tr><td align="left">js 在线编辑 - jsfiddle</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jsfiddle.net/">http://jsfiddle.net</a></td></tr><tr><td align="left">java 在线编辑 - runjs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ideone.com/">http://ideone.com</a></td></tr><tr><td align="left">js 在线编辑 - hcharts</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://code.hcharts.cn/">http://code.hcharts.cn</a></td></tr><tr><td align="left">js 在线编辑 - jsdm</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jsdm.com/">http://jsdm.com</a></td></tr><tr><td align="left">sql 在线编辑 - sqlfiddle</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sqlfiddle.com/">http://sqlfiddle.com</a></td></tr><tr><td align="left">mozilla 在线编辑器</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://thimble.mozilla.org/">https://thimble.mozilla.org</a></td></tr></tbody></table><h2 id="常规优化"><a href="#常规优化" class="headerlink" title="常规优化"></a>常规优化</h2><table><thead><tr><th align="left">常规优化</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Javascript高性能动画与页面渲染</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering">http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering</a></td></tr><tr><td align="left">移动H5前端性能优化指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://isux.tencent.com/h5-performance.html">http://isux.tencent.com/h5-performance.html</a></td></tr><tr><td align="left">5173首页前端性能优化实践</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ued.5173.com/?p=1731">http://ued.5173.com/?p=1731</a></td></tr><tr><td align="left">给网页设计师和前端开发者看的前端性能优化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers">http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers</a></td></tr><tr><td align="left">复杂应用的 CSS 性能分析和优化建议</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.orzpoint.com/profiling-css-and-optimization-notes">http://www.orzpoint.com/profiling-css-and-optimization-notes</a></td></tr><tr><td align="left">张鑫旭——前端性能</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD">张鑫旭——前端性能</a></td></tr><tr><td align="left">前端性能监控总结</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.xiaoqiang.org/javascript/font-end-performance-monitor.html">http://www.xiaoqiang.org/javascript/font-end-performance-monitor.html</a></td></tr><tr><td align="left">网站性能优化之CSS无图片技术</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://udc.weibo.com/2013/05/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bcss%E6%97%A0%E5%9B%BE%E7%89%87%E6%8A%80%E6%9C%AF">网站性能优化之CSS无图片技术</a></td></tr><tr><td align="left">web前端性能优化进阶路</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html">web前端性能优化进阶路</a></td></tr><tr><td align="left">前端技术：网站性能优化之CSS无图片技术</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://my.eoe.cn/tuwandou/archive/4544.html">http://my.eoe.cn/tuwandou/archive/4544.html</a></td></tr><tr><td align="left">浏览器的加载与页面性能优化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.baiduux.com/blog/2011/02/15/browser-loading">http://www.baiduux.com/blog/2011/02/15/browser-loading</a></td></tr><tr><td align="left">页面加载中的图片性能优化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3ctech.com/p/1503">http://www.w3ctech.com/p/1503</a></td></tr><tr><td align="left">Hey——前端性能</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD">Hey——前端性能</a></td></tr><tr><td align="left">html优化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.baiduux.com/blog/2010/03/15/html%E4%BC%98%E5%8C%96-2">html优化</a></td></tr><tr><td align="left">99css——性能</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.99css.com/tag/%E6%80%A7%E8%83%BD">99css——性能</a></td></tr><tr><td align="left">YSLOW中文介绍</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/yslow">http://www.cnblogs.com/yslow</a></td></tr><tr><td align="left">转一篇Yahoo关于网站性能优化的文章，兼谈本站要做的优化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.360ito.com/article/40.html">http://www.360ito.com/article/40.html</a></td></tr><tr><td align="left">Yahoo!团队实践分享：网站性能</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml">http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml</a></td></tr><tr><td align="left">网站性能优化指南：什么使我们的网站变慢？</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.jiasule.com/i/153">http://blog.jiasule.com/i/153</a></td></tr><tr><td align="left">网站性能优化实践，减少加载时间，提高用户体验</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.powereasy.net/helpyou/knowledge/ecommerce/9593.html">http://www.powereasy.net/helpyou/knowledge/ecommerce/9593.html</a></td></tr><tr><td align="left">前端重构实践之如何对网站性能优化？</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.adinnet.cn/blog/designview/2012-7-12/678.html">http://www.adinnet.cn/blog/designview/2012-7-12/678.html</a></td></tr><tr><td align="left">前端性能优化：使用媒体查询加载指定大小的背景图片</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.gbin1.com/technology/javascript/20130708-front-end-performance-optimization-9">http://www.gbin1.com/technology/javascript/20130708-front-end-performance-optimization-9</a></td></tr><tr><td align="left">网站性能系列博文</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.mykuer.com/post/factors-that-affect-the-speed-of-web-site-open.html">http://www.mykuer.com/post/factors-that-affect-the-speed-of-web-site-open.html</a></td></tr><tr><td align="left">加载，不只是少一点点</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml">http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml</a></td></tr><tr><td align="left">前端性能的测试与优化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://mzhou.me/article/95310">http://mzhou.me/article/95310</a></td></tr><tr><td align="left">分享网页加载速度优化的一些技巧？</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.gbin1.com/technology/html/20130217-tips-for-speed-up-page-loading">http://www.gbin1.com/technology/html/20130217-tips-for-speed-up-page-loading</a></td></tr><tr><td align="left">web前端优化(基于Yslow</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.tcreator.info/webSchool/website/Front-end-Opt-Yslow.html">http://www.tcreator.info/webSchool/website/Front-end-Opt-Yslow.html</a></td></tr><tr><td align="left">网站性能优化工具大全</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.qianduan.net/website-performance-optimization-tool.html">https://www.qianduan.net/website-performance-optimization-tool.html</a></td></tr><tr><td align="left">【高性能前端1】高性能HTML</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/2012/10/high-performance-html">http://www.alloyteam.com/2012/10/high-performance-html</a></td></tr><tr><td align="left">【高性能前端2】高性能CSS</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/2012/10/high-performance-css">http://www.alloyteam.com/2012/10/high-performance-css</a></td></tr><tr><td align="left">由12306谈谈网站前端性能和后端性能优化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://coolshell.cn/articles/6470.html">http://coolshell.cn/articles/6470.html</a></td></tr><tr><td align="left">AlloyTeam——前端优化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/webfrontend/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96">AlloyTeam——前端优化</a></td></tr><tr><td align="left">毫秒必争，前端网页性能最佳实践</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/developersupport/p/3248695.html">http://www.cnblogs.com/developersupport/p/3248695.html</a></td></tr><tr><td align="left">网站性能工具Yslow的使用方法</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.sina.com.cn/s/blog_6e9d2e0701017kvu.html">http://blog.sina.com.cn/s/blog_6e9d2e0701017kvu.html</a></td></tr><tr><td align="left">前端工程与性能优化（上）：静态资源版本更新与缓存</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1">http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1</a></td></tr><tr><td align="left">前端工程与性能优化（下）：静态资源管理与模板框架</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2">http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2</a></td></tr><tr><td align="left">HTTPS连接的前几毫秒发生了什么</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.jobbole.com/48369">http://blog.jobbole.com/48369</a></td></tr><tr><td align="left">Yslow</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://uicss.cn/yslow/%23more-12319">http://uicss.cn/yslow/#more-12319</a></td></tr><tr><td align="left">Essential Web Performance Metrics — A Primer, Part 1</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.smartbear.com/web-performance/essential-web-performance-metrics-a-primer-part-1">http://blog.smartbear.com/web-performance/essential-web-performance-metrics-a-primer-part-1</a></td></tr><tr><td align="left">Essential Web Performance Metrics — Part 2</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.smartbear.com/performance/essential-web-performance-metrics-part-2">http://blog.smartbear.com/performance/essential-web-performance-metrics-part-2</a></td></tr><tr><td align="left">YUISlide,针对移动设备的动画性能优化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jayli.github.io/blog/data/2011/12/23/yuislide.html">http://jayli.github.io/blog/data/2011/12/23/yuislide.html</a></td></tr><tr><td align="left">Improving Site Performance</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://joelglovier.com/improving-site-performance">http://joelglovier.com/improving-site-performance</a></td></tr><tr><td align="left">让网站提速的最佳前端实践</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000000367899">http://segmentfault.com/a/1190000000367899</a></td></tr><tr><td align="left">Why Website Speed is Important</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sixrevisions.com/web-development/why-website-speed-is-important">http://sixrevisions.com/web-development/why-website-speed-is-important</a></td></tr><tr><td align="left">Need for Speed – How to Improve your Website Performance</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.devbridge.com/articles/need-for-speed-how-to-improve-your-website-performance">https://www.devbridge.com/articles/need-for-speed-how-to-improve-your-website-performance</a></td></tr><tr><td align="left">阿里无线前端性能优化指南 (Pt.1 加载期优化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/amfe/article/issues/1">https://github.com/amfe/article/issues/1</a></td></tr></tbody></table><h2 id="优化工具"><a href="#优化工具" class="headerlink" title="优化工具"></a>优化工具</h2><table><thead><tr><th align="left">优化工具</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">JavaScript 性能分析新工具 OneProfile</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/3083">http://www.html-js.com/article/3083</a></td></tr><tr><td align="left">JavaScript 堆内存分析新工具 OneHeap</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/3091">http://www.html-js.com/article/3091</a></td></tr></tbody></table><h2 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h2><table><thead><tr><th align="left">在线工具</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">google在线工具</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developers.google.com/speed/pagespeed/insights">https://developers.google.com/speed/pagespeed/insights</a></td></tr><tr><td align="left">阿里-免费测试服务</td><td align="left"><a href="http://itest.aliyun.com/">http://itest.aliyun.com</a></td></tr><tr><td align="left">阿里-F2etest多浏览器兼容性测试解决方案</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/alibaba/f2etest">https://github.com/alibaba/f2etest</a></td></tr><tr><td align="left">js性能测试</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jsperf.com/">http://jsperf.com</a></td></tr></tbody></table><h2 id="前端架构"><a href="#前端架构" class="headerlink" title="前端架构"></a>前端架构</h2><table><thead><tr><th align="left">前端架构</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">技术架构</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/topic/19612641">http://www.zhihu.com/topic/19612641</a></td></tr><tr><td align="left">前端架构</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://saito.im/note/The-Architecture-of-F2E">http://saito.im/note/The-Architecture-of-F2E</a></td></tr><tr><td align="left">如何成为前端架构师</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/24092572">http://www.zhihu.com/question/24092572</a></td></tr><tr><td align="left">关于前端架构-张克军</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://hikejun.com/sharing/2010webrebuild/?file=fe-infrastructure.html">http://hikejun.com/sharing/2010webrebuild/?file=fe-infrastructure.html</a></td></tr><tr><td align="left">百度腾讯offer比较（腾讯游戏VS百度基础架构）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/25583350">http://www.zhihu.com/question/25583350</a></td></tr></tbody></table><h2 id="推荐作品"><a href="#推荐作品" class="headerlink" title="推荐作品"></a>推荐作品</h2><table><thead><tr><th align="left">推荐作品</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">winter代码片段需要FQ</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://gist.github.com/wintercn">https://gist.github.com/wintercn</a></td></tr><tr><td align="left">fgm</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.fgm.cc/learn">http://www.fgm.cc/learn</a></td></tr><tr><td align="left">岑安作品集</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hongru/hongru.github.com">https://github.com/hongru/hongru.github.com</a></td></tr><tr><td align="left">当耐特demo集合</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://kmdjs.github.io/">http://kmdjs.github.io</a></td></tr><tr><td align="left">米空格 js作品</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.laoshu133.com/Lab">http://www.laoshu133.com/Lab</a></td></tr><tr><td align="left">myFocus</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://koen301.github.io/">http://koen301.github.io</a></td></tr><tr><td align="left">SeaJS组件库</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://panxuepeng.github.io/seajslib">http://panxuepeng.github.io/seajslib</a></td></tr><tr><td align="left">颜海镜作品</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yanhaijing.com/myProject">http://yanhaijing.com/myProject</a></td></tr><tr><td align="left">脚儿网作品</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jo2.org/category/myworks">http://jo2.org/category/myworks</a></td></tr><tr><td align="left">javascript个人作品</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnitblog.com/yemoo/category/3107.html">http://www.cnitblog.com/yemoo/category/3107.html</a></td></tr><tr><td align="left">妙味的雷东升游戏作品</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bbs.miaov.com/forum.php?mod=viewthread&amp;tid=7790">http://bbs.miaov.com/forum.php?mod=viewthread&amp;tid=7790</a></td></tr><tr><td align="left">javascript作品集</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bbs.csdn.net/topics/380227212">http://bbs.csdn.net/topics/380227212</a></td></tr><tr><td align="left">云五笔，灰度产生生成工具</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/TooBug/works">https://github.com/TooBug/works</a></td></tr><tr><td align="left">项目主页</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://koen301.github.io/">http://koen301.github.io</a></td></tr><tr><td align="left">个性的作品主页</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zaole.net/">http://zaole.net</a></td></tr><tr><td align="left">ucren js demos 集</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ucren.com/blog/demos">http://ucren.com/blog/demos</a></td></tr><tr><td align="left">智能社</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhinengshe.com/works_list.html">http://www.zhinengshe.com/works_list.html</a></td></tr><tr><td align="left">实例陈列架</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://demos.shizuwu.cn/">http://demos.shizuwu.cn</a></td></tr><tr><td align="left">zoye demo</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zoye.sinaapp.com/demo">http://zoye.sinaapp.com/demo</a></td></tr><tr><td align="left">平凡</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://pingfan1990.sinaapp.com/">http://pingfan1990.sinaapp.com</a></td></tr><tr><td align="left">jyg 游戏案例</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.lovewebgames.com/">http://www.lovewebgames.com</a></td></tr><tr><td align="left">很多jquery插件</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.helloweba.com/list.html">http://www.helloweba.com/list.html</a></td></tr><tr><td align="left">不羁虫 - soJs 作品系列</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.bujichong.com/sojs/api/index.html">http://www.bujichong.com/sojs/api/index.html</a></td></tr><tr><td align="left">frozenui</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://frozenui.github.io/case.html">http://frozenui.github.io/case.html</a></td></tr><tr><td align="left">黑白棋</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://js-game.github.io/othello">http://js-game.github.io/othello</a></td></tr><tr><td align="left">fromone</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yansm.github.io/fromone/index.html">http://yansm.github.io/fromone/index.html</a></td></tr><tr><td align="left">pazguille</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://pazguille.me/">http://pazguille.me</a></td></tr><tr><td align="left">Html5 VideoPlayer</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/zmmbreeze/DeadSimpleVideoPlayer">https://github.com/zmmbreeze/DeadSimpleVideoPlayer</a></td></tr><tr><td align="left">Proton 烟花</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://a-jie.github.io/Proton/%23example">http://a-jie.github.io/Proton/#example</a></td></tr></tbody></table><h2 id="简历模板"><a href="#简历模板" class="headerlink" title="简历模板"></a>简历模板</h2><table><thead><tr><th align="left">简历模板</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">简历</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://hcy2367.github.io/resume">http://hcy2367.github.io/resume</a></td></tr><tr><td align="left">简历</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hacke2/ResumeSample">https://github.com/hacke2/ResumeSample</a></td></tr><tr><td align="left">马斯特</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://pinkyjie.com/resume">http://pinkyjie.com/resume</a></td></tr><tr><td align="left">张秋怡</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://joyeecheung.github.io/resume/">https://joyeecheung.github.io/resume/</a></td></tr><tr><td align="left">翁天信</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.dandyweng.com/2013/07/how-my-website-was-created">http://blog.dandyweng.com/2013/07/how-my-website-was-created</a></td></tr><tr><td align="left">动画方式的简历</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.webhek.com/misc/interactive-resume">http://www.webhek.com/misc/interactive-resume</a></td></tr><tr><td align="left">组件丰富简历</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.linqing07.com/resume.html">http://www.linqing07.com/resume.html</a></td></tr><tr><td align="left">haorooms博客</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.haorooms.com/about">http://www.haorooms.com/about</a></td></tr></tbody></table><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><table><thead><tr><th align="left">面试题</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">那几个月在找工作（百度，网易游戏）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.nowcoder.com/discuss/3196">http://www.nowcoder.com/discuss/3196</a></td></tr><tr><td align="left">2014最新面试题</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/1743">http://www.html-js.com/article/1743</a></td></tr><tr><td align="left">2016校招内推 – 阿里巴巴前端 – 三面面试经历</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/imwtr/p/4685546.html">http://www.cnblogs.com/imwtr/p/4685546.html</a></td></tr><tr><td align="left">年后跳槽那点事：乐视+金山+360面试之行</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/lvdabao/p/3660707.html">http://www.cnblogs.com/lvdabao/p/3660707.html</a></td></tr><tr><td align="left">Interviewing a front-end developer</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.sourcing.io/interview-questions">http://blog.sourcing.io/interview-questions</a></td></tr><tr><td align="left">拉勾网js面试题</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/52cik/p/js-question-lg.html">http://www.cnblogs.com/52cik/p/js-question-lg.html</a></td></tr><tr><td align="left">前端面试</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/allenxing/p/3724382.html">http://www.cnblogs.com/allenxing/p/3724382.html</a></td></tr><tr><td align="left">Web开发笔试面试题 大全</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://mianshiti.diandian.com/">http://mianshiti.diandian.com</a></td></tr><tr><td align="left">前端开发面试题</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000000465431">http://segmentfault.com/a/1190000000465431</a></td></tr><tr><td align="left">2014最新前端面试题</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions">https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions</a></td></tr><tr><td align="left">百度面试</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/fex-team/interview-questions">https://github.com/fex-team/interview-questions</a></td></tr><tr><td align="left">前端工作面试问题</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Chinese">https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Chinese</a></td></tr><tr><td align="left">前端开发面试题</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000000465431">http://segmentfault.com/a/1190000000465431</a></td></tr><tr><td align="left">5个经典的前端面试问题</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98">5个经典的前端面试问题</a></td></tr><tr><td align="left">最全前端面试问题及答案总结</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000002562454">http://segmentfault.com/a/1190000002562454</a></td></tr><tr><td align="left">如何面试一名前端开发工程师？</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/Large-search-front-team-column%202961">http://www.html-js.com/article/Large-search-front-team-column%202961</a></td></tr><tr><td align="left">史上最全 前端开发面试问题及答案整理</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hawx1993/Front-end-Interview-questions">https://github.com/hawx1993/Front-end-Interview-questions</a></td></tr><tr><td align="left">前端实习生面试总结</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/xiaoruo/p/4665163.html">http://www.cnblogs.com/xiaoruo/p/4665163.html</a></td></tr><tr><td align="left">史上最全 前端开发面试问题及答案整理</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hawx1993/Front-end-Interview-questions">https://github.com/hawx1993/Front-end-Interview-questions</a></td></tr><tr><td align="left">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.jobbole.com/78738">http://blog.jobbole.com/78738</a></td></tr><tr><td align="left">前端开发面试题大收集</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/paddingme/Front-end-Web-Development-Interview-Question">https://github.com/paddingme/Front-end-Web-Development-Interview-Question</a></td></tr><tr><td align="left">收集的前端面试题和答案</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/qiu-deqing/FE-interview">https://github.com/qiu-deqing/FE-interview</a></td></tr><tr><td align="left">如何面试前端工程师</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/19568008">http://www.zhihu.com/question/19568008</a></td></tr><tr><td align="left">前端开发面试题</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md">https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md</a></td></tr><tr><td align="left">牛客网-笔试面经</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.nowcoder.com/discuss?type=2">http://www.nowcoder.com/discuss?type=2</a></td></tr></tbody></table><h2 id="iconfont"><a href="#iconfont" class="headerlink" title="iconfont"></a>iconfont</h2><table><thead><tr><th align="left">iconfont</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">中文字体</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/21253343">http://www.zhihu.com/question/21253343</a></td></tr><tr><td align="left">淘宝字库</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://iconfont.cn/">http://iconfont.cn</a></td></tr><tr><td align="left">字体</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://mux.alimama.com/fonts">http://mux.alimama.com/fonts</a></td></tr><tr><td align="left">制作教程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://iconfont.cn/help/platform.html">http://iconfont.cn/help/platform.html</a></td></tr><tr><td align="left">zhangxinxu-icommon</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhangxinxu.com/wordpress/?s=icomoon">http://www.zhangxinxu.com/wordpress/?s=icomoon</a></td></tr><tr><td align="left">icommon</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://icomoon.io/app">https://icomoon.io/app</a></td></tr><tr><td align="left">用字体在网页中画ICON图标(推荐教程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://imooc.com/learn/243">http://imooc.com/learn/243</a></td></tr><tr><td align="left">字体压缩工具</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://font-spider.org/">http://font-spider.org</a></td></tr></tbody></table><h2 id="Fiddler"><a href="#Fiddler" class="headerlink" title="Fiddler"></a>Fiddler</h2><table><thead><tr><th align="left">Fiddler</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Fiddler调式使用知多少(一深入研究</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/tugenhua0707/p/4623317.html">http://www.cnblogs.com/tugenhua0707/p/4623317.html</a></td></tr><tr><td align="left">微信fiddle</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/strick/p/4570006.html">http://www.cnblogs.com/strick/p/4570006.html</a></td></tr><tr><td align="left">微信fiddle</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://gaoboy.com/article/26.html">http://gaoboy.com/article/26.html</a></td></tr></tbody></table><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><table><thead><tr><th align="left">Chrome</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Google Chrome 官方</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.chrome.com/devtools">https://developer.chrome.com/devtools</a></td></tr><tr><td align="left">如何更好地运用 Chrome (Google)</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://jeffjade.com/2017/05/01/122-how-to-better-use-google_chrome/">https://jeffjade.com/2017/05/01/122-how-to-better-use-google_chrome/</a></td></tr><tr><td align="left">Chrome - 基础</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/constantince/p/4565261.html">http://www.cnblogs.com/constantince/p/4565261.html</a></td></tr><tr><td align="left">Chrome - 进阶</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/constantince/p/4579121.html">http://www.cnblogs.com/constantince/p/4579121.html</a></td></tr><tr><td align="left">Chrome - 性能</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/constantince/p/4585983.html">http://www.cnblogs.com/constantince/p/4585983.html</a></td></tr><tr><td align="left">Chrome - 性能进阶</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/constantince/p/4607497.html">http://www.cnblogs.com/constantince/p/4607497.html</a></td></tr><tr><td align="left">Chrome - 移动</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/constantince/p/4624241.html">http://www.cnblogs.com/constantince/p/4624241.html</a></td></tr><tr><td align="left">Chrome - 使用技巧</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/liyunhua/p/4544738.html">http://www.cnblogs.com/liyunhua/p/4544738.html</a></td></tr><tr><td align="left">Chrome - Console控制台不完全指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html">http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html</a></td></tr><tr><td align="left">Chrome - Workspace使浏览器变成IDE</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://c7sky.com/chrome-devtools-workspace.html">http://c7sky.com/chrome-devtools-workspace.html</a></td></tr><tr><td align="left">network面板</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/Nothing-blind%202975">http://www.html-js.com/article/Nothing-blind%202975</a></td></tr><tr><td align="left">chrome开发工具快捷键</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://anti-code.com/devtools-cheatsheet">http://anti-code.com/devtools-cheatsheet</a></td></tr><tr><td align="left">chrome调试工具常用功能整理</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/2327">http://www.html-js.com/article/2327</a></td></tr><tr><td align="left">Chrome 开发工具 Workspace 使用</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace">http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace</a></td></tr><tr><td align="left">Chrome神器Vimium快捷键学习记录</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html">http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html</a></td></tr><tr><td align="left">sass调试-w3cplus</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3cplus.com/sassguide/debug.html">http://www.w3cplus.com/sassguide/debug.html</a></td></tr><tr><td align="left">如何更专业的使用Chrome开发者工具-w3cplus</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html">http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html</a></td></tr><tr><td align="left">chrome调试canvas</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sentsin.com/web/253.html">http://sentsin.com/web/253.html</a></td></tr><tr><td align="left">chrome profiles1</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.chrome.com/devtools/index">https://developer.chrome.com/devtools/index</a></td></tr><tr><td align="left">chrome profiles3</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.oschina.net/translate/performance-optimisation-with-timeline-profiles">http://www.oschina.net/translate/performance-optimisation-with-timeline-profiles</a></td></tr><tr><td align="left">chrome移动版调试</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.chrome.com/devtools/docs/mobile-emulation">https://developer.chrome.com/devtools/docs/mobile-emulation</a></td></tr><tr><td align="left">chrome调试</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ued.taobao.org/blog/2012/06/debug-with-chrome-dev-tool">http://ued.taobao.org/blog/2012/06/debug-with-chrome-dev-tool</a></td></tr><tr><td align="left">chrome的调试</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/QLeelulu/archive/2011/08/28/2156402.html">http://www.cnblogs.com/QLeelulu/archive/2011/08/28/2156402.html</a></td></tr><tr><td align="left">chrome console 命令详解</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.chrome.com/devtools/docs/commandline-api">https://developer.chrome.com/devtools/docs/commandline-api</a></td></tr><tr><td align="left">查看事件绑定1</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/leonkao/p/3809655.html">http://www.cnblogs.com/leonkao/p/3809655.html</a></td></tr><tr><td align="left">查看事件绑定2</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/xiaoyao2011/p/3447421.html">http://www.cnblogs.com/xiaoyao2011/p/3447421.html</a></td></tr><tr><td align="left">神器——Chrome开发者工具(一</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000000683599">http://segmentfault.com/a/1190000000683599</a></td></tr><tr><td align="left">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://xinranliu.me/2015-05-22-qiqu-performance">https://xinranliu.me/2015-05-22-qiqu-performance</a></td></tr><tr><td align="left">chrome 开发者工具的 15 个小技巧</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html">http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html</a></td></tr><tr><td align="left">Chrome开发者工具不完全指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://1ke.co/course/361">http://1ke.co/course/361</a></td></tr><tr><td align="left">Chrome 开发者工具使用技巧</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000003882567">http://segmentfault.com/a/1190000003882567</a></td></tr></tbody></table><h2 id="Firebug"><a href="#Firebug" class="headerlink" title="Firebug"></a>Firebug</h2><table><thead><tr><th align="left">Firebug</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">firebug视频教程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/137">http://www.imooc.com/learn/137</a></td></tr><tr><td align="left">firefox 模拟器</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.mozilla.org/zh-CN/docs/Tools/WebIDE">https://developer.mozilla.org/zh-CN/docs/Tools/WebIDE</a></td></tr><tr><td align="left">console.log 命令详解</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/ctriphire/p/4116207.html">http://www.cnblogs.com/ctriphire/p/4116207.html</a></td></tr><tr><td align="left">Firebug入门指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com/blog/2008/06/firebug_tutorial.html">http://www.ruanyifeng.com/blog/2008/06/firebug_tutorial.html</a></td></tr><tr><td align="left">Firebug控制台详解</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com/blog/2011/03/firebug_console_tutorial.html">http://www.ruanyifeng.com/blog/2011/03/firebug_console_tutorial.html</a></td></tr></tbody></table><h2 id="移动-微信调试"><a href="#移动-微信调试" class="headerlink" title="移动,微信调试"></a>移动,微信调试</h2><table><thead><tr><th align="left">移动,微信调试</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">浏览器端调试安卓</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://openstf.github.io/">https://openstf.github.io</a></td></tr><tr><td align="left">移动端前端开发调试</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yujiangshui.com/multidevice-frontend-debug">http://yujiangshui.com/multidevice-frontend-debug</a></td></tr><tr><td align="left">使用 Chrome 远程调试 Android 设备</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md">https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md</a></td></tr><tr><td align="left">mac移动端调试</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://plus.uc.cn/document/webapp/doc5.html">http://plus.uc.cn/document/webapp/doc5.html</a></td></tr><tr><td align="left">mac移动端调试</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.mihtool.com/">http://www.mihtool.com</a></td></tr><tr><td align="left">无线调试攻略</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://thx.github.io/mobile/debugging-in-mobile">http://thx.github.io/mobile/debugging-in-mobile</a></td></tr><tr><td align="left">无线调试攻略</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yanhaijing.com/mobile/2014/12/17/web-debug-for-mobile">http://yanhaijing.com/mobile/2014/12/17/web-debug-for-mobile</a></td></tr><tr><td align="left">屌爆了,完美调试 微信webview(x5</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jianshu.com/p/ccf124f1f74b">http://www.jianshu.com/p/ccf124f1f74b</a></td></tr><tr><td align="left">微信调试的那些事</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B">微信调试的那些事</a></td></tr><tr><td align="left">远程console</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jsconsole.com/">http://jsconsole.com</a></td></tr><tr><td align="left">微信调试工具</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.qqbrowser.cc/">http://blog.qqbrowser.cc</a></td></tr><tr><td align="left">各种真机远程调试方法汇总</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jieyou/remote_inspect_web_on_real_device">https://github.com/jieyou/remote_inspect_web_on_real_device</a></td></tr></tbody></table><h2 id="iOS-Simulator"><a href="#iOS-Simulator" class="headerlink" title="iOS Simulator"></a>iOS Simulator</h2><table><thead><tr><th align="left">iOS Simulator</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Simulator</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/iOS_Simulator_Guide/Introduction/Introduction.html">iOS_Simulator_Guide-Introduction</a></td></tr><tr><td align="left">iOS Simulator的介绍和使用心得</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.crifan.com/intro_ios_simulator_in_xcode_and_usage_summary">http://www.crifan.com/intro_ios_simulator_in_xcode_and_usage_summary</a></td></tr></tbody></table><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><table><thead><tr><th align="left">img</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">loading img</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://preloaders.net/en/circular">http://preloaders.net/en/circular</a></td></tr><tr><td align="left">智图-图片优化平台</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zhitu.isux.us/">http://zhitu.isux.us</a></td></tr><tr><td align="left">在线png优化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://tinypng.com/">https://tinypng.com</a></td></tr><tr><td align="left">SM.MS(图床工具～简易好用)</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://sm.ms/">https://sm.ms/</a></td></tr><tr><td align="left">yutuku：极简图床</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yotuku.cn/">http://yotuku.cn/</a></td></tr><tr><td align="left">Qchan图床</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://tuchuang.org/">http://tuchuang.org/</a></td></tr></tbody></table><h2 id="浏览器同步"><a href="#浏览器同步" class="headerlink" title="浏览器同步"></a>浏览器同步</h2><table><thead><tr><th align="left">浏览器同步</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">puer</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/leeluolee/puer">https://github.com/leeluolee/puer</a></td></tr><tr><td align="left">liveReload</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://livereload.com/">http://livereload.com</a></td></tr><tr><td align="left">f5</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://getf5.com/">http://getf5.com</a></td></tr><tr><td align="left">File Watchers</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://geek100.com/2608">http://geek100.com/2608</a></td></tr></tbody></table><h2 id="在线PPT制作"><a href="#在线PPT制作" class="headerlink" title="在线PPT制作"></a>在线PPT制作</h2><table><thead><tr><th align="left">在线PPT制作</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">nodePPT</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt">nodePPT</a></td></tr><tr><td align="left">Cleaver快速制作网页PPT</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jeffjade.com/2015/10/15/2015-10-16-cleaver-make-ppt/">http://www.jeffjade.com/2015/10/15/2015-10-16-cleaver-make-ppt/</a></td></tr><tr><td align="left">impress.js</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/Darren_code/archive/2013/01/04/impressjs.html">http://www.cnblogs.com/Darren_code/archive/2013/01/04/impressjs.html</a></td></tr><tr><td align="left">PPT</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ksky521/nodePPT">https://github.com/ksky521/nodePPT</a></td></tr><tr><td align="left">reveal</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hakimel/reveal.js">https://github.com/hakimel/reveal.js</a></td></tr><tr><td align="left">bespoke-fx</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ebow/bespoke-fx">https://github.com/ebow/bespoke-fx</a></td></tr><tr><td align="left">slippy</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Seldaek/slippy">https://github.com/Seldaek/slippy</a></td></tr></tbody></table><h2 id="前端导航网站"><a href="#前端导航网站" class="headerlink" title="前端导航网站"></a>前端导航网站</h2><table><thead><tr><th align="left">前端导航网站</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">界面清爽的前端导航</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://uxbees.com/index.html">http://uxbees.com/index.html</a></td></tr><tr><td align="left">前端导航</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://whycss.com/">http://whycss.com</a></td></tr><tr><td align="left">前端网址导航</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.daqianduan.com/nav">http://www.daqianduan.com/nav</a></td></tr><tr><td align="left">前端名录</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sentsin.com/daohang">http://sentsin.com/daohang</a></td></tr><tr><td align="left">前端导航</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://123.jser.us/">http://123.jser.us</a></td></tr><tr><td align="left">前端开发资源</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.css88.com/nav">http://www.css88.com/nav</a></td></tr><tr><td align="left">前端开发仓库 - 众多效果的收集地</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://code.ciaoca.com/">http://code.ciaoca.com</a></td></tr><tr><td align="left">前端资源导航</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jnoodle/f2e-collect">https://github.com/jnoodle/f2e-collect</a></td></tr><tr><td align="left">F2E 前端导航</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://f2e.im/static/pages/nav/index.html">http://f2e.im/static/pages/nav/index.html</a></td></tr></tbody></table><h2 id="常用CDN"><a href="#常用CDN" class="headerlink" title="常用CDN"></a>常用CDN</h2><table><thead><tr><th align="left">常用CDN</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">新浪CDN</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://lib.sinaapp.com/">http://lib.sinaapp.com</a></td></tr><tr><td align="left">百度静态资源公共库</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cdn.code.baidu.com/">http://cdn.code.baidu.com</a></td></tr><tr><td align="left">360网站卫士常用前端公共库CDN服务</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://libs.useso.com/">http://libs.useso.com</a></td></tr><tr><td align="left">Bootstrap中文网开源项目免费 CDN 服务</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.bootcdn.cn/">http://www.bootcdn.cn</a></td></tr><tr><td align="left">开放静态文件 CDN - 七牛</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://staticfile.org/">http://staticfile.org</a></td></tr><tr><td align="left">CDN加速 - jq22</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jq22.com/cdn">http://www.jq22.com/cdn</a></td></tr><tr><td align="left">jQuery CDN</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://code.jquery.com/">http://code.jquery.com</a></td></tr><tr><td align="left">微软CDN</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.asp.net/ajax/cdn">http://www.asp.net/ajax/cdn</a></td></tr></tbody></table><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><table><thead><tr><th align="left">Git</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">git-scm</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://git-scm.com/">http://git-scm.com</a></td></tr><tr><td align="left">廖雪峰-Git教程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰-Git教程</a></td></tr><tr><td align="left">git-for-windows</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://git-for-windows.github.io/">https://git-for-windows.github.io</a></td></tr><tr><td align="left">GitHub 添加 SSH keys</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://daemon369.github.io/git/2015/03/10/add-ssh-keys-for-github">http://daemon369.github.io/git/2015/03/10/add-ssh-keys-for-github</a></td></tr><tr><td align="left">gogithub</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.worldhello.net/gotgithub/index.html">http://www.worldhello.net/gotgithub/index.html</a></td></tr><tr><td align="left">git常规命令练习</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://pcottle.github.io/learnGitBranching">http://pcottle.github.io/learnGitBranching</a></td></tr><tr><td align="left">git的资料整理</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/xirong/my-git">https://github.com/xirong/my-git</a></td></tr><tr><td align="left">我所记录的git命令（非常实用）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/fanfan259/p/4810517.html">http://www.cnblogs.com/fanfan259/p/4810517.html</a></td></tr><tr><td align="left">企业开发git工作流模式探索部分休整</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md">https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md</a></td></tr><tr><td align="left">GitHub 漫游指南</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/phodal/github-roam">https://github.com/phodal/github-roam</a></td></tr><tr><td align="left">GitHub秘籍</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md">https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md</a></td></tr><tr><td align="left">使用git和github进行协同开发流程</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://livoras.com/post/28">http://livoras.com/post/28</a></td></tr><tr><td align="left">动画方式练习git</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://onlywei.github.io/explain-git-with-d3">http://onlywei.github.io/explain-git-with-d3</a></td></tr></tbody></table><h2 id="各种日期日历"><a href="#各种日期日历" class="headerlink" title="各种日期日历"></a>各种日期日历</h2><table><thead><tr><th align="left">各种日期日历</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">经典my97</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.my97.net/dp/demo/index.htm">http://www.my97.net/dp/demo/index.htm</a></td></tr><tr><td align="left">强大的独立日期选择器</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/gbin1/archive/2012/04/16/2452105.html">http://www.cnblogs.com/gbin1/archive/2012/04/16/2452105.html</a></td></tr><tr><td align="left">fullcalendar</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fullcalendar.io/">http://fullcalendar.io</a></td></tr><tr><td align="left">fullcalendar日历控件知识点集合</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.csdn.net/francislaw/article/details/7740630">http://blog.csdn.net/francislaw/article/details/7740630</a></td></tr><tr><td align="left">中文api</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.sina.com.cn/s/blog_9475b1c101012c5f.html">http://blog.sina.com.cn/s/blog_9475b1c101012c5f.html</a></td></tr><tr><td align="left">农历日历</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/zzyss86/LunarCalendar">https://github.com/zzyss86/LunarCalendar</a></td></tr><tr><td align="left">超酷的仿百度带节日日历老黄历控件</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.sucaisj.com/jiaoben/date/201509/16856.html">http://www.sucaisj.com/jiaoben/date/201509/16856.html</a></td></tr><tr><td align="left">日期格式化</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://momentjs.com/">http://momentjs.com</a></td></tr><tr><td align="left">大牛日历控件</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Johnqing/QPAYCalendar">https://github.com/Johnqing/QPAYCalendar</a></td></tr><tr><td align="left">我群某管理作品</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Iamlars/dateMarker">https://github.com/Iamlars/dateMarker</a></td></tr><tr><td align="left">input按位替换-官网</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://digitalbush.com/projects/masked-input-plugin">http://digitalbush.com/projects/masked-input-plugin</a></td></tr><tr><td align="left">input按位替换-github</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/digitalBush/jquery.maskedinput/tree/1.2.2">https://github.com/digitalBush/jquery.maskedinput/tree/1.2.2</a></td></tr><tr><td align="left">bootstrap-daterangepicker</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/dangrossman/bootstrap-daterangepicker">https://github.com/dangrossman/bootstrap-daterangepicker</a></td></tr><tr><td align="left">国外30个插件集合</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.vandelaydesign.com/30-best-free-jquery-plugins">http://www.vandelaydesign.com/30-best-free-jquery-plugins</a></td></tr><tr><td align="left">JavaScript datepicker</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://dbushell.com/2012/10/09/pikaday-javascript-datepicker">http://dbushell.com/2012/10/09/pikaday-javascript-datepicker</a></td></tr><tr><td align="left">Datepair.js</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jonthornton.github.io/Datepair.js">http://jonthornton.github.io/Datepair.js</a></td></tr><tr><td align="left">一个风格多样的日历</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/glad/glDatePicker">https://github.com/glad/glDatePicker</a></td></tr><tr><td align="left">弹出层式的全日历</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://amsul.ca/pickadate.js/date">http://amsul.ca/pickadate.js/date</a></td></tr><tr><td align="left">jquery双日历</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.daterangepicker.com/">http://www.daterangepicker.com</a></td></tr><tr><td align="left">大气实用jQuery手机移动端日历日期选择插件</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.frankdemo.cn/index.php?c=content&amp;a=show&amp;id=115">http://www.frankdemo.cn/index.php?c=content&amp;a=show&amp;id=115</a></td></tr><tr><td align="left">jQuery Mobile 移动开发中的日期插件Mobiscroll</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://mobiscroll.com/">https://mobiscroll.com</a></td></tr></tbody></table><h2 id="Date-library"><a href="#Date-library" class="headerlink" title="Date library"></a>Date library</h2><table><thead><tr><th align="left">Date library</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Datejs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/datejs/Datejs">https://github.com/datejs/Datejs</a></td></tr><tr><td align="left">sugarjs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sugarjs.com/api/Date">http://sugarjs.com/api/Date</a></td></tr></tbody></table><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><table><thead><tr><th align="left">其它</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Mock.js 是一款模拟数据生成器</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://mockjs.com/">http://mockjs.com</a></td></tr><tr><td align="left">特色的HTML框架可以创建精美的iOS应用</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://framework7.taobao.org/">http://framework7.taobao.org</a></td></tr><tr><td align="left">淘宝SUI</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://m.sui.taobao.org/">http://m.sui.taobao.org</a></td></tr><tr><td align="left">avalonjs</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://avalonjs.github.io/">http://avalonjs.github.io</a></td></tr><tr><td align="left">Avalon新一代UI库： OniUI</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ued.qunar.com/oniui/index.html">http://ued.qunar.com/oniui/index.html</a></td></tr><tr><td align="left">avalon.oniui-基于avalon的组件库</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/RubyLouvre/avalon.oniui">https://github.com/RubyLouvre/avalon.oniui</a></td></tr><tr><td align="left">生成二维码(草料)</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cli.im/">http://cli.im</a></td></tr></tbody></table><h2 id="效果类"><a href="#效果类" class="headerlink" title="效果类"></a>效果类</h2><table><thead><tr><th align="left">效果类</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">弹出层</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/58">http://www.imooc.com/learn/58</a></td></tr><tr><td align="left">焦点图轮播特效</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/18">http://www.imooc.com/learn/18</a></td></tr><tr><td align="left">HTML5 有哪些让你惊艳的 demo？</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/24398907">http://www.zhihu.com/question/24398907</a></td></tr></tbody></table><h2 id="弹出层"><a href="#弹出层" class="headerlink" title="弹出层"></a>弹出层</h2><table><thead><tr><th align="left">弹出层</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">artDialog 最新版</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/aui/artDialog">https://github.com/aui/artDialog</a></td></tr><tr><td align="left">artDialog 文档</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://aui.github.io/artDialog/doc/index.html">http://aui.github.io/artDialog/doc/index.html</a></td></tr><tr><td align="left">google code 下载地址</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://code.google.com/p/artdialog/downloads/list">https://code.google.com/p/artdialog/downloads/list</a></td></tr><tr><td align="left">贤心弹出层</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://layer.layui.com/">http://layer.layui.com</a></td></tr><tr><td align="left">响应式用户交互组件库</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/bh-lay/UI">https://github.com/bh-lay/UI</a></td></tr><tr><td align="left">sweetalert-有css3动画弹出层</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://t4t5.github.io/sweetalert">http://t4t5.github.io/sweetalert</a></td></tr></tbody></table><h2 id="优秀JavaScript项目"><a href="#优秀JavaScript项目" class="headerlink" title="优秀JavaScript项目"></a>优秀JavaScript项目</h2><table><thead><tr><th align="left">优秀JavaScript项目</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left">Angular和Webpack种子文件</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/AngularClass/angular2-webpack-starter">https://github.com/AngularClass/angular2-webpack-starter</a></td></tr><tr><td align="left">Fis3面向前端的工程构建系统</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/fex-team/fis3">https://github.com/fex-team/fis3</a></td></tr><tr><td align="left">Fis3 DEMO</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/fex-team/fis3-demo">https://github.com/fex-team/fis3-demo</a></td></tr><tr><td align="left">前端JQuery系列:源码剖析</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/JsAaron/jQuery">https://github.com/JsAaron/jQuery</a></td></tr><tr><td align="left">avalon框架</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/RubyLouvre/avalon">https://github.com/RubyLouvre/avalon</a></td></tr><tr><td align="left">Microsoft ChakraCore 微软的Chakra引擎</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Microsoft/ChakraCore">https://github.com/Microsoft/ChakraCore</a></td></tr><tr><td align="left">Quintus HTML游戏引擎</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/cykod/Quintus">https://github.com/cykod/Quintus</a></td></tr><tr><td align="left">一个用node.js搭建的有趣博客</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/STRML/strml.net">https://github.com/STRML/strml.net</a></td></tr><tr><td align="left">Web前端助手–FeHelper（Chrome扩展）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/zxlie/FeHelper">https://github.com/zxlie/FeHelper</a></td></tr><tr><td align="left">百度前端技术学院</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/baidu-ife/ife">https://github.com/baidu-ife/ife</a></td></tr><tr><td align="left">Cheerio（node.js中的jQuery）</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/cheeriojs/cheerio">https://github.com/cheeriojs/cheerio</a></td></tr><tr><td align="left">nodejs的一个聊天软件 类似微信</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/BryanYang/freechat">https://github.com/BryanYang/freechat</a></td></tr><tr><td align="left">使用html5和node.js构建的网易云音乐</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/stkevintan/Cube">https://github.com/stkevintan/Cube</a></td></tr><tr><td align="left">babel ES6转换为ES5</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/babel/babel">https://github.com/babel/babel</a></td></tr><tr><td align="left">一个JS富文本编辑器</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/fex-team/ueditor">https://github.com/fex-team/ueditor</a></td></tr><tr><td align="left">一个JS脑图可视化工具</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/fex-team/kityminder-core">https://github.com/fex-team/kityminder-core</a></td></tr><tr><td align="left">一个JS写的Flappy Bird Game</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ellisonleao/clumsy-bird">https://github.com/ellisonleao/clumsy-bird</a></td></tr><tr><td align="left">一个JS写的GBA模拟器</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/taisel/IodineGBA">https://github.com/taisel/IodineGBA</a></td></tr><tr><td align="left">SegmentFault写的Markdown解析器</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/SegmentFault/HyperDown.js">https://github.com/SegmentFault/HyperDown.js</a></td></tr><tr><td align="left">基于node.js的Ghost博客</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/TryGhost/Ghost">https://github.com/TryGhost/Ghost</a></td></tr><tr><td align="left">学习react的demos</td><td align="left"><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ruanyf/react-demos">https://github.com/ruanyf/react-demos</a></td></tr></tbody></table><h3 id="五-体系结构与综合"><a href="#五-体系结构与综合" class="headerlink" title="五. 体系结构与综合"></a>五. 体系结构与综合</h3><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/sb19871023/p/3894452.html">综合类前端知识体系</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/JacksonTian/fks">前端知识结构</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/unruledboy/WebFrontEndStack">Web前端开发大系概览</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/unruledboy/p/WebFrontEndStack.html">Web前端开发大系概览-中文版</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://raw.githubusercontent.com/unruledboy/WebFrontEndStack/master/Web%20Front%20End%20Stack.png">Web Front-end Stack v2.2</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/justjavac/free-programming-books-zh_CN">免费的编程中文书籍索引</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/dypsilon/frontend-dev-bookmarks">前端书籍</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/vhf/free-programming-books">前端免费书籍大全</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/sb19871023/p/3894452.html">前端知识体系</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/justjavac/free-programming-books-zh_CN">免费的编程中文书籍索引</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://study.163.com/course/introduction/224014.htm">智能社 - 精通JavaScript开发</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">重新介绍 JavaScript（JS 教程）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://v.163.com/special/opencourse/bianchengdaolun.html">麻省理工学院公开课：计算机科学及编程导论</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000002640298">JavaScript中的this陷阱的最全收集–没有之一</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html">JS函数式编程指南</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://liubin.github.io/promises-book/">JavaScript Promise迷你书（中文版）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/AlloyTeam/Mars">腾讯移动Web前端知识库</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/w3crange/Front-End-Develop-Guide">Front-End-Develop-Guide 前端开发指南</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://li-xinyang.gitbooks.io/frontend-notebook/content/">前端开发笔记本</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nieweidong/fetool">大前端工具集 - 聂微东</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://dwqs.gitbooks.io/frontenddevhandbook/content/">前端开发者手册</a></li><li>前端开发者手册</li><li>入门类<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/jikey/p/3613082.html">前端入门教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000">瘳雪峰的Javascript教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/view/11">jQuery基础教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/view/506">前端工程师必备的PS技能——切图篇</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/qiu-deqing/FE-learning">结合个人经历总结的前端入门方法</a></li></ul></li><li>效果类<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/58">弹出层</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/18">焦点图轮播特效</a></li></ul></li><li>工具类<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/93">css sprite 雪碧图制作</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/390">版本控制入门 – 搬进 Github</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/30">Grunt-beginner前端自动化工具</a></li></ul></li><li>慕课专题<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/space/teacher/id/197450">张鑫旭 - 慕课系列</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/space/teacher/id/104593">lyn - 慕课系列</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/space/teacher/id/290139">艾伦 - 慕课系列</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/view/494">碧仔 - Hello，移动WEB</a></li></ul></li><li>周刊类<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fex.baidu.com/weekly/">百度FEX技术周刊</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/PaicHyperionDev/MobileDevWeekly">平安科技移动开发二队技术周报</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.75team.com/weekly/">360奇舞周刊</a></li></ul></li></ul><h3 id="六-API-应用程序接口"><a href="#六-API-应用程序接口" class="headerlink" title="六. API(应用程序接口)"></a>六. API(应用程序接口)</h3><h4 id="1-综合类API"><a href="#1-综合类API" class="headerlink" title="1. 综合类API"></a>1. 综合类API</h4><ul><li>开发中心<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">mozilla js参考</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://developer.chrome.com/extensions/api_index.html">chrome开发中心（chrome的内核已转向blink）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.apple.com/library/safari/navigation">safari开发中心</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://msdn.microsoft.com/zh-cn/library/d1et7k7c(v=vs.94).aspx">microsoft js参考</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sanshi.me/articles/JavaScript-Garden-CN/html/index.html">js秘密花园</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bonsaiden.github.io/JavaScript-Garden/zh/">js秘密花园</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3help.org/">w3help</a> 综合Bug集合网站</li></ul></li><li>综合搜索<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.javascripting.com/">javascripting</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://microjs.com/">各种流行库搜索</a></li></ul></li><li>综合API<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.runoob.com/">runoob.com-包含各种API集合</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://tool.oschina.net/apidocs">开源中国在线API文档合集</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://devdocs.io/">devdocs</a> 英文综合API网站</li></ul></li></ul><h4 id="2-jQuery"><a href="#2-jQuery" class="headerlink" title="2. jQuery"></a>2. jQuery</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jquery.bootcss.com/">jQuery API 中文文档</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://hemin.cn/jq/">hemin 在线版</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.css88.com/jqapi-1.9/on/">css88 jq api</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.css88.com/jquery-ui-api/">css88 jqui api</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://learn.jquery.com/">学习jquery</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://james.padolsey.com/jquery/">jquery 源码查找</a></li></ul><h4 id="3-Ecmascript"><a href="#3-Ecmascript" class="headerlink" title="3. Ecmascript"></a>3. Ecmascript</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://leanpub.com/understandinges6/read">Understanding ECMAScript 6 - Nicholas C. Zakas</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://leanpub.com/exploring-es6/read">exploring-es6</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/es6-org/exploring-es6">exploring-es6翻译</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://es6-org.github.io/exploring-es6/">exploring-es6翻译后预览</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://es6.ruanyifeng.com/">阮一峰 es6</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://javascript.ruanyifeng.com/">阮一峰 Javascript</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yanhaijing.com/es5/">ECMA-262，第 5 版</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://es5.github.io/">es5</a></li></ul><h4 id="4-Js-template"><a href="#4-Js-template" class="headerlink" title="4. Js template"></a>4. Js template</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://garann.github.io/template-chooser/">template-chooser</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/aui/artTemplate">artTemplate</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/aui/tmodjs/blob/master/README.md">tomdjs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://juicer.name/docs/docs_zh_cn.html">淘宝模板juicer模板</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://koen301.github.io/fxtpl/">Fxtpl v1.0 繁星前端模板引擎</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sentsin.com/layui/laytpl/">laytpl</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mozilla/nunjucks">mozilla - nunjucks</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/PaulGuo/Juicer">Juicer</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://akdubya.github.io/dustjs/">dustjs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ecomfe.github.io/etpl/">etpl</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://twitter.github.io/hogan.js/">twitter-tpl</a></li></ul><h4 id="5-弹出层"><a href="#5-弹出层" class="headerlink" title="5. 弹出层"></a>5. 弹出层</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/aui/artDialog">artDialog 最新版</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://aui.github.io/artDialog/doc/index.html">artDialog 文档</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://code.google.com/p/artdialog/downloads/list">google code 下载地址</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sentsin.com/jquery/layer/">贤心弹出层</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/bh-lay/UI">响应式用户交互组件库</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://t4t5.github.io/sweetalert/">sweetalert-有css3动画弹出层</a></li></ul><h4 id="6-CSS"><a href="#6-CSS" class="headerlink" title="6. CSS"></a>6. CSS</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://tympanus.net/codrops/css_reference/">CSS 语法参考</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://isux.tencent.com/css3/index.html">CSS3动画手册</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://isux.tencent.com/css3/tools.html">腾讯css3动画制作工具</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://linxz.github.io/tianyizone/">志爷css小工具集合</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.note12.com/category/blog/2014-6-5/538fe0a9f786f1b7019a4dfb">css3 js 移动大杂烩</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bouncejs.com/">bouncejs 触摸库</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fian.my.id/Waves/">css3 按钮动画</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://daneden.github.io/animate.css/">animate.css</a></li><li>[全局CSS的终结(狗带) <a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/2015/10/8536/">译]</a></li></ul><h4 id="7-Angularjs"><a href="#7-Angularjs" class="headerlink" title="7. Angularjs"></a>7. Angularjs</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/dolymood/AngularLearning">Angular.js 的一些学习资源</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://angularjs.cn/">angularjs中文社区</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/johnpapa/angular-styleguide">Angular Style Guide</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/xuwenmin888/p/3739096.html">Angularjs源码学习</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ifeenan.com/?c=AngularJS">Angularjs源码学习</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://angular-ui.github.io/bootstrap/">angular对bootstrap的封装</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cnodejs.org/topic/51404e0f069911196d2e3923">angularjs + nodejs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/lvdabao/tag/AngularJs/">吕大豹 Angularjs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.infoq.com/cn/news/2013/02/angular-web-app">AngularJS 最佳实践</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.lovelucy.info/angularjs-best-practices.html">Angular的一些扩展指令</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Pasvaz/bindonce">Angular数据绑定原理</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/angular-ui/">一些扩展Angular UI组件</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://voidcanvas.com/emberjs-vs-angularjs-performance-testing/">Ember和AngularJS的性能测试</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/powertoolsteam/p/angularjs-introdection.html">带你走近AngularJS - 基本功能介绍</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://angular.duapp.com/docs/guide">Angularjs开发指南</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/amosli/p/3710648.html">Angularjs学习</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.rainweb.cn/article/angularjs-jquery.html">不要带着jQuery的思维去学习AngularJS</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://wangjiatao.diandian.com/?tag=angularjs">angularjs 学习笔记</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.angularjs.cn/T008">angularjs 开发指南</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jmcunningham/AngularJS-Learning">angularjs 英文资料</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://angular-ui.github.io/bootstrap/">angular bootstrap</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/opitzconsulting/jquery-mobile-angular-adapter">angular jq mobile</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://mgcrea.github.io/angular-strap/">angular ui</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.tuicool.com/articles/7ZZVr2">整合jQuery Mobile+AngularJS经验谈</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.jobbole.com/46589/">有jQuery背景，该如何用AngularJS编程思想</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://each.sinaapp.com/angular/">AngularJS在线教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zouyesheng.com/angular.html">angular学习笔记</a></li></ul><h4 id="8-React"><a href="#8-React" class="headerlink" title="8. React"></a>8. React</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/enaqx/awesome-react">react海量资源</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.react-china.org/">react.js 中文论坛</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://facebook.github.io/react/index.html">react.js 官方网址</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://facebook.github.io/react/docs/getting-started.html">react.js 官方文档</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://material-ui.com/%23/">react.js material UI</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://touchstonejs.io/">react.js TouchstoneJS UI</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://amazeui.org/react/">react.js amazeui UI</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com/blog/2015/03/react.html">React 入门实例教程 - 阮一峰</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://wiki.jikexueyuan.com/project/react-native/">React Native 中文版</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/Fakefish%203053">Webpack 和 React 小书 - 前端乱炖</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://fakefish.github.io/react-webpack-cookbook/">Webpack 和 React 小书 - gitbook</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.piliyu.com/">React原创实战视频教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://hulufei.gitbooks.io/react-tutorial/content/index.html">React 入门教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/zjzhome/react-webpack-starter">react-webpack-starter</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ant-design/ant-design">基于react组件化开发</a></li></ul><h4 id="9-移动端API"><a href="#9-移动端API" class="headerlink" title="9. 移动端API"></a>9. 移动端API</h4><ul><li>API<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jtyjty99999/mobileTech">99移动端知识集合</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/AlloyTeam/Mars">移动端前端开发知识库</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://caibaojian.com/mobile-web-bug.html">移动前端的一些坑和解决方法（外观表现）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/PeunZhang/p/3407453.html">【原】移动web资源整理</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://mweb.baidu.com/zeptoapi/">zepto 1.0 中文手册</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-5.cn/Manual/Zepto/">zepto 1.0 中文手册</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.css88.com/doc/zeptojs_api/">zepto 1.1.2</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html">zepto 中文注释</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://app-framework-software.intel.com/api.php">jqmobile 手册</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/maxzhang/maxzhang.github.com/issues">移动浏览器开发集合</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hoosin/mobile-web-favorites">移动开发大杂烩</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://lin-chao.github.io/2014/11/14/%E5%BE%AE%E4%BF%A1webview%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/">微信webview中的一些问题</a></li></ul></li><li>框架<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://framework7.taobao.org/">特色的HTML框架可以创建精美的iOS应用</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://m.sui.taobao.org/">淘宝SUI</a></li></ul></li></ul><h4 id="10-avalon"><a href="#10-avalon" class="headerlink" title="10. avalon"></a>10. avalon</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://avalonjs.github.io/">avalonjs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ued.qunar.com/oniui/index.html">Avalon新一代UI库： OniUI</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/RubyLouvre/avalon.oniui">avalon.oniui-基于avalon的组件库</a></li></ul><h4 id="11-Requriejs"><a href="#11-Requriejs" class="headerlink" title="11. Requriejs"></a>11. Requriejs</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com/blog/2012/10/javascript_module.html">Javascript模块化编程（一）：模块的写法</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html">Javascript模块化编程（二）：AMD规范</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com/blog/2012/11/require_js.html">Javascript模块化编程（三）：require.js的用法</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/snandy/archive/2012/05/22/2513652.html">RequireJS入门（一）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/snandy/archive/2012/05/23/2513712.html">RequireJS入门（二）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/snandy/archive/2012/06/08/2538001.html">RequireJS进阶（三）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/yexiaochai/p/3632580.html">requrie源码学习</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.oschina.net/translate/getting-started-with-the-requirejs-library">requrie 入门指南</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/yexiaochai/p/3214926.html">requrieJS 学习笔记</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cyj.me/why-seajs/requirejs/">requriejs 其一</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/yexiaochai/p/3221081.html">require backbone结合</a></li></ul><h4 id="12-Seajs"><a href="#12-Seajs" class="headerlink" title="12. Seajs"></a>12. Seajs</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://seajs.org/">seajs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cyj.me/why-seajs/zh/">seajs 中文手册</a></li></ul><h4 id="13-Less-sass"><a href="#13-Less-sass" class="headerlink" title="13. Less,sass"></a>13. Less,sass</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3cplus.com/sassguide/">sass</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.sass.hk/">sass教程-sass中国</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sass.bootcss.com/">Sass 中文文档</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://less.bootcss.com/">less</a></li></ul><h4 id="14-Markdown"><a href="#14-Markdown" class="headerlink" title="14. Markdown"></a>14. Markdown</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://wowubuntu.com/markdown/">Markdown 语法说明 (简体中文版)</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/LearnShare/Learning-Markdown/blob/master/README.md">markdown入门参考</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.gitbook.com/">gitbook</a> 国外的在线markdown可编辑成书</li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.zybuluo.com/mdeditor">mdeditor</a> 一款国内的在线markdown编辑器</li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://stackedit.io/">stackedit</a> 国外的在线markdown编辑器，功能强大，同步云盘</li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bh-lay.github.io/mditor/">mditor</a> 一款轻量级的markdown编辑器</li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/lepture/editor">lepture-editor</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jbt/markdown-editor">markdown-editor</a></li></ul><h4 id="15-D3"><a href="#15-D3" class="headerlink" title="15. D3"></a>15. D3</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mbostock/d3/wiki/Tutorials">d3 Tutorials</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mbostock/d3/wiki/Gallery">Gallery</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://datavisual.lofter.com/post/40cf3a_188e535">lofter</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://alanland.iteye.com/blog/1878595">iteye</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://javascript.ruanyifeng.com/library/d3.html">ruanyifeng</a></li></ul><h4 id="16-兼容性"><a href="#16-兼容性" class="headerlink" title="16. 兼容性"></a>16. 兼容性</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://kangax.github.io/compat-table/es6/">esma 兼容列表</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jigsaw.w3.org/css-validator/validator.html.zh-cn">W3C CSS验证服务</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://caniuse.com/%23index">caniuse</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://csscreator.com/properties">csscreator</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://msdn.microsoft.com/zh-cn/library/cc351024(v=vs.85).aspx">microsoft</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.responsinator.com/">在线测兼容-移动端</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.manymo.com/emulators">emulators</a></li></ul><h4 id="17-UI相关"><a href="#17-UI相关" class="headerlink" title="17. UI相关"></a>17. UI相关</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://v3.bootcss.com/">bootcss</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3cplus.com/MetroUICSS/">MetroUICSS</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://semantic-ui.com/">semantic</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://alexwolfe.github.io/Buttons/">Buttons</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://hiloki.github.io/kitecss/">kitecss</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.pintuer.com/">pintuer</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://amazeui.org/">amazeui</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.worldhello.net/gotgithub/index.html">worldhello</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://igit.linuxtoy.org/contents.html">linuxtoy</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/">gitmagic</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://rogerdudler.github.io/git-guide/index.zh.html">rogerdudler</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://gitref.justjavac.com/">gitref</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://git-scm.com/book/zh">book</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://gogojimmy.net/2012/01/17/how-to-use-git-1-git-basic/">gogojimmy</a></li></ul><h4 id="18-HTTP"><a href="#18-HTTP" class="headerlink" title="18. HTTP"></a>18. HTTP</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/bookmark/1230000002521721">HTTP API 设计指南</a></li></ul><h4 id="19-其它API"><a href="#19-其它API" class="headerlink" title="19. 其它API"></a>19. 其它API</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jsfront/src/blob/master/javascriptoo">javascript流行库汇总</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://niceue.com/validator/demo/index.php">验证api</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.css88.com/doc/underscore/">underscore 中文手册</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/Underscorejs-source-code-analysis-of-underscorejs-source-code-analysis%203031">underscore源码分析</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yalishizhude.github.io/tags/underscore/">underscore源码分析-亚里士朱德的博客</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://underscorejs.org/">underscrejs en api</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://lodash.com/">lodash - underscore的代替品</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://extjs-doc-cn.github.io/ext4api/">ext4api</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.csser.com/tools/backbone/backbone.js.html">backbone 中文手册</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://dev.qwrap.com/resource/js/_docs/_youa/%23/qw/base/loadJs_.htm">qwrap手册</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://easings.net/zh-cn">缓动函数</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3school.com.cn/svg/svg_reference.asp">svg 中文参考</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.mozilla.org/en-US/docs/Web/SVG">svg mdn参考</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/gabelerner/canvg">svg 导出 canvas</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/exupero/saveSvgAsPng">svg 导出 png</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zamzar.com/convert/ai-to-svg/">ai-to-svg</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/machao/localStorage">localStorage 库</a></li></ul><h4 id="20-图表类"><a href="#20-图表类" class="headerlink" title="20. 图表类"></a>20. 图表类</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.hcharts.cn/api/index.php">Highcharts 中文API</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://api.highcharts.com/highcharts">Highcharts 英文API</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://echarts.baidu.com/">ECharts 百度的图表软件</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://lbs.amap.com/api/">高德地图</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://paperjs.org/">开源的矢量图脚本框架</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jvectormap.com/">svg 地图</a></li></ul><h4 id="21-vue"><a href="#21-vue" class="headerlink" title="21. vue"></a>21. vue</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cn.vuejs.org/">Vue</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://forum.vuejs.org/">Vue 论坛</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/aaronjs/p/3660102.html">Vue 入门指南</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000000411057">Vue 的一些资源索引</a></li></ul><h4 id="21-正则"><a href="#21-正则" class="headerlink" title="21. 正则"></a>21. 正则</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000002471140">JS正则表达式元字符</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://deerchao.net/tutorials/regex/regex.htm">正则表达式30分钟入门教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN-正则表达式</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://javascript.ruanyifeng.com/stdlib/regexp.html">ruanyifeng - RegExp对象</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://div.io/topic/764?page=1">小胡子哥 - 进阶正则表达式</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Cedriking/is.js/blob/master/is.js">is.js</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://regexper.com/">正则在线测试</a></li></ul><h4 id="22-ionic"><a href="#22-ionic" class="headerlink" title="22. ionic"></a>22. ionic</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ychow/ionic-guide">ionic</a></li></ul><h4 id="23-其它"><a href="#23-其它" class="headerlink" title="23. 其它"></a>23. 其它</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://mockjs.com/">Mock.js 是一款模拟数据生成器</a></li></ul><h3 id="七-开发规范"><a href="#七-开发规范" class="headerlink" title="七. 开发规范"></a>七. 开发规范</h3><ul><li>前端<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://alloyteam.github.io/CodeGuide">通过分析github代码库总结出来的工程师代码书写习惯</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://codeguide.bootcss.com/">HTML&amp;CSS编码规范 by @mdo</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/2011/10/107/">团队合作的css命名规范-腾讯AlloyTeam前端团队</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yuwenhui.github.io/">前端编码规范之js - by yuwenhui</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/hustskyking/p/javascript-spec.html">前端编码规范之js - by 李靖</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zhibimo.com/read/Ashu/front-end-style-guide/">前端开发规范手册</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/yuche/javascript%23table-of-contents">Airbnb JavaScript 编码规范（简体中文版）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/20351507">AMD与CMD规范的区别</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/tugenhua0707/p/3507957.html">AMD与CMD规范的区别</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html">KISSY 源码规范</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://codeguide.bootcss.com/">bt编码规范</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Suxiaogang/Code_Guide">规范加强版</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.jobbole.com/79075/">前端代码规范 及 最佳实践</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://coderlmn.github.io/code-standards/">百度前端规范</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://isobar-idev.github.io/code-standards/">百度前端规范</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zhuanlan.zhihu.com/fuyun/19884834">百度前端规范</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/gf-web/es6-coding-style/">ECMAScript6 编码规范–广发证券前端团队</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.jobbole.com/79484/">JavaScript 风格指南/编码规范（Airbnb公司版）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://nec.netease.com/standard">网易前端开发规范</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.75team.com/archives/1049">css模块</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ecomfe/spec">前端规范资源列表</a></li></ul></li><li>Nodejs<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/wwsun/node-style-guide">Node.js 风格指南</a></li></ul></li><li>PHP<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000000443795">最流行的PHP 代码规范</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md">最流行的PHP 代码规范</a></li></ul></li><li>Android<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/lcw/p/3619181.html">【敏捷开发】Android团队开发规范</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jianshu.com/p/4390f4fe19b3">Android 开发规范与应用</a></li></ul></li></ul><h3 id="八-其它收集"><a href="#八-其它收集" class="headerlink" title="八. 其它收集"></a>八. 其它收集</h3><h4 id="1-各大公司开源项目"><a href="#1-各大公司开源项目" class="headerlink" title="1. 各大公司开源项目"></a>1. 各大公司开源项目</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://code.facebook.com/projects/web/">Facebook Projects</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fex.baidu.com/">百度web前端研发部</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://efe.baidu.com/">百度EFE</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/fex-team/">百度github</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/">alloyteam</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://alloyteam.github.io/">alloyteam-github</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/AlloyTeam/AlloyGameEngine">alloyteam-AlloyGameEngine</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://alloyteam.github.io/AlloyDesigner/">AlloyDesigner</a> 即时修改，即时保存，设计稿较正，其它开发辅助工具</li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/2015/06/h5-jiao-hu-ye-bian-ji-qi-aeditor-jie-shao/">H5交互页编辑器AEditor介绍</a> H5动画交互页开发的工具介绍</li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://aeditor.alloyteam.com/">AEditor</a> H5动画交互页开发的工具</li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://forum.maka.im/wordpress/">maka</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/fenbility/weekly-feed">值得订阅的weekly</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cube.qq.com/">腾讯html5</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://75team.github.io/">奇舞团开源项目</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ued.qunar.com/">Qunar UED</a></li></ul><h4 id="2-Javascript"><a href="#2-Javascript" class="headerlink" title="2. Javascript"></a>2. Javascript</h4><ul><li>常用<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhangxinxu.com/wordpress/2013/12/iebetter-js-make-ie6-ie8-like-modern-browser-ie9-chrome/">ieBetter.js-让IE6-IE8拥有IE9+,Chrome等浏览器特性</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://mottie.github.io/Keyboard/">模拟键盘</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hotoo/pinyin">拼音</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mc-zone/IDValidator">中国个人身份证号验证</a></li></ul></li><li>算法<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Ralph-Wang/algorithm.in.js">数据结构与算法 JavaScript 描述. 章节练习</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/twobin/twobinSort">常见排序算法（JS版）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/luofei2011/jsAgm/blob/master/js/sort.js">经典排序</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hechangmin/jssort">常见排序算法-js版本</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/lightningtgc/JavaScript-Algorithms">JavaScript 算法与数据结构 精华集</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.nowcoder.com/live/courses">面试常考算法题精讲</a></li></ul></li><li>移动端<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ftlabs/fastclick">fastclick</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mmastrac/jquery-noclickdelay">no-click-delay</a></li></ul></li><li>JSON<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://beta.json-generator.com/">模拟生成JSON数据</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jsonp.afeld.me/">返回跨域JSONAPI</a></li></ul></li></ul><h4 id="3-Html5"><a href="#3-Html5" class="headerlink" title="3. Html5"></a>3. Html5</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/24398907">HTML5 有哪些让你惊艳的 demo？</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jo2.org/html5-canvas-tutorial-list/">html5 Canvas画图系列教程目录</a></li></ul><h4 id="4-CSS"><a href="#4-CSS" class="headerlink" title="4. CSS"></a>4. CSS</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://browserhacks.com/">browserhacks</a></li></ul><h4 id="5-jQuery"><a href="#5-jQuery" class="headerlink" title="5. jQuery"></a>5. jQuery</h4><ul><li>焦点图<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/koen301/myfocus">myfocus</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.chhua.com/myfocus/">myfocus-官方演示站</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.superslide2.com/">SuperSlidev2.1 – 大话主席</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.bujichong.com/sojs/soChange/index.html">soChange</a></li></ul></li></ul><h4 id="6-Ext-EasyUI-J-UI-及其它各种UI方案"><a href="#6-Ext-EasyUI-J-UI-及其它各种UI方案" class="headerlink" title="6. Ext, EasyUI, J-UI 及其它各种UI方案"></a>6. Ext, EasyUI, J-UI 及其它各种UI方案</h4><ul><li>Ext<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.sencha.com/products/extjs/">extjs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://docs.sencha.com/extjs/4.0.7/">ext4英文api</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://extjs-doc-cn.github.io/ext4api/">ext4中文api</a></li></ul></li><li>EasyUI<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jquery-easyui.googlecode.com/svn/trunk/src/">jquery easyui 未压缩源代码</a></li></ul></li><li>J-UI<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.j-ui.com/">J-UI</a></li></ul></li><li>Other<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://dcloudio.github.io/mui/">MUI-最接近原生APP体验的高性能前端框架</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://amazeui.org/">Amaze UI | 中国首个开源 HTML5 跨屏前端框架</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://m.sui.taobao.org/">淘宝 HTML5 前端框架</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://docs.kissyui.com/">KISSY - 阿里前端JavaScript库</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://nej.netease.com/">网易Nej - Nice Easy Javascript</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://demos.telerik.com/kendo-ui/mvvm/index">Kendo UI MVVM Demo</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.bootcss.com/">Bootstrap</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://smartui.chinamzz.com/">Smart UI</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://developer.yahoo.com/yui/grids/">雅虎UI - CSS UI</a></li></ul></li></ul><h4 id="7-页面-社会化-分享功能"><a href="#7-页面-社会化-分享功能" class="headerlink" title="7. 页面 社会化 分享功能"></a>7. 页面 社会化 分享功能</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://share.baidu.com/">百度分享</a> pc端</li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jiathis.com/">JiaThis</a> pc端</li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://developer.baidu.com/soc/share">社会化分享组件</a> 移动端</li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.mob.com/%23/index">ShareSDK 轻松实现社会化功能</a> 移动端</li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://dev.umeng.com/social/android/quick-integration">友盟分享</a> 移动端</li></ul><h4 id="8-富文本编辑器"><a href="#8-富文本编辑器" class="headerlink" title="8. 富文本编辑器"></a>8. 富文本编辑器</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ueditor.baidu.com/website/">百度 ueditor</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ckeditor.com/">经典的ckeditor</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://kindeditor.net/">经典的kindeditor</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.bootcss.com/p/bootstrap-wysiwyg/">wysiwyg</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://integ.github.io/BachEditor/">一个有情怀的编辑器。Bach’s Editor</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mycolorway/simditor">tower用的编辑器</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/summernote/summernote">summernote 编辑器</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://neilj.github.io/Squire/">html5编辑器</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://lab.hustlzp.com/XEditor/">XEditor</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/wangfupeng1988/wangEditor">wangEditor</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://alex-d.github.io/Trumbowyg/">Trumbowyg - 轻量编辑器</a></li></ul><h4 id="9-日历"><a href="#9-日历" class="headerlink" title="9. 日历"></a>9. 日历</h4><ul><li>PC<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.my97.net/dp/demo/index.htm">经典my97</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/gbin1/archive/2012/04/16/2452105.html">强大的独立日期选择器</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://arshaw.com/fullcalendar/">fullcalendar</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.csdn.net/francislaw/article/details/7740630">fullcalendar日历控件知识点集合</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.sina.com.cn/s/blog_9475b1c101012c5f.html">中文api</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/zzyss86/LunarCalendar">农历日历</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.sucaisj.com/jiaoben/date/201509/16856.html">超酷的仿百度带节日日历老黄历控件</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://momentjs.com/">日期格式化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Johnqing/QPAYCalendar/">大牛日历控件</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Iamlars/dateMarker">我群某管理作品</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://digitalbush.com/projects/masked-input-plugin/">input按位替换-官网</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/digitalBush/jquery.maskedinput/tree/1.2.2">input按位替换-github</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/dangrossman/bootstrap-daterangepicker">bootstrap-daterangepicker</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.vandelaydesign.com/30-best-free-jquery-plugins/">国外30个插件集合</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://dbushell.com/2012/10/09/pikaday-javascript-datepicker/">JavaScript datepicker</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jonthornton.github.io/Datepair.js/">Datepair.js</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/glad/glDatePicker">一个风格多样的日历</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://amsul.ca/pickadate.js/date/">弹出层式的全日历</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.daterangepicker.com/">jquery双日历</a></li></ul></li><li>移动<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.frankdemo.cn/index.php?c=content&amp;a=show&amp;id=115">大气实用jQuery手机移动端日历日期选择插件</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://mobiscroll.com/">jQuery Mobile 移动开发中的日期插件Mobiscroll</a></li></ul></li><li>Date library<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/datejs/Datejs">Datejs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sugarjs.com/api/Date">sugarjs</a></li></ul></li></ul><h4 id="10-综合效果搜索平台"><a href="#10-综合效果搜索平台" class="headerlink" title="10. 综合效果搜索平台"></a>10. 综合效果搜索平台</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jq22.com/">效果网</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.17sucai.com/">17素材</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://microjs.com/">常用的JavaScript代码片段</a></li></ul><h4 id="11-前端工程化"><a href="#11-前端工程化" class="headerlink" title="11. 前端工程化"></a>11. 前端工程化</h4><ul><li>概述<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.awesomes.cn/">前端工具大全</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/fouber/blog/issues/10?from=timeline&amp;isappinstalled=0">什么是前端工程化</a></li></ul></li><li>Gulp<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://gulpjs.com/">Gulp官网</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.gulpjs.com.cn/">Gulp中文网</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Platform-CUF/use-gulp">gulp资料收集</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://javascript.ruanyifeng.com/tool/gulp.html">Gulp：任务自动管理工具 - ruanyifeng</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://gulpjs.com/plugins/">Gulp插件</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ido321.com/1622.html">Gulp不完全入门教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hjzheng/CUF_meeting_knowledge_share/issues/33">为什么使用gulp?</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.dbpoo.com/getting-started-with-gulp/">Gulp安装及配合组件构建前端开发一体化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nimojs/gulp-book">Gulp 入门指南</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nimojs/blog/issues/19">Gulp 入门指南 - nimojs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://markpop.github.io/2014/09/17/Gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/">Gulp入门教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/video/5692">Gulp in Action</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3ctech.com/topic/134">Gulp开发教程（翻译）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/2050/p/4198792.html">前端构建工具gulpjs的使用介绍及技巧</a></li></ul></li><li>Grunt<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://gruntjs.com/">gruntjs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.gruntjs.net/">Grunt中文网</a></li></ul></li><li>Fis<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fex-team.github.io/fis-site/index.html">fis 官网</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fis.baidu.com/">fis</a></li></ul></li><li>webpack<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/webpack/webpack">webpack</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://html-js.com/article/3009">Webpack，101入门体验</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://html-js.com/article/3113">webpack入门教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000003499526">基于webpack搭建前端工程解决方案探索</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zhuanlan.zhihu.com/FrontendMagazine/20367175">Webpack傻瓜式指南（一）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/TJZC/Banyan/wiki/Webpack%E6%8C%87%E5%8D%97">Webpack指南</a></li></ul></li></ul><h4 id="12-轮播图"><a href="#12-轮播图" class="headerlink" title="12. 轮播图"></a>12. 轮播图</h4><ul><li>pc图轮<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jsfoot.com/jquery/demo/2011-09-20/192.html">单屏轮播sochange</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bxslider.com/examples/carousel-demystified">左右按钮多图切换</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/alvarotrigo/fullPage.js/">fullpage全屏轮播</a></li></ul></li><li>移动端<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.swipejs.com/">无缝切换</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.idangero.us/swiper">滑屏效果</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/peunzhang/fullpage">全屏fullpage</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/qiqiboy/touchslider">单个图片切换</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/peunzhang/slip.js">单个全屏切换</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://touch.code.baidu.com/examples.html?qq-pf-to=pcqq.group">百度的切换库</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/peunzhang/iSlider">单个全屏切换</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/saw/touch-interfaces">滑屏效果</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://baijs.com/tinycircleslider/">旋转拖动设置</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://touchslider.com/">类似于swipe切换</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.swiper.com.cn/demo/index.html">支持多种形式的触摸滑动</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/joker-ye/main/blob/master/wap/index.html">滑屏效果</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.superslide2.com/">大话主席pc移动图片轮换</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hahnzhu/parallax.js">滑屏效果</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/yanhaijing/zepto.fullpage">基于zepto的fullpage</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/plums/archive/2013/01/10/WebApp-fixed-width-layout-of-multi-terminal-adapter-since.html">WebApp]定宽网页设计下，固定宽度布局开发WebApp并实现多终端下WebApp布局自适应</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://loo2k.com/blog/detecting-wechat-client/">判断微信客户端的那些坑</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/JefferyWang/nativeShare.js">可以通过javascript直接调用原生分享的工具</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jiathis.com/help/html/weixin-share-code">JiaThis 分享到微信代码</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fex.baidu.com/blog/2015/05/cross-mobile/">聊聊移动端跨平台开发的各种技术</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/29922082">前端自动化测试</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ajccom.github.io/niceslider/">多种轮换图片</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://mango.github.io/slideout/">滑动侧边栏</a></li></ul></li></ul><h4 id="13-文件上传"><a href="#13-文件上传" class="headerlink" title="13. 文件上传"></a>13. 文件上传</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fex.baidu.com/webuploader/">百度上传组件</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://blueimp.github.io/jQuery-File-Upload/">上传</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.hdfu.net/">flash 头像上传</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.dropzonejs.com/">图片上传预览</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://elemefe.github.io/image-cropper/">图片裁剪</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.shearphoto.com/">图片裁剪-shearphoto</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.oschina.net/project/tag/284/jquery-image-tools?lang=0&amp;os=0&amp;sort=view&amp;p=2">jQuery图片处理</a></li></ul><h4 id="14-模拟select"><a href="#14-模拟select" class="headerlink" title="14. 模拟select"></a>14. 模拟select</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://aui.github.io/popupjs/doc/selectbox.html">糖饼 select</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/rmm5t/jquery-flexselect">flexselect</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://loudev.com/">双select</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://select2.github.io/">select2</a></li></ul><h4 id="15-取色插件"><a href="#15-取色插件" class="headerlink" title="15. 取色插件"></a>15. 取色插件</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jq22.com/plugin/367">类似 Photoshop 的界面取色插件</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jquery/jquery-color/">jquery color</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.oschina.net/project/tag/287/color-picker">取色插件集合</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/mattfarina/farbtastic">farbtastic 圆环＋正方形</a></li></ul><h4 id="16-城市联动"><a href="#16-城市联动" class="headerlink" title="16. 城市联动"></a>16. 城市联动</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ijquery.cn/?p=360">jquery.cityselect.js基于jQuery+JSON的省市或自定义联动效果</a></li></ul><h4 id="17-剪贴板"><a href="#17-剪贴板" class="headerlink" title="17. 剪贴板"></a>17. 剪贴板</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/zeroclipboard/zeroclipboard">剪贴板</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zenorocha.github.io/clipboard.js/">clipboard 最新的剪切方案</a></li></ul><h4 id="18-简繁转换"><a href="#18-简繁转换" class="headerlink" title="18. 简繁转换"></a>18. 简繁转换</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/BYVoid/OpenCC">简繁转换</a></li></ul><h4 id="19-表格-Grid"><a href="#19-表格-Grid" class="headerlink" title="19. 表格 Grid"></a>19. 表格 Grid</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://facebook.github.io/fixed-data-table/">facebook表格</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://handsontable.com/">类似于Excel编辑表格-handsontable</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bootstrap-table.wenzhixin.net.cn/">bootstrap-table插件</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.datatables.net/">datatables</a></li></ul><h4 id="20-在线演示"><a href="#20-在线演示" class="headerlink" title="20. 在线演示"></a>20. 在线演示</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://runjs.cn/">js 在线编辑 - runjs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jsbin.com/">js 在线编辑 - jsbin</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://codepen.io/">js 在线编辑 - codepen</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jsfiddle.net/">js 在线编辑 - jsfiddle</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ideone.com/">java 在线编辑 - ideone</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://code.hcharts.cn/">js 在线编辑 - hcharts</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jsdm.com/">js 在线编辑 - jsdm</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sqlfiddle.com/">sql 在线编辑 - sqlfiddle</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://thimble.mozilla.org/">mozilla 在线编辑器</a></li></ul><h4 id="21-播放器"><a href="#21-播放器" class="headerlink" title="21. 播放器"></a>21. 播放器</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/zmmbreeze/DeadSimpleVideoPlayer">Html5 VideoPlayer</a></li></ul><h4 id="22-粒子动画"><a href="#22-粒子动画" class="headerlink" title="22. 粒子动画"></a>22. 粒子动画</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://a-jie.github.io/Proton/%23example">Proton 烟花</a></li></ul><h4 id="23-表单验证"><a href="#23-表单验证" class="headerlink" title="23. 表单验证"></a>23. 表单验证</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/haiercdboy/Validform/blob/master/README.md">Validform</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://formvalidator.net/">formvalidator</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/wzmaodong/archive/2012/10/15/2724005.html">jQuery formValidator</a></li></ul><h3 id="九-Nodejs"><a href="#九-Nodejs" class="headerlink" title="九. Nodejs"></a>九. Nodejs</h3><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://liuqing.pw/">nodejs 篇幅比较巨大</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/alsotang/node-lessons">Node.js 包教不包会</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://rainweb.cn/article/category/Nodejs">篇幅比较少</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3cfuns.com/article-5598538-1-1.html">node express 入门教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://my.oschina.net/u/568264/blog/193773">nodejs定时任务</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://60sky.com/">一个nodejs博客</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/yexiaochai/p/3536547.html">【NodeJS 学习笔记04】新闻发布系统</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/qqloving/p/3541099.html">过年7天乐，学nodejs 也快乐</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nqdeng/7-days-nodejs">七天学会NodeJS</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/zhongweiv/p/nodejs_events.html">Nodejs学习笔记（二）— 事件模块</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/liusuqi/p/3735491.html">nodejs入门</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/zensh/jsgen">angularjs nodejs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.fens.me/series-nodejs/">从零开始nodejs系列文章</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb">理解nodejs</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/">nodejs事件轮询</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.nodebeginner.org/index-zh-cn.html">node入门</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ourjs.com/detail/53e1f281c5910a9806000001">nodejs cms</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ourjs.com/detail/529ca5950cb6498814000005">Node初学者入门，一本全面的NodeJS教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.barretlee.com/blog/2015/10/07/debug-nodejs-in-command-line/">NodeJS的代码调试和性能调优</a></li></ul><h3 id="十-性能优化"><a href="#十-性能优化" class="headerlink" title="十. 性能优化"></a>十. 性能优化</h3><ul><li>常规优化<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering">Javascript高性能动画与页面渲染</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://isux.tencent.com/h5-performance.html">移动H5前端性能优化指南</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ued.5173.com/?p=1731">5173首页前端性能优化实践</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers">给网页设计师和前端开发者看的前端性能优化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.orzpoint.com/profiling-css-and-optimization-notes/">复杂应用的 CSS 性能分析和优化建议</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/">张鑫旭——前端性能</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.xiaoqiang.org/javascript/font-end-performance-monitor.html">前端性能监控总结</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://udc.weibo.com/2013/05/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8Bcss%E6%97%A0%E5%9B%BE%E7%89%87%E6%8A%80%E6%9C%AF/">网站性能优化之CSS无图片技术</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html">web前端性能优化进阶路</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://my.eoe.cn/tuwandou/archive/4544.html">前端技术：网站性能优化之CSS无图片技术</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.baiduux.com/blog/2011/02/15/browser-loading/">浏览器的加载与页面性能优化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3ctech.com/p/1503">页面加载中的图片性能优化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD">Hey——前端性能</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.baiduux.com/blog/2010/03/15/html%E4%BC%98%E5%8C%96-2/">html优化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.99css.com/archives/tag/%E6%80%A7%E8%83%BD">99css——性能</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.yslow.net/category.php?cid=20">Yslow——性能优化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/yslow/">YSLOW中文介绍</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.360ito.com/article/40.html">转一篇Yahoo关于网站性能优化的文章，兼谈本站要做的优化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml">Yahoo!团队实践分享：网站性能</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.jiasule.com/i/153">网站性能优化指南：什么使我们的网站变慢？</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.powereasy.net/helpyou/knowledge/ecommerce/9593.html">网站性能优化实践，减少加载时间，提高用户体验</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.umtry.com/archives/747.html">浅谈网站性能优化 前端篇</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.adinnet.cn/blog/designview/2012-7-12/678.html">前端重构实践之如何对网站性能优化？</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.gbin1.com/technology/javascript/20130708-front-end-performance-optimization-9/">前端性能优化：使用媒体查询加载指定大小的背景图片</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.mykuer.com/post/factors-that-affect-the-speed-of-web-site-open.html">网站性能系列博文</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml">加载，不只是少一点点</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://mzhou.me/article/95310/">前端性能的测试与优化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.gbin1.com/technology/html/20130217-tips-for-speed-up-page-loading/">分享网页加载速度优化的一些技巧？</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.f2es.com/images-bytes-opt/">页面加载中的图片性能优化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.tcreator.info/webSchool/website/Front-end-Opt-Yslow.html">web前端优化(基于Yslow)</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.qianduan.net/website-performance-optimization-tool.html">网站性能优化工具大全</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/2012/10/high-performance-html/">【高性能前端1】高性能HTML</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/2012/10/high-performance-css/">【高性能前端2】高性能CSS</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://coolshell.cn/articles/6470.html">由12306谈谈网站前端性能和后端性能优化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alloyteam.com/category/webfrontend/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/">AlloyTeam——前端优化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/developersupport/p/3248695.html">毫秒必争，前端网页性能最佳实践</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.sina.com.cn/s/blog_6e9d2e0701017kvu.html">网站性能工具Yslow的使用方法</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1">前端工程与性能优化（上）：静态资源版本更新与缓存</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2">前端工程与性能优化（下）：静态资源管理与模板框架</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.jobbole.com/48369/">HTTPS连接的前几毫秒发生了什么</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://uicss.cn/yslow/%23more-12319">Yslow</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.smartbear.com/web-performance/essential-web-performance-metrics-a-primer-part-1/">Essential Web Performance Metrics — A Primer, Part 1</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.smartbear.com/performance/essential-web-performance-metrics-part-2/">Essential Web Performance Metrics — Part 2</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jayli.github.io/blog/data/2011/12/23/yuislide.html">YUISlide,针对移动设备的动画性能优化</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://joelglovier.com/improving-site-performance/">Improving Site Performance</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.segmentfault.com/laopopo/1190000000367899">让网站提速的最佳前端实践</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sixrevisions.com/web-development/why-website-speed-is-important/">Why Website Speed is Important</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.devbridge.com/articles/need-for-speed-how-to-improve-your-website-performance/">Need for Speed – How to Improve your Website Performance</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/amfe/article/issues/1">阿里无线前端性能优化指南 (Pt.1 加载期优化)</a></li></ul></li><li>优化工具<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/3083">JavaScript 性能分析新工具 OneProfile</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/3091">JavaScript 堆内存分析新工具 OneHeap</a></li></ul></li><li>在线工具<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developers.google.com/speed/pagespeed/insights/">google在线工具</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.alibench.com/">阿里测</a></li><li><a href="http://itest.aliyun.com/">阿里-免费测试服务</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/alibaba/f2etest">阿里-F2etest多浏览器兼容性测试解决方案</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jsperf.com/">js性能测试</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://smallpdf.com/cn">轻松玩转PDF</a></li></ul></li></ul><h3 id="十一-前端架构"><a href="#十一-前端架构" class="headerlink" title="十一. 前端架构"></a>十一. 前端架构</h3><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/topic/19612641">技术架构</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://saito.im/note/The-Architecture-of-F2E/">前端架构</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/24092572">如何成为前端架构师</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://hikejun.com/sharing/2010webrebuild/?file=fe-infrastructure.html">关于前端架构-张克军</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/25583350">百度腾讯offer比较（腾讯游戏VS百度基础架构）</a></li></ul><h3 id="十二-个人作品"><a href="#十二-个人作品" class="headerlink" title="十二. 个人作品"></a>十二. 个人作品</h3><h4 id="1-推荐作品"><a href="#1-推荐作品" class="headerlink" title="1. 推荐作品"></a>1. 推荐作品</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://gist.github.com/wintercn">winter代码片段需要FQ</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.fgm.cc/learn/">fgm</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hongru/hongru.github.com">岑安作品集</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://kmdjs.github.io/">当耐特demo集合</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.laoshu133.com/Lab/">米空格 js作品</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://koen301.github.io/">myFocus</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://panxuepeng.github.io/seajslib/">SeaJS组件库</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yanhaijing.com/myProject/">颜海镜作品</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jo2.org/category/myworks/">脚儿网作品</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnitblog.com/yemoo/category/3107.html">javascript个人作品</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bbs.miaov.com/forum.php?mod=viewthread&amp;tid=7790">妙味的雷东升游戏作品</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bbs.csdn.net/topics/380227212">javascript作品集</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/TooBug/works">云五笔，灰度产生生成工具</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://koen301.github.io/">项目主页</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zaole.net/">个性的作品主页</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://static.tingall.com/v2/player/">播放器</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ucren.com/blog/demos">ucren js demos 集</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhinengshe.com/works_list.html">智能社</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://demos.shizuwu.cn/">实例陈列架</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zoye.sinaapp.com/demo">zoye demo</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://lab.wangyuanwai.com/">王员外</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://pingfan1990.sinaapp.com/">平凡</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.lovewebgames.com/">jyg 游戏案例</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.helloweba.com/list.html">很多jquery插件</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.bujichong.com/sojs/api/index.html">不羁虫 - soJs 作品系列</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://frozenui.github.io/case.html">frozenui</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://js-game.github.io/othello/">黑白棋</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yansm.github.io/fromone/index.html">fromone</a></li></ul><h4 id="2-群员作品"><a href="#2-群员作品" class="headerlink" title="2. 群员作品"></a>2. 群员作品</h4><ul><li>[MDialog - <a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://demo.webjyh.com/">合肥-M.J]</a></li><li>[轮播图 - <a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sandbox.runjs.cn/show/do6zlrrk">上海－冷静]</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.replace5.com/">广州—坚壳]</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.seejs.com/demos/">成都 - 无痕]　感恩节专题</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://hacke2.github.io/works">球霸天]</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/mcat/">北京-小数]</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://thx.github.io/magix/">ptf] Magix 工具</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://thx.github.io/magix/">杭州-Pft] Magix 基于 MVC 结构和 Hash 驱动的 OPOA（One Page One Application）应用</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bh-lay.com/labs/">上海-剧中人]-实验室</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jikeytang.github.io/">上海-豪情 ] 作品集合</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://guoshan.sinaapp.com/">成都-feeling]</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/liyunhua/">上海-angela]</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://hcjp.github.io/work/demo/">海南-hank]作品</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/yibuyisheng/blogs/issues">上海-张力]博客</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zkske121.github.io/">上海-zenki]作品</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://01google.sinaapp.com/locker.html">移动端图案解锁</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/webjyh/MPreview.mobile">合肥-M.J] - MPreview 移动端图片预览组</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/webjyh/Mexam">合肥-M.J] - Mexam 移动端在线做题组</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://letyougo.github.io/dancer/">北京-苏瑞] - dancer小人</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://k.swao.cn/js/">上海-玄沐]- 个人网站</a></li><li>[<a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.meckodo.com/">厦门-二哲]- 个人博客</a></li></ul><h4 id="3-国外大牛精品"><a href="#3-国外大牛精品" class="headerlink" title="3. 国外大牛精品"></a>3. 国外大牛精品</h4><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://pazguille.me/">pazguille</a></li></ul><h3 id="十三-简历"><a href="#十三-简历" class="headerlink" title="十三. 简历"></a>十三. 简历</h3><ul><li>生成<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/geekcompany/DeerResume">MarkDown在线简历工具</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.deercv.com/">MarkDown在线简历工具</a></li></ul></li><li>模板<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://learnshare.github.io/about/index.html">不错的个人简历</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://hcy2367.github.io/resume/">简历</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ncuey.sinaapp.com/CrispElite/">张伦</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hacke2/ResumeSample">简历</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.dandyweng.com/2013/07/how-my-website-was-created/">翁天信</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.webhek.com/misc/interactive-resume/">动画方式的简历</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.linqing07.com/resume.html">组件丰富简历</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.mojianli.com/resume/view">简历池</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.haorooms.com/about">haorooms博客</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cv.youngdze.com/">Justin Young</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/geekcompany/ResumeSample">各个程序员简历模板</a></li></ul></li></ul><h3 id="十四-面试题"><a href="#十四-面试题" class="headerlink" title="十四. 面试题"></a>十四. 面试题</h3><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.nowcoder.com/discuss/3196">那几个月在找工作（百度，网易游戏）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/1743">2014最新面试题</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://group.jobbole.com/category/tech/interview-test/">名企笔试大全</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3cfuns.com/thread-5598563-2-1.html">阿里前端面试题</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/imwtr/p/4685546.html">2016校招内推 – 阿里巴巴前端 – 三面面试经历</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3cfuns.com/article-5599657-1-1.html">腾讯面试题</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/lvdabao/p/3660707.html">年后跳槽那点事：乐视+金山+360面试之行</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://fatesinger.com/2722.html">阿里前端面试题上线</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/52cik/p/js-question-lg.html">拉勾网js面试题</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/allenxing/p/3724382.html">前端面试</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://mianshiti.diandian.com/">Web开发笔试面试题 大全</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000000465431">前端开发面试题</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions">2014最新前端面试题</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/fex-team/interview-questions">百度面试</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3cfuns.com/forum.php?mod=forumdisplay&amp;fid=51&amp;filter=typeid&amp;typeid=177">面试题</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/darcyclarke/Front-end-Developer-Interview-Questions/tree/master/Chinese">前端工作面试问题</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000000465431">前端开发面试题</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98">5个经典的前端面试问题</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000002562454">最全前端面试问题及答案总结</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/Large-search-front-team-column%202961">如何面试一名前端开发工程师？</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hawx1993/Front-end-Interview-questions">史上最全 前端开发面试问题及答案整理</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/xiaoruo/p/4665163.html">前端实习生面试总结</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hawx1993/Front-end-Interview-questions">史上最全 前端开发面试问题及答案整理</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.jobbole.com/78738/">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/paddingme/Front-end-Web-Development-Interview-Question">前端开发面试题大收集</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/qiu-deqing/FE-interview">收集的前端面试题和答案</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/19568008">如何面试前端工程师</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md">前端开发面试题</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.nowcoder.com/discuss?type=2">牛客网-笔试面经</a></li></ul><h3 id="十五-iconfont"><a href="#十五-iconfont" class="headerlink" title="十五. iconfont"></a>十五. iconfont</h3><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/21253343">中文字体</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://iconfont.cn/">淘宝字库</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ux.etao.com/fonts">字体</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://iconfont.cn/help/platform.html">制作教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhangxinxu.com/wordpress/?s=icomoon">zhangxinxu-icommon</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://icomoon.io/app/">icommon</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://imooc.com/learn/243">用字体在网页中画ICON图标(推荐教程)</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://font-spider.org/">字体压缩工具</a> 感谢初级群　[深圳-小鱼] 的推荐</li></ul><h3 id="十六-开发工具类"><a href="#十六-开发工具类" class="headerlink" title="十六. 开发工具类"></a>十六. 开发工具类</h3><ul><li>前端开发工具<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/judasn/IntelliJ-IDEA-Tutorial">IntelliJ IDEA 简体中文专题教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://t.cn/8kZZ1Uy">Webstorm,InterllIdea,Phpstorm</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jikeytang/sublime-text">SublimeText</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://atom.io/">Atom</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://code.visualstudio.com/">visual studio code</a></li></ul></li><li>Chrome, Firebug, Filddle 调试</li><li>Fiddler<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/tugenhua0707/p/4623317.html">Fiddler调式使用知多少(一)深入研究</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/strick/p/4570006.html">微信fiddle</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://gaoboy.com/article/26.html">微信fiddle</a></li></ul></li><li>Chrome<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.chrome.com/devtools">Google Chrome 官方</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/constantince/p/4565261.html">Chrome - 基础</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/constantince/p/4579121.html">Chrome - 进阶</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/constantince/p/4585983.html">Chrome - 性能</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/constantince/p/4607497.html">Chrome - 性能进阶</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/constantince/p/4624241.html">Chrome - 移动</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/liyunhua/p/4544738.html">Chrome - 使用技巧</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html">Chrome - Console控制台不完全指南</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://c7sky.com/chrome-devtools-workspace.html">Chrome - Workspace使浏览器变成IDE</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/Nothing-blind%202975">network面板</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://anti-code.com/devtools-cheatsheet/">chrome开发工具快捷键</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.html-js.com/article/2327">chrome调试工具常用功能整理</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace/">Chrome 开发工具 Workspace 使用</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html">Chrome神器Vimium快捷键学习记录</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3cplus.com/sassguide/debug.html">sass调试-w3cplus</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html">如何更专业的使用Chrome开发者工具-w3cplus</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sentsin.com/web/253.html">chrome调试canvas</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.chrome.com/devtools/index">chrome profiles1</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://h5dev.uc.cn/article-25-1.html">chrome profiles2</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.oschina.net/translate/performance-optimisation-with-timeline-profiles">chrome profiles3</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developers.google.com/chrome-developer-tools/docs/mobile-emulation">chrome移动版调试</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://ued.taobao.org/blog/?p=5534">chrome调试</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/QLeelulu/archive/2011/08/28/2156402.html">chrome的调试</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developers.google.com/chrome-developer-tools/docs/commandline-api">chrome console 命令详解</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/leonkao/p/3809655.html">查看事件绑定1</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/xiaoyao2011/p/3447421.html">查看事件绑定2</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/blog/xuelang/1190000000683599">神器——Chrome开发者工具(一)</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://xinranliu.me/2015-05-22-qiqu-performance/">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍)</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html">chrome 开发者工具的 15 个小技巧</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://1ke.co/course/361">Chrome开发者工具不完全指南</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://segmentfault.com/a/1190000003882567">Chrome 开发者工具使用技巧</a></li></ul></li><li>Firebug<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/137">firebug视频教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.mozilla.org/zh-CN/docs/Tools/WebIDE">firefox 模拟器</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/ctriphire/p/4116207.html">console.log 命令详解</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com/blog/2008/06/firebug_tutorial.html">Firebug入门指南</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.ruanyifeng.com/blog/2011/03/firebug_console_tutorial.html">Firebug控制台详解</a></li><li></li></ul></li><li>移动,微信调试<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://liyaodong.com/2015/07/06/%E5%BE%AE%E4%BF%A1%E8%B0%83%E8%AF%95%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/">微信调试的那些事</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.qqbrowser.cc/">微信调试官网</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.qqbrowser.cc/wei-xin-gong-zhong-hao-ben-di-diao-shi/">微信公众号本地调试</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://bbs.mb.qq.com/thread-243399-1-1.html">微信、手Q、Qzone之x5内核inspect调试解决方案</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://openstf.github.io/">浏览器端调试安卓</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yujiangshui.com/multidevice-frontend-debug/">移动端前端开发调试</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/yujiangshui/CN-Chrome-DevTools/blob/remote-debugging/md/Use-Tools/remote-debugging.md">使用 Chrome 远程调试 Android 设备</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://plus.uc.cn/document/webapp/doc5.html">mac移动端调试</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.mihtool.com/">mac移动端调试</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://thx.github.io/mobile/debugging-in-mobile/">无线调试攻略</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://yanhaijing.com/mobile/2014/12/17/web-debug-for-mobile/">无线调试攻略</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jianshu.com/p/ccf124f1f74b">屌爆了,完美调试 微信webview(x5)</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://jsconsole.com/">远程console</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://blog.qqbrowser.cc/">微信调试工具</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jieyou/remote_inspect_web_on_real_device">各种真机远程调试方法汇总</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.zhihu.com/question/37361845">手机测试自己写的web页面</a></li></ul></li><li>iOS Simulator<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/iOS_Simulator_Guide/Introduction/Introduction.html">Simulator</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.crifan.com/intro_ios_simulator_in_xcode_and_usage_summary/">Xcode中的iOS模拟器(iOS Simulator)的介绍和使用心得</a></li></ul></li><li>img<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://preloaders.net/en/circular">loading img</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://zhitu.isux.us/">智图-图片优化平台</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://tinypng.com/">在线png优化</a></li></ul></li><li>生成二维码<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cli.im/">生成二维码</a></li></ul></li><li>浏览器同步<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/leeluolee/puer">puer</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://livereload.com/">liveReload</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://getf5.com/">f5</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://geek100.com/2608/">File Watchers</a></li></ul></li><li>在线PPT制作<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://js8.in/2013/11/16/%E6%8E%A8%E8%8D%90nodeppt%EF%BC%9A%E4%BD%BF%E7%94%A8markdown%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%86%99%E7%BD%91%E9%A1%B5ppt/">nodePPT</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/ksky521/nodePPT">PPT</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/hakimel/reveal.js/">reveal</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/Seldaek/slippy">slippy</a></li></ul></li></ul><h3 id="十七-前端导航网站"><a href="#十七-前端导航网站" class="headerlink" title="十七. 前端导航网站"></a>十七. 前端导航网站</h3><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://uxbees.com/index.html">界面清爽的前端导航</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://whycss.com/">前端导航</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.daqianduan.com/nav">前端网址导航</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://sentsin.com/daohang/">前端名录</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://123.jser.us/">前端导航</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.css88.com/nav/">前端开发资源</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.haourl.cn/">网址导航</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://code.ciaoca.com/">前端开发仓库 - 众多效果的收集地</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/jnoodle/f2e-collect">前端资源导航</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://f2e.im/static/pages/nav/index.html">F2E 前端导航</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://w3ctrain.github.io/">前端收藏夹</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://doc.pfan123.com/">pFan 前端开发导航平台</a></li></ul><h3 id="十八-常用CDN"><a href="#十八-常用CDN" class="headerlink" title="十八. 常用CDN"></a>十八. 常用CDN</h3><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://lib.sinaapp.com/">新浪CDN</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://cdn.code.baidu.com/">百度静态资源公共库</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://libs.useso.com/">360网站卫士常用前端公共库CDN服务</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.bootcdn.cn/">Bootstrap中文网开源项目免费 CDN 服务</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://staticfile.org/">开放静态文件 CDN - 七牛</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jq22.com/cdn">CDN加速 - jq22</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://code.jquery.com/">jQuery CDN</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.google-jquery-cdn.com/">Google jQuery CDN</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.asp.net/ajax/cdn">微软CDN</a></li></ul><h3 id="十九-Git-SVN-Github"><a href="#十九-Git-SVN-Github" class="headerlink" title="十九. Git,SVN,Github"></a>十九. Git,SVN,Github</h3><ul><li>Git<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://git-scm.com/">git-scm</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰-Git教程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://git-for-windows.github.io/">git-for-windows</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://daemon369.github.io/git/2015/03/10/add-ssh-keys-for-github/">GitHub 添加 SSH keys</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.worldhello.net/gotgithub/index.html">gogithub</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://pcottle.github.io/learnGitBranching/">git常规命令练习</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/xirong/my-git">git的资料整理</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/fanfan259/p/4810517.html">我所记录的git命令（非常实用）</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md">企业开发git工作流模式探索部分休整</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/phodal/github-roam">GitHub 漫游指南</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md">GitHub秘籍</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://livoras.com/post/28">使用git和github进行协同开发流程</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://onlywei.github.io/explain-git-with-d3/">动画方式练习git</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/208">版本管理工具介绍—Git篇</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/390">版本控制入门 – 搬进 Github</a></li><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://pcottle.github.io/learnGitBranching/?demo">Git动画演示</a></li></ul></li><li>SVN<ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.imooc.com/learn/109">版本管理工具介绍—SVN篇</a></li></ul></li></ul><h3 id="二十、其它"><a href="#二十、其它" class="headerlink" title="二十、其它"></a>二十、其它</h3><ul><li><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.cnblogs.com/aaron-pan/p/8018473.html">前端UI框架小汇总</a></li></ul><p>引用：</p><p><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://jeffjade.com/2016/03/30/104-front-end-tutorial/">https://jeffjade.com/2016/03/30/104-front-end-tutorial/</a></p><p><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/nicejade/Front-end-tutorial">https://github.com/nicejade/Front-end-tutorial</a></p><p><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=http://www.jqhtml.com/">http://www.jqhtml.com/</a></p><p><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://github.com/niuwang/guide">https://github.com/niuwang/guide</a></p><p><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://nicelinks.site/">https://nicelinks.site/</a></p><hr><h2 id="五、前端知识体系目录"><a href="#五、前端知识体系目录" class="headerlink" title="五、前端知识体系目录"></a>五、前端知识体系目录</h2><h4 id="1、HTML-HTML5基础："><a href="#1、HTML-HTML5基础：" class="headerlink" title="1、HTML/HTML5基础："></a>1、HTML/HTML5基础：</h4><p>1.0、语义化H5标签<br>1.1、H5引进了一些新的标签，特别注意article、header、footer、aside、nav等，注意HTML的标题结构<br>1.2、理解浏览器解析HTML的过程，理解DOM的树形结构，及相应API<br>1.3、理解HTML标签在各个浏览器上的默认样式（代理样式），理解CSS中的重置样式表的概念<br>1.4、理解Canvas、SVG、video等功能性标签<br>1.5、理解form、iframe标签，理解文件提交过程<br>推荐书籍：<br>A、《HTML5秘籍》</p><h4 id="2、高健壮性CSS"><a href="#2、高健壮性CSS" class="headerlink" title="2、高健壮性CSS"></a>2、高健壮性CSS</h4><p>2.1、学习基础知识，包括大部分常用属性、选择器的用法，要对大多数标签有个基础概念,在日常使用的基础上，尝试学习浏览器兼容性问题，要知道兼容性的主要问题及解决方法<br>2.2、深入理解盒子模型，区分块级元素、行内元素，有几个比较重要的属性：display、float、position，一定要弄清楚区分盒子、行内盒子的概念另外可以考虑学一些预编译语言：sass、less，都很简单<br>2.3、学习常用框架，可以使用bootstrap构建项目<br>2.4、学习框架的代码组织方式包括：12格栅系统、组件化、组件的风格化等<br>2.5、学习CSS 3的新功能，特别是动画效果、选择器<br>2.6、认真学习一些CSS对象化思想，学习编写简洁性、高复用性、高健壮性的CSS<br>2.7、有空的话，可以看看所谓的扁平化设计，还有简洁性<br>2.8、理解CSSOM、render、reflow、CSS性能、CSS阻塞概念<br>学习方法：<br>1、多看别人的代码，一些设计的不错的网站就是很好的学习素材，比如拉勾网<br>2、一定要学会使用grunt、gulp压缩CSS<br>3、display + position + float 可以组合出很复杂的效果，多想想盒子模型<br>4、尝试在不用float，且position不为absolute的情况下实现等高、等宽等布局<br>推荐书籍：<br>1、《图灵程序设计丛书:HTML5与CSS3设计模式》<br>2、《Web开发技术丛书:深入理解Bootstrap》<br>3、《高流量网站CSS开发技术》<br>4、《CSS设计彻底研究》 这个一定要<br>5、《Web开发技术丛书:深入理解Bootstrap》<br>6、可以找一些专门讲SASS的书，但是我没找到<br>7、《CSS权威指南(第3版)》</p><h4 id="3、深入学习JS"><a href="#3、深入学习JS" class="headerlink" title="3、深入学习JS"></a>3、深入学习JS</h4><p>3.1、重新学习JS语法，注意：表达式（特别是函数访问表达式）、语句、类型（包括类型判断)注意，这个时候主要倾向于“原生”JS哦，不要使用框架<br>3.2、深入理解JS的“一级函数”、对象、类的概念,学会使用函数来构造类、闭包，学会用面向对象的方式组织代码<br>3.3、深入理解JS的作用域、作用域链、this对象（在各种调用形式中，this的指向）理解函数的各种调用方法（call、apply、bind等）<br>3.4、理解对象、数组的概念<br>理解对象的“[]”调用，理解对象是一种“特殊数组”<br>理解for语句的用法<br>深入理解JS中原始值、包装对象的概念（重要）<br>3.5、学习一些常用框架的使用方法，包括：JQUERY、underscore、EXTJS，加分点有：backbone、angularjs、ejs、jade<br>通过比较多个框架的使用方法，想清楚“JS语言极其灵活”这一事实<br>总结常见用法，提高学习速度<br>学习模块化开发（使用require.js、sea.js等）<br>3.6、适当看一些著名框架的源码，比如jQuery（不建议看angularjs，太复杂了）<br>重要的是学习框架中代码的组织形式，即设计模式<br>3.7、了解JS解释、运行过程，理解JS的单线程概念<br>深入理解JS事件、异步、阻塞概念<br>3.8、理解浏览器组成部件，理解V8的概念<br>学习V8的解释-运行过程<br>在V8基础上，学会如何提高JS性能<br>学会使用chrome的profile进行内存泄露分析<br>学习方法：<br>1、提高对自己的要求，要有代码洁癖<br>2、适当的时候看看优秀框架的源码，特别是框架的架构模式、设计模式<br>3、多学学设计模式<br>4、学习原生JS、DOM、BOM、Ajax<br>推荐书籍：<br>1、《O’Reilly精品图书系列:JavaScript权威指南(​第6版)》 必看<br>2、《JavaScript设计模式》<br>3、《WebKit技术内幕》<br>4、《JavaScript框架高级编​程:应用Prototype YUI Ext JS Dojo MooTools》<br>5、《用AngularJS开发下一代Web应用》<br>6、跨终端<br>6.1、理解混合APP的概念<br>6.2、理解网页在各类终端上的表现<br>6.3、理解网页与原生app的区同，重在约束<br>6.4、理解单页网站，特别要规避页面的内存泄露问题<br>6.5、入门nodejs，对其有个基础概念，知道它能做什么，缺点是什么<br>推荐书籍：<br>1、《单页Web应用:JavaScript从前端到后端 》<br>2、《Web 2.0界面设计模式》<br>3、《响应式Web设计:HTML5和​CSS3实战》<br>5、工具<br>学会使用grunt进行JS、CSS、HTML 压缩，特别是模块化js开发时候的压缩<br>会用PS进行切图、保存icon<br>入手sublime、webstorm<br>学会使用chrome调试面板，特别是：console、network、profile、element</p><hr><p>进阶：</p><h4 id="4、性能"><a href="#4、性能" class="headerlink" title="4、性能"></a>4、性能</h4><p>1.1、理解资源加载的过程<br>包括：TCP握手连接、HTTP请求报文、HTTP回复报文<br>1.2、理解资源加载的性能约束，包括：TCP连接限制、TCP慢启动<br>1.3、理解CSS文件、JS文件压缩，理解不同文件放在页面不同位置后对性能的影响<br>1.4、理解CDN加速<br>1.5、学会使用HTTP头控制资源缓存，理解cache-control、expire、max-age、ETag对缓存的影响<br>1.6、深入理解浏览器的render过程<br>推荐书籍：<br>1、《Web性能权威指南》<br>2、雅虎网站页面性能优化的34条黄金守则</p><h4 id="5、HTTP及TCP协议族"><a href="#5、HTTP及TCP协议族" class="headerlink" title="5、HTTP及TCP协议族"></a>5、HTTP及TCP协议族</h4><p>2.1、学习http协议，理解http请求-响应模式<br>2.2、理解http是应用层协议，它是构建在TCP/IP协议上的<br>2.3、理解http报文（请求-响应报文）<br>2.4、理解http代理、缓存、网关等概念，指定如何控制缓存<br>2.5、理解http协议内容，包括：状态码、http头、长连接（http1.1）<br>2.6、学习http服务器的工作模型，对静态文件、CGI、DHTML的处理流程有个大致概念<br>推荐书籍：<br>1、《HTTP权威指南》<br>2、《TCP/IP详解》<br>3、《图解TCP/IP(第5版)》</p><h4 id="6、安全性"><a href="#6、安全性" class="headerlink" title="6、安全性"></a>6、安全性</h4><hr><p>本文版权归原作者所有</p><p>链接：<a href="https://yq.aliyun.com/articles/304137?spm=a2c6h.12873639.0.0.614c57acORhUyB">https://yq.aliyun.com/articles/304137?spm=a2c6h.12873639.0.0.614c57acORhUyB</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS面试题02</title>
      <link href="posts/eb76ed5a/"/>
      <url>posts/eb76ed5a/</url>
      
        <content type="html"><![CDATA[<h3 id="一、js中的数据类型"><a href="#一、js中的数据类型" class="headerlink" title="一、js中的数据类型"></a>一、js中的数据类型</h3><p>基本类型：number string boolean null undefined symbol bigint</p><p>引用数据类型:object (包含，Date,RegExp,Function,Array,Math..)</p><h3 id="二、symbol的作用"><a href="#二、symbol的作用" class="headerlink" title="二、symbol的作用"></a>二、symbol的作用</h3><p>首先说明symbol是基本类型之一，symbols 是一种无法被重建的基本类型。这时 symbols 有点类似与对象创建的实例互相不相等的情况，但同时 symbols又是一种无法被改变的基本类型数据。</p><pre class="language-none"><code class="language-none">const s1 &#x3D; Symbol();const s2 &#x3D; Symbol();console.log(s1 &#x3D;&#x3D;&#x3D; s2);&#x2F;&#x2F;false复制代码</code></pre><p>可以看到symbol创建出来的值互不相同，即使传入相同的参数，也不相同，同时要注意，symbol不是被实例化出来的，不用new创建。 所以symbol可以用作</p><ol><li>作为对象的属性名，可以保证属性名不会重复。但要注意，symbol不能过通过for… in…遍历出来</li></ol><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"aaa"</span>obj<span class="token punctuation">[</span>s1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"asjdkl"</span>obj<span class="token punctuation">[</span>s2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"u can not see me"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//a</span>复制代码</code></pre><p>如果想获取，可以通过<code>Object.getOwnPropertySymbols()</code>来获取</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Symbol(a)</span><span class="token comment">//Symbol(a)</span></code></pre><h3 id="三、类型转换"><a href="#三、类型转换" class="headerlink" title="三、类型转换"></a>三、类型转换</h3><p><a href="https://github.com/mqyqingfeng/Blog/issues/159">https://github.com/mqyqingfeng/Blog/issues/159</a></p><h3 id="四、如何判断变量的类型"><a href="#四、如何判断变量的类型" class="headerlink" title="四、如何判断变量的类型"></a>四、如何判断变量的类型</h3><p>typeof对于原始类型（除了Null)是可以检测到的，但是引用类型就统一返回object</p><p>instance of 用于检测构造函数的原型是否出现在某个实例函数的原型链上</p><p>最好的方法是使用<code> Object.prototype.toString</code>方法，它可以检测到任何类型，返回的结果是<code>[object Type]</code>的形式,基本可以实现所有类型的检测，我们用下面的代码来演示一下。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//实现一个检测类型的公共接口</span><span class="token keyword">function</span> <span class="token function">detectType</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[object </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//根据自己的需求进行扩展，记住类型的首字母要大写</span><span class="token keyword">const</span> isArray <span class="token operator">=</span> <span class="token function">detectType</span><span class="token punctuation">(</span><span class="token string">"Array"</span><span class="token punctuation">)</span><span class="token keyword">const</span> isFunc <span class="token operator">=</span> <span class="token function">detectType</span><span class="token punctuation">(</span><span class="token string">"Function"</span><span class="token punctuation">)</span><span class="token keyword">const</span> isRegExp <span class="token operator">=</span> <span class="token function">detectType</span><span class="token punctuation">(</span><span class="token string">"RegExp"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token string">"[1,2,3]"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFunc</span><span class="token punctuation">(</span>detectType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></code></pre><h3 id="五、this的指向"><a href="#五、this的指向" class="headerlink" title="五、this的指向"></a>五、this的指向</h3><p>js中this 的指向大致可以分为以下四个场景</p><ol><li>在对象的方法中使用,this指向当前的对象</li></ol><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> <span class="token string">"hhh"</span><span class="token punctuation">,</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//'hhh'</span>复制代码</code></pre><p>​    2.在独立的函数中使用</p><ul><li>在严格模式下，this指向undefined</li><li>非严格模式下，this指向全局对象，比如windo</li></ul><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"jjj"</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> <span class="token string">"hhh"</span><span class="token punctuation">,</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> test <span class="token operator">=</span> obj<span class="token punctuation">.</span>test<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"jjj"</span>复制代码</code></pre><p>​    3.通过call\apply\bind来指定</p><p>三者都可传入一个要改变的this的值，来改变this指向，区别就是call\apply改变的同时执行函数，bind不执行，而是返回这个函数</p><p>call\apply 第一个参数就是要改变的this的值，区别就是call传入的是参数列表，apply传入的是参数数组</p><p>​    4.构造函数</p><p>如果一个函数是构造函数，那么this就指向它实例化出来的对象</p><p>​    5.箭头函数</p><p>箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this，另外箭头函数里也不能使用call\apply\bind修改this的指向</p><h3 id="六、说一下什么是闭包？"><a href="#六、说一下什么是闭包？" class="headerlink" title="六、说一下什么是闭包？"></a>六、说一下什么是闭包？</h3><p>闭包是一个可以<strong>访问其他作用域的变量</strong>的<strong>函数</strong></p><p><strong>产生的原因</strong></p><p>首先要了解作用域链的概念，函数的作用域就是它所创建的地方，也就是说，函数在它被创建的时候就已经确定好它的作用域了。</p><p>函数在执行的时候遇到一个变量，他会先看看自己的作用域里有没有该变量，没有的话就会向上从父级作用域里去查找，直到找到位置，否则报错undefined</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//1</span>复制代码</code></pre><p>所以闭包的本质就是 存在对父级作用域的引用，这里注意，上面的代码并不是闭包，我们并没有通过调用f1()来访问到不属于它作用域的变量，因为a本来就属于f1,我们只是通过f1调用了f2而已。 我们把上面的例子改造成闭包的形式，我们要在外面调用f2</p><pre class="language-none"><code class="language-none">function f1() &#123;    var a &#x3D; 1;    var f2 &#x3D; function() &#123;        console.log(a);    &#125;    return f2&#125;const clousure &#x3D; f1();clousure();&#x2F;&#x2F;1复制代码</code></pre><p>我们把f2作为返回值，在外部进行调用，可以看到我们可以访问到f1的变量，这就是闭包，</p><p>也说明f2的作用域就是它所创建时的地方，而不是调用时的地方。</p><h3 id="七、解释一下原型链"><a href="#七、解释一下原型链" class="headerlink" title="七、解释一下原型链"></a>七、解释一下原型链</h3><p>每一个函数有一个<code>prototype</code>的属性，当他作为构造函数的时候，它实例化出来的函数会有一个<code>_proto_</code>的属性，它执行构造函数的prototype</p><p>函数通过<code>prototype</code>来访问其父元素的属性和方法，依此迭代访问，构成原型链，直到Object的原型为止，它位于原型链的顶端。</p><p>访问某个属性或方法的时候，会先从当前对象中查找，没有的话就顺着原型链开始寻找，直到找到最顶端，也就是Object的原型（null）为止。</p><p>另外每一个原型上都有一个constructor属性，指向相关联的构造函数</p><h3 id="八、-DOM事件流和事件委托"><a href="#八、-DOM事件流和事件委托" class="headerlink" title="八、 DOM事件流和事件委托"></a>八、 DOM事件流和事件委托</h3><p>DOM事件流分为三个阶段：</p><ol><li><p>捕获阶段</p></li><li><p>目标阶段</p></li><li><p>冒泡阶段</p><p>图例：</p></li></ol><p><a href="https://user-gold-cdn.xitu.io/2020/6/24/172e5ae59e356c5e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1">https://user-gold-cdn.xitu.io/2020/6/24/172e5ae59e356c5e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1</a></p><p><a href="https://user-gold-cdn.xitu.io/2020/7/19/1736545af6b17f18?imageView2/0/w/1280/h/960/format/webp/ignore-error/1">https://user-gold-cdn.xitu.io/2020/7/19/1736545af6b17f18?imageView2/0/w/1280/h/960/format/webp/ignore-error/1</a></p><ul><li>捕获阶段：在事件冒泡的模型中，捕获阶段不会响应任何事件；</li><li>目标阶段：目标阶段就是指事件响应到触发事件的最底层元素上；</li><li>冒泡阶段：冒泡阶段就是事件的触发响应会从最底层目标一层层地向外到最外层（根节点），事件代理即是利用事件冒泡的机制把里层所需要响应的事件绑定到外层</li></ul><p>事件流描述的是从页面中接受事件的顺序，IE和网景推出了两个正好相反的概念，IE推出的是冒泡流，从下到上，网景则是事件捕获流，从上到下。</p><p>首先通过<code>addEventListener</code>方法给元素添加点击事件，前两个参数分别是点击事件的名称和执行的回调，第三个参数就是是否开启捕获，确定事件发生的阶段，默认是false，也就是冒泡流。</p><p>事件委托，一般来说，会把一个或一组元素的时间委托到它的父元素上或者更外层元素上，当事件响应到需要绑定的元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数。在一些场景下，可以让性能得到优化。 比如给所有的列表添加点击事件，如果采用冒泡流，那么我们需要给每个元素添加点击事件，而采用事件委托的话，只需要在ul上绑定一个事件即可。</p><h3 id="九、js如何实现继承"><a href="#九、js如何实现继承" class="headerlink" title="九、js如何实现继承"></a>九、js如何实现继承</h3><ol><li>通过原型链继承</li></ol><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">"wang"</span><span class="token punctuation">&#125;</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>asset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'house'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span>asset<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"plane"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"wang"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>asset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ 'house', 'car', 'plane' ]</span>复制代码</code></pre><p>优点:可以访问父类的属性和方法和原型上的属性和方法 缺点：继承方法如果是引用类型，其中一个子类进行修改，那么全部都会受到影响</p><ol><li>通过call来继承</li></ol><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">"wang"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>asset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'house'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//“wang"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//['a', 'b']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>asset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span>复制代码</code></pre><p>优点：可以保证每个子类维护自己的属性 缺点：无法访问原型链上的属性和方法</p><ol><li>组合继承</li></ol><p>将前面二者结合</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">"wang"</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>asset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'house'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//wang</span><span class="token comment">//[ 'a', 'b' ]</span><span class="token comment">//[ 'house', 'car' ]</span>复制代码</code></pre><p>优点：既可以访问原型上的属性和方法，又可以每个子类维护自己属性 缺点：每次创建一个子类实例，父类都会被执行一次（涉及到new的内部实现，详情请看下一话题）</p><ol><li>优化组合继承</li></ol><p>将原型赋值语句修改如下</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>复制代码</code></pre><p>打印child会发现另一个问题</p><p>图例：</p><p><a href="https://user-gold-cdn.xitu.io/2020/6/24/172e5cc5efcccfa8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1">https://user-gold-cdn.xitu.io/2020/6/24/172e5cc5efcccfa8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1</a></p><p>child的构造函数怎么能是Parent呢，所以我们还需要手动的修改一下</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span>复制代码</code></pre><p>图例：</p><p><a href="https://user-gold-cdn.xitu.io/2020/6/24/172e5ce03e37c7cc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1">https://user-gold-cdn.xitu.io/2020/6/24/172e5ce03e37c7cc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1</a></p><p>另外也可以使用<code>Object.create()</code>这个方法来创建一个指定原型的对象</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span></code></pre><h3 id="十、new操作符都做了些什么"><a href="#十、new操作符都做了些什么" class="headerlink" title="十、new操作符都做了些什么"></a>十、new操作符都做了些什么</h3><ol><li>创建一个空对象</li><li>将空对象的<em>proto</em>属性指向构造函数的原型</li><li>将this指向这个对象</li><li>返回这个对象</li></ol><p>代码实现：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">newFactory</span><span class="token punctuation">(</span><span class="token parameter">constructor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token function">newFactory</span><span class="token punctuation">(</span>Test<span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"tom"</span></code></pre><h3 id="十一、-let-const"><a href="#十一、-let-const" class="headerlink" title="十一、  let const"></a>十一、  let const</h3><p>let 和 const都是es6的语法，之前的var是没有块级作用域的，所以很容易造成全局变量污染，而let 和 const都是有块级作用域的。 let可以理解为带有块级作用域的var const则是指定常量的，一旦定义就不能再改变。</p><p>let 和 cons声明的变量必须之前没有被使用过，否则会报错，即let和const声明的变量，只能在声明之后引用。</p><p>图例：</p><p><a href="https://user-gold-cdn.xitu.io/2020/6/24/172e5dba1460b977?imageView2/0/w/1280/h/960/format/webp/ignore-error/1">https://user-gold-cdn.xitu.io/2020/6/24/172e5dba1460b977?imageView2/0/w/1280/h/960/format/webp/ignore-error/1</a></p><p><a href="https://user-gold-cdn.xitu.io/2020/6/24/172e5dc64fb6fd95?imageView2/0/w/1280/h/960/format/webp/ignore-error/1">https://user-gold-cdn.xitu.io/2020/6/24/172e5dc64fb6fd95?imageView2/0/w/1280/h/960/format/webp/ignore-error/1</a></p><p>另外要注意const的一个点就是，当他定义为一个引用类型时，可不可以往里面添加内容。</p><p><a href="https://user-gold-cdn.xitu.io/2020/6/24/172e5ddaed2c84dc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1">https://user-gold-cdn.xitu.io/2020/6/24/172e5ddaed2c84dc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1</a></p><p><a href="https://user-gold-cdn.xitu.io/2020/6/24/172e5de177d2bb6b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1">https://user-gold-cdn.xitu.io/2020/6/24/172e5de177d2bb6b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1</a></p><p>经过验证，我们是可以接着向里面添加内容的。 但是不能替换它，因为原始值的话，变量直接引用的是这个值，只要值不相等就不能赋值，而引用类型，变量只是拥有它在内存地址的引用，只要这个引用的地址值没变，我们还是可以对其进行操作的。</p><h3 id="十二、-异步编程-promise-async-await"><a href="#十二、-异步编程-promise-async-await" class="headerlink" title="十二、 异步编程 promise,async/await"></a>十二、 异步编程 promise,async/await</h3><ul><li>promise 的介绍（状态。。）</li><li>async await的使用</li></ul><p>异步编程的方法有</p><ol><li>回调函数</li><li>promise</li><li>async/await等</li></ol><p>回调函数在复杂场景下会造成回调地狱，影响代码的可读性和执行率。</p><p><strong>promise</strong>是es6对异步编程的一个方案，它有三种状态，pending（挂起）,fullfilled(成功),rejected(拒绝)，状态一旦改变就不可逆。对应的变化有两种：</p><p>pending——&gt; fullfilled  (resolved 解决)</p><p>pending——&gt; rejected (rejected 拒绝)</p><p>通过then这个方法来实现异步调用之后的逻辑，另外还支持链式调用。</p><p><strong>async/await</strong>是es7的语法，也是用来实现异步编程的，语法是在function关键字前加上async，代表是异步函数，await只能在async函数里使用。</p><p>async将任何函数转换为promise，这时异步函数的特征之一。 await 可以使用在任何返回Promise函数的函数之前，并且会暂停在这里，直到promise返回结果才往下进行。</p><p>async/awaite基本做到了用同步代码的风格实现异步逻辑，让代码更简洁。</p><h3 id="十三、Event-Loop-机制"><a href="#十三、Event-Loop-机制" class="headerlink" title="十三、Event Loop 机制"></a>十三、Event Loop 机制</h3><ul><li>原理</li><li>看代码说出执行结果</li></ul><p>js是一个单线程语言，所以所有的任务只能排队一个一个去做，这样效率明显很低。 所以event loop就是为解决这个问题而提出的。</p><p>在主程序中，分为两个线程，一个运行程序本身，称作主线程，另一个负责主线程和其它线程进行通信（主要是I/O操作），被称作event loop线程</p><p>在运行程序的时候，当遇到I/O操作的时候，主线程就让Event loop 线程通知相应的I/O模块去执行，然后主线程接着执行之后的代码，等到I/O结束后，event loop线程再把运行结果交给主线程，然后主线程再执行相应的回调，整个任务结束。</p><p><strong>宏任务 微任务</strong></p><p>为了让这些任务在主线程上有条不紊的进行，V8采用<strong>队列</strong>的方式对这些任务进行存储，然后一一取出执行，其中包含了两种任务队列，除了上述提到的任务队列， 还有一个延迟队列，它专门处理诸如setTimeout/setInterval这样的定时器回调任务。 这两种任务队列里的任务都是<strong>宏任务</strong></p><p><strong>微任务</strong> 通常为 <strong>应当发生在当前脚本执行完后的事情</strong> 做安排，比如对一系列操作做出反应，或者让某些事情异步但是不承担宏任务的代价</p><p>微任务的执行有两种方案，一种是等所有宏任务实行完毕然后依次执行微任务，另一种是在执行完一个宏任务之后，检查微任务队列，如果不为空则依次执行完微任务，然后再执行宏任务。</p><p>显然后者更满足需求，否则回调迟迟得不到执行，会造成应用卡顿。</p><p>常见的宏任务有：<code>setTimeout setTimeInterval</code> 常见的微任务有：”MutationObserver、Promise.then(或.reject) 以及以 Promise 为基础开发的其他技术(比如fetch API), 还包括 V8 的垃圾回收过程”</p><p><strong>nextTick</strong></p><p>process.nextTick 是一个独立于 eventLoop 的任务队列。</p><p>在每一个 eventLoop 阶段完成后会去检查这个队列，如果里面有任务，会让这部分任务优先于微任务执行。</p><p><strong>宏任务 微任务有哪些</strong></p><p>图例：</p><p><a href="https://user-gold-cdn.xitu.io/2020/7/19/173653a7a7a23ba1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1">https://user-gold-cdn.xitu.io/2020/7/19/173653a7a7a23ba1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1</a></p><p><strong>练习1：</strong></p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolve'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//start</span><span class="token comment">//end</span><span class="token comment">//resolve</span><span class="token comment">//timeout</span>复制代码</code></pre><ol><li>首先整个脚本作为宏任务开始执行，遇到同步代码直接执行</li><li>打印start</li><li>将settimeout放入宏任务队列</li><li>将Promise.resolve放入微任务队列</li><li>打印end</li><li>执行所有微任务，打印resolve</li><li>执行宏任务，打印timeout</li></ol><p><strong>练习2</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//1 2 3 4</span>复制代码</code></pre><p>也就是说 <strong>new Promise</strong>在实例化的过程中所执行的代码都是同步进行的，而<strong>then</strong>中注册的回调才是异步执行的。</p><p>在同步代码执行完成后才会去检查是否有异步任务完成，并执行对应的回调，而微任务又会在宏任务之前执行</p><h3 id="十四-防抖和节流"><a href="#十四-防抖和节流" class="headerlink" title="十四 防抖和节流"></a>十四 防抖和节流</h3><p>防抖：事件被调用后，在执行之前无论被调用多少次都会从头开始计时</p><p>节流：不管事件被调用多少次，总是按规定时间间隔执行</p><p>代码实现：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//防抖</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> timer<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>            timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>            timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//节流</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> timer<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>            timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>复制代码</code></pre><h3 id="十五、-requestAnimationFrame的优势"><a href="#十五、-requestAnimationFrame的优势" class="headerlink" title="十五、 requestAnimationFrame的优势"></a>十五、 requestAnimationFrame的优势</h3><p>requestAnimationFrame不需要指定间隔时间，它采用的是系统间隔，一般是1秒60帧，每个16ms刷新一次。 好处：</p><ol><li>将更新在一次回流中全部提交，提升性能</li><li>当页面处于未激活状态时，requestAnimationFrame也会停止渲染，当再次激活时，就会接着上一部分继续执行</li></ol><h5 id="虚拟DOM的优缺点"><a href="#虚拟DOM的优缺点" class="headerlink" title="虚拟DOM的优缺点"></a>虚拟DOM的优缺点</h5><p><strong>优点</strong>：</p><ol><li><strong>保证性能下限。</strong> 操作真实的dom结构是一件非常昂贵的事情，虚拟Dom利用js对象来模拟真实的dom，从而降低了逻辑层面对dom结构操作的成本</li><li><strong>无需操作真实的dom。</strong> 通过双向数据绑定，当数据发生改变的时候，dom结构中的节点自动更新，无需我们手动处理</li><li><strong>可移植性高，跨平台性好。</strong>   无论是vue、react还是weex等，我们都能看到虚拟dom的身影，通过各自的渲染进制进行将Dom结构渲染出来</li></ol><p><strong>缺点：</strong></p><ul><li><strong>无法进行极致优化：</strong> 虽然虚拟 DOM+合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。</li></ul><h3 id="十六、-箭头函数"><a href="#十六、-箭头函数" class="headerlink" title="十六、 箭头函数"></a>十六、 箭头函数</h3><p>箭头函数有几个使用注意点。</p><p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p><p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p><p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p><p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p><p>其中第一条非常重要，通过几个例子结合上文的<a href="#this">this指向</a> 来看一下</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>s1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>s2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 箭头函数</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>s1<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 普通函数</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>s2<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'s1: '</span><span class="token punctuation">,</span> timer<span class="token punctuation">.</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'s2: '</span><span class="token punctuation">,</span> timer<span class="token punctuation">.</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// s1: 3</span><span class="token comment">// s2: 0</span>复制代码</code></pre><p>在上面这个例子中，定义了一个构造函数Timer，里面分别有两个定时器，第一个用箭头函数，第二个用普通函数，然后我们在外面定义了两个延时函数来获取s1,s2的值，</p><p>首先：箭头函数的this是在它定义时所在对象的值，也就是timer,经过了3.1s结果为3，</p><p>然后普通函数的this指向了全局对象，所以timer的s2，没有变还是0。</p><p>this指向的固定化，并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数。</p><p>作者：homyeeking<br>链接：<a href="https://juejin.im/post/6844904199017218055">https://juejin.im/post/6844904199017218055</a></p>]]></content>
      
      
      <categories>
          
          <category> 大前端面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> js面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题</title>
      <link href="posts/95c065ec/"/>
      <url>posts/95c065ec/</url>
      
        <content type="html"><![CDATA[<p>​    <code>注意</code>:<font style="color:orange;font-size:40px；">本篇幅面试题答案部分需要自行拓展 </font></p><h6 id="1-浏览器的内核"><a href="#1-浏览器的内核" class="headerlink" title="1.浏览器的内核"></a>1.浏览器的内核</h6><p>IE浏览器的内核Trident<br>        Mozilla的Gecko<br>        Chrome的WebKit<br>        Opera内核原为Presto，现为Blink</p><h6 id="2-对Web语义化的理解"><a href="#2-对Web语义化的理解" class="headerlink" title="2.对Web语义化的理解"></a>2.对Web语义化的理解</h6><p>根据页面内容的结构，选择合适的标签，如标题用h1-h6，段落用p标签等语义化的好处<br>①语法简单结构清晰②提高代码的可读性，便于团队开发和维护③有利于用户体验④有利于SEO搜索引擎优化</p><h6 id="3-存储方式有哪几种？它们之间的区别是什么？"><a href="#3-存储方式有哪几种？它们之间的区别是什么？" class="headerlink" title="3.存储方式有哪几种？它们之间的区别是什么？"></a>3.存储方式有哪几种？它们之间的区别是什么？</h6><p>cookie在浏览器和服务器间来回传递,存储小,4kb。<br>localStorage长期存储数据，浏览器关闭后数据不丢失；sessionStorage  数据在浏览器关闭后自动删除。<br>sessionStorage和localStorage的存储空间更大；<br>sessionStorage和localStorage有更多丰富易用的接口；<br>sessionStorage和localStorage各自独立的存储空间；</p><h6 id="4-为什么要使用reset-css文件初始化CSS样式？"><a href="#4-为什么要使用reset-css文件初始化CSS样式？" class="headerlink" title="4.为什么要使用reset.css文件初始化CSS样式？"></a>4.为什么要使用reset.css文件初始化CSS样式？</h6><p>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。reset重置浏览器的css默认属性 浏览器的品种不同，样式不同，需要重置，让他们统一。</p><h6 id="5-什么是页面的回流和重绘？"><a href="#5-什么是页面的回流和重绘？" class="headerlink" title="5.什么是页面的回流和重绘？"></a>5.什么是页面的回流和重绘？</h6><p>元素的尺寸，结构位置发生改变时，浏览器重新渲染的过程叫回流<br>元素的样式发生改变时，不影响元素在文档流中的位置，浏览器对元素进行重新绘制，这个过程称为重绘。</p><h6 id="6-元素隐藏有哪几种方式？分别有什么区别？"><a href="#6-元素隐藏有哪几种方式？分别有什么区别？" class="headerlink" title="6.元素隐藏有哪几种方式？分别有什么区别？"></a>6.元素隐藏有哪几种方式？分别有什么区别？</h6><p>①display:none;隐藏对象。display不为被隐藏的对象保留其物理空间。(不占位)<br>②visibility:visible;设置对象可视<br>visibility:hidden;设置对象隐藏，与display属性不同，只是隐藏了内容而已，其占位空间仍然保留<br>③opacity不透明度,从0(完全透明)到1(完全不透明)(占位)</p><h6 id="7-介绍一下CSS的盒模型"><a href="#7-介绍一下CSS的盒模型" class="headerlink" title="7.介绍一下CSS的盒模型"></a>7.介绍一下CSS的盒模型</h6><p>（1）IE 盒子模型、；IE的content部分包含了 border 和 padding.<br>        （2）标准 W3C 盒子模型： 内容(content)、填充(padding)、边界(margin)、 边框(border).</p><h6 id="8-数据的类型转换有哪些方式？"><a href="#8-数据的类型转换有哪些方式？" class="headerlink" title="8.数据的类型转换有哪些方式？"></a>8.数据的类型转换有哪些方式？</h6><p>强制（parseInt,parseFloat,number）<br>        隐式（==）</p><h6 id="9-css定位方式有哪些，他们之间有什么区别？"><a href="#9-css定位方式有哪些，他们之间有什么区别？" class="headerlink" title="9.css定位方式有哪些，他们之间有什么区别？*"></a>9.css定位方式有哪些，他们之间有什么区别？<code>*</code></h6><p>static 没有特别的设定，遵循基本的定位规定。<br>relative 不脱离文档流<br>absolute 脱离文档流，相对于最近的父级进行定位，当父级 position 为 static 时，absolute元素将以body坐标原点进行定位，<br>fixed 固定定位，这里他所固定的对像是可视窗口而并非是body或是父级元素。<br>除了static不能通过z-index进行层次分级。 其他的定位方式都可以通过z-index进行层次分级。</p><h6 id="10-跨域是什么引起的，如何解决跨域问题？"><a href="#10-跨域是什么引起的，如何解决跨域问题？" class="headerlink" title="10.跨域是什么引起的，如何解决跨域问题？"></a>10.跨域是什么引起的，如何解决跨域问题？</h6><p>同源策略引起的。同源策略要求协议、IP、端口号一致。当其中一个不满足时，我们的请求即会发生跨域问题。<br>可以通过JSONP解决跨域问题。一般都是利用script标签的src属性进行操作。<br>一般实际开发中会由后端解决跨域问题，或者是前端通过代理跨域。</p><h6 id="11-什么叫优雅降级和渐进增强？"><a href="#11-什么叫优雅降级和渐进增强？" class="headerlink" title="11.什么叫优雅降级和渐进增强？"></a>11.什么叫优雅降级和渐进增强？</h6><p>优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。<br>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p><h6 id="12-浏览器解析一个页面发生了哪些步骤？"><a href="#12-浏览器解析一个页面发生了哪些步骤？" class="headerlink" title="12.浏览器解析一个页面发生了哪些步骤？"></a>12.浏览器解析一个页面发生了哪些步骤？</h6><p>a. 域名解析<br>        b. 发起TCP的3次握手<br>        c. 建立TCP连接后发起http请求<br>        d. 服务器端响应http请求，浏览器得到html代码<br>        e. 浏览器解析html代码，并请求html代码中的资源<br>        f. 浏览器对页面进行渲染呈现给用户</p><h6 id="13-浏览器解析html页面的步骤是什么样的？"><a href="#13-浏览器解析html页面的步骤是什么样的？" class="headerlink" title="13.浏览器解析html页面的步骤是什么样的？"></a>13.浏览器解析html页面的步骤是什么样的？</h6><p>先解析html代码，渲染页面的结构，然后加载css样式渲染页面，最后加载js等脚本语言。</p><h6 id="14-如何快速的将二维数组转换成一维数组？"><a href="#14-如何快速的将二维数组转换成一维数组？" class="headerlink" title="14.如何快速的将二维数组转换成一维数组？"></a>14.如何快速的将二维数组转换成一维数组？</h6><p>erweiArr.join(‘,’).split(“,”)</p><h6 id="15-你常用的数组操作方法有哪些"><a href="#15-你常用的数组操作方法有哪些" class="headerlink" title="15.你常用的数组操作方法有哪些?"></a>15.你常用的数组操作方法有哪些?</h6><p>concat() 连接两个或更多的数组，并返回结果。<br>        join() 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行连接。<br>        pop() 删除并返回数组的最后一个元素。<br>        push() 向数组的末尾添加一个或更多元素，并返回新的长度。<br>        shift() 删除并返回数组的第一个元素。<br>        splice() 删除元素，并向数组添加新元素。<br>        unshift() 向数组的开头添加一个或更多元素，并返回新的长度。</p><h6 id="16-你了解的CSS预处理器有哪些？使用CSS预处理器有什么好处？-最好说一下CSS预处理器的特点"><a href="#16-你了解的CSS预处理器有哪些？使用CSS预处理器有什么好处？-最好说一下CSS预处理器的特点" class="headerlink" title="16.你了解的CSS预处理器有哪些？使用CSS预处理器有什么好处？(最好说一下CSS预处理器的特点)"></a>16.你了解的CSS预处理器有哪些？使用CSS预处理器有什么好处？(最好说一下CSS预处理器的特点)</h6><p>Less、Sass(Scss)、Stylus</p><h6 id="17-使用es6方法对数组去重？"><a href="#17-使用es6方法对数组去重？" class="headerlink" title="17.使用es6方法对数组去重？"></a>17.使用es6方法对数组去重？</h6><p>[…new Set(arr)]</p><h6 id="18-如何快速的拿到一个数组的最大值？"><a href="#18-如何快速的拿到一个数组的最大值？" class="headerlink" title="18.如何快速的拿到一个数组的最大值？"></a>18.如何快速的拿到一个数组的最大值？</h6><p>Math.max(…arr)</p><h6 id="19-var、let、const的区别？"><a href="#19-var、let、const的区别？" class="headerlink" title="19.var、let、const的区别？"></a>19.var、let、const的区别？</h6><p>(1)var变量提升，let和const没有变量提升，所以只能在变量声明之后使用，否则会报错。<br>(2)const不可修改，声明时，直接初始化，var，let可修改，但是如果const指向的是一个引用值，只需要保证引用值的地址不改变即可。<br>(3)let和const是块级{}作用域，var是函数级作用域。<br>(4)let，const不允许在相同的作用域内声明同一个变量。</p><h6 id="20-实际开发中使用什么技术代替浮动？-复习一下清除浮动的方法"><a href="#20-实际开发中使用什么技术代替浮动？-复习一下清除浮动的方法" class="headerlink" title="20.实际开发中使用什么技术代替浮动？(复习一下清除浮动的方法)"></a>20.实际开发中使用什么技术代替浮动？(复习一下清除浮动的方法)</h6><p>Flex布局</p><h6 id="21-请简化下面的CSS代码"><a href="#21-请简化下面的CSS代码" class="headerlink" title="21.请简化下面的CSS代码"></a>21.请简化下面的CSS代码</h6><pre class="language-css" data-language="css"><code class="language-css">1<span class="token property">、padding</span><span class="token punctuation">:</span>10px 0 10px 0<span class="token punctuation">;</span>2<span class="token property">、border-width</span><span class="token punctuation">:</span>1px<span class="token punctuation">;</span> <span class="token property">border-style</span><span class="token punctuation">:</span>solid<span class="token punctuation">;</span> <span class="token property">border-color</span><span class="token punctuation">:</span>#ff5500<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 10px 0<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid #f50<span class="token punctuation">;</span></code></pre><h6 id="22-应用三种CSS方法实现隐藏div"><a href="#22-应用三种CSS方法实现隐藏div" class="headerlink" title="22.应用三种CSS方法实现隐藏div"></a>22.应用三种CSS方法实现隐藏div</h6><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute/relative<span class="token property">left</span><span class="token punctuation">:</span> -10000px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>23.使用js实现登录验证(仅当用户名为admin,密码为12345时提示登录成功)</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token parameter">username <span class="token punctuation">,</span> password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>username <span class="token operator">===</span> “admin” <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> “<span class="token number">12345</span>”<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>“登录成功”<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h6 id="24-什么是闭包？什么时候会使用闭包？使用闭包的弊端？如何解决闭包问题？"><a href="#24-什么是闭包？什么时候会使用闭包？使用闭包的弊端？如何解决闭包问题？" class="headerlink" title="24.什么是闭包？什么时候会使用闭包？使用闭包的弊端？如何解决闭包问题？"></a>24.什么是闭包？什么时候会使用闭包？使用闭包的弊端？如何解决闭包问题？</h6><p>闭包：定义在一个函数内部的函数，简而言之就是函数嵌套函数<br>用途：想要读取函数内部的变量的时候，闭包可以让变量的值始终保存在内存中<br>弊端：主要会造成内存泄漏<br>解决：使用es6的let声明变量</p><h6 id="25-判断input中用户输入的字符串中是否含有”tanzhou”"><a href="#25-判断input中用户输入的字符串中是否含有”tanzhou”" class="headerlink" title="25.判断input中用户输入的字符串中是否含有”tanzhou”"></a>25.判断input中用户输入的字符串中是否含有”tanzhou”</h6><p>/tanzhou/i.test(str)结果为true则包含<br>str.indexof(‘tanzhou’)结果不为-1则包含</p><h6 id="26-JS中数据类型的判断有哪些方法？"><a href="#26-JS中数据类型的判断有哪些方法？" class="headerlink" title="26.JS中数据类型的判断有哪些方法？"></a>26.JS中数据类型的判断有哪些方法？</h6><p>(1)typeof ：对于原始类型来说除开null,其他的都可以显示正确的类型<br>        (2)instanceof : 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的prototype<br>        (3)使用constructor<br>        (4)Object.prototype.toString.call()：使用对象的原型方法toString</p><h6 id="27-JavaScript创建对象的几种方式？"><a href="#27-JavaScript创建对象的几种方式？" class="headerlink" title="27.JavaScript创建对象的几种方式？"></a>27.JavaScript创建对象的几种方式？</h6><p>(1)工厂模式<br>        (2)构造函数模式<br>        (3)原型模式<br>        (4)组合使用构造函数模式和原型模式<br>        (5)动态原型模式<br>        (6)寄生构造函数模式</p><h6 id="28-document-onload和document-ready两个事件的区别"><a href="#28-document-onload和document-ready两个事件的区别" class="headerlink" title="28.document.onload和document.ready两个事件的区别"></a>28.document.onload和document.ready两个事件的区别</h6><p>页面加载完成有两种事件，一是ready，表示文档结构已经加载完成(不包含图片等非文字媒体文件)，二是onload，指示页面包含图片等文件在内的所有元素都加载完成。</p><h6 id="29-什么是节流？如何解决？"><a href="#29-什么是节流？如何解决？" class="headerlink" title="29.什么是节流？如何解决？"></a>29.什么是节流？如何解决？</h6><p>触发函数事件后，短时间间隔内无法连续调用，只有上一次函数执行后，过了规定的时间间隔，才能进行下一次的函数调用，一般用于http请求。</p><p>对处理函数进行延时操作，若设定的延时到来之前，再次触发事件，则清除上一次的延时操作定时器，重新定时。</p><h6 id="30-什么是防抖，如何防抖？"><a href="#30-什么是防抖，如何防抖？" class="headerlink" title="30.什么是防抖，如何防抖？"></a>30.什么是防抖，如何防抖？</h6><p>多次触发事件后，事件处理函数只执行一次，并且是在触发操作结束时执行，一般用于scroll事件。</p><p>对处理函数进行延时操作，若设定的延时到来之前再次触发事件，则清除上一次的延时操作定时器，重新定时。</p><h6 id="31-对Node-js有什么了解？"><a href="#31-对Node-js有什么了解？" class="headerlink" title="31.对Node.js有什么了解？"></a>31.对Node.js有什么了解？</h6><p>它为js提供了运行环境，是一门后端语言，是一个不需要web容器的服务器。它是基于chrome的JS的V8引擎开发的。</p><h6 id="32-JS的异步加载方式"><a href="#32-JS的异步加载方式" class="headerlink" title="32.JS的异步加载方式"></a>32.JS的异步加载方式</h6><p>   1.渲染引擎遇到 script 标签会停下来，等到执行完脚本，继续向下渲染</p><ol start="2"><li>defer 是“渲染完再执行”，async 是“下载完就执行”，defer 如果有多个脚本，会按照在页面中出现的顺序加载，多个async 脚本不能保证加载顺序</li><li>3.Script标签动态创建</li><li>加载 es6模块的时候设置 type=module，异步加载不会造成阻塞浏览器，页面渲染完再执行，可以同时加上async属性，异步执行脚本（利用顶层的this等于undefined这个语法点，可以侦测当前代码是否在 ES6 模块之中）</li></ol><h6 id="33-网站性能优化"><a href="#33-网站性能优化" class="headerlink" title="33.网站性能优化"></a>33.网站性能优化</h6><ol><li>http 请求方面，减少请求数量，请求体积，对应的做法是，对项目资源进行压缩，控制项目资源的 dns 解析在2到4个域名，提取公共的样式，公共的组件，雪碧图，缓存资源，</li><li>压缩资源，提取公共资源压缩，提取 css ，js 公共方法</li><li>不要缩放图片，使用雪碧图，使用字体图表（阿里矢量图库）</li><li>使用 CDN，抛开无用的 cookie</li><li>减少重绘重排，CSS属性读写分离，最好不要用js 修改样式，dom 离线更新，渲染前指定图片的大小</li><li>js 代码层面的优化，减少对字符串的计算，合理使用闭包，首屏的js 资源加载放在最底部</li></ol><h6 id="34-什么是错误优先的回调函数？"><a href="#34-什么是错误优先的回调函数？" class="headerlink" title="34.什么是错误优先的回调函数？"></a>34.什么是错误优先的回调函数？</h6><p>错误优先的回调函数用于传递错误和数据。第一个参数始终应该是一个错误对象， 用于检查程序是否发生了错误。其余的参数用于传递数据。例如：<br>fs.readFile(filePath, function(err, data) {<br>    if (err) {<br>        //handle the error<br>    }<br>    // use the data object<br>})</p><h6 id="35-JS的作用域链是什么及其作用"><a href="#35-JS的作用域链是什么及其作用" class="headerlink" title="35.JS的作用域链是什么及其作用"></a>35.JS的作用域链是什么及其作用</h6><p>一般情况下，变量取值到创建这个变量的函数的作用域中取值。但是如果在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</p><h6 id="36-如何解决异步回调地狱"><a href="#36-如何解决异步回调地狱" class="headerlink" title="36.如何解决异步回调地狱"></a>36.如何解决异步回调地狱</h6><p>promise、generator、async/await</p><h6 id="37-改变函数内部this指向的方法有哪些？它们的区别有哪些？"><a href="#37-改变函数内部this指向的方法有哪些？它们的区别有哪些？" class="headerlink" title="37.改变函数内部this指向的方法有哪些？它们的区别有哪些？"></a>37.改变函数内部this指向的方法有哪些？它们的区别有哪些？</h6><p>bind，apply，call<br>通过apply和call改变函数的this指向，他们两个函数的第一个参数都是一样的表示要改变指向的那个对象，第二个参数，apply是数组，而call则是arg1,arg2…这种形式。<br>通过bind改变this作用域会返回一个新的函数，这个函数不会马上执行。</p><h6 id="38-JS的基本数据类型和引用数据类型存储在计算机的哪里？"><a href="#38-JS的基本数据类型和引用数据类型存储在计算机的哪里？" class="headerlink" title="38.JS的基本数据类型和引用数据类型存储在计算机的哪里？"></a>38.JS的基本数据类型和引用数据类型存储在计算机的哪里？</h6><p>栈内存和堆内存<br>string、number、null、undefined、boolean、symbol(ES6新增) 变量值存放在栈内存中<br>Object Function RegExp Math Date 值为对象，存放在堆内存中</p><h6 id="39-什么是深拷贝和浅拷贝？"><a href="#39-什么是深拷贝和浅拷贝？" class="headerlink" title="39.什么是深拷贝和浅拷贝？"></a>39.什么是深拷贝和浅拷贝？</h6><p>拷贝值改变，原始值不改变是深拷贝JSON.parse(JSON.stringify(obj))<br>拷贝值改变，原始值也改变是浅拷贝Object.assign(obj)</p><h6 id="40-http和https的区别？"><a href="#40-http和https的区别？" class="headerlink" title="40.http和https的区别？"></a>40.http和https的区别？</h6><p>http: 超文本传输协议。https的SSL加密是在传输层实现的。<br>1、https协议需要ca证书，费用较高。<br>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。<br>3、使用不同的链接方式，端口也不同，一般而言，http协议的端口为80，https的端口为443<br>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><ol start="41"><li><h6 id="watch和computed的区别？"><a href="#watch和computed的区别？" class="headerlink" title="watch和computed的区别？"></a>watch和computed的区别？</h6><p>  computed：当一个属性受多个属性影响的时候就需要用到computed(当有一些数据需要随着另外一些数据变化时，建议使用computed)如：购物车商品结算的时候<br>  watch：当一条数据影响多条数据的时候就需要用watch(当有一个通用的响应数据变化的时候，要执行一些业务逻辑或异步操作的时候建议使用watch)如远程搜索数据</p></li><li><h6 id="常用的vue事件修饰符有哪些？"><a href="#常用的vue事件修饰符有哪些？" class="headerlink" title="常用的vue事件修饰符有哪些？"></a>常用的vue事件修饰符有哪些？</h6><p>  .stop 阻止事件冒泡<br>  .prevent 阻止默认事件<br>  .lazy 光标离开input输入框的时候值才会改变<br>  .number 将输出字符串转为Number类型<br>  .trim 自动过滤用户输入的首尾空格</p></li><li><h6 id="v-if和v-show的区别"><a href="#v-if和v-show的区别" class="headerlink" title="v-if和v-show的区别"></a>v-if和v-show的区别</h6><p>  v-if根据判断条件来挂载/卸载元素。需要通过条件判断控制的时候就用它。<br>  v-show通过控制元素的display:block/none来控制元素显示隐藏。需要进行频繁的切换的时候就用它。</p></li><li><h6 id="v-if和v-for一起使用的弊端及解决办法"><a href="#v-if和v-for一起使用的弊端及解决办法" class="headerlink" title="v-if和v-for一起使用的弊端及解决办法"></a>v-if和v-for一起使用的弊端及解决办法</h6><p>  由于v-for的优先级比v-if高，所以导致每循环一次就会去v-if一次，而v-if是通过创建和销毁dom元素来控制元素的显示与隐藏，所以就会不停的去创建和销毁元素，造成页面卡顿，性能下降。  解决办法一般是在v-for的外层包裹一个元素来使用v-if<br>  45.使用v-for时为什么要使用key<br>  key主要用在Vue的虚拟DOM算法，在新旧nodes对比时辨识 VNodes。而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。有相同父元素的子元素必须有独特的 key。重复的 key 会造成渲染错误。</p></li></ol><h6 id="46-Vue父组件传值给子组件使用什么属性？该属性可以接受什么类型的值？"><a href="#46-Vue父组件传值给子组件使用什么属性？该属性可以接受什么类型的值？" class="headerlink" title="46.Vue父组件传值给子组件使用什么属性？该属性可以接受什么类型的值？"></a>46.Vue父组件传值给子组件使用什么属性？该属性可以接受什么类型的值？</h6><p>使用props属性。父组件中使用v-bind传递值，在子组件中使用props，可以接受任意类型的值(除开null、undefined、NaN)。</p><ol start="47"><li><h6 id="Vue常用指令有哪些？"><a href="#Vue常用指令有哪些？" class="headerlink" title="Vue常用指令有哪些？"></a>Vue常用指令有哪些？</h6><p>  v-if、v-else-if、v-else、v-for、v-on、v-bind、v-model、v-show</p></li><li><h6 id="Vue子组件自定义事件改变父组件时使用什么方法？"><a href="#Vue子组件自定义事件改变父组件时使用什么方法？" class="headerlink" title="Vue子组件自定义事件改变父组件时使用什么方法？"></a>Vue子组件自定义事件改变父组件时使用什么方法？</h6><p>  子组件：$emit(‘自定义事件名’,参数,参数)<br>  父组件：v-on:自定义事件名=”对应的事件函数”</p></li><li><h6 id="子组件自定义事件可以使用驼峰命名吗？"><a href="#子组件自定义事件可以使用驼峰命名吗？" class="headerlink" title="子组件自定义事件可以使用驼峰命名吗？"></a>子组件自定义事件可以使用驼峰命名吗？</h6><p>  不可以，DOM解析全部转化为小写，这样就跟子组件自定义的事件名对应不上。</p></li><li><h6 id="Vue属于哪种软件设计模式，可以谈一下你对MV-的理解吗？"><a href="#Vue属于哪种软件设计模式，可以谈一下你对MV-的理解吗？" class="headerlink" title="Vue属于哪种软件设计模式，可以谈一下你对MV*的理解吗？"></a>Vue属于哪种软件设计模式，可以谈一下你对MV*的理解吗？</h6></li></ol><p>mvc mvp mvvm =&gt; mv*</p><ol start="51"><li><h6 id="Vue组件中的data为什么必须是一个函数？"><a href="#Vue组件中的data为什么必须是一个函数？" class="headerlink" title="Vue组件中的data为什么必须是一个函数？"></a>Vue组件中的data为什么必须是一个函数？</h6><p>  因为JavaScript的特性所导致，在component中，data必须以函数的形式存在，不可以是对象。<br>  组建中的data写成一个函数，数据以函数返回值的形式定义，这样每次复用组件的时候，都会返回一份新的data，相当于每个组件实例都有自己私有的数据空间，它们只负责各自维护的数据，不会造成混乱。而单纯的写成对象形式，就是所有的组件实例共用了一个data，这样改一个全都改了。</p></li><li><h6 id="Vue-slot的作用？"><a href="#Vue-slot的作用？" class="headerlink" title="Vue slot的作用？"></a>Vue slot的作用？</h6><p>  假如父组件需要在子组件内放一些DOM，那么这些DOM是显示、不显示、在哪个地方显示、如何显示，就是slot分发负责的活。</p></li><li><h6 id="Vue更新数组时触发视图更新的方法"><a href="#Vue更新数组时触发视图更新的方法" class="headerlink" title="Vue更新数组时触发视图更新的方法"></a>Vue更新数组时触发视图更新的方法</h6><p>  push()；pop()；shift()；unshift()；splice()； sort()；reverse()</p></li><li><h6 id="Vue的两个核心是什么？"><a href="#Vue的两个核心是什么？" class="headerlink" title="Vue的两个核心是什么？"></a>Vue的两个核心是什么？</h6><p>  数据驱动、组件系统</p></li><li><h6 id="v-on可以绑定多个方法吗？"><a href="#v-on可以绑定多个方法吗？" class="headerlink" title="v-on可以绑定多个方法吗？"></a>v-on可以绑定多个方法吗？</h6><p>  可以</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大前端面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> 前端综合面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS面试题01</title>
      <link href="posts/727fbce0/"/>
      <url>posts/727fbce0/</url>
      
        <content type="html"><![CDATA[<h5 id="1-undefined-和-null-有什么区别"><a href="#1-undefined-和-null-有什么区别" class="headerlink" title="1.undefined 和 null 有什么区别?"></a>1.undefined 和 null 有什么区别?</h5><p>他们的相同之处: 他们都是javascript的7种基本类型, 它们都是虚值, 他们转为布尔值都是false, undefined == null 返回true. 严格相等下返回false, 因为他们的类型不同,</p><p>区别在于<code>undefined</code>是指为指定特定的变量的默认值.或者没有显示返回值的函数.还包括对象中不存在的属性, 这些js引擎都会为其分配undefined值.</p><span id="more"></span><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a<span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"ww"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// undefined</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">// undefined;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// undefined;</span></code></pre><p>null是表示不代表任何值的值, null是已明确给定定义变量的值, 在使用typeof 判断null的类型时返回的是object;</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment">// object</span></code></pre><h5 id="2-amp-amp-运算符可以做什么"><a href="#2-amp-amp-运算符可以做什么" class="headerlink" title="2 &amp;&amp;运算符可以做什么?"></a>2 &amp;&amp;运算符可以做什么?</h5><p>&amp;&amp;符也可以叫做逻辑与,在其操作数找到第一个虚值,虚值即false并返回它,如果没有找到任何虚值,则返回最后一个真值表达式.它采用短路来防止不必要的工作;</p><p>通过用于判断条件表达式是否都成立, 如果都成立,则返回true, 否者返回false;</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a  <span class="token operator">></span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 只有当判断条件都为true时,才会打印a</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h5 id="3-运算符可以做什么"><a href="#3-运算符可以做什么" class="headerlink" title="3 .  ||运算符可以做什么"></a>3 .  ||运算符可以做什么</h5><p>||也可以叫做逻辑或, 在其操作数中找到第一个真值表达式并返回它,它也使用了短路来防止了不必要的工作,在es6支持函数参数默认值之前, 它用于初始化函数中的默认值.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token operator">=</span> target <span class="token operator">||</span> <span class="token string">"params"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>上面的代码中当函数log的参数target没有传递时, 此时target为false, 此时|| 操作符返回 第二个操作数 params;</p><p>通常 || 也用与if判断条件, 只有当判断条件中有一个为true, 整体就返回true</p><h5 id="4-使用-或一元运算符是将字符串转为数字的最快方法吗"><a href="#4-使用-或一元运算符是将字符串转为数字的最快方法吗" class="headerlink" title="4 使用+或一元运算符是将字符串转为数字的最快方法吗?"></a>4 使用+或一元运算符是将字符串转为数字的最快方法吗?</h5><p>根据MDN文档, +是将字符串转为数字的最快方法, 因为如果值是数字, 他不会执行任何操作.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"32,21"</span><span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//  [32, 21]</span></code></pre><p>上面的代码可以很优雅的将类型数组的字符串 转为一个真正的数组</p><h5 id="5-DOM是什么"><a href="#5-DOM是什么" class="headerlink" title="5. DOM是什么"></a>5. DOM是什么</h5><p><code>DOM</code> 表示文档对象模型. 是HTML和XML文档接口(API). 当浏览器第一次读取HTML文档时, 它会创建一个大对象, 一个基于HTML文档的非常大的对象, 这个对象就是<code>DOM</code>.它是一种HTML文档建模的树状结构.通常DOM用于交互和修改<code>DOM</code>结构或特定元素的节点.</p><p>假设我们有如下的HTML结构;</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>hello document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>等价的<code>DOM</code>是这样的</p><p><img src="https://upload-images.jianshu.io/upload_images/20032554-1bfe51fbcc06e292.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1140/format/webp" alt="img" loading="lazy"></p><p>image-20200623195756291.png</p><p>在js中, document对象表示DOM,它为我们提供了许多方法, 我们可以用这些方法来选择元素或者更新元素内容等等.</p><h5 id="6-什么是事件传播"><a href="#6-什么是事件传播" class="headerlink" title="6. 什么是事件传播?"></a>6. 什么是事件传播?</h5><p>当事件发生在DOM元素上时, 改事件并不完全发生在那个元素上.在<code>冒泡阶段</code>中事件冒泡向上传播到父级.,一直到window为止. 而个<code>捕获阶段</code>时,事件从window开始向下触发元素, 事件活event.target.</p><p>事件传播有三个阶段 顺序如下:</p><ol><li>捕获阶段 – 事件从window开始.然后向下到每个元素, 直到到达目标元素.</li><li>目标阶段 – 事件已达到目标元素.</li><li>冒泡阶段 – 事件从目标元素冒泡, 然后上升到每个元素, 直到window.</li></ol><h5 id="7-什么是事件冒泡"><a href="#7-什么是事件冒泡" class="headerlink" title="7 什么是事件冒泡?"></a>7 什么是事件冒泡?</h5><p>当事件发生在DOM元素上时, 该事件并不完全发生在那个元素上. 在冒泡阶段,事件冒泡.事件会一直往它到底父级向上传播,直到window为止.</p><p>假设我们有如下的htmll结构代码</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>js部分如下</p><pre class="language-js" data-language="js"><code class="language-js"> <span class="token keyword">let</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".parent"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        child <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parent<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>child<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><p>addEventListener的方法接受第三个可选参数, 其默认值为false,此时事件在冒泡阶段执行,如果为true,则在捕获阶段执行.</p><p>当我们点击child触发点击事件时.  此时事件在冒泡阶段执行,控制台会先打印child,然后在打印parent.事件会一直传播到window对象上, 这就是事件冒泡.</p><h5 id="8-什么是事件捕获"><a href="#8-什么是事件捕获" class="headerlink" title="8  . 什么是事件捕获?"></a>8  . 什么是事件捕获?</h5><p>当事件发生在<code>DOM</code>上时, 改事件并不完全只发生在那个元素上,在捕获阶段,事件从window开始传播, 一直到触发事件的元素时结束</p><p>如果把上道题的绑定的事件监听第三个参数为true时, 此时事件在捕获阶段执行, 此时如果点击了child, 控制台会先打印parent,然后在打印child</p><h5 id="9-event-preventDefalut-和-event-stopProPagation-方法之间有什么区别"><a href="#9-event-preventDefalut-和-event-stopProPagation-方法之间有什么区别" class="headerlink" title="9 . event.preventDefalut ()和 event.stopProPagation ()方法之间有什么区别?"></a>9 . event.preventDefalut ()和 event.stopProPagation ()方法之间有什么区别?</h5><p><code>event.preventDefalut()</code>方法用来阻止元素的默认行为.如果在表单元素中使用, 它将会阻止其提交, 如果在锚元素中使用. 它将会阻止其导航.元素的默认行为通常是元素身上自带的事件行为.例如当点击a标签时,会跳转到别的网页.</p><h5 id="event-stopProPagation-方法-通常用来阻止捕获和冒泡阶段中当前事件的进一步传播。"><a href="#event-stopProPagation-方法-通常用来阻止捕获和冒泡阶段中当前事件的进一步传播。" class="headerlink" title="event.stopProPagation 方法()通常用来阻止捕获和冒泡阶段中当前事件的进一步传播。"></a>event.stopProPagation 方法()通常用来阻止捕获和冒泡阶段中当前事件的进一步传播。</h5><h5 id="10-如何知道是否在元素中使用event-stopProPagation属性"><a href="#10-如何知道是否在元素中使用event-stopProPagation属性" class="headerlink" title="10 . 如何知道是否在元素中使用event.stopProPagation属性?"></a>10 . 如何知道是否在元素中使用event.stopProPagation属性?</h5><p>我们可以通过事件对象调用event.defalutPrevented属性, 它返回一个布尔值用来表明在特定元素中是否调用了</p><p>event.stopProPagation();</p><h5 id="10-为什么此代码-obj-some-x会发生错误"><a href="#10-为什么此代码-obj-some-x会发生错误" class="headerlink" title="10 . 为什么此代码 obj.some.x会发生错误?"></a>10 . 为什么此代码 obj.some.x会发生错误?</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>some<span class="token punctuation">.</span>x<span class="token punctuation">)</span></code></pre><p>因为obj本身并没有some属性,此时obj.some为undefined, 对象不存在的属性,默认为undefined,显然undefined并没有属性x, 访问试图访问就会报错.</p><h5 id="12-什么是event-target"><a href="#12-什么是event-target" class="headerlink" title="12 . 什么是event.target"></a>12 . 什么是event.target</h5><p>简单来说, <code>event.target</code>就是当前发生事件的目标元素或触发事件的元素.</p><p>假设我们有下面的html结构代码</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>假设我们给button和div都绑定了点击事件, 当我们点击了button时,此时event.target为button元素.</p><p>当我们点击了div,此时event.target为div元素.</p><p>因此我们得出结论, event.target就是触发事件的元素.</p><h5 id="13-什么是event-currentTarget"><a href="#13-什么是event-currentTarget" class="headerlink" title="13 什么是event.currentTarget?"></a>13 什么是<code>event.currentTarget</code>?</h5><p><code>event.currentTarget</code>是我们在其显式附加事件处理程序的元素.</p><p>同上,当我们点击了button元素时, 如果我们在控制台打印<code>event.currentTarget</code>,此时不仅会打印button也会打印div元素.我们可以得出结论,event.currentTarget会监听触发了事件的所有元素.并将他们返回.</p><h5 id="14-和-有什么区别"><a href="#14-和-有什么区别" class="headerlink" title="14  .== 和 === 有什么区别?"></a>14  .== 和 === 有什么区别?</h5><p>== 运算符也叫 相等, 用来判断两个操作数是否相等. 这里的相等定义非常宽松,在比较的时候可以允许类型转换, === 用于严格比较. 只要类型不一致就会返回fasle;</p><p>在== 比较下,假设如果我们要比较 x 和 y的值</p><ol><li>当俩数类型都相同时, 则js 引擎会换成 === 操作符进行比较</li><li>当俩数类型一个为string另一个为number时, 那么此时类型为string的会发生隐式类型转换,转为number类型进行比较</li><li>当俩数类型中有一个为boolean类型时,俩数都会被转为数字类型进行比较.</li></ol><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//false</span></code></pre><h5 id="15-为什么在JS中比较两个相似的对象会返回false"><a href="#15-为什么在JS中比较两个相似的对象会返回false" class="headerlink" title="15 .为什么在JS中比较两个相似的对象会返回false?"></a>15 .为什么在JS中比较两个相似的对象会返回false?</h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> one <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> two <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token comment">// false ,因为他们在内存指向的不是同一个对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> c<span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre><p>js比较基本数据类型时,比较的时他们的值,而在引用数据类型比较时, js会比较他们的引用或储存变量的内存地址.所以第一个返回false.第二个返回true, 因为他们都在内存中都指向同一个地址或引用</p><h5 id="16-运算符能做什么"><a href="#16-运算符能做什么" class="headerlink" title="16. !! 运算符能做什么?"></a>16. !! 运算符能做什么?</h5><p>!!运算符可以将右侧的值强制转为布尔值.这也是将值转为布尔值的一种简单方法.</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// false;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>undefined1<span class="token punctuation">)</span><span class="token comment">// fallse</span></code></pre><h5 id="17-如何在一行中计算多个表达式的值"><a href="#17-如何在一行中计算多个表达式的值" class="headerlink" title="17 . 如何在一行中计算多个表达式的值?"></a>17 . 如何在一行中计算多个表达式的值?</h5><p>可以使用,运算符在一行中计算多个表达式.它从左往右求值,并返回最后一个项目或最后一个操作数的值</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">,</span>x <span class="token operator">=</span> <span class="token function">addSix</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> x <span class="token operator">*=</span> <span class="token number">5</span><span class="token punctuation">,</span> x <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">addSix</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">&#125;</span></code></pre><p>上面的结果最后得到的x的值为65,首先我们让x++到5,如何调用函数返回11并赋值给x, 然后在计算x 加上x * 5然后 赋值给x,此时x为55.接着在让x += 10 此时x为 65;</p><h5 id="18-什么是提升"><a href="#18-什么是提升" class="headerlink" title="18. 什么是提升?"></a>18. 什么是提升?</h5><p><code>提升</code>就是用来描述变量和函数移动到其(全局或函数)作用域顶部的术语</p><p>为了理解提升,需要了解一下<code>执行上下文</code>.执行上下文是当前正在执行的<code>代码环境</code>.执行上下文有两个阶段:<code>编译</code>和<code>执行</code></p><p><code>编译</code>-在此阶段,JS引擎会获取所有的函数声明并将其提升到作用域顶部, 以便我们稍后可以引用它们并获取所有的变量声明(使用var关键字声明), 还会为它们提供默认值undefined</p><p><code>执行</code> - 在这个阶段,它将值赋值给之前提升的变量, 并执行或调用函数(对象中的方法).</p><p><code>注意</code>只有使用var声明的变量, 或者函数声明才会提升,其他使用箭头函数,或者函数表达式,let和cosnt声明的变量,这些都不会提升</p><p>变量提升和函数提升在代码中的位置是不会变的,而是在编译阶段放在内存中</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//变量a存在提升,此时a的默认值为undefined, 所以此时打印undefined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">"ww"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// helloww</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span> <span class="token operator">+</span> name <span class="token punctuation">&#125;</span></code></pre><p>上面的代码在编译阶段其实是这样的</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span> <span class="token operator">+</span> name<span class="token punctuation">&#125;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token comment">// 默认值为undefined</span><span class="token comment">// 等待编译完成., 然后开始"执行"阶段;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// undefined</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 此时变量给 a 赋值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//1;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">"ww"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>函数声明会提提升到作用域最顶层并赋值,所以我们可以在函数声明之前调用函数,</p><h5 id="19-什么是作用域"><a href="#19-什么是作用域" class="headerlink" title="19 . 什么是作用域?"></a>19 . 什么是作用域?</h5><p>javascript中作用域是指我们能够有效访问变量或函数中的区域.JS有三种类型的作用域:<code>全局作用域</code>,<code>函数作用域</code>和<code>块级作用域</code>(ES6)</p><p><code>全局作用域</code>– 在全局命名空间中声明的变量或函数位于全局作用域, 因此在代码中的任何区域都可以访问到他们</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> say <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">function</span> <span class="token function">global</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span> <span class="token comment">// hello</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span> <span class="token operator">+</span> name<span class="token punctuation">&#125;</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>函数作用域</code>– 在函数中声明的变量,函数和参数都可以在函数内部访问, 但不能在外部访问,只能在函数内部进行访问.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//  a is not defined</span></code></pre><p><code>块级作用域</code>– 在块{ } 中声明的变量（<code>let，const</code>）只能在其中访问。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//x is not defined</span></code></pre><p>作用域链一种用于查找变量的规则,如果变量在当前作用域内不存在,它就会往外部作用域链内查找,如果该变量还是不存在,他会一直找直到全局作用域,如果找到了就可以使用它,否者就报错.这种查找过程就叫<code>作用域链</code></p><p>作用域链只能从内部作用域往外部作用域进行查找,不能从当前作用域往内部作用域查找.</p><h5 id="20-什么是闭包"><a href="#20-什么是闭包" class="headerlink" title="20 . 什么是闭包?"></a>20 . 什么是闭包?</h5><p>闭包是一种函数和对其周围状态的引用捆绑在一起构成闭包.也就是是闭包可以让你从函数内部作用域访问函数内部作用域.在js中,每当函数被创建,就会在函数生成时形成闭包.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> three <span class="token operator">=</span> <span class="token string">"three"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">one</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">two</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">,</span>two<span class="token punctuation">,</span>three<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span></code></pre><p>上面的代码会打印 one, two,three,当我们调用了函数fn时,此时我们传递的值会被赋值给变量one,此时fn函数作用域内就有变量one,因为fn调用完返回了一个新函数,此时我们可以加括号继续调用,此时我们传递了一个参数,此时返回的函数内部变量two的值就为two, 当返回的函数在内部进行打印时,它会在作用域链依次查找变量one,two,three,因为此时产生了闭包,所以我们可以访问到外部函数内的变量one,然后接着访问到了自身作用域的two,接着访问到了全局作用域的three.</p><h5 id="21-虚值是什么"><a href="#21-虚值是什么" class="headerlink" title="21 . 虚值是什么?"></a>21 . 虚值是什么?</h5><p>简单的来说虚值就是在转换为布尔值时变为false的值.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> falseValues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><h5 id="22-如何检测值是否为虚值"><a href="#22-如何检测值是否为虚值" class="headerlink" title="22 . 如何检测值是否为虚值?"></a>22 . 如何检测值是否为虚值?</h5><p>使用<code>Boolean</code>函数或者!!运算符</p><h5 id="23-“use-strict”是干嘛用的"><a href="#23-“use-strict”是干嘛用的" class="headerlink" title="23. “use strict”是干嘛用的?"></a>23. “use strict”是干嘛用的?</h5><p><code>use strict</code>是ES5的特性, 它使我的的代码在函数或整个脚本中处于严格模式.严格模式帮助我们在代码的早起避免bug,并为其添加限制.</p><p>设立严格模式的目的,主要有几个:</p><ol><li>消除javascript语法的一些不合理, 不严谨之处, 减少一些怪异行为</li><li>消除代码运行的一些不安全之处, 保证代码运行的安全</li><li>提高编译器效率, 增加运行速度</li><li>为未来新版本的javascript做好铺垫</li><li>规范我们写代码的时要遵守的限制.减少了bug.</li></ol><h5 id="24-javascript中this值是什么"><a href="#24-javascript中this值是什么" class="headerlink" title="24 javascript中this值是什么?"></a>24 javascript中<code>this</code>值是什么?</h5><p>基本上. <code>this</code>指的是当真执行或调用改函数的对象的值.this的值的变化取决于我们使用它的上下文和我们在哪里使用它.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    Name<span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>    Score<span class="token operator">:</span><span class="token number">45</span><span class="token punctuation">,</span>    <span class="token function">getStudentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"学生姓名为"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">"成绩为"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Score    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getStudentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 学生姓名为张三成绩为45</span><span class="token keyword">let</span> child <span class="token operator">=</span> studnet<span class="token punctuation">.</span>getStudentInfo<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 学生姓名为undefined成绩为undefined</span>child <span class="token operator">=</span> studnet<span class="token punctuation">.</span><span class="token function">getStudentInfo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 学生姓名为张三成绩为45</span></code></pre><p>上面的代码中我们通过对象student调用了getStudentInfo方法, 此时函数内部this指向了student,所以我们可以得到this.name和this.age的值. 说明了this指向了当前调用函数的对象的值</p><p>如果我们通过child执行函数时,此时调用函数的对象则时window, 因为window上没有Name和Score属性,所以返undefined,如果我们要让child的函数this绑定在student,可以通过bind方法显式的改变函数的this指向.此时我们就可以在控制台打印出想要的数据.</p><hr><p>链接：<a href="https://www.jianshu.com/p/397f30517d46">https://www.jianshu.com/p/397f30517d46</a><br>来源：简书</p>]]></content>
      
      
      <categories>
          
          <category> 大前端面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 试题 </tag>
            
            <tag> js面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css书写规范及顺序</title>
      <link href="posts/1899c4f/"/>
      <url>posts/1899c4f/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS书写顺序"><a href="#CSS书写顺序" class="headerlink" title="CSS书写顺序"></a>CSS书写顺序</h2><p>1.位置属性(position, top, right, z-index, display, float等)<br>        2.大小(width, height, padding, margin)<br>        3.文字系列(font, line-height, letter-spacing, color- text-align等)<br>        4.背景(background, border等)<br>        5.其他(animation, transition等)</p><span id="more"></span><h2 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h2><p>1.CSS有些属性是可以缩写的，比如padding,margin,font等等，<br>这样精简代码同时又能提高用户的阅读体验。 </p><p>2.去掉小数点前的“0”<br>比如：background-color: rgba(0,0,0,0.5);==&gt;background-color: rgba(0,0,0,.5);</p><p>3.连字符CSS选择器命名规范<br>1.长名称或词组可以使用中横线来为选择器命名。<br>2.不建议使用“_”下划线来命名CSS选择器，为什么呢？<br>  1).输入的时候少按一个shift键；<br>  2).浏览器兼容问题 （比如使用_tips的选择器命名，在IE6是无效的）<br>  3).能良好区分JavaScript变量命名（JS变量命名是用“_”）</p><p><font style="color:orange;">注意事项</font><br><em>不要随意使用Id</em><br>id在JS是唯一的，不能多次使用，<br>而使用class类选择器却可以重复使用，<br>另外id的优先级优先与class，所以id应该按需使用，而不能滥用。</p><h3 id="CSS命名的一些规范"><a href="#CSS命名的一些规范" class="headerlink" title="CSS命名的一些规范"></a>CSS命名的一些规范</h3><h4 id="一-网页内容类"><a href="#一-网页内容类" class="headerlink" title="(一)网页内容类"></a>(一)网页内容类</h4><p>标题: title &lt;—-&gt;摘要: summary<br>箭头： arrow&lt;—-&gt;商标： label<br>网站标志： logo&lt;—-&gt;转角/圆角： corner<br>横幅广告： banner&lt;—-&gt;子菜单： subMenu<br>搜索： search&lt;—-&gt;搜索框： searchBox<br>登录： login&lt;—-&gt;登录条：loginbar<br>工具条： toolbar&lt;—-&gt;下拉： drop<br>标签页： tab&lt;—-&gt;当前的： current<br>列表： list&lt;—-&gt;滚动： scroll<br>服务： service&lt;—-&gt;提示信息： msg<br>热点：hot&lt;—-&gt;新闻： news<br>小技巧： tips&lt;—-&gt;下载： download<br>栏目标题： title&lt;—-&gt;热点： hot<br>加入： joinus&lt;—-&gt;注册： regsiter<br>指南： guide&lt;—-&gt;友情链接： friendlink<br>状态： status&lt;—-&gt;版权： copyright<br>按钮： btn&lt;—-&gt;合作伙伴： partner<br>投票： vote&lt;—-&gt;左右中：left right center</p><h4 id="二-注释的写法"><a href="#二-注释的写法" class="headerlink" title="(二)注释的写法:"></a>(二)注释的写法:</h4><p>/* Footer <em>/<br>内容区<br>/</em> End Footer */</p><h4 id="三-id的命名"><a href="#三-id的命名" class="headerlink" title="(三)id的命名:"></a>(三)id的命名:</h4><p><strong>(1)页面结构</strong><br>容器: container<br>页头：header<br>内容：content/container<br>页面主体：main<br>页尾：footer<br>导航：nav<br>侧栏：sidebar<br>栏目：column<br>页面外围控制整体布局宽度：wrapper<br>左右中：left right center<br>     <strong>(2)导航</strong><br>导航：nav<br>主导航：mainbav<br>子导航：subnav<br>顶导航：topnav<br>边导航：sidebar<br>左导航：leftsidebar<br>右导航：rightsidebar<br>菜单：menu<br>子菜单：submenu<br>标题: title<br>摘要: summary<br>     <strong>(3)功能</strong><br>标志：logo<br>广告：banner<br>登陆：login<br>登录条：loginbar<br>注册：regsiter<br>搜索：search<br>功能区：shop<br>标题：title<br>加入：joinus<br>状态：status<br>按钮：btn<br>滚动：scroll<br>标签页：tab<br>文章列表：list<br>提示信息：msg<br>当前的: current<br>小技巧：tips<br>图标: icon<br>注释：note<br>指南：guild<br>服务：service<br>热点：hot<br>新闻：news<br>下载：download<br>投票：vote<br>合作伙伴：partner<br>友情链接：link<br>版权：copyright</p><h4 id="四-class的命名"><a href="#四-class的命名" class="headerlink" title="(四)class的命名:"></a>(四)class的命名:</h4><p>(1)颜色:使用颜色的名称或者16进制代码,如<br>.red { color: red; }<br>.f60 { color: #f60; }<br>.ff8600 { color: #ff8600; }<br>(2)字体大小,直接使用”font+字体大小”作为名称,如<br>.font12px { font-size: 12px; }<br>.font9pt {font-size: 9pt; }<br>(3)对齐样式,使用对齐目标的英文名称,如<br>.left { float:left; }<br>.bottom { float:bottom; }<br>(4)标题栏样式,使用”类别+功能”的方式命名,如<br>.barnews { }<br>.barproduct { }</p><p><font style="color:orange;">注意事项</font><br>1.一律小写;<br>2.尽量用英文;<br>3.不加中杠和下划线;<br>4.尽量不缩写，除非一看就明白的单词.</p><h3 id="推荐的-CSS-书写顺序"><a href="#推荐的-CSS-书写顺序" class="headerlink" title="推荐的 CSS 书写顺序"></a>推荐的 CSS 书写顺序</h3><p>//显示属性<br>display<br>list-style<br>position<br>float<br>clear<br>    //自身属性<br>width<br>height<br>margin<br>padding<br>border<br>background<br>    //文本属性<br>color<br>font<br>text-decoration<br>text-align<br>vertical-align<br>white-space<br>other text<br>content</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符</title>
      <link href="posts/f29265a7/"/>
      <url>posts/f29265a7/</url>
      
        <content type="html"><![CDATA[<h2 id="一-运算符"><a href="#一-运算符" class="headerlink" title="一.运算符"></a>一.运算符</h2><blockquote><p>​        运算符也叫操作符,操作符是我们如何在变量和值时实施操作的方式,是我们发起运算最简单的方式.</p></blockquote><span id="more"></span><p>JavaScript 拥有如下类型的运算符。</p><blockquote><ul><li>赋值运算符((Arithmetic operators)</li><li>比较运算符((Comparison operators)</li><li>算法运算符((Logical operators))</li><li>位运算符(Bitwise operators)</li><li>逻辑运算符(Logical operators)</li><li>字符串运算符(String operators)</li><li>条件（三元）运算符(Conditional operator)</li><li>逗号运算符(Comma operator)</li><li>一元运算符(Unary operators)</li><li>关系运算符(Relational operator)</li></ul></blockquote><h4 id="1赋值运算符"><a href="#1赋值运算符" class="headerlink" title="1赋值运算符"></a>1<code>赋值运算符</code></h4><p>一个 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment_Operators">赋值运算符(assignment operator)</a> 将它右边操作数的值赋给它左边的操作数。最简单的赋值运算符是等于（<code>=</code>），它将右边的操作数值赋给左边的操作数。那么 <code>x = y</code> 就是将 y 的值赋给 x。</p><blockquote><p>=  赋值</p><p>+= 加法赋值</p><p>-= 减法赋值</p><p>*= 乘法赋值</p><p>/=  除法赋值</p><p>%= 取余赋值</p><p>**= 求幂赋值</p><p>++</p><p>…</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">//将数字2的值赋值给变量a</span>num <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//  等价于 a = a + 3;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 7 </span><span class="token keyword">let</span> num_a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>num_a <span class="token operator">**=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 等价为 num_a = num_a * num_a *  num_a 即 num_a的3次方</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment">// 8</span></code></pre><h5 id="解构"><a href="#解构" class="headerlink" title="解构"></a><code>解构</code></h5><p>对于更复杂的赋值，解构赋值语法是一个能从数组或对象对应的数组结构或对象字面量里提取数据的 <code>Javascript</code> 表达式。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//不使用解构</span><span class="token keyword">let</span> one <span class="token operator">=</span> foo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    tow <span class="token operator">=</span> foo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    three<span class="token operator">=</span>  foo<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用解构赋值</span><span class="token keyword">let</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">]</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span></code></pre><h4 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2.比较运算符"></a>2.<code>比较运算符</code></h4><p>比较运算符]比较它的操作数并返回一个基于表达式是否为真的逻辑值,一般返回true 或false.</p><table><thead><tr><th align="left">等于  ==</th><th>如果两边操作数相等返回true</th></tr></thead><tbody><tr><td align="left">不等于 !=</td><td>如果两边操作数不相等返回true</td></tr><tr><td align="left">全等 ===</td><td>两边操作数相等且类型相同,返回true</td></tr><tr><td align="left">不全等 !==</td><td>两边操作数不相等且类型不相同,返回true</td></tr><tr><td align="left">大于 &gt;</td><td>左边操作数大于右边操作数返回true</td></tr><tr><td align="left">大于等于 &gt;=</td><td>左边的操作数大于或等于右边的操作数返回true</td></tr><tr><td align="left">小于</td><td>左边的操作数小于右边返回true</td></tr><tr><td align="left">小于等于</td><td>左边的操作数小于等于右边的操作数返回true</td></tr></tbody></table><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    b <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token comment">// 返回false  因为全等两边操作数类型不相同;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">//fasle</span></code></pre><h4 id="3-算术运算符"><a href="#3-算术运算符" class="headerlink" title="3.算术运算符"></a>3.<code>算术运算符</code></h4><p>算术运算符使用`作为操作数并返回一个数字,标准的算术运算符就是加减乘除;</p><p>加 <code>+</code> 减 <code>-</code> 乘 <code>*</code> 除 <code>\</code> 取余数 <code>%</code> 括号()</p><p>除了这几种标准运算符 还有 自增 <code>++</code>, 自减 <code>--</code>, 一元负值符,<code>-</code>,一元正值符,<code>+</code>,指数运算符 <code>**</code>;</p><pre class="language-js" data-language="js"><code class="language-js">consoel<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//3 两数之和</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token comment">// - 3 两数之差</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 2 两数之积</span>console<span class="token punctuation">.</span><span class="token function">loh</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token comment">// 2 两数之商</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token comment">//2 两数之余</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//等价为 a += 1;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">// 2 </span><span class="token operator">-</span>a<span class="token punctuation">;</span><span class="token comment">// 等价于 a = -a 返回操作数的负值.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-3</span></code></pre><h4 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.<code>逻辑运算符</code></h4><p>逻辑运算符常用于布尔（逻辑）值之间; 当操作数都是布尔值时，返回值也是布尔值。</p><blockquote><p>且 或非</p><p>&amp;&amp; 逻辑与预算(且);   <code>&amp;&amp;</code>用于布尔值时，当操作数都为true时返回true；否则返回false.</p><p>|| 逻辑或运算(或);     <code>||</code>用于布尔值时，当操作数有一个为true时返回true；如果两个操作数都是false返回false;</p><p>! 逻辑非元素 (非);       如果操作数能够转为true则返回false, 否则返回true;</p></blockquote><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">// false;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>短路求值</code></pre><p>作为逻辑表达式进行求值是从左到右，它们是为可能的“短路”的出现而使用以下规则进行测试：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> angthing <span class="token comment">// 被短路求值为fasle;</span><span class="token boolean">true</span> <span class="token operator">||</span> anything <span class="token comment">// 被短路求值为 true</span><span class="token comment">//anythin表示任意变量, anything部分不会被求值，所以这样做不会产生任何副作用。</span></code></pre><h4 id="5-字符串运算符"><a href="#5-字符串运算符" class="headerlink" title="5 .字符串运算符"></a>5 .<code>字符串运算符</code></h4><p>除了比较操作符，它可以在字符串值中使用，连接操作符（+）连接两个字符串值相连接，返回另一个字符串，它是两个操作数串的结合。</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"my "</span> <span class="token operator">+</span> <span class="token string">' name '</span> <span class="token operator">+</span> <span class="token string">' is ayu'</span><span class="token punctuation">)</span><span class="token comment">//my  name  is ayu</span></code></pre><p>简写操作符+= 也可以用来拼接字符串,例如:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'string'</span><span class="token punctuation">;</span>str<span class="token operator">+=</span><span class="token string">'data'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment">// stringdata</span></code></pre><h4 id="6-条件-三元运算符"><a href="#6-条件-三元运算符" class="headerlink" title="6.条件(三元运算符)"></a>6.<code>条件(三元运算符)</code></h4><p><code>条件操作符</code>是JavaScript中唯一需要三个操作数的运算符.运算的结果根据给定条件在两个值中取一.语法为:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//条件 ?  值一 : 值二</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">let</span> yesOrNo <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">?</span>  <span class="token string">'yes'</span> <span class="token operator">:</span> <span class="token string">'no'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>yesOrNo<span class="token punctuation">)</span><span class="token comment">// no</span><span class="token comment">//当num大于等于 10 条件成立返回true时, 将'yes'赋值给yesOrNo, 否则赋值'no'</span></code></pre><h4 id="7-逗号操作符"><a href="#7-逗号操作符" class="headerlink" title="7.逗号操作符"></a>7.<code>逗号操作符</code></h4><p><strong>逗号操作符</strong> 对它的每个操作数求值（从左到右），并返回最后一个操作数的值。</p><p>语法 expr1, expr2,expr3…. 参数任意表达式</p><p>描述:</p><p>当你想要在期望一个表达式的位置包含多个表达式时，可以使用逗号操作符。这个操作符最常用的一种情况是：<code>for</code> 循环中提供多个参数。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">// 5</span><span class="token keyword">let</span> a<span class="token punctuation">,</span>b <span class="token operator">=</span><span class="token number">43</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//undefined ;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">// 43</span></code></pre><h4 id="8-一元操作符"><a href="#8-一元操作符" class="headerlink" title="8.一元操作符"></a>8.<code>一元操作符</code></h4><p>一元操作符仅仅操作一个操作数.</p><h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a><code>delete</code></h5><p><code>delete</code>操作符, 删除一个对象或一个对象的属性或者一个数组中某一个的键值.语法如下</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">delete</span> objectName<span class="token punctuation">;</span><span class="token keyword">delete</span> objectName<span class="token punctuation">.</span>property<span class="token punctuation">;</span><span class="token keyword">delete</span> objectName<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> property<span class="token punctuation">;</span> <span class="token comment">// legal only within a with statement</span></code></pre><p><code>objectName</code>是一个对象名，<code>property</code> 是一个已经存在的属性，<code>index</code>是数组中的一个已经存在的键值的索引值。</p><p>你能使用 <code>delete</code> 删除各种各样的隐式声明， 但是被<code>var</code>声明的除外。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 如果删除成功返回 true  属性或元素会变成undefined   删除失败 返回false</span>x <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">;</span>myobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myobj<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">// 创建一个属性 h</span><span class="token keyword">delete</span> x<span class="token punctuation">;</span>       <span class="token comment">//返回true</span><span class="token keyword">delete</span> y<span class="token punctuation">;</span>       <span class="token comment">// 返回false  如果用var 声明则不能删除</span><span class="token keyword">delete</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span> <span class="token comment">// 返回false  不能删除预定义的方法</span><span class="token keyword">delete</span> myobj<span class="token punctuation">.</span>h<span class="token punctuation">;</span> <span class="token comment">//返回 true   可以删除用户定义的属性吗</span><span class="token keyword">delete</span> myobj<span class="token punctuation">;</span>   <span class="token comment">// 返回 true 可以删除隐式声明的变量</span>删除数组的元素</code></pre><p>删除数组中的元素时,数组的长度是不变的, 值变为undefined;</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">546</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[empty, 5, 4, 546]</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1, 5, 4, 546]</span><span class="token comment">//empty 表示空 数组下标0对应的数字变为空, 但下标依然存在</span></code></pre><h5 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><code>typeof</code></h5><p><code>typeof</code>操作符 可以通过下面两种方式使用.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">typeof</span> operand<span class="token keyword">typeof</span> <span class="token punctuation">(</span>operand<span class="token punctuation">)</span></code></pre><p>typeof 操作符返回一个表示 operand 类型的字符串值。operand 可为字符串、变量、关键词或对象，其类型将被返回。operand 两侧的括号为可选。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'data'</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">;</span><span class="token keyword">let</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">// boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// object; null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token comment">//undefined</span></code></pre><h5 id="void"><a href="#void" class="headerlink" title="void"></a><code>void</code></h5><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">void</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token keyword">void</span> expression</code></pre><p>void运算符表示一个运算没有返回值.</p><p>例如如下创建了一个超链接的文本, 当用户点击文本时, 不会任何效果.</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click here to do nothing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h4 id="9关系运算符"><a href="#9关系运算符" class="headerlink" title="9关系运算符"></a>9<code>关系运算符</code></h4><p>关系运算符对操作数进行比较, 根据比较结果真或假, 返回相应的布尔值.</p><h5 id="in"><a href="#in" class="headerlink" title="in"></a><code>in</code></h5><p><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in"><code>in</code>操作符</a>，如果所指定的<strong>属性</strong>确实存在于所指定的对象中，则会返回<code>true</code>，语法如下：</p><pre class="language-js" data-language="js"><code class="language-js">propNameOrNumber <span class="token keyword">in</span> objectName</code></pre><p>在这里 <code>propNameOrNumber</code>可以是一个代表着属性名的字符串或者是一个代表着数组索引的数值表达式，而<code>objectName</code>则是一个对象名。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"data1"</span><span class="token punctuation">,</span><span class="token string">"data2"</span><span class="token punctuation">,</span><span class="token string">"data3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"ayu"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">78</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token comment">// return true;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data1'</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token comment">// return true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token comment">// false</span></code></pre><h5 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><code>instanceof</code></h5><p>如果所判断的对象确实是所指定的类型, 则返回true , 语法如下:</p><pre class="language-js" data-language="js"><code class="language-js">objectName <span class="token keyword">instanceof</span> <span class="token class-name">objectType</span></code></pre><p><code>objectName</code> 是需要做判别的对象的名称,而<code>objectType</code>是假定的对象的类型, 例如<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Date"><code>Date</code></a>或 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array"><code>Array</code></a>.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token comment">//true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js变量和数据类型</title>
      <link href="posts/3a595082/"/>
      <url>posts/3a595082/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h3><p>最新的 ECMAScript 标准定义了8种数据类型：</p><ul><li>七种基本数据类型<ul><li>布尔值(Boolean),有两个值分别是true和false;</li><li>null ， 一个表明 null 值的特殊关键字。 JavaScript 是大小写敏感的，因此 null 与 Null、    NULL或变体完全不同。</li><li>undefined, 和null用于是一个特殊的关键字,undefined表示变量为定义时的属性</li><li>数字(Number. 整数和浮点数), 例如： 32 或者 3.14159。</li><li>任意精度的整数 (BigInt) ，可以安全地存储和操作大整数，甚至可以超过数字的安全整数限      制。</li><li>字符串(String), 字符串是一串表示文本值的字符序列, 例如：”hello world” 。</li><li>代表(Symbol) (在ECMAScript6中新添加的类型), 一种实例是唯一且不可改变的数据类型。</li></ul></li><li>以及对象(Object).<br> 虽然这些数据类型相对来说比较少，但是通过他们你可以在程序中开发有用的功能。对象（Objects）和函数（functions）是这门语言的另外两个基本元素。你可以把对象当作存放值的一个命名容器，然后将函数当作你的程序能够执行的步骤。 <span id="more"></span> 快速口诀:<code>USONB</code> <pre class="language-javascript" data-language="javascript"><code class="language-javascript">you are so niubility  <span class="token comment">//你如此nb</span>u<span class="token operator">:</span> <span class="token keyword">undefined</span>s<span class="token operator">:</span> symbol stringo<span class="token operator">:</span> objectn<span class="token operator">:</span> <span class="token keyword">null</span> numberb<span class="token operator">:</span> boolean</code></pre></li></ul><h4 id="1-1-JavaScript-拥有动态类型"><a href="#1-1-JavaScript-拥有动态类型" class="headerlink" title="1.1:JavaScript 拥有动态类型"></a>1.1:JavaScript 拥有动态类型</h4><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：<br> <em>实例</em></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x<span class="token punctuation">;</span>   <span class="token comment">// x为undefined</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">//现在为数字</span><span class="token keyword">var</span>   x <span class="token operator">=</span>   <span class="token string">"John"</span> <span class="token punctuation">;</span> <span class="token comment">//x为字符串</span></code></pre><h4 id="1-2-JavaScript-字符串"><a href="#1-2-JavaScript-字符串" class="headerlink" title="1.2:JavaScript 字符串"></a>1.2:JavaScript 字符串</h4><p>字符串是存储字符（比如 “Bill Gates”）的变量。</p><p>字符串可以是引号中的任意文本。您可以使用单引号或双引号：推荐使用单引号.</p><p><strong>实例</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span>   carname<span class="token operator">=</span>  <span class="token string">"Volvo XC60"</span><span class="token punctuation">;</span><span class="token keyword">var</span>   carname<span class="token operator">=</span>  <span class="token string">'Volvo XC60'</span> <span class="token punctuation">;</span></code></pre><p>您可以在字符串中使用引号，只要不匹配包围字符串的引号即可.</p><p><strong>实例</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> answer<span class="token operator">=</span><span class="token string">"It's alright"</span><span class="token punctuation">;</span><span class="token keyword">var</span> answer<span class="token operator">=</span><span class="token string">"He is called 'Johnny'"</span><span class="token punctuation">;</span><span class="token keyword">var</span> answer<span class="token operator">=</span><span class="token string">'He is called "Johnny"'</span><span class="token punctuation">;</span></code></pre><h4 id="1-3-JavaScript-数字"><a href="#1-3-JavaScript-数字" class="headerlink" title="1.3:JavaScript 数字"></a>1.3:JavaScript 数字</h4><p>JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：</p><p><strong>实例</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x1<span class="token operator">=</span><span class="token number">34.00</span><span class="token punctuation">;</span>      <span class="token comment">//使用小数点来写</span><span class="token keyword">var</span> x2<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">;</span>         <span class="token comment">//不使用小数点来写</span></code></pre><p>极大或极小的数字可以通过科学（指数）计数法来书写：</p><p><strong>实例</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> y<span class="token operator">=</span><span class="token number">123e5</span><span class="token punctuation">;</span>      <span class="token comment">// 12300000</span><span class="token keyword">var</span> z<span class="token operator">=</span><span class="token number">123e-5</span><span class="token punctuation">;</span>     <span class="token comment">// 0.00123</span></code></pre><h4 id="1-4-JavaScriptBigInt类型"><a href="#1-4-JavaScriptBigInt类型" class="headerlink" title="1.4:JavaScriptBigInt类型;"></a>1.4:JavaScriptBigInt类型;</h4><p>创建BigInt, 只需要将n附加到整数的末尾, 或者使用构造函数BigInt(数字);</p><p><code>BigInt</code> 字面量也可以写成二进制、八进制或十六进制形式：</p><p><code>BigInt</code>数据类型是为了让JavaScript程序能表示超出<code>Number</code> 类型支持的数值范围。</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">546575675756756742343n</span><span class="token punctuation">)</span><span class="token comment">// 546575675756756742343n</span><span class="token keyword">var</span> big <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">43545</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>big<span class="token punctuation">)</span><span class="token comment">//43545n</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> big<span class="token punctuation">)</span><span class="token comment">// BigInt</span></code></pre><h4 id="1-5-JavaScript-布尔"><a href="#1-5-JavaScript-布尔" class="headerlink" title="1.5:JavaScript 布尔"></a>1.5:JavaScript 布尔</h4><p>布尔（逻辑）只能有两个值：true 或 false。</p><p>布尔值true转为数字为1, false转为数字为0;</p><p>布尔类型仅仅包含真假;</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">===</span> y<span class="token punctuation">)</span> <span class="token comment">// fasle;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token comment">//true</span></code></pre><p>布尔常用在条件测试中。</p><h4 id="1-6-JavaScript-数组"><a href="#1-6-JavaScript-数组" class="headerlink" title="1.6:JavaScript 数组"></a>1.6:JavaScript 数组</h4><p>下面的代码创建名为 arr的数组：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"43"</span><span class="token punctuation">,</span><span class="token string">"434"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr_a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// "43" 打印数组arr下标的第0项的值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment">//3 数组的长度默认指定为元素的个数</span></code></pre><p>当你使用数组字面量创建一个数组时,改数组将会以指定的值作为元素进行初始化.其长度被指定为元素达到个数</p><p>数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。</p><h4 id="1-7-JavaScript-对象"><a href="#1-7-JavaScript-对象" class="headerlink" title="1.7:JavaScript 对象"></a>1.7:JavaScript 对象</h4><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p><p>上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。</p><p>空格和折行无关紧要。声明可横跨多行：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>firstname<span class="token operator">:</span><span class="token string">"first"</span><span class="token punctuation">,</span> lastname<span class="token operator">:</span><span class="token string">"last"</span><span class="token punctuation">,</span>id<span class="token operator">:</span><span class="token string">"10001"</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>firstname<span class="token punctuation">)</span><span class="token comment">//first</span></code></pre><p>对象的属性名可以使用数字或者字符串作为属性的名字, 或者在另一个字面值内嵌套上字面值.</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span>myarr<span class="token operator">:</span><span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token operator">:</span><span class="token string">"小明"</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">666</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//小明</span></code></pre><p>对象的属性名可以是任意字符串,包括空字符串,如果对象的属性名名字是不合法的JavaScript标识符,</p><p>它必须使用””包裹,属性的名字不合法, 那么就不能使用.访问属性值, 而是通过类数组标记(“[]”)访问和赋值</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> personName <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">""</span><span class="token operator">:</span><span class="token string">"An empty string"</span><span class="token punctuation">,</span>    <span class="token string">"!"</span><span class="token operator">:</span><span class="token string">"bang"</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>personName<span class="token punctuation">.</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Uncaught SyntaxError: Unexpected string 语法错误</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>personName<span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//An empty string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>personName<span class="token punctuation">.</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Uncaught SyntaxError: Unexpected token '!' 语法错误</span></code></pre><p>对象属性有两种寻址方式：</p><p>通过对象名.属性名获取属性值, 也可以通过对象名”[属性名”]获取;</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"wu"</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">45</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">// wu;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//45</span></code></pre><h3 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h3><p>undefined这个值表示变量不含有值。undefined是一个表示”无”的原始值, 转为数字时为NaN;</p><p>undefined翻译过来就是未定义的意思,就是此处一个有一个值,但是还没有定义;</p><p>null是一个表示”无”的对象，转为数值时为0；null表示 没有对象, 即此处不应该有值</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> unde<span class="token punctuation">;</span><span class="token comment">//声明一个变量如果没有赋值, 那么打印变量的值就是undefined;</span><span class="token keyword">var</span> nl <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>unde<span class="token punctuation">)</span><span class="token comment">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nl<span class="token punctuation">)</span><span class="token comment">// null</span></code></pre><h3 id="声明变量类型"><a href="#声明变量类型" class="headerlink" title="声明变量类型"></a>声明变量类型</h3><p>当您声明新变量时，可以使用关键词 “new” 来声明其类型：一般使用字面量的方式声明变量</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> carname <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">534</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">)</span><span class="token keyword">var</span> bollean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">"wu"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><em>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</em></p><hr><p><font style="color:skyblue;">作者：小宇cool </font><br>       🌏链接：<a href="https://www.jianshu.com/p/02d419590ad3">https://www.jianshu.com/p/02d419590ad3</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git/hub指南</title>
      <link href="posts/1e14c664/"/>
      <url>posts/1e14c664/</url>
      
        <content type="html"><![CDATA[<p>🌐github<a href="https://docs.github.com/cn/github/getting-started-with-github/git-cheatsheet">指南中文网</a></p><table><thead><tr><th align="center">功能名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">Pull Reques</td><td align="left">指开发者在本地对源代码进行更改后，向 GitHub中 托管的Git仓库请求合并的功能。也可以向别人的仓库提出申请，请求对方合并。</td></tr><tr><td align="center">Wiki</td><td align="left">任何人都能随时对一篇文章进行更改并保存，因此可以多人共同完成一篇文章。该功能常用在开发文档或手册的编写中,改版的历史记录也会被切实保存下来。</td></tr><tr><td align="center">Issue</td><td align="left">追踪和管理一个任务或问题的功能，类似于留言板。可以像 BUG 管理系统或 TiDD（Ticket-driven Development）的 Ticket一样使用。在 GitHub上，每当进行Pull Request， 都会同时创建一个 Issue。BUG报告、功能添加、方向性讨论等，这些将以issue的形式进行管理。Pull Request时也会创建Issue。旁边显示的数字是当前处于open状态的issue数目。</td></tr><tr><td align="center">Watch</td><td align="left">指关注这个项目的人数。对于你已经Watch过的项目，如果该仓库有改动，就会在News Feed上优先显示。相当于“订阅”。</td></tr><tr><td align="center">Fork</td><td align="left">将 GitHub的某个特定仓库（所有文件）原封不动地复制到自己的账户下（但不会与原仓库相同）。以此实现分散式版本管理</td></tr><tr><td align="center">Branch</td><td align="left">分支</td></tr><tr><td align="center">README.md</td><td align="left">每当创建项目、初始化时，都会帮你自动生成README.md文件并显示在仓库首页。一般都是使用Markdown语法（准确来说应该是GitHub Flavored Markdown(GFM）语法)来描述项目的概要、使用流程、许可协议等。</td></tr><tr><td align="center">code</td><td align="left">显示该仓库中的文件列表。</td></tr><tr><td align="center">releases</td><td align="left">显示仓库的标签（Tag）列表。同时可以将标签加入时的文件以归档形式（ZIP、tar.gz）下载到本地。软件在升级时一般都会打标签，如果需要特定版本的文件，可以从这里寻找。</td></tr><tr><td align="center">Repositories</td><td align="left">显示该用户公开的仓库。Fork来的仓库也显示在这里。仓库名称、简要说明、使用的语言、最终更新日期都会出现在列表中。星星图案旁边的数字表示给这个仓库添加Star的人数，再旁边是Fork数。</td></tr><tr><td align="center">Your repositories</td><td align="left">按更新时间顺序显示用户的仓库。标有钥匙图案的是非公开仓库，标有类似字母Y图案的是用户Fork过的仓库。</td></tr><tr><td align="center">Popular repositories</td><td align="left">显示公开仓库中最受欢迎的、拥有大量star的部分热门仓库</td></tr><tr><td align="center">Contribution Activity</td><td align="left">按时间顺序显示具体贡献活动的链接。</td></tr><tr><td align="center">Insights</td><td align="left">洞察：<strong>1.Pulse</strong>：显示该仓库最近的活动信息。该仓库中的软件是 无人问津，还是在火热的开发之中，从这里可以一目了然。<strong>2.Graphs</strong>：以图表形式显示该仓库的各项指标。让用户轻松了解该仓库的活动倾向。<strong>3.Network</strong>：以图表形式直观地显示出当前从宽的状态及Fork出的仓库的状态，同时会显示成员列表</td></tr><tr><td align="center">Packages</td><td align="left">Github Packages是一个包承载服务，它完全跟Github集成。Github Packages使你的源码和包在同一个地方进行统一的管理，使你可以集中的在Github上开发跟发布。你可以发布公共包（public packages）跟所有人分享，也可以发布私有包（private packages）提供给个人或者组织使用。<strong>简单点就是以前你代码是在Github，但是包可能是在npm，maven或者nuget上，现在你在Github上传代码后还可以直接把包也上传到Github，方便统一管理，发布。</strong></td></tr><tr><td align="center">Your gists</td><td align="left">代码片段，代码记事本，代码剪贴板，代码备忘录，代码灵感，代码主意<br/>意思差不多，用来存一些不成大项目的小片段，不是git的概念，是github的在git上的定制服务</td></tr><tr><td align="center">projects</td><td align="left">projects可以翻译为项目板，是project-boards的简写。简单可以理解为工作计划表之类的书签，制定一下工作计划，Bug，流程什么的。<br />GitHub 上的项目板帮助您组织工作和排列工作的优先级。 您可以为特定功能工作、全面的路线图甚至发布检查列表创建项目板。 通过项目板可以灵活地创建适合需求的自定义工作流程。项目板包括议题、拉取请求和注释，在选择的列中分类为卡片。 您可以拖放或使用键盘快捷键对列中的卡片重新排序，在不同列之间移动卡片，以及更改列的顺序。</td></tr></tbody></table><p>​    个人信息页面：<br>profile：用户个人信息，包括姓名、公司、邮箱地址、已加入的Organization等。<br>Popular repositories：显示用户的公开仓库中受欢迎的仓库。<br>Contributions：记录每日用户对仓库的贡献程度。<br>Contribution activity：按时间顺序显示具体贡献活动的链接。</p><h2 id="git备忘清单"><a href="#git备忘清单" class="headerlink" title="git备忘清单"></a>git备忘清单</h2><hr><h4 id="Git-全平台版"><a href="#Git-全平台版" class="headerlink" title="Git 全平台版"></a>Git 全平台版</h4><p><a href="https://git-scm.com/">git-scm.com</a></p><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>当着手于一个新的仓库时，你只需创建一次。要么在本地创建，然后推送到 GitHub；要么通过 clone 一个现有仓库。</p><pre class="language-none"><code class="language-none">$ git init</code></pre><p>在使用过 <code>git init</code> 命令后，使用以下命令将本地仓库与一个 GitHub 上的空仓库连接起来：</p><pre class="language-none"><code class="language-none">$ git remote add origin [url]</code></pre><p>将现有目录转换为一个 Git 仓库</p><pre class="language-none"><code class="language-none">$ git clone [url]</code></pre><p>Clone（下载）一个已存在于 GitHub 上的仓库，包括所有的文件、分支和提交(commits)</p><h4 id="配置工具"><a href="#配置工具" class="headerlink" title="配置工具"></a>配置工具</h4><p>对所有本地仓库的用户信息进行配置</p><pre class="language-none"><code class="language-none">$ git config --global user.name &quot;[name]&quot;</code></pre><p>对你的commit操作设置关联的用户名</p><pre class="language-none"><code class="language-none">$ git config --global user.email &quot;[email address]&quot;</code></pre><p>对你的commit操作设置关联的邮箱地址</p><pre class="language-none"><code class="language-none">$ git config --global color.ui auto</code></pre><p>启用有帮助的彩色命令行输出</p><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>分支是使用 Git 工作的一个重要部分。你做的任何提交都会发生在当前“checked out”到的分支上。使用 <code>git status</code> 查看那是哪个分支。</p><pre class="language-none"><code class="language-none">$ git branch [branch-name]</code></pre><p>创建一个新分支</p><pre class="language-none"><code class="language-none">$ git checkout [branch-name]</code></pre><p>切换到指定分支并更新工作目录(working directory)</p><pre class="language-none"><code class="language-none">$ git merge [branch]</code></pre><p>将指定分支的历史合并到当前分支。这通常在拉取请求(PR)中完成，但也是一个重要的 Git 操作。</p><pre class="language-none"><code class="language-none">$ git branch -d [branch-name]</code></pre><p>删除指定分支</p><h4 id="进行更改"><a href="#进行更改" class="headerlink" title="进行更改"></a>进行更改</h4><p>浏览并检查项目文件的发展</p><pre class="language-none"><code class="language-none">$ git log</code></pre><p>列出当前分支的版本历史</p><pre class="language-none"><code class="language-none">$ git log --follow [file]</code></pre><p>列出文件的版本历史，包括重命名</p><pre class="language-none"><code class="language-none">$ git diff [first-branch]...[second-branch]</code></pre><p>展示两个分支之间的内容差异</p><pre class="language-none"><code class="language-none">$ git show [commit]</code></pre><p>输出指定commit的元数据和内容变化</p><pre class="language-none"><code class="language-none">$ git add [file]</code></pre><p>将文件进行快照处理用于版本控制</p><pre class="language-none"><code class="language-none">$ git commit -m &quot;[descriptive message]&quot;</code></pre><p>将文件快照永久地记录在版本历史中</p><h4 id="重做提交"><a href="#重做提交" class="headerlink" title="重做提交"></a>重做提交</h4><p>清除错误和构建用于替换的历史</p><pre class="language-none"><code class="language-none">$ git reset [commit]</code></pre><p>撤销所有 <code>[commit]</code> 后的的提交，在本地保存更改</p><pre class="language-none"><code class="language-none">$ git reset --hard [commit]</code></pre><p>放弃所有历史，改回指定提交。</p><blockquote><p>小心！更改历史可能带来不良后果。如果你需要更改 GitHub（远端）已有的提交，请谨慎操作。如果你需要帮助，可访问 github.community 或联系支持(support)。</p></blockquote><h4 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title=".gitignore 文件"></a>.gitignore 文件</h4><p>有时一些文件最好不要用 Git 跟踪。这通常在名为 <code>.gitignore</code> 的特殊文件中完成。你可以在 <a href="https://github.com/github/gitignore">github.com/github/gitignore</a> 找到有用的 <code>.gitignore</code> 文件模板。</p><h4 id="同步更改"><a href="#同步更改" class="headerlink" title="同步更改"></a>同步更改</h4><p>将你本地仓库与 GitHub.com 上的远端仓库同步</p><pre class="language-none"><code class="language-none">$ git fetch</code></pre><p>下载远端跟踪分支的所有历史</p><pre class="language-none"><code class="language-none">$ git merge</code></pre><p>将远端跟踪分支合并到当前本地分支</p><pre class="language-none"><code class="language-none">$ git push</code></pre><p>将所有本地分支提交上传到 GitHub</p><pre class="language-none"><code class="language-none">$ git pull</code></pre><p>使用来自 GitHub 的对应远端分支的所有新提交更新你当前的本地工作分支。<code>git pull</code> 是 <code>git fetch</code> 和 <code>git merge</code> 的结合</p><h4 id="进行更改-1"><a href="#进行更改-1" class="headerlink" title="进行更改"></a>进行更改</h4><p>浏览并检查项目文件的发展</p><pre class="language-none"><code class="language-none">$ git log</code></pre><p>列出当前分支的版本历史</p><pre class="language-none"><code class="language-none">$ git log --follow [file]</code></pre><p>列出文件的版本历史，包括重命名</p><pre class="language-none"><code class="language-none">$ git diff [first-branch]...[second-branch]</code></pre><p>展示两个分支之间的内容差异</p><pre class="language-none"><code class="language-none">$ git show [commit]</code></pre><p>输出指定commit的元数据和内容变化</p><pre class="language-none"><code class="language-none">$ git add [file]</code></pre><p>将文件进行快照处理用于版本控制</p><pre class="language-none"><code class="language-none">$ git commit -m &quot;[descriptive message]&quot;</code></pre><p>将文件快照永久地记录在版本历史中</p><h4 id="术语表"><a href="#术语表" class="headerlink" title="术语表"></a>术语表</h4><ul><li><strong>git</strong>: 一个开源的分布式版本控制系统</li><li><strong>GitHub</strong>: 一个托管和协作管理 Git 仓库的平台</li><li><strong>commit 提交</strong>: 一个 Git 对象，是你整个仓库的快照的哈希值</li><li><strong>branch 分支</strong>: 一个轻型可移动的 commit 指针</li><li><strong>clone</strong>: 一个仓库的本地版本，包含所有提交和分支</li><li><strong>remote 远端</strong>: 一个 GitHub 上的公共仓库，所有小组成员通过它来交换修改</li><li><strong>fork</strong>: 一个属于另一用户的 GitHub 上的仓库的副本</li><li><strong>pull request 拉取请求</strong>: 一处用于比较和讨论分支上引入的差异，且具有评审、评论、集成测试等功能的地方</li><li><strong>HEAD</strong>: 代表你当前的工作目录。使用<code>git checkout</code> 可移动 HEAD 指针到不同的分支、标记(tags)或提交</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>默认显示类型与显示类型转换</title>
      <link href="posts/8b258e43/"/>
      <url>posts/8b258e43/</url>
      
        <content type="html"><![CDATA[<h3 id="三种显示类型特征"><a href="#三种显示类型特征" class="headerlink" title="三种显示类型特征"></a><em><font style="color:orange; " >三种显示类型特征</font></em></h3><h4 id="1-块级元素特性"><a href="#1-块级元素特性" class="headerlink" title="1.块级元素特性:"></a>1.块级元素特性:</h4><p>block: (div/p/dl/form/h1-h6/ol/ul)</p><p> \1. 独占一行</p><p> \2. 高度由里面的元素撑开</p><p> \3. 宽度默认100%(继承父元素宽度)</p><p> \4. 可以设置外边距/内边距</p><p> \5. 可以包裹其他任意元素</p><p> \6. p标签不可包裹块级元素(只存放文本)</p><h4 id="😋2-行内元素特性"><a href="#😋2-行内元素特性" class="headerlink" title="😋2.行内元素特性:"></a>😋2.行内元素特性:</h4><p>inline: (a/b/em/i/img/span)</p><p> \1. 和其他行内元素处于同一行</p><p> \2. 不支持宽高</p><p> \3. 上下外边距无效,auto无效(不支持auto居中)</p><p> \4. 内边距只对内联元素产生影响.无视块元素</p><p> \5. 标签之间的空格解析</p><p> \6. a标签能包裹块级元素(特殊,区域链接)</p><h4 id="🌷3-行内块元素特性-集合两种盒模型的特征"><a href="#🌷3-行内块元素特性-集合两种盒模型的特征" class="headerlink" title="🌷3.行内块元素特性: (集合两种盒模型的特征)"></a>🌷3.行内块元素特性: (集合两种盒模型的特征)</h4><p>inline-block: (input)</p><p> \1. 本质上是行内元素,具有行内元素的性质</p><p> \2. 支持宽高</p><p> \3. 上下外边距有效,auto无效(不支持auto居中)</p><p> \4. 内边距只对内联元素产生影响.无视块元素</p><p> \5. 标签之间的空格解析</p><p> \6. img标签不是行内块元素(是行内元素,但是可以设置宽高，这源自于历史…)    </p><table><thead><tr><th>元素类别</th><th>width</th><th>height</th><th>padding</th><th>margin</th><th>是否独占一行</th></tr></thead><tbody><tr><td>行内元素</td><td></td><td></td><td>√</td><td>√</td><td></td></tr><tr><td>块级元素</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>行内块元素</td><td>√</td><td>√</td><td>√</td><td>√</td><td></td></tr></tbody></table><p>✎tip: </p><p><font style="color:pink" > a标签(可以嵌套任何元素)</font></p><p><code>在HTML的角度来讲，标签分为</code>：</p><p>　　　　文本级标签：p , span , a , b , i , u , em</p><p>　　　　容器级标签：div , h系列 , li , dt ,dd</p><p>　　　　p：里面只能放文字和图片和表单元素，p里面不能放h和ul，也不能放p。</p><p>　　<code>从CSS的角度讲，CSS的分类和上面的很像，就p不一样</code>：</p><p>　　　　行内元素：除了p之外，所有的文本级标签，都是行内元素。p是个文本级标签，但是是个块级元素。</p><p>　　　　块级元素：所有的容器级标签，都是块级元素，以及p标签。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My first blog</title>
      <link href="posts/654572fa/"/>
      <url>posts/654572fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言</p></blockquote><p>​        正如外界看到的那般，程序员是个终日<del>写bug</del>敲代码的那类特殊群体。</p><p>​        “人生没有一帆风顺，代码没有一写即成”。在生产开发的过程里，我们总归会经历发现并解决问题的过程。有的人选择记录下来，作为个人经验积累，同</p><p>时也愿意分享出来给后来人作为前车之鉴,可能这就是博客的前身。</p><hr><h3 id="我本人为什么要写博客？"><a href="#我本人为什么要写博客？" class="headerlink" title="我本人为什么要写博客？"></a><font style="color:skyblue;">我本人为什么要写博客？</font></h3><p>​        相信很多IT开发者迄今为止已阅览了不可计数的技术博客，其中不乏内容上乘，主题界面令人眼前一亮的博客。作为一名计算机专业的学生，从那一刻起</p><p>我就无时无刻不在想着成为一名站长，拥有自己的博客。可能这也是一种虚荣心吧(逃😂</p><p>​        </p><p>​        我坚信把自己的经验知识通过博客分享出来，也是培养开源精神的一种方式吧；写作的过程中，也在无形中锻炼着自己的写作表达和思维逻辑。</p><p>在多年后看看自己写的一篇篇博客，返回来探寻自己的心路历程，相信一定会感触良多。</p><p>✊最后，附上鲁迅先生的一句名言：</p><blockquote><p>“我想:希望本是无所谓有，无所谓无的。这正如地上的路；其实地上本没有路，走的人多了，也便成了路。”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
